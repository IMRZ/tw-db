'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var fs = require('fs');
var path = require('path');
var xmlParser = require('fast-xml-parser');

class CollectionCache {
    constructor(pathToDb) {
        this.cache = new WeakMap();
        this.pathToDb = pathToDb;
    }
    loadCollection(name, ctor) {
        const filePath = path.resolve(this.pathToDb, `${name}.xml`);
        const file = fs.readFileSync(filePath, "utf8");
        const result = xmlParser.parse(file);
        const collection = result.dataroot[name].map((values) => {
            return new ctor(this, values);
        });
        return collection;
    }
    getCollection(key, ctor) {
        const collection = this.cache.get(key);
        if (collection) {
            return collection;
        }
        else {
            const loaded = this.loadCollection(key.name, ctor);
            this.cache.set(key, loaded);
            return loaded;
        }
    }
}

class CollectionKey {
    constructor(name) {
        this.name = name;
    }
}

var Abilities;
(function (Abilities) {
    Abilities.KEY = new CollectionKey("abilities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.ability = values["ability"];
            this.cannotFail = !!values["cannot_fail"];
        }
    }
    Abilities.Entry = Entry;
})(Abilities || (Abilities = {}));

var Achievements;
(function (Achievements) {
    Achievements.KEY = new CollectionKey("achievements");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.title = values["title"];
            this.description = values["description"];
        }
    }
    Achievements.Entry = Entry;
})(Achievements || (Achievements = {}));

var EffectBundleTargets;
(function (EffectBundleTargets) {
    EffectBundleTargets.KEY = new CollectionKey("effect_bundle_targets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    EffectBundleTargets.Entry = Entry;
})(EffectBundleTargets || (EffectBundleTargets = {}));

var EffectBundles;
(function (EffectBundles) {
    EffectBundles.KEY = new CollectionKey("effect_bundles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.localisedTitle = values["localised_title"];
            this.localisedDescription = values["localised_description"];
            this.uiIcon = values["ui_icon"];
            this._bundleTarget = values["bundle_target"];
        }
        get bundleTarget() {
            const collection = this.collectionCache.getCollection(EffectBundleTargets.KEY, EffectBundleTargets.Entry);
            return collection.find(entry => entry.key === this._bundleTarget);
        }
    }
    EffectBundles.Entry = Entry;
})(EffectBundles || (EffectBundles = {}));

var ActionResults;
(function (ActionResults) {
    ActionResults.KEY = new CollectionKey("action_results");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._actorEffectBundle = values["actor_effect_bundle"];
            this._targetEffectBundle = values["target_effect_bundle"];
        }
        get actorEffectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles.KEY, EffectBundles.Entry);
            return collection.find(entry => entry.key === this._actorEffectBundle);
        }
        get targetEffectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles.KEY, EffectBundles.Entry);
            return collection.find(entry => entry.key === this._targetEffectBundle);
        }
    }
    ActionResults.Entry = Entry;
})(ActionResults || (ActionResults = {}));

var ActionResultsAdditionalOutcomesEnums;
(function (ActionResultsAdditionalOutcomesEnums) {
    ActionResultsAdditionalOutcomesEnums.KEY = new CollectionKey("action_results_additional_outcomes_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    ActionResultsAdditionalOutcomesEnums.Entry = Entry;
})(ActionResultsAdditionalOutcomesEnums || (ActionResultsAdditionalOutcomesEnums = {}));

var Effects;
(function (Effects) {
    Effects.KEY = new CollectionKey("effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.effect = values["effect"];
            this.icon = values["icon"];
            this.description = values["description"];
            this.priority = values["priority"];
            this.iconNegative = values["icon_negative"];
        }
    }
    Effects.Entry = Entry;
})(Effects || (Effects = {}));

var CampaignEffectScopeObjects;
(function (CampaignEffectScopeObjects) {
    CampaignEffectScopeObjects.KEY = new CollectionKey("campaign_effect_scope_objects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignEffectScopeObjects.Entry = Entry;
})(CampaignEffectScopeObjects || (CampaignEffectScopeObjects = {}));

var CampaignEffectScopeOwnerships;
(function (CampaignEffectScopeOwnerships) {
    CampaignEffectScopeOwnerships.KEY = new CollectionKey("campaign_effect_scope_ownerships");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignEffectScopeOwnerships.Entry = Entry;
})(CampaignEffectScopeOwnerships || (CampaignEffectScopeOwnerships = {}));

var CampaignEffectScopeLocations;
(function (CampaignEffectScopeLocations) {
    CampaignEffectScopeLocations.KEY = new CollectionKey("campaign_effect_scope_locations");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignEffectScopeLocations.Entry = Entry;
})(CampaignEffectScopeLocations || (CampaignEffectScopeLocations = {}));

var CampaignEffectScopes;
(function (CampaignEffectScopes) {
    CampaignEffectScopes.KEY = new CollectionKey("campaign_effect_scopes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.localisedText = values["localised_text"];
            this.order = values["order"];
            this._source = values["source"];
            this._target = values["target"];
            this._ownership = values["ownership"];
            this._location = values["location"];
        }
        get source() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopeObjects.KEY, CampaignEffectScopeObjects.Entry);
            return collection.find(entry => entry.key === this._source);
        }
        get target() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopeObjects.KEY, CampaignEffectScopeObjects.Entry);
            return collection.find(entry => entry.key === this._target);
        }
        get ownership() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopeOwnerships.KEY, CampaignEffectScopeOwnerships.Entry);
            return collection.find(entry => entry.key === this._ownership);
        }
        get location() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopeLocations.KEY, CampaignEffectScopeLocations.Entry);
            return collection.find(entry => entry.key === this._location);
        }
    }
    CampaignEffectScopes.Entry = Entry;
})(CampaignEffectScopes || (CampaignEffectScopes = {}));

var ActionResultsAdditionalOutcomes;
(function (ActionResultsAdditionalOutcomes) {
    ActionResultsAdditionalOutcomes.KEY = new CollectionKey("action_results_additional_outcomes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._actionResultKey = values["action_result_key"];
            this._outcome = values["outcome"];
            this.value = values["value"];
            this._effectRecord = values["effect_record"];
            this._effectScopeRecord = values["effect_scope_record"];
            this.key = values["key"];
            this.opportuneFailureWeighting = values["opportune_failure_weighting"];
            this.authorityValueCoefficient = values["authority_value_coefficient"];
            this.subterfugeValueCoefficient = values["subterfuge_value_coefficient"];
            this.zealValueCoefficient = values["zeal_value_coefficient"];
        }
        get actionResultKey() {
            const collection = this.collectionCache.getCollection(ActionResults.KEY, ActionResults.Entry);
            return collection.find(entry => entry.key === this._actionResultKey);
        }
        get outcome() {
            const collection = this.collectionCache.getCollection(ActionResultsAdditionalOutcomesEnums.KEY, ActionResultsAdditionalOutcomesEnums.Entry);
            return collection.find(entry => entry.key === this._outcome);
        }
        get effectRecord() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effectRecord);
        }
        get effectScopeRecord() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes.KEY, CampaignEffectScopes.Entry);
            return collection.find(entry => entry.key === this._effectScopeRecord);
        }
    }
    ActionResultsAdditionalOutcomes.Entry = Entry;
})(ActionResultsAdditionalOutcomes || (ActionResultsAdditionalOutcomes = {}));

var AdviceThreads;
(function (AdviceThreads) {
    AdviceThreads.KEY = new CollectionKey("advice_threads");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.thread = values["thread"];
        }
    }
    AdviceThreads.Entry = Entry;
})(AdviceThreads || (AdviceThreads = {}));

var Advisors;
(function (Advisors) {
    Advisors.KEY = new CollectionKey("advisors");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.advisorName = values["advisor_name"];
            this.advisorIconPath = values["advisor_icon_path"];
        }
    }
    Advisors.Entry = Entry;
})(Advisors || (Advisors = {}));

var AdviceLevels;
(function (AdviceLevels) {
    AdviceLevels.KEY = new CollectionKey("advice_levels");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._adviceThread = values["advice_thread"];
            this.adviceThreadLevel = values["advice_thread_level"];
            this.pointsNeeded = values["points_needed"];
            this.gameArea = values["game_area"];
            this.category = values["category"];
            this.subCategory = values["sub_category"];
            this.maxRepeatCount = values["max_repeat_count"];
            this.repeatInterval = values["repeat_interval"];
            this.pauseBattle = !!values["pause_battle"];
            this.adviceItemTitle = values["advice_item_title"];
            this.priorityLevel = values["priority_level"];
            this.highVerbosityOnly = !!values["high_verbosity_only"];
            this.locatable = !!values["locatable"];
            this.parameter = values["parameter"];
            this.onDisplayScript = values["on_display_script"];
            this.onClickScript = values["on_click_script"];
            this.suppressible = !!values["suppressible"];
            this.uninhibitable = !!values["uninhibitable"];
            this.audioClip = values["audio_clip"];
            this.onscreenText = values["onscreen_text"];
            this._advisorName = values["advisor_name"];
            this.forLoadingScreen = !!values["for_loading_screen"];
            this.movieLink = values["movie_link"];
        }
        get adviceThread() {
            const collection = this.collectionCache.getCollection(AdviceThreads.KEY, AdviceThreads.Entry);
            return collection.find(entry => entry.thread === this._adviceThread);
        }
        get advisorName() {
            const collection = this.collectionCache.getCollection(Advisors.KEY, Advisors.Entry);
            return collection.find(entry => entry.advisorName === this._advisorName);
        }
    }
    AdviceLevels.Entry = Entry;
})(AdviceLevels || (AdviceLevels = {}));

var AdviceInfoTexts;
(function (AdviceInfoTexts) {
    AdviceInfoTexts.KEY = new CollectionKey("advice_info_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._adviceLevelLookup = values["advice_level_lookup"];
            this.localisedText = values["localised_text"];
            this.persistant = !!values["persistant"];
            this.showOnNavigate = !!values["show_on_navigate"];
            this.showInstant = !!values["show_instant"];
            this.isHeader = !!values["is_header"];
            this.navigationOrder = values["navigation_order"];
        }
        get adviceLevelLookup() {
            const collection = this.collectionCache.getCollection(AdviceLevels.KEY, AdviceLevels.Entry);
            return collection.find(entry => entry.key === this._adviceLevelLookup);
        }
    }
    AdviceInfoTexts.Entry = Entry;
})(AdviceInfoTexts || (AdviceInfoTexts = {}));

var TriggerEvents;
(function (TriggerEvents) {
    TriggerEvents.KEY = new CollectionKey("trigger_events");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.event = values["event"];
            this.fromUi = !!values["from_ui"];
        }
    }
    TriggerEvents.Entry = Entry;
})(TriggerEvents || (TriggerEvents = {}));

var AdviceTriggers;
(function (AdviceTriggers) {
    AdviceTriggers.KEY = new CollectionKey("advice_triggers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._testWhen = values["test_when"];
            this.conditionScript = values["condition_script"];
        }
        get testWhen() {
            const collection = this.collectionCache.getCollection(TriggerEvents.KEY, TriggerEvents.Entry);
            return collection.find(entry => entry.event === this._testWhen);
        }
    }
    AdviceTriggers.Entry = Entry;
})(AdviceTriggers || (AdviceTriggers = {}));

var AdviceTriggerToAdviceThread;
(function (AdviceTriggerToAdviceThread) {
    AdviceTriggerToAdviceThread.KEY = new CollectionKey("advice_trigger_to_advice_thread");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._trigger = values["trigger"];
            this._thread = values["thread"];
            this.amount = values["amount"];
        }
        get trigger() {
            const collection = this.collectionCache.getCollection(AdviceTriggers.KEY, AdviceTriggers.Entry);
            return collection.find(entry => entry.key === this._trigger);
        }
        get thread() {
            const collection = this.collectionCache.getCollection(AdviceThreads.KEY, AdviceThreads.Entry);
            return collection.find(entry => entry.thread === this._thread);
        }
    }
    AdviceTriggerToAdviceThread.Entry = Entry;
})(AdviceTriggerToAdviceThread || (AdviceTriggerToAdviceThread = {}));

var Religions;
(function (Religions) {
    Religions.KEY = new CollectionKey("religions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.religionKey = values["religion_key"];
            this.onscreen = values["onscreen"];
            this.convertibility = values["convertibility"];
            this.uiIconPath = values["ui_icon_path"];
        }
    }
    Religions.Entry = Entry;
})(Religions || (Religions = {}));

var Agents;
(function (Agents) {
    Agents.KEY = new CollectionKey("agents");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.movePoints = values["move_points"];
            this.lineOfSight = values["line_of_sight"];
            this.playable = !!values["playable"];
            this.portraitOverride = values["portrait_override"];
            this._primaryAttribute = values["primary_attribute"];
            this._religion = values["religion"];
            this.factionTotalCap = values["faction_total_cap"];
            this.cost = values["cost"];
            this.inEncyclopedia = !!values["in_encyclopedia"];
        }
        get religion() {
            const collection = this.collectionCache.getCollection(Religions.KEY, Religions.Entry);
            return collection.find(entry => entry.religionKey === this._religion);
        }
    }
    Agents.Entry = Entry;
})(Agents || (Agents = {}));

var AgentAttributes;
(function (AgentAttributes) {
    AgentAttributes.KEY = new CollectionKey("agent_attributes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    AgentAttributes.Entry = Entry;
})(AgentAttributes || (AgentAttributes = {}));

var MessageEventLayoutTypes;
(function (MessageEventLayoutTypes) {
    MessageEventLayoutTypes.KEY = new CollectionKey("message_event_layout_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.type = values["Type"];
        }
    }
    MessageEventLayoutTypes.Entry = Entry;
})(MessageEventLayoutTypes || (MessageEventLayoutTypes = {}));

var MessageEvents;
(function (MessageEvents) {
    MessageEvents.KEY = new CollectionKey("message_events");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.event = values["event"];
            this._layout = values["layout"];
            this.requiresResponse = !!values["requires_response"];
            this.instantOpen = !!values["instant_open"];
            this.priority = values["priority"];
        }
        get layout() {
            const collection = this.collectionCache.getCollection(MessageEventLayoutTypes.KEY, MessageEventLayoutTypes.Entry);
            return collection.find(entry => entry.type === this._layout);
        }
    }
    MessageEvents.Entry = Entry;
})(MessageEvents || (MessageEvents = {}));

var AgentActionMessageEvents;
(function (AgentActionMessageEvents) {
    AgentActionMessageEvents.KEY = new CollectionKey("agent_action_message_events");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._criticalFailure = values["critical_failure"];
            this._failure = values["failure"];
            this._opportuneFailure = values["opportune_failure"];
            this._success = values["success"];
            this._criticalSuccess = values["critical_success"];
        }
        get criticalFailure() {
            const collection = this.collectionCache.getCollection(MessageEvents.KEY, MessageEvents.Entry);
            return collection.find(entry => entry.event === this._criticalFailure);
        }
        get failure() {
            const collection = this.collectionCache.getCollection(MessageEvents.KEY, MessageEvents.Entry);
            return collection.find(entry => entry.event === this._failure);
        }
        get opportuneFailure() {
            const collection = this.collectionCache.getCollection(MessageEvents.KEY, MessageEvents.Entry);
            return collection.find(entry => entry.event === this._opportuneFailure);
        }
        get success() {
            const collection = this.collectionCache.getCollection(MessageEvents.KEY, MessageEvents.Entry);
            return collection.find(entry => entry.event === this._success);
        }
        get criticalSuccess() {
            const collection = this.collectionCache.getCollection(MessageEvents.KEY, MessageEvents.Entry);
            return collection.find(entry => entry.event === this._criticalSuccess);
        }
    }
    AgentActionMessageEvents.Entry = Entry;
})(AgentActionMessageEvents || (AgentActionMessageEvents = {}));

var AgentActions;
(function (AgentActions) {
    AgentActions.KEY = new CollectionKey("agent_actions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._agent = values["agent"];
            this._ability = values["ability"];
            this._attribute = values["attribute"];
            this._criticalFailure = values["critical_failure"];
            this._failure = values["failure"];
            this._opportuneFailure = values["opportune_failure"];
            this._success = values["success"];
            this._criticalSuccess = values["critical_success"];
            this._cannotFail = values["cannot_fail"];
            this.localisedActionName = values["localised_action_name"];
            this.localisedActionDescription = values["localised_action_description"];
            this._yourMessageEventsMale = values["your_message_events_male"];
            this._yourMessageEventsFemale = values["your_message_events_female"];
            this._theirMessageEventsMale = values["their_message_events_male"];
            this._theirMessageEventsFemale = values["their_message_events_female"];
            this._enabledByEffect = values["enabled_by_effect"];
        }
        get agent() {
            const collection = this.collectionCache.getCollection(Agents.KEY, Agents.Entry);
            return collection.find(entry => entry.key === this._agent);
        }
        get ability() {
            const collection = this.collectionCache.getCollection(Abilities.KEY, Abilities.Entry);
            return collection.find(entry => entry.ability === this._ability);
        }
        get attribute() {
            const collection = this.collectionCache.getCollection(AgentAttributes.KEY, AgentAttributes.Entry);
            return collection.find(entry => entry.key === this._attribute);
        }
        get criticalFailure() {
            const collection = this.collectionCache.getCollection(ActionResults.KEY, ActionResults.Entry);
            return collection.find(entry => entry.key === this._criticalFailure);
        }
        get failure() {
            const collection = this.collectionCache.getCollection(ActionResults.KEY, ActionResults.Entry);
            return collection.find(entry => entry.key === this._failure);
        }
        get opportuneFailure() {
            const collection = this.collectionCache.getCollection(ActionResults.KEY, ActionResults.Entry);
            return collection.find(entry => entry.key === this._opportuneFailure);
        }
        get success() {
            const collection = this.collectionCache.getCollection(ActionResults.KEY, ActionResults.Entry);
            return collection.find(entry => entry.key === this._success);
        }
        get criticalSuccess() {
            const collection = this.collectionCache.getCollection(ActionResults.KEY, ActionResults.Entry);
            return collection.find(entry => entry.key === this._criticalSuccess);
        }
        get cannotFail() {
            const collection = this.collectionCache.getCollection(ActionResults.KEY, ActionResults.Entry);
            return collection.find(entry => entry.key === this._cannotFail);
        }
        get yourMessageEventsMale() {
            const collection = this.collectionCache.getCollection(AgentActionMessageEvents.KEY, AgentActionMessageEvents.Entry);
            return collection.find(entry => entry.key === this._yourMessageEventsMale);
        }
        get yourMessageEventsFemale() {
            const collection = this.collectionCache.getCollection(AgentActionMessageEvents.KEY, AgentActionMessageEvents.Entry);
            return collection.find(entry => entry.key === this._yourMessageEventsFemale);
        }
        get theirMessageEventsMale() {
            const collection = this.collectionCache.getCollection(AgentActionMessageEvents.KEY, AgentActionMessageEvents.Entry);
            return collection.find(entry => entry.key === this._theirMessageEventsMale);
        }
        get theirMessageEventsFemale() {
            const collection = this.collectionCache.getCollection(AgentActionMessageEvents.KEY, AgentActionMessageEvents.Entry);
            return collection.find(entry => entry.key === this._theirMessageEventsFemale);
        }
        get enabledByEffect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._enabledByEffect);
        }
    }
    AgentActions.Entry = Entry;
})(AgentActions || (AgentActions = {}));

var Cultures;
(function (Cultures) {
    Cultures.KEY = new CollectionKey("cultures");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.index = values["index"];
            this.fallbackUiCulture = values["fallback_ui_culture"];
            this.name = values["name"];
        }
    }
    Cultures.Entry = Entry;
})(Cultures || (Cultures = {}));

var UnitCategory;
(function (UnitCategory) {
    UnitCategory.KEY = new CollectionKey("unit_category");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.localisedName = values["localised_name"];
            this.rColour = values["r_colour"];
            this.gColour = values["g_colour"];
            this.bColour = values["b_colour"];
            this.minBattleRows = values["min_battle_rows"];
        }
    }
    UnitCategory.Entry = Entry;
})(UnitCategory || (UnitCategory = {}));

var UnitClass;
(function (UnitClass) {
    UnitClass.KEY = new CollectionKey("unit_class");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreen = values["onscreen"];
            this.tooltip = values["tooltip"];
            this.sortPriority = values["sort_priority"];
            this.icon = values["icon"];
            this.canAssaultSettlment = !!values["can_assault_settlment"];
        }
    }
    UnitClass.Entry = Entry;
})(UnitClass || (UnitClass = {}));

var UnitDescriptionShortTexts;
(function (UnitDescriptionShortTexts) {
    UnitDescriptionShortTexts.KEY = new CollectionKey("unit_description_short_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.text = values["text"];
        }
    }
    UnitDescriptionShortTexts.Entry = Entry;
})(UnitDescriptionShortTexts || (UnitDescriptionShortTexts = {}));

var UnitDescriptionHistoricalTexts;
(function (UnitDescriptionHistoricalTexts) {
    UnitDescriptionHistoricalTexts.KEY = new CollectionKey("unit_description_historical_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.text = values["text"];
        }
    }
    UnitDescriptionHistoricalTexts.Entry = Entry;
})(UnitDescriptionHistoricalTexts || (UnitDescriptionHistoricalTexts = {}));

var UnitDescriptionStrengthsWeaknessesTexts;
(function (UnitDescriptionStrengthsWeaknessesTexts) {
    UnitDescriptionStrengthsWeaknessesTexts.KEY = new CollectionKey("unit_description_strengths_weaknesses_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.text = values["text"];
        }
    }
    UnitDescriptionStrengthsWeaknessesTexts.Entry = Entry;
})(UnitDescriptionStrengthsWeaknessesTexts || (UnitDescriptionStrengthsWeaknessesTexts = {}));

var BattleEntitiesTypesEnum;
(function (BattleEntitiesTypesEnum) {
    BattleEntitiesTypesEnum.KEY = new CollectionKey("battle_entities_types_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    BattleEntitiesTypesEnum.Entry = Entry;
})(BattleEntitiesTypesEnum || (BattleEntitiesTypesEnum = {}));

var BattleEntities;
(function (BattleEntities) {
    BattleEntities.KEY = new CollectionKey("battle_entities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._type = values["type"];
            this.walkSpeed = values["walk_speed"];
            this.runSpeed = values["run_speed"];
            this.acceleration = values["acceleration"];
            this.deceleration = values["deceleration"];
            this.chargeSpeed = values["charge_speed"];
            this.crawlSpeed = values["crawl_speed"];
            this.chargeDistanceCommenceRun = values["charge_distance_commence_run"];
            this.chargeDistanceAdoptChargePose = values["charge_distance_adopt_charge_pose"];
            this.chargeDistancePickTarget = values["charge_distance_pick_target"];
            this.radius = values["radius"];
            this._shape = values["shape"];
            this.radiiRatio = values["radii_ratio"];
            this.mass = values["mass"];
            this.height = values["height"];
            this.fireArcClose = values["fire_arc_close"];
            this.fireArcLoose = values["fire_arc_loose"];
            this.turnSpeed = values["turn_speed"];
            this.hitPoints = values["hit_points"];
            this.allowTurnToMoveAnim = !!values["allow_turn_to_move_anim"];
            this.allowStaticTurnAnim = !!values["allow_static_turn_anim"];
            this.trackingThreshold = values["tracking_threshold"];
            this.minTurningSpeed = values["min_turning_speed"];
            this.displayModelOffsetZ = values["display_model_offset_z"];
        }
        get type() {
            const collection = this.collectionCache.getCollection(BattleEntitiesTypesEnum.KEY, BattleEntitiesTypesEnum.Entry);
            return collection.find(entry => entry.key === this._type);
        }
    }
    BattleEntities.Entry = Entry;
})(BattleEntities || (BattleEntities = {}));

var BattleAnimationsTable;
(function (BattleAnimationsTable) {
    BattleAnimationsTable.KEY = new CollectionKey("battle_animations_table");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    BattleAnimationsTable.Entry = Entry;
})(BattleAnimationsTable || (BattleAnimationsTable = {}));

var Variants;
(function (Variants) {
    Variants.KEY = new CollectionKey("variants");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.variantName = values["variant_name"];
        }
    }
    Variants.Entry = Entry;
})(Variants || (Variants = {}));

var AudioMaterialsEnums;
(function (AudioMaterialsEnums) {
    AudioMaterialsEnums.KEY = new CollectionKey("audio_materials_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    AudioMaterialsEnums.Entry = Entry;
})(AudioMaterialsEnums || (AudioMaterialsEnums = {}));

var Mounts;
(function (Mounts) {
    Mounts.KEY = new CollectionKey("mounts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._animation = values["animation"];
            this._entity = values["entity"];
            this.mountArmour = values["mount_armour"];
            this._variant = values["variant"];
            this._audioArmourType = values["audio_armour_type"];
        }
        get animation() {
            const collection = this.collectionCache.getCollection(BattleAnimationsTable.KEY, BattleAnimationsTable.Entry);
            return collection.find(entry => entry.key === this._animation);
        }
        get entity() {
            const collection = this.collectionCache.getCollection(BattleEntities.KEY, BattleEntities.Entry);
            return collection.find(entry => entry.key === this._entity);
        }
        get variant() {
            const collection = this.collectionCache.getCollection(Variants.KEY, Variants.Entry);
            return collection.find(entry => entry.variantName === this._variant);
        }
        get audioArmourType() {
            const collection = this.collectionCache.getCollection(AudioMaterialsEnums.KEY, AudioMaterialsEnums.Entry);
            return collection.find(entry => entry.key === this._audioArmourType);
        }
    }
    Mounts.Entry = Entry;
})(Mounts || (Mounts = {}));

var UnitArmourTypes;
(function (UnitArmourTypes) {
    UnitArmourTypes.KEY = new CollectionKey("unit_armour_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.armourValue = values["armour_value"];
            this.bonusVMissiles = !!values["bonus_v_missiles"];
            this.weakVMissiles = !!values["weak_v_missiles"];
            this._audioMaterial = values["audio_material"];
        }
        get audioMaterial() {
            const collection = this.collectionCache.getCollection(AudioMaterialsEnums.KEY, AudioMaterialsEnums.Entry);
            return collection.find(entry => entry.key === this._audioMaterial);
        }
    }
    UnitArmourTypes.Entry = Entry;
})(UnitArmourTypes || (UnitArmourTypes = {}));

var Animals;
(function (Animals) {
    Animals.KEY = new CollectionKey("animals");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._animation = values["animation"];
            this._entity = values["entity"];
            this.meleeAttack = values["melee_attack"];
            this.meleeDefence = values["melee_defence"];
            this.chargeBonus = values["charge_bonus"];
            this._armour = values["armour"];
        }
        get animation() {
            const collection = this.collectionCache.getCollection(BattleAnimationsTable.KEY, BattleAnimationsTable.Entry);
            return collection.find(entry => entry.key === this._animation);
        }
        get entity() {
            const collection = this.collectionCache.getCollection(BattleEntities.KEY, BattleEntities.Entry);
            return collection.find(entry => entry.key === this._entity);
        }
        get armour() {
            const collection = this.collectionCache.getCollection(UnitArmourTypes.KEY, UnitArmourTypes.Entry);
            return collection.find(entry => entry.key === this._armour);
        }
    }
    Animals.Entry = Entry;
})(Animals || (Animals = {}));

var UnitSpacings;
(function (UnitSpacings) {
    UnitSpacings.KEY = new CollectionKey("unit_spacings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.closeFormationSpacingHorizontal = values["close_formation_spacing_horizontal"];
            this.closeFormationSpacingVertical = values["close_formation_spacing_vertical"];
            this.closeFormationSpacingVariation = values["close_formation_spacing_variation"];
            this.looseFormationSpacingHorizontal = values["loose_formation_spacing_horizontal"];
            this.looseFormationSpacingVertical = values["loose_formation_spacing_vertical"];
            this.looseFormationSpacingVariation = values["loose_formation_spacing_variation"];
            this.dismountedCloseFormationSpacingHorizontal = values["dismounted_close_formation_spacing_horizontal"];
            this.dismountedCloseFormationSpacingVertical = values["dismounted_close_formation_spacing_vertical"];
            this.dismountedCloseFormationSpacingVariation = values["dismounted_close_formation_spacing_variation"];
            this.dismountedLooseFormationSpacingHorizontal = values["dismounted_loose_formation_spacing_horizontal"];
            this.dismountedLooseFormationSpacingVertical = values["dismounted_loose_formation_spacing_vertical"];
            this.dismountedLooseFormationSpacingVariation = values["dismounted_loose_formation_spacing_variation"];
            this.horde = !!values["horde"];
        }
    }
    UnitSpacings.Entry = Entry;
})(UnitSpacings || (UnitSpacings = {}));

var UnitTrainingLevelEnum;
(function (UnitTrainingLevelEnum) {
    UnitTrainingLevelEnum.KEY = new CollectionKey("unit_training_level_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    UnitTrainingLevelEnum.Entry = Entry;
})(UnitTrainingLevelEnum || (UnitTrainingLevelEnum = {}));

var UnitShieldTypes;
(function (UnitShieldTypes) {
    UnitShieldTypes.KEY = new CollectionKey("unit_shield_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.shieldDefenceValue = values["shield_defence_value"];
            this.shieldArmourValue = values["shield_armour_value"];
            this._audioMaterial = values["audio_material"];
            this.missileBlockChance = values["missile_block_chance"];
        }
        get audioMaterial() {
            const collection = this.collectionCache.getCollection(AudioMaterialsEnums.KEY, AudioMaterialsEnums.Entry);
            return collection.find(entry => entry.key === this._audioMaterial);
        }
    }
    UnitShieldTypes.Entry = Entry;
})(UnitShieldTypes || (UnitShieldTypes = {}));

var ProjectileShotTypeEnum;
(function (ProjectileShotTypeEnum) {
    ProjectileShotTypeEnum.KEY = new CollectionKey("projectile_shot_type_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.requiresEffectEnabling = !!values["requires_effect_enabling"];
            this.supersedesShotType = values["supersedes_shot_type"];
            this.buttonTooltipText = values["button_tooltip_text"];
        }
    }
    ProjectileShotTypeEnum.Entry = Entry;
})(ProjectileShotTypeEnum || (ProjectileShotTypeEnum = {}));

var ProjectilesDetonatorTypesEnum;
(function (ProjectilesDetonatorTypesEnum) {
    ProjectilesDetonatorTypesEnum.KEY = new CollectionKey("projectiles_detonator_types_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.detonatorType = values["detonator_type"];
        }
    }
    ProjectilesDetonatorTypesEnum.Entry = Entry;
})(ProjectilesDetonatorTypesEnum || (ProjectilesDetonatorTypesEnum = {}));

var ProjectilesDetonationTypesEnum;
(function (ProjectilesDetonationTypesEnum) {
    ProjectilesDetonationTypesEnum.KEY = new CollectionKey("projectiles_detonation_types_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    ProjectilesDetonationTypesEnum.Entry = Entry;
})(ProjectilesDetonationTypesEnum || (ProjectilesDetonationTypesEnum = {}));

var ParticleEffects;
(function (ParticleEffects) {
    ParticleEffects.KEY = new CollectionKey("particle_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    ParticleEffects.Entry = Entry;
})(ParticleEffects || (ParticleEffects = {}));

var AudioExplosionsEnums;
(function (AudioExplosionsEnums) {
    AudioExplosionsEnums.KEY = new CollectionKey("audio_explosions_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    AudioExplosionsEnums.Entry = Entry;
})(AudioExplosionsEnums || (AudioExplosionsEnums = {}));

var ProjectilesExplosions;
(function (ProjectilesExplosions) {
    ProjectilesExplosions.KEY = new CollectionKey("projectiles_explosions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._detonatorType = values["detonator_type"];
            this._detonationType = values["detonation_type"];
            this.detonationRadius = values["detonation_radius"];
            this.detonationDuration = values["detonation_duration"];
            this.detonationSpeed = values["detonation_speed"];
            this.detonationDamage = values["detonation_damage"];
            this._projectileName = values["projectile_name"];
            this.projectileAmount = values["projectile_amount"];
            this._explosionParticleEffect = values["explosion_particle_effect"];
            this.distanceFromTarget = values["distance_from_target"];
            this.errorMargin = values["error_margin"];
            this.nonLethalDetonation = !!values["non_lethal_detonation"];
            this.explosionParticleEffectOnGround = values["explosion_particle_effect_on_ground"];
            this._audioExplosionType = values["audio_explosion_type"];
        }
        get detonatorType() {
            const collection = this.collectionCache.getCollection(ProjectilesDetonatorTypesEnum.KEY, ProjectilesDetonatorTypesEnum.Entry);
            return collection.find(entry => entry.detonatorType === this._detonatorType);
        }
        get detonationType() {
            const collection = this.collectionCache.getCollection(ProjectilesDetonationTypesEnum.KEY, ProjectilesDetonationTypesEnum.Entry);
            return collection.find(entry => entry.key === this._detonationType);
        }
        get projectileName() {
            const collection = this.collectionCache.getCollection(Projectiles.KEY, Projectiles.Entry);
            return collection.find(entry => entry.key === this._projectileName);
        }
        get explosionParticleEffect() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._explosionParticleEffect);
        }
        get audioExplosionType() {
            const collection = this.collectionCache.getCollection(AudioExplosionsEnums.KEY, AudioExplosionsEnums.Entry);
            return collection.find(entry => entry.key === this._audioExplosionType);
        }
    }
    ProjectilesExplosions.Entry = Entry;
})(ProjectilesExplosions || (ProjectilesExplosions = {}));

var WarscapeCategories;
(function (WarscapeCategories) {
    WarscapeCategories.KEY = new CollectionKey("warscape_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    WarscapeCategories.Entry = Entry;
})(WarscapeCategories || (WarscapeCategories = {}));

var WarscapeRigid;
(function (WarscapeRigid) {
    WarscapeRigid.KEY = new CollectionKey("warscape_rigid");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.textureDirectory = values["texture_directory"];
            this._category = values["category"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(WarscapeCategories.KEY, WarscapeCategories.Entry);
            return collection.find(entry => entry.key === this._category);
        }
    }
    WarscapeRigid.Entry = Entry;
})(WarscapeRigid || (WarscapeRigid = {}));

var ProjectileImpacts;
(function (ProjectileImpacts) {
    ProjectileImpacts.KEY = new CollectionKey("projectile_impacts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._water = values["water"];
            this._sails = values["sails"];
            this._mud = values["mud"];
            this._grass = values["grass"];
            this._road = values["road"];
            this._rock = values["rock"];
            this._sand = values["sand"];
            this._cloth = values["cloth"];
            this._snow = values["snow"];
            this._leather = values["leather"];
            this._wood = values["wood"];
            this._foliage = values["foliage"];
            this._glass = values["glass"];
            this.size = values["size"];
            this._blood = values["blood"];
            this._metal = values["metal"];
        }
        get water() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._water);
        }
        get sails() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._sails);
        }
        get mud() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._mud);
        }
        get grass() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._grass);
        }
        get road() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._road);
        }
        get rock() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._rock);
        }
        get sand() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._sand);
        }
        get cloth() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._cloth);
        }
        get snow() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._snow);
        }
        get leather() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._leather);
        }
        get wood() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._wood);
        }
        get foliage() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._foliage);
        }
        get glass() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._glass);
        }
        get blood() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._blood);
        }
        get metal() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._metal);
        }
    }
    ProjectileImpacts.Entry = Entry;
})(ProjectileImpacts || (ProjectileImpacts = {}));

var ProjectileDisplays;
(function (ProjectileDisplays) {
    ProjectileDisplays.KEY = new CollectionKey("projectile_displays");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._displayModel = values["display_model"];
            this._damagedDisplayModel = values["damaged_display_model"];
            this._launchFx = values["launch_fx"];
            this._trailFx = values["trail_fx"];
            this._stationaryFx = values["stationary_fx"];
            this._impact = values["impact"];
            this.skeleton = values["skeleton"];
            this.airborneAnim = values["airborne_anim"];
            this.landingAnim = values["landing_anim"];
        }
        get displayModel() {
            const collection = this.collectionCache.getCollection(WarscapeRigid.KEY, WarscapeRigid.Entry);
            return collection.find(entry => entry.key === this._displayModel);
        }
        get damagedDisplayModel() {
            const collection = this.collectionCache.getCollection(WarscapeRigid.KEY, WarscapeRigid.Entry);
            return collection.find(entry => entry.key === this._damagedDisplayModel);
        }
        get launchFx() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._launchFx);
        }
        get trailFx() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._trailFx);
        }
        get stationaryFx() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._stationaryFx);
        }
        get impact() {
            const collection = this.collectionCache.getCollection(ProjectileImpacts.KEY, ProjectileImpacts.Entry);
            return collection.find(entry => entry.key === this._impact);
        }
    }
    ProjectileDisplays.Entry = Entry;
})(ProjectileDisplays || (ProjectileDisplays = {}));

var SpecialAbilityPhaseEffectTypes;
(function (SpecialAbilityPhaseEffectTypes) {
    SpecialAbilityPhaseEffectTypes.KEY = new CollectionKey("special_ability_phase_effect_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.effectType = values["effect_type"];
        }
    }
    SpecialAbilityPhaseEffectTypes.Entry = Entry;
})(SpecialAbilityPhaseEffectTypes || (SpecialAbilityPhaseEffectTypes = {}));

var SpecialAbilityStanceEnums;
(function (SpecialAbilityStanceEnums) {
    SpecialAbilityStanceEnums.KEY = new CollectionKey("special_ability_stance_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    SpecialAbilityStanceEnums.Entry = Entry;
})(SpecialAbilityStanceEnums || (SpecialAbilityStanceEnums = {}));

var UiEffects;
(function (UiEffects) {
    UiEffects.KEY = new CollectionKey("ui_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._bannerFx = values["banner_fx"];
            this._pingFx = values["ping_fx"];
        }
        get bannerFx() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._bannerFx);
        }
        get pingFx() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._pingFx);
        }
    }
    UiEffects.Entry = Entry;
})(UiEffects || (UiEffects = {}));

var SpecialAbilityPhases;
(function (SpecialAbilityPhases) {
    SpecialAbilityPhases.KEY = new CollectionKey("special_ability_phases");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this.duration = values["duration"];
            this._effectType = values["effect_type"];
            this._requestedStance = values["requested_stance"];
            this.unbreakable = !!values["unbreakable"];
            this.cantMove = !!values["cant_move"];
            this.killOwnUnit = !!values["kill_own_unit"];
            this.minorCasualties = !!values["minor_casualties"];
            this.majorCasualties = !!values["major_casualties"];
            this.freezeFatigue = !!values["freeze_fatigue"];
            this.fatigueChangeRatio = values["fatigue_change_ratio"];
            this.inspirationAuraRangeMod = values["inspiration_aura_range_mod"];
            this.abilityRechargeChange = values["ability_recharge_change"];
            this._uiVfx = values["ui_vfx"];
            this.rallyAmount = values["rally_amount"];
        }
        get effectType() {
            const collection = this.collectionCache.getCollection(SpecialAbilityPhaseEffectTypes.KEY, SpecialAbilityPhaseEffectTypes.Entry);
            return collection.find(entry => entry.effectType === this._effectType);
        }
        get requestedStance() {
            const collection = this.collectionCache.getCollection(SpecialAbilityStanceEnums.KEY, SpecialAbilityStanceEnums.Entry);
            return collection.find(entry => entry.key === this._requestedStance);
        }
        get uiVfx() {
            const collection = this.collectionCache.getCollection(UiEffects.KEY, UiEffects.Entry);
            return collection.find(entry => entry.key === this._uiVfx);
        }
    }
    SpecialAbilityPhases.Entry = Entry;
})(SpecialAbilityPhases || (SpecialAbilityPhases = {}));

var AudioProjectilesEnums;
(function (AudioProjectilesEnums) {
    AudioProjectilesEnums.KEY = new CollectionKey("audio_projectiles_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    AudioProjectilesEnums.Entry = Entry;
})(AudioProjectilesEnums || (AudioProjectilesEnums = {}));

var AudioProjectiles;
(function (AudioProjectiles) {
    AudioProjectiles.KEY = new CollectionKey("audio_projectiles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._audioProjectileType = values["audio_projectile_type"];
            this.playIncomingSound = !!values["play_incoming_sound"];
            this.maxAttenuationFire = values["max_attenuation_fire"];
            this.maxAttenuationInflight = values["max_attenuation_inflight"];
            this.maxAttenuationImpact = values["max_attenuation_impact"];
            this.requiresSpeed = !!values["requires_speed"];
            this.requiresDistance = !!values["requires_distance"];
            this.inflightMinSpeed = values["inflight_min_speed"];
        }
        get audioProjectileType() {
            const collection = this.collectionCache.getCollection(AudioProjectilesEnums.KEY, AudioProjectilesEnums.Entry);
            return collection.find(entry => entry.key === this._audioProjectileType);
        }
    }
    AudioProjectiles.Entry = Entry;
})(AudioProjectiles || (AudioProjectiles = {}));

var Projectiles;
(function (Projectiles) {
    Projectiles.KEY = new CollectionKey("projectiles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._category = values["category"];
            this._shotType = values["shot_type"];
            this._explosionType = values["explosion_type"];
            this.highAirResistance = !!values["high_air_resistance"];
            this.spinType = values["spin_type"];
            this.projectileNumber = values["projectile_number"];
            this._trajectorySight = values["trajectory_sight"];
            this.effectiveRange = values["effective_range"];
            this.minimumRange = values["minimum_range"];
            this.maxElevation = values["max_elevation"];
            this.muzzleVelocity = values["muzzle_velocity"];
            this.marksmanshipBonus = values["marksmanship_bonus"];
            this.spread = values["spread"];
            this.damage = values["damage"];
            this.apDamage = values["ap_damage"];
            this._penetration = values["penetration"];
            this._incendiary = values["incendiary"];
            this.canBounce = !!values["can_bounce"];
            this.collisionRadius = values["collision_radius"];
            this.baseReloadTime = values["base_reload_time"];
            this.belowWaterlineDamageModifer = values["below_waterline_damage_modifer"];
            this.calibrationDistance = values["calibration_distance"];
            this.calibrationArea = values["calibration_area"];
            this.bonusVInfantry = values["bonus_v_infantry"];
            this.bonusVCavalry = values["bonus_v_cavalry"];
            this.bonusVElephant = values["bonus_v_elephant"];
            this._projectileDisplay = values["projectile_display"];
            this._overheadStatEffect = values["overhead_stat_effect"];
            this._contactStatEffect = values["contact_stat_effect"];
            this._projectileAudio = values["projectile_audio"];
            this.shockwaveRadius = values["shockwave_radius"];
            this.canDamageBuildings = !!values["can_damage_buildings"];
            this.isGrapple = !!values["is_grapple"];
        }
        get shotType() {
            const collection = this.collectionCache.getCollection(ProjectileShotTypeEnum.KEY, ProjectileShotTypeEnum.Entry);
            return collection.find(entry => entry.key === this._shotType);
        }
        get explosionType() {
            const collection = this.collectionCache.getCollection(ProjectilesExplosions.KEY, ProjectilesExplosions.Entry);
            return collection.find(entry => entry.key === this._explosionType);
        }
        get projectileDisplay() {
            const collection = this.collectionCache.getCollection(ProjectileDisplays.KEY, ProjectileDisplays.Entry);
            return collection.find(entry => entry.key === this._projectileDisplay);
        }
        get overheadStatEffect() {
            const collection = this.collectionCache.getCollection(SpecialAbilityPhases.KEY, SpecialAbilityPhases.Entry);
            return collection.find(entry => entry.id === this._overheadStatEffect);
        }
        get contactStatEffect() {
            const collection = this.collectionCache.getCollection(SpecialAbilityPhases.KEY, SpecialAbilityPhases.Entry);
            return collection.find(entry => entry.id === this._contactStatEffect);
        }
        get projectileAudio() {
            const collection = this.collectionCache.getCollection(AudioProjectiles.KEY, AudioProjectiles.Entry);
            return collection.find(entry => entry.key === this._projectileAudio);
        }
    }
    Projectiles.Entry = Entry;
})(Projectiles || (Projectiles = {}));

var MissileWeapons;
(function (MissileWeapons) {
    MissileWeapons.KEY = new CollectionKey("missile_weapons");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.precursor = !!values["precursor"];
            this._defaultProjectile = values["default_projectile"];
            this.canFireAtBuildings = !!values["can_fire_at_buildings"];
        }
        get defaultProjectile() {
            const collection = this.collectionCache.getCollection(Projectiles.KEY, Projectiles.Entry);
            return collection.find(entry => entry.key === this._defaultProjectile);
        }
    }
    MissileWeapons.Entry = Entry;
})(MissileWeapons || (MissileWeapons = {}));

var UnitMeleeWeaponsEnum;
(function (UnitMeleeWeaponsEnum) {
    UnitMeleeWeaponsEnum.KEY = new CollectionKey("unit_melee_weapons_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    UnitMeleeWeaponsEnum.Entry = Entry;
})(UnitMeleeWeaponsEnum || (UnitMeleeWeaponsEnum = {}));

var MeleeWeapons;
(function (MeleeWeapons) {
    MeleeWeapons.KEY = new CollectionKey("melee_weapons");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.damage = values["damage"];
            this.apDamage = values["ap_damage"];
            this.firstStrike = values["first_strike"];
            this.bonusVInfantry = values["bonus_v_infantry"];
            this.bonusVCavalry = values["bonus_v_cavalry"];
            this.bonusVElephants = values["bonus_v_elephants"];
            this.armourPiercing = !!values["armour_piercing"];
            this.shieldPiercing = !!values["shield_piercing"];
            this.armourPenetrating = !!values["armour_penetrating"];
            this.weaponLength = values["weapon_length"];
            this._meleeWeaponType = values["melee_weapon_type"];
            this._audioMaterial = values["audio_material"];
        }
        get meleeWeaponType() {
            const collection = this.collectionCache.getCollection(UnitMeleeWeaponsEnum.KEY, UnitMeleeWeaponsEnum.Entry);
            return collection.find(entry => entry.key === this._meleeWeaponType);
        }
        get audioMaterial() {
            const collection = this.collectionCache.getCollection(AudioMaterialsEnums.KEY, AudioMaterialsEnums.Entry);
            return collection.find(entry => entry.key === this._audioMaterial);
        }
    }
    MeleeWeapons.Entry = Entry;
})(MeleeWeapons || (MeleeWeapons = {}));

var WarscapeAnimated;
(function (WarscapeAnimated) {
    WarscapeAnimated.KEY = new CollectionKey("warscape_animated");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.textureFilenameBase = values["texture_filename_base"];
            this._category = values["category"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(WarscapeCategories.KEY, WarscapeCategories.Entry);
            return collection.find(entry => entry.key === this._category);
        }
    }
    WarscapeAnimated.Entry = Entry;
})(WarscapeAnimated || (WarscapeAnimated = {}));

var BattlePersonalities;
(function (BattlePersonalities) {
    BattlePersonalities.KEY = new CollectionKey("battle_personalities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._soldierModel = values["soldier_model"];
            this._manAnimationsTable = values["man_animations_table"];
            this._type = values["type"];
            this._missileType = values["missile_type"];
            this._variant = values["variant"];
        }
        get soldierModel() {
            const collection = this.collectionCache.getCollection(WarscapeAnimated.KEY, WarscapeAnimated.Entry);
            return collection.find(entry => entry.key === this._soldierModel);
        }
        get manAnimationsTable() {
            const collection = this.collectionCache.getCollection(BattleAnimationsTable.KEY, BattleAnimationsTable.Entry);
            return collection.find(entry => entry.key === this._manAnimationsTable);
        }
        get missileType() {
            const collection = this.collectionCache.getCollection(Projectiles.KEY, Projectiles.Entry);
            return collection.find(entry => entry.key === this._missileType);
        }
        get variant() {
            const collection = this.collectionCache.getCollection(Variants.KEY, Variants.Entry);
            return collection.find(entry => entry.variantName === this._variant);
        }
    }
    BattlePersonalities.Entry = Entry;
})(BattlePersonalities || (BattlePersonalities = {}));

var PersonalityLocationEnums;
(function (PersonalityLocationEnums) {
    PersonalityLocationEnums.KEY = new CollectionKey("personality_location_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    PersonalityLocationEnums.Entry = Entry;
})(PersonalityLocationEnums || (PersonalityLocationEnums = {}));

var LandUnitsOfficers;
(function (LandUnitsOfficers) {
    LandUnitsOfficers.KEY = new CollectionKey("land_units_officers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._officer1 = values["officer_1"];
            this._officer2 = values["officer_2"];
            this._standardBearer1 = values["standard_bearer_1"];
            this._standardBearer2 = values["standard_bearer_2"];
            this._musician1 = values["musician_1"];
            this._musician2 = values["musician_2"];
            this._personalityLocation = values["personality_location"];
        }
        get officer1() {
            const collection = this.collectionCache.getCollection(BattlePersonalities.KEY, BattlePersonalities.Entry);
            return collection.find(entry => entry.key === this._officer1);
        }
        get officer2() {
            const collection = this.collectionCache.getCollection(BattlePersonalities.KEY, BattlePersonalities.Entry);
            return collection.find(entry => entry.key === this._officer2);
        }
        get standardBearer1() {
            const collection = this.collectionCache.getCollection(BattlePersonalities.KEY, BattlePersonalities.Entry);
            return collection.find(entry => entry.key === this._standardBearer1);
        }
        get standardBearer2() {
            const collection = this.collectionCache.getCollection(BattlePersonalities.KEY, BattlePersonalities.Entry);
            return collection.find(entry => entry.key === this._standardBearer2);
        }
        get musician1() {
            const collection = this.collectionCache.getCollection(BattlePersonalities.KEY, BattlePersonalities.Entry);
            return collection.find(entry => entry.key === this._musician1);
        }
        get musician2() {
            const collection = this.collectionCache.getCollection(BattlePersonalities.KEY, BattlePersonalities.Entry);
            return collection.find(entry => entry.key === this._musician2);
        }
        get personalityLocation() {
            const collection = this.collectionCache.getCollection(PersonalityLocationEnums.KEY, PersonalityLocationEnums.Entry);
            return collection.find(entry => entry.key === this._personalityLocation);
        }
    }
    LandUnitsOfficers.Entry = Entry;
})(LandUnitsOfficers || (LandUnitsOfficers = {}));

var GunTypesEnum;
(function (GunTypesEnum) {
    GunTypesEnum.KEY = new CollectionKey("gun_types_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    GunTypesEnum.Entry = Entry;
})(GunTypesEnum || (GunTypesEnum = {}));

var BattlefieldEngines;
(function (BattlefieldEngines) {
    BattlefieldEngines.KEY = new CollectionKey("battlefield_engines");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._engineType = values["engine_type"];
            this._model = values["model"];
            this._gunAnimationTable = values["gun_animation_table"];
            this._missileWeapon = values["missile_weapon"];
            this._destructionAnimation = values["destruction_animation"];
            this._destroyedModel = values["destroyed_model"];
            this._battleEntity = values["battle_entity"];
            this.canMove = !!values["can_move"];
        }
        get engineType() {
            const collection = this.collectionCache.getCollection(GunTypesEnum.KEY, GunTypesEnum.Entry);
            return collection.find(entry => entry.key === this._engineType);
        }
        get model() {
            const collection = this.collectionCache.getCollection(WarscapeAnimated.KEY, WarscapeAnimated.Entry);
            return collection.find(entry => entry.key === this._model);
        }
        get gunAnimationTable() {
            const collection = this.collectionCache.getCollection(BattleAnimationsTable.KEY, BattleAnimationsTable.Entry);
            return collection.find(entry => entry.key === this._gunAnimationTable);
        }
        get missileWeapon() {
            const collection = this.collectionCache.getCollection(MissileWeapons.KEY, MissileWeapons.Entry);
            return collection.find(entry => entry.key === this._missileWeapon);
        }
        get destructionAnimation() {
            const collection = this.collectionCache.getCollection(WarscapeAnimated.KEY, WarscapeAnimated.Entry);
            return collection.find(entry => entry.key === this._destructionAnimation);
        }
        get destroyedModel() {
            const collection = this.collectionCache.getCollection(WarscapeRigid.KEY, WarscapeRigid.Entry);
            return collection.find(entry => entry.key === this._destroyedModel);
        }
        get battleEntity() {
            const collection = this.collectionCache.getCollection(BattleEntities.KEY, BattleEntities.Entry);
            return collection.find(entry => entry.key === this._battleEntity);
        }
    }
    BattlefieldEngines.Entry = Entry;
})(BattlefieldEngines || (BattlefieldEngines = {}));

var LandUnitArticulatedVehicles;
(function (LandUnitArticulatedVehicles) {
    LandUnitArticulatedVehicles.KEY = new CollectionKey("land_unit_articulated_vehicles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._articulatedEntity = values["articulated_entity"];
            this._ammoCaissonEntity = values["ammo_caisson_entity"];
            this._ammoCaissonModel = values["ammo_caisson_model"];
            this._ammoCaissonDestroyedModel = values["ammo_caisson_destroyed_model"];
            this._ammoCaissonDestruction = values["ammo_caisson_destruction"];
        }
        get articulatedEntity() {
            const collection = this.collectionCache.getCollection(BattleEntities.KEY, BattleEntities.Entry);
            return collection.find(entry => entry.key === this._articulatedEntity);
        }
        get ammoCaissonEntity() {
            const collection = this.collectionCache.getCollection(BattleEntities.KEY, BattleEntities.Entry);
            return collection.find(entry => entry.key === this._ammoCaissonEntity);
        }
        get ammoCaissonModel() {
            const collection = this.collectionCache.getCollection(WarscapeAnimated.KEY, WarscapeAnimated.Entry);
            return collection.find(entry => entry.key === this._ammoCaissonModel);
        }
        get ammoCaissonDestroyedModel() {
            const collection = this.collectionCache.getCollection(WarscapeRigid.KEY, WarscapeRigid.Entry);
            return collection.find(entry => entry.key === this._ammoCaissonDestroyedModel);
        }
        get ammoCaissonDestruction() {
            const collection = this.collectionCache.getCollection(WarscapeAnimated.KEY, WarscapeAnimated.Entry);
            return collection.find(entry => entry.key === this._ammoCaissonDestruction);
        }
    }
    LandUnitArticulatedVehicles.Entry = Entry;
})(LandUnitArticulatedVehicles || (LandUnitArticulatedVehicles = {}));

var UnitAttributesGroups;
(function (UnitAttributesGroups) {
    UnitAttributesGroups.KEY = new CollectionKey("unit_attributes_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.groupName = values["group_name"];
        }
    }
    UnitAttributesGroups.Entry = Entry;
})(UnitAttributesGroups || (UnitAttributesGroups = {}));

var ChariotTypesEnums;
(function (ChariotTypesEnums) {
    ChariotTypesEnums.KEY = new CollectionKey("chariot_types_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    ChariotTypesEnums.Entry = Entry;
})(ChariotTypesEnums || (ChariotTypesEnums = {}));

var BattlefieldChariots;
(function (BattlefieldChariots) {
    BattlefieldChariots.KEY = new CollectionKey("battlefield_chariots");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._chariotType = values["chariot_type"];
            this._model = values["model"];
            this._chariotAnimationTable = values["chariot_animation_table"];
            this._destructionAnimation = values["destruction_animation"];
            this._destroyedModel = values["destroyed_model"];
            this._battleEntity = values["battle_entity"];
        }
        get chariotType() {
            const collection = this.collectionCache.getCollection(ChariotTypesEnums.KEY, ChariotTypesEnums.Entry);
            return collection.find(entry => entry.key === this._chariotType);
        }
        get model() {
            const collection = this.collectionCache.getCollection(WarscapeAnimated.KEY, WarscapeAnimated.Entry);
            return collection.find(entry => entry.key === this._model);
        }
        get chariotAnimationTable() {
            const collection = this.collectionCache.getCollection(BattleAnimationsTable.KEY, BattleAnimationsTable.Entry);
            return collection.find(entry => entry.key === this._chariotAnimationTable);
        }
        get destructionAnimation() {
            const collection = this.collectionCache.getCollection(WarscapeAnimated.KEY, WarscapeAnimated.Entry);
            return collection.find(entry => entry.key === this._destructionAnimation);
        }
        get destroyedModel() {
            const collection = this.collectionCache.getCollection(WarscapeRigid.KEY, WarscapeRigid.Entry);
            return collection.find(entry => entry.key === this._destroyedModel);
        }
        get battleEntity() {
            const collection = this.collectionCache.getCollection(BattleEntities.KEY, BattleEntities.Entry);
            return collection.find(entry => entry.key === this._battleEntity);
        }
    }
    BattlefieldChariots.Entry = Entry;
})(BattlefieldChariots || (BattlefieldChariots = {}));

var SpottingAndHidingValues;
(function (SpottingAndHidingValues) {
    SpottingAndHidingValues.KEY = new CollectionKey("spotting_and_hiding_values");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.visibilityMinSpotRange = values["visibility_min_spot_range"];
            this.visibilityMaxSpotRange = values["visibility_max_spot_range"];
            this.spotDistTree = values["spot_dist_tree"];
            this.spotDistScrub = values["spot_dist_scrub"];
        }
    }
    SpottingAndHidingValues.Entry = Entry;
})(SpottingAndHidingValues || (SpottingAndHidingValues = {}));

var AudioVoSelectedSwitches;
(function (AudioVoSelectedSwitches) {
    AudioVoSelectedSwitches.KEY = new CollectionKey("audio_vo_selected_switches");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    AudioVoSelectedSwitches.Entry = Entry;
})(AudioVoSelectedSwitches || (AudioVoSelectedSwitches = {}));

var LandUnits;
(function (LandUnits) {
    LandUnits.KEY = new CollectionKey("land_units");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreenName = values["onscreen_name"];
            this._category = values["category"];
            this._class = values["class"];
            this._shortDescriptionText = values["short_description_text"];
            this._historicalDescriptionText = values["historical_description_text"];
            this._strengthsWeaknessesText = values["strengths_weaknesses_text"];
            this.campaignActionPoints = values["campaign_action_points"];
            this.supportsFirstPerson = !!values["supports_first_person"];
            this._manEntity = values["man_entity"];
            this._manAnimation = values["man_animation"];
            this.numMounts = values["num_mounts"];
            this._mount = values["mount"];
            this.numAnimals = values["num_animals"];
            this._animal = values["animal"];
            this._spacing = values["spacing"];
            this.rankDepth = values["rank_depth"];
            this.morale = values["morale"];
            this.bonusHitPoints = values["bonus_hit_points"];
            this._trainingLevel = values["training_level"];
            this._armour = values["armour"];
            this._shield = values["shield"];
            this._primaryMissileWeapon = values["primary_missile_weapon"];
            this.accuracy = values["accuracy"];
            this.ammo = values["ammo"];
            this._primaryMeleeWeapon = values["primary_melee_weapon"];
            this.meleeAttack = values["melee_attack"];
            this.chargeBonus = values["charge_bonus"];
            this.meleeDefence = values["melee_defence"];
            this.dismountedMeleeAttack = values["dismounted_melee_attack"];
            this.dismountedChargeBonus = values["dismounted_charge_bonus"];
            this.dismountedMeleeDefence = values["dismounted_melee_defence"];
            this.numGuns = values["num_guns"];
            this._officers = values["officers"];
            this._engine = values["engine"];
            this._articulatedRecord = values["articulated_record"];
            this.isMale = !!values["is_male"];
            this.visibilitySpottingRangeMin = values["visibility_spotting_range_min"];
            this.visibilitySpottingRangeMax = values["visibility_spotting_range_max"];
            this.abilityGlobalRecharge = values["ability_global_recharge"];
            this._attributeGroup = values["attribute_group"];
            this.spotDistTree = values["spot_dist_tree"];
            this.spotDistScrub = values["spot_dist_scrub"];
            this._chariot = values["chariot"];
            this.numChariots = values["num_chariots"];
            this.reload = values["reload"];
            this.looseSpacing = !!values["loose_spacing"];
            this._spottingAndHiding = values["spotting_and_hiding"];
            this._selectionVo = values["selection_vo"];
            this._selectedVoSecondary = values["selected_vo_secondary"];
            this._selectedVoTertiary = values["selected_vo_tertiary"];
            this.hidingScalar = values["hiding_scalar"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(UnitCategory.KEY, UnitCategory.Entry);
            return collection.find(entry => entry.key === this._category);
        }
        get class() {
            const collection = this.collectionCache.getCollection(UnitClass.KEY, UnitClass.Entry);
            return collection.find(entry => entry.key === this._class);
        }
        get shortDescriptionText() {
            const collection = this.collectionCache.getCollection(UnitDescriptionShortTexts.KEY, UnitDescriptionShortTexts.Entry);
            return collection.find(entry => entry.key === this._shortDescriptionText);
        }
        get historicalDescriptionText() {
            const collection = this.collectionCache.getCollection(UnitDescriptionHistoricalTexts.KEY, UnitDescriptionHistoricalTexts.Entry);
            return collection.find(entry => entry.key === this._historicalDescriptionText);
        }
        get strengthsWeaknessesText() {
            const collection = this.collectionCache.getCollection(UnitDescriptionStrengthsWeaknessesTexts.KEY, UnitDescriptionStrengthsWeaknessesTexts.Entry);
            return collection.find(entry => entry.key === this._strengthsWeaknessesText);
        }
        get manEntity() {
            const collection = this.collectionCache.getCollection(BattleEntities.KEY, BattleEntities.Entry);
            return collection.find(entry => entry.key === this._manEntity);
        }
        get manAnimation() {
            const collection = this.collectionCache.getCollection(BattleAnimationsTable.KEY, BattleAnimationsTable.Entry);
            return collection.find(entry => entry.key === this._manAnimation);
        }
        get mount() {
            const collection = this.collectionCache.getCollection(Mounts.KEY, Mounts.Entry);
            return collection.find(entry => entry.key === this._mount);
        }
        get animal() {
            const collection = this.collectionCache.getCollection(Animals.KEY, Animals.Entry);
            return collection.find(entry => entry.key === this._animal);
        }
        get spacing() {
            const collection = this.collectionCache.getCollection(UnitSpacings.KEY, UnitSpacings.Entry);
            return collection.find(entry => entry.key === this._spacing);
        }
        get trainingLevel() {
            const collection = this.collectionCache.getCollection(UnitTrainingLevelEnum.KEY, UnitTrainingLevelEnum.Entry);
            return collection.find(entry => entry.key === this._trainingLevel);
        }
        get armour() {
            const collection = this.collectionCache.getCollection(UnitArmourTypes.KEY, UnitArmourTypes.Entry);
            return collection.find(entry => entry.key === this._armour);
        }
        get shield() {
            const collection = this.collectionCache.getCollection(UnitShieldTypes.KEY, UnitShieldTypes.Entry);
            return collection.find(entry => entry.key === this._shield);
        }
        get primaryMissileWeapon() {
            const collection = this.collectionCache.getCollection(MissileWeapons.KEY, MissileWeapons.Entry);
            return collection.find(entry => entry.key === this._primaryMissileWeapon);
        }
        get primaryMeleeWeapon() {
            const collection = this.collectionCache.getCollection(MeleeWeapons.KEY, MeleeWeapons.Entry);
            return collection.find(entry => entry.key === this._primaryMeleeWeapon);
        }
        get officers() {
            const collection = this.collectionCache.getCollection(LandUnitsOfficers.KEY, LandUnitsOfficers.Entry);
            return collection.find(entry => entry.key === this._officers);
        }
        get engine() {
            const collection = this.collectionCache.getCollection(BattlefieldEngines.KEY, BattlefieldEngines.Entry);
            return collection.find(entry => entry.key === this._engine);
        }
        get articulatedRecord() {
            const collection = this.collectionCache.getCollection(LandUnitArticulatedVehicles.KEY, LandUnitArticulatedVehicles.Entry);
            return collection.find(entry => entry.key === this._articulatedRecord);
        }
        get attributeGroup() {
            const collection = this.collectionCache.getCollection(UnitAttributesGroups.KEY, UnitAttributesGroups.Entry);
            return collection.find(entry => entry.groupName === this._attributeGroup);
        }
        get chariot() {
            const collection = this.collectionCache.getCollection(BattlefieldChariots.KEY, BattlefieldChariots.Entry);
            return collection.find(entry => entry.key === this._chariot);
        }
        get spottingAndHiding() {
            const collection = this.collectionCache.getCollection(SpottingAndHidingValues.KEY, SpottingAndHidingValues.Entry);
            return collection.find(entry => entry.key === this._spottingAndHiding);
        }
        get selectionVo() {
            const collection = this.collectionCache.getCollection(AudioVoSelectedSwitches.KEY, AudioVoSelectedSwitches.Entry);
            return collection.find(entry => entry.key === this._selectionVo);
        }
        get selectedVoSecondary() {
            const collection = this.collectionCache.getCollection(AudioVoSelectedSwitches.KEY, AudioVoSelectedSwitches.Entry);
            return collection.find(entry => entry.key === this._selectedVoSecondary);
        }
        get selectedVoTertiary() {
            const collection = this.collectionCache.getCollection(AudioVoSelectedSwitches.KEY, AudioVoSelectedSwitches.Entry);
            return collection.find(entry => entry.key === this._selectedVoTertiary);
        }
    }
    LandUnits.Entry = Entry;
})(LandUnits || (LandUnits = {}));

var ModelsOars;
(function (ModelsOars) {
    ModelsOars.KEY = new CollectionKey("models_oars");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.rigidModel = values["rigid_model"];
            this.leftRow = values["left_row"];
            this.leftEnd = values["left_end"];
            this.rightRow = values["right_row"];
            this.rightEnd = values["right_end"];
        }
    }
    ModelsOars.Entry = Entry;
})(ModelsOars || (ModelsOars = {}));

var ModelsNaval;
(function (ModelsNaval) {
    ModelsNaval.KEY = new CollectionKey("models_naval");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.logicFolder = values["logic_folder"];
            this.riggingFile = values["rigging_file"];
            this.destructionFile = values["destruction_file"];
            this.displayFolder = values["display_folder"];
            this._oarUpper = values["oar_upper"];
            this._oarMiddle = values["oar_middle"];
            this._oarLower = values["oar_lower"];
            this.selectionIndicatorShape = values["selection_indicator_shape"];
        }
        get oarUpper() {
            const collection = this.collectionCache.getCollection(ModelsOars.KEY, ModelsOars.Entry);
            return collection.find(entry => entry.key === this._oarUpper);
        }
        get oarMiddle() {
            const collection = this.collectionCache.getCollection(ModelsOars.KEY, ModelsOars.Entry);
            return collection.find(entry => entry.key === this._oarMiddle);
        }
        get oarLower() {
            const collection = this.collectionCache.getCollection(ModelsOars.KEY, ModelsOars.Entry);
            return collection.find(entry => entry.key === this._oarLower);
        }
    }
    ModelsNaval.Entry = Entry;
})(ModelsNaval || (ModelsNaval = {}));

var ShipDbs;
(function (ShipDbs) {
    ShipDbs.KEY = new CollectionKey("ship_dbs");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._spacing = values["spacing"];
            this._entity = values["entity"];
            this._model = values["model"];
        }
        get spacing() {
            const collection = this.collectionCache.getCollection(UnitSpacings.KEY, UnitSpacings.Entry);
            return collection.find(entry => entry.key === this._spacing);
        }
        get entity() {
            const collection = this.collectionCache.getCollection(BattleEntities.KEY, BattleEntities.Entry);
            return collection.find(entry => entry.key === this._entity);
        }
        get model() {
            const collection = this.collectionCache.getCollection(ModelsNaval.KEY, ModelsNaval.Entry);
            return collection.find(entry => entry.key === this._model);
        }
    }
    ShipDbs.Entry = Entry;
})(ShipDbs || (ShipDbs = {}));

var NavalWeaponsEnums;
(function (NavalWeaponsEnums) {
    NavalWeaponsEnums.KEY = new CollectionKey("naval_weapons_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.types = values["types"];
        }
    }
    NavalWeaponsEnums.Entry = Entry;
})(NavalWeaponsEnums || (NavalWeaponsEnums = {}));

var BattlefieldEnginesAutonomous;
(function (BattlefieldEnginesAutonomous) {
    BattlefieldEnginesAutonomous.KEY = new CollectionKey("battlefield_engines_autonomous");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._autonomousEngineType = values["autonomous_engine_type"];
            this._engineCrewEntity = values["engine_crew_entity"];
            this._engineCrewAnims = values["engine_crew_anims"];
            this.numAmmo = values["num_ammo"];
        }
        get autonomousEngineType() {
            const collection = this.collectionCache.getCollection(BattlefieldEngines.KEY, BattlefieldEngines.Entry);
            return collection.find(entry => entry.key === this._autonomousEngineType);
        }
        get engineCrewEntity() {
            const collection = this.collectionCache.getCollection(BattleEntities.KEY, BattleEntities.Entry);
            return collection.find(entry => entry.key === this._engineCrewEntity);
        }
        get engineCrewAnims() {
            const collection = this.collectionCache.getCollection(BattleAnimationsTable.KEY, BattleAnimationsTable.Entry);
            return collection.find(entry => entry.key === this._engineCrewAnims);
        }
    }
    BattlefieldEnginesAutonomous.Entry = Entry;
})(BattlefieldEnginesAutonomous || (BattlefieldEnginesAutonomous = {}));

var ModelsEntityWeapons;
(function (ModelsEntityWeapons) {
    ModelsEntityWeapons.KEY = new CollectionKey("models_entity_weapons");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.modelFile = values["model_file"];
            this.logicFile = values["logic_file"];
        }
    }
    ModelsEntityWeapons.Entry = Entry;
})(ModelsEntityWeapons || (ModelsEntityWeapons = {}));

var NavalWeapons;
(function (NavalWeapons) {
    NavalWeapons.KEY = new CollectionKey("naval_weapons");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._type = values["type"];
            this._autonomousEngine = values["autonomous_engine"];
            this._modelsEntityWeaponry = values["models_entity_weaponry"];
        }
        get type() {
            const collection = this.collectionCache.getCollection(NavalWeaponsEnums.KEY, NavalWeaponsEnums.Entry);
            return collection.find(entry => entry.types === this._type);
        }
        get autonomousEngine() {
            const collection = this.collectionCache.getCollection(BattlefieldEnginesAutonomous.KEY, BattlefieldEnginesAutonomous.Entry);
            return collection.find(entry => entry.key === this._autonomousEngine);
        }
        get modelsEntityWeaponry() {
            const collection = this.collectionCache.getCollection(ModelsEntityWeapons.KEY, ModelsEntityWeapons.Entry);
            return collection.find(entry => entry.key === this._modelsEntityWeaponry);
        }
    }
    NavalWeapons.Entry = Entry;
})(NavalWeapons || (NavalWeapons = {}));

var NavalUnits;
(function (NavalUnits) {
    NavalUnits.KEY = new CollectionKey("naval_units");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreenName = values["onscreen_name"];
            this._category = values["category"];
            this._class = values["class"];
            this._shortDescriptionText = values["short_description_text"];
            this._historicalDescriptionText = values["historical_description_text"];
            this._strengthsWeaknessesText = values["strengths_weaknesses_text"];
            this.campaignActionPoints = values["campaign_action_points"];
            this.unitTypeIcon = values["unit_type_icon"];
            this.supportsFirstPerson = !!values["supports_first_person"];
            this._ship = values["ship"];
            this._primaryNavalWeapon = values["primary_naval_weapon"];
            this._secondaryNavalWeapon = values["secondary_naval_weapon"];
            this.rankDepth = values["rank_depth"];
            this._attributeGroups = values["attribute_groups"];
            this.canBoard = !!values["can_board"];
            this.canRam = !!values["can_ram"];
            this.unitCard = values["unit_card"];
            this.isComposite = !!values["is_composite"];
            this.ignitionThreshold = values["ignition_threshold"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(UnitCategory.KEY, UnitCategory.Entry);
            return collection.find(entry => entry.key === this._category);
        }
        get class() {
            const collection = this.collectionCache.getCollection(UnitClass.KEY, UnitClass.Entry);
            return collection.find(entry => entry.key === this._class);
        }
        get shortDescriptionText() {
            const collection = this.collectionCache.getCollection(UnitDescriptionShortTexts.KEY, UnitDescriptionShortTexts.Entry);
            return collection.find(entry => entry.key === this._shortDescriptionText);
        }
        get historicalDescriptionText() {
            const collection = this.collectionCache.getCollection(UnitDescriptionHistoricalTexts.KEY, UnitDescriptionHistoricalTexts.Entry);
            return collection.find(entry => entry.key === this._historicalDescriptionText);
        }
        get strengthsWeaknessesText() {
            const collection = this.collectionCache.getCollection(UnitDescriptionStrengthsWeaknessesTexts.KEY, UnitDescriptionStrengthsWeaknessesTexts.Entry);
            return collection.find(entry => entry.key === this._strengthsWeaknessesText);
        }
        get ship() {
            const collection = this.collectionCache.getCollection(ShipDbs.KEY, ShipDbs.Entry);
            return collection.find(entry => entry.key === this._ship);
        }
        get primaryNavalWeapon() {
            const collection = this.collectionCache.getCollection(NavalWeapons.KEY, NavalWeapons.Entry);
            return collection.find(entry => entry.key === this._primaryNavalWeapon);
        }
        get secondaryNavalWeapon() {
            const collection = this.collectionCache.getCollection(NavalWeapons.KEY, NavalWeapons.Entry);
            return collection.find(entry => entry.key === this._secondaryNavalWeapon);
        }
        get attributeGroups() {
            const collection = this.collectionCache.getCollection(UnitAttributesGroups.KEY, UnitAttributesGroups.Entry);
            return collection.find(entry => entry.groupName === this._attributeGroups);
        }
    }
    NavalUnits.Entry = Entry;
})(NavalUnits || (NavalUnits = {}));

var UnitWeights;
(function (UnitWeights) {
    UnitWeights.KEY = new CollectionKey("unit_weights");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreenText = values["onscreen_text"];
        }
    }
    UnitWeights.Entry = Entry;
})(UnitWeights || (UnitWeights = {}));

var UnitCastes;
(function (UnitCastes) {
    UnitCastes.KEY = new CollectionKey("unit_castes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.caste = values["caste"];
            this.localisedName = values["localised_name"];
            this.sortPriority = values["sort_priority"];
        }
    }
    UnitCastes.Entry = Entry;
})(UnitCastes || (UnitCastes = {}));

var BuildingSuperchains;
(function (BuildingSuperchains) {
    BuildingSuperchains.KEY = new CollectionKey("building_superchains");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.maxInstancesPerRegion = values["max_instances_per_region"];
        }
    }
    BuildingSuperchains.Entry = Entry;
})(BuildingSuperchains || (BuildingSuperchains = {}));

var EncyclopediaBuildingChainGroups;
(function (EncyclopediaBuildingChainGroups) {
    EncyclopediaBuildingChainGroups.KEY = new CollectionKey("encyclopedia_building_chain_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.groupName = values["group_name"];
            this.localisedName = values["localised_name"];
            this.order = values["order"];
        }
    }
    EncyclopediaBuildingChainGroups.Entry = Entry;
})(EncyclopediaBuildingChainGroups || (EncyclopediaBuildingChainGroups = {}));

var BuildingChains;
(function (BuildingChains) {
    BuildingChains.KEY = new CollectionKey("building_chains");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.techCategoryTab = values["tech_category_tab"];
            this.techCategoryPosition = values["tech_category_position"];
            this.chainCategory = values["chain_category"];
            this.chainTooltip = values["chain_tooltip"];
            this.inEncyclopedia = !!values["in_encyclopedia"];
            this._buildingSuperchain = values["building_superchain"];
            this.encyclopediaDescription = values["encyclopedia_description"];
            this._encyclopediaGroup = values["encyclopedia_group"];
            this.encyclopediaIncludeInIndex = !!values["encyclopedia_include_in_index"];
            this.encyclopediaName = values["encyclopedia_name"];
        }
        get buildingSuperchain() {
            const collection = this.collectionCache.getCollection(BuildingSuperchains.KEY, BuildingSuperchains.Entry);
            return collection.find(entry => entry.key === this._buildingSuperchain);
        }
        get encyclopediaGroup() {
            const collection = this.collectionCache.getCollection(EncyclopediaBuildingChainGroups.KEY, EncyclopediaBuildingChainGroups.Entry);
            return collection.find(entry => entry.groupName === this._encyclopediaGroup);
        }
    }
    BuildingChains.Entry = Entry;
})(BuildingChains || (BuildingChains = {}));

var CommodityUnitNames;
(function (CommodityUnitNames) {
    CommodityUnitNames.KEY = new CollectionKey("commodity_unit_names");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.unit = values["unit"];
            this.plural = values["plural"];
            this.singular = values["singular"];
        }
    }
    CommodityUnitNames.Entry = Entry;
})(CommodityUnitNames || (CommodityUnitNames = {}));

var Slots;
(function (Slots) {
    Slots.KEY = new CollectionKey("slots");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.slot = values["slot"];
            this.isFarm = !!values["is_farm"];
            this.isResource = !!values["is_resource"];
            this.isTown = !!values["is_town"];
            this.isPort = !!values["is_port"];
            this.supportsBuildingLevelConversion = !!values["supports_building_level_conversion"];
        }
    }
    Slots.Entry = Entry;
})(Slots || (Slots = {}));

var Resources;
(function (Resources) {
    Resources.KEY = new CollectionKey("resources");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.iconFilepath = values["icon_filepath"];
            this.key = values["key"];
            this.onscreenText = values["onscreen_text"];
            this._unit = values["unit"];
            this._slotBed = values["slot_bed"];
            this.tradeValue = values["trade_value"];
            this.strategicValue = values["strategic_value"];
            this.description = values["description"];
            this.longDescription = values["long_description"];
            this.inEncyclopedia = !!values["in_encyclopedia"];
        }
        get unit() {
            const collection = this.collectionCache.getCollection(CommodityUnitNames.KEY, CommodityUnitNames.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
        get slotBed() {
            const collection = this.collectionCache.getCollection(Slots.KEY, Slots.Entry);
            return collection.find(entry => entry.slot === this._slotBed);
        }
    }
    Resources.Entry = Entry;
})(Resources || (Resources = {}));

var Commodities;
(function (Commodities) {
    Commodities.KEY = new CollectionKey("commodities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this.baselinePricePerUnit = values["baseline_price_per_unit"];
            this.priceElasticityOfDemand = values["price_elasticity_of_demand"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(Resources.KEY, Resources.Entry);
            return collection.find(entry => entry.key === this._key);
        }
    }
    Commodities.Entry = Entry;
})(Commodities || (Commodities = {}));

var BuildingInstances;
(function (BuildingInstances) {
    BuildingInstances.KEY = new CollectionKey("building_instances");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.numInstances = values["num_instances"];
        }
    }
    BuildingInstances.Entry = Entry;
})(BuildingInstances || (BuildingInstances = {}));

var AudioCampaignBuildingEnums;
(function (AudioCampaignBuildingEnums) {
    AudioCampaignBuildingEnums.KEY = new CollectionKey("audio_campaign_building_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    AudioCampaignBuildingEnums.Entry = Entry;
})(AudioCampaignBuildingEnums || (AudioCampaignBuildingEnums = {}));

var BuildingLevels;
(function (BuildingLevels) {
    BuildingLevels.KEY = new CollectionKey("building_levels");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.levelName = values["level_name"];
            this._chain = values["chain"];
            this.level = values["level"];
            this.condition = values["condition"];
            this.onlyInCapital = !!values["only_in_capital"];
            this.createTime = values["create_time"];
            this.createCost = values["create_cost"];
            this.upkeepCost = values["upkeep_cost"];
            this.demolitionCost = values["demolition_cost"];
            this.zoc = values["zoc"];
            this.lowerHappiness = values["lower_happiness"];
            this.upperHappiness = values["upper_happiness"];
            this.repression = values["repression"];
            this.gdp = values["gdp"];
            this.townWealthGrowth = values["town_wealth_growth"];
            this.popChange = values["pop_change"];
            this.maxpopChange = values["maxpop_change"];
            this._commodity = values["commodity"];
            this.commodityVol = values["commodity_vol"];
            this._buildingCategory = values["building_category"];
            this._govTypeKey = values["gov_type_key"];
            this.militaryPrestige = values["military_prestige"];
            this.navalPrestige = values["naval_prestige"];
            this.economicPrestige = values["economic_prestige"];
            this.enlightenmentPrestige = values["enlightenment_prestige"];
            this.destructionTerminator = !!values["destruction_terminator"];
            this.factionUnique = !!values["faction_unique"];
            this._religionRequirement = values["religion_requirement"];
            this._firstInWorldBundle = values["first_in_world_bundle"];
            this._resourceRequirement = values["resource_requirement"];
            this._workingModel = values["working_model"];
            this.uniqueIndex = values["unique_index"];
            this.canConvert = !!values["can_convert"];
            this._buildingInstanceKey = values["building_instance_key"];
            this._audioBuildingType = values["audio_building_type"];
            this.shouldShowBuildingLevelInUiForTechnology = !!values["should_show_building_level_in_ui_for_technology"];
            this.isNew = !!values["is_new"];
        }
        get chain() {
            const collection = this.collectionCache.getCollection(BuildingChains.KEY, BuildingChains.Entry);
            return collection.find(entry => entry.key === this._chain);
        }
        get commodity() {
            const collection = this.collectionCache.getCollection(Commodities.KEY, Commodities.Entry);
            return collection.find(entry => entry._key === this._commodity);
        }
        get religionRequirement() {
            const collection = this.collectionCache.getCollection(Religions.KEY, Religions.Entry);
            return collection.find(entry => entry.religionKey === this._religionRequirement);
        }
        get firstInWorldBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles.KEY, EffectBundles.Entry);
            return collection.find(entry => entry.key === this._firstInWorldBundle);
        }
        get resourceRequirement() {
            const collection = this.collectionCache.getCollection(Resources.KEY, Resources.Entry);
            return collection.find(entry => entry.key === this._resourceRequirement);
        }
        get workingModel() {
            const collection = this.collectionCache.getCollection(WarscapeRigid.KEY, WarscapeRigid.Entry);
            return collection.find(entry => entry.key === this._workingModel);
        }
        get buildingInstanceKey() {
            const collection = this.collectionCache.getCollection(BuildingInstances.KEY, BuildingInstances.Entry);
            return collection.find(entry => entry.key === this._buildingInstanceKey);
        }
        get audioBuildingType() {
            const collection = this.collectionCache.getCollection(AudioCampaignBuildingEnums.KEY, AudioCampaignBuildingEnums.Entry);
            return collection.find(entry => entry.key === this._audioBuildingType);
        }
    }
    BuildingLevels.Entry = Entry;
})(BuildingLevels || (BuildingLevels = {}));

var RegionUnitResources;
(function (RegionUnitResources) {
    RegionUnitResources.KEY = new CollectionKey("region_unit_resources");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.string = values["string"];
        }
    }
    RegionUnitResources.Entry = Entry;
})(RegionUnitResources || (RegionUnitResources = {}));

var BattleTerrainFarms;
(function (BattleTerrainFarms) {
    BattleTerrainFarms.KEY = new CollectionKey("battle_terrain_farms");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.farm = values["farm"];
            this.tileModel = values["tile_model"];
            this.colourMapModel = values["colour_map_model"];
            this.blendMapModel = values["blend_map_model"];
            this.grassMapModel = values["grass_map_model"];
            this.alternateColourMapModel = values["alternate_colour_map_model"];
            this.alternateBlendMapModel = values["alternate_blend_map_model"];
            this.alternateGrassMapModel = values["alternate_grass_map_model"];
            this.roadColourMapModel = values["road_colour_map_model"];
            this.roadBlendMapModel = values["road_blend_map_model"];
            this.roadGrassMapModel = values["road_grass_map_model"];
            this.tileMap = values["tile_map"];
            this.wallTexture = values["wall_texture"];
            this._wallEnd = values["wall_end"];
            this.wallCrossSection = values["wall_cross_section"];
        }
        get wallEnd() {
            const collection = this.collectionCache.getCollection(WarscapeRigid.KEY, WarscapeRigid.Entry);
            return collection.find(entry => entry.key === this._wallEnd);
        }
    }
    BattleTerrainFarms.Entry = Entry;
})(BattleTerrainFarms || (BattleTerrainFarms = {}));

var CulturesSubcultures;
(function (CulturesSubcultures) {
    CulturesSubcultures.KEY = new CollectionKey("cultures_subcultures");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.subculture = values["subculture"];
            this._culture = values["culture"];
            this.index = values["index"];
            this._farm = values["farm"];
            this.name = values["name"];
            this.confederationScreenName = values["confederation_screen_name"];
            this.confederationSummaryName = values["confederation_summary_name"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get farm() {
            const collection = this.collectionCache.getCollection(BattleTerrainFarms.KEY, BattleTerrainFarms.Entry);
            return collection.find(entry => entry.farm === this._farm);
        }
    }
    CulturesSubcultures.Entry = Entry;
})(CulturesSubcultures || (CulturesSubcultures = {}));

var AudioVoActors;
(function (AudioVoActors) {
    AudioVoActors.KEY = new CollectionKey("audio_vo_actors");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    AudioVoActors.Entry = Entry;
})(AudioVoActors || (AudioVoActors = {}));

var AudioVoActorGroups;
(function (AudioVoActorGroups) {
    AudioVoActorGroups.KEY = new CollectionKey("audio_vo_actor_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._actor1 = values["actor_1"];
            this._actor2 = values["actor_2"];
            this._actor3 = values["actor_3"];
            this._actor4 = values["actor_4"];
            this._actor5 = values["actor_5"];
            this._actor6 = values["actor_6"];
            this._actor7 = values["actor_7"];
            this._actor8 = values["actor_8"];
            this._actor9 = values["actor_9"];
            this._actor10 = values["actor_10"];
            this._actor11 = values["actor_11"];
            this._actor12 = values["actor_12"];
            this._actor13 = values["actor_13"];
            this._actor14 = values["actor_14"];
            this._actor15 = values["actor_15"];
        }
        get actor1() {
            const collection = this.collectionCache.getCollection(AudioVoActors.KEY, AudioVoActors.Entry);
            return collection.find(entry => entry.key === this._actor1);
        }
        get actor2() {
            const collection = this.collectionCache.getCollection(AudioVoActors.KEY, AudioVoActors.Entry);
            return collection.find(entry => entry.key === this._actor2);
        }
        get actor3() {
            const collection = this.collectionCache.getCollection(AudioVoActors.KEY, AudioVoActors.Entry);
            return collection.find(entry => entry.key === this._actor3);
        }
        get actor4() {
            const collection = this.collectionCache.getCollection(AudioVoActors.KEY, AudioVoActors.Entry);
            return collection.find(entry => entry.key === this._actor4);
        }
        get actor5() {
            const collection = this.collectionCache.getCollection(AudioVoActors.KEY, AudioVoActors.Entry);
            return collection.find(entry => entry.key === this._actor5);
        }
        get actor6() {
            const collection = this.collectionCache.getCollection(AudioVoActors.KEY, AudioVoActors.Entry);
            return collection.find(entry => entry.key === this._actor6);
        }
        get actor7() {
            const collection = this.collectionCache.getCollection(AudioVoActors.KEY, AudioVoActors.Entry);
            return collection.find(entry => entry.key === this._actor7);
        }
        get actor8() {
            const collection = this.collectionCache.getCollection(AudioVoActors.KEY, AudioVoActors.Entry);
            return collection.find(entry => entry.key === this._actor8);
        }
        get actor9() {
            const collection = this.collectionCache.getCollection(AudioVoActors.KEY, AudioVoActors.Entry);
            return collection.find(entry => entry.key === this._actor9);
        }
        get actor10() {
            const collection = this.collectionCache.getCollection(AudioVoActors.KEY, AudioVoActors.Entry);
            return collection.find(entry => entry.key === this._actor10);
        }
        get actor11() {
            const collection = this.collectionCache.getCollection(AudioVoActors.KEY, AudioVoActors.Entry);
            return collection.find(entry => entry.key === this._actor11);
        }
        get actor12() {
            const collection = this.collectionCache.getCollection(AudioVoActors.KEY, AudioVoActors.Entry);
            return collection.find(entry => entry.key === this._actor12);
        }
        get actor13() {
            const collection = this.collectionCache.getCollection(AudioVoActors.KEY, AudioVoActors.Entry);
            return collection.find(entry => entry.key === this._actor13);
        }
        get actor14() {
            const collection = this.collectionCache.getCollection(AudioVoActors.KEY, AudioVoActors.Entry);
            return collection.find(entry => entry.key === this._actor14);
        }
        get actor15() {
            const collection = this.collectionCache.getCollection(AudioVoActors.KEY, AudioVoActors.Entry);
            return collection.find(entry => entry.key === this._actor15);
        }
    }
    AudioVoActorGroups.Entry = Entry;
})(AudioVoActorGroups || (AudioVoActorGroups = {}));

var MainUnits;
(function (MainUnits) {
    MainUnits.KEY = new CollectionKey("main_units");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.unit = values["unit"];
            this._landUnit = values["land_unit"];
            this.numMen = values["num_men"];
            this._navalUnit = values["naval_unit"];
            this.numShips = values["num_ships"];
            this.minMenPerShip = values["min_men_per_ship"];
            this.maxMenPerShip = values["max_men_per_ship"];
            this.isNaval = !!values["is_naval"];
            this._weight = values["weight"];
            this.recruitmentCost = values["recruitment_cost"];
            this.upkeepCost = values["upkeep_cost"];
            this.createTime = values["create_time"];
            this.campaignCap = values["campaign_cap"];
            this.multiplayerCost = values["multiplayer_cost"];
            this.multiplayerCap = values["multiplayer_cap"];
            this._caste = values["caste"];
            this.prestige = values["prestige"];
            this._additionalBuildingRequirement = values["additional_building_requirement"];
            this._religionRequirement = values["religion_requirement"];
            this.recruitmentMovie = values["recruitment_movie"];
            this.campaignTotalCap = values["campaign_total_cap"];
            this._resourceRequirement = values["resource_requirement"];
            this.worldLeaderOnly = !!values["world_leader_only"];
            this.canTrade = !!values["can_trade"];
            this.specialEditionMask = values["special_edition_mask"];
            this.uniqueIndex = values["unique_index"];
            this.inEncyclopedia = !!values["in_encyclopedia"];
            this._regionUnitResourceRequirement = values["region_unit_resource_requirement"];
            this._audioLanguage = values["audio_language"];
            this._audioVoActorGroup = values["audio_vo_actor_group"];
        }
        get landUnit() {
            const collection = this.collectionCache.getCollection(LandUnits.KEY, LandUnits.Entry);
            return collection.find(entry => entry.key === this._landUnit);
        }
        get navalUnit() {
            const collection = this.collectionCache.getCollection(NavalUnits.KEY, NavalUnits.Entry);
            return collection.find(entry => entry.key === this._navalUnit);
        }
        get weight() {
            const collection = this.collectionCache.getCollection(UnitWeights.KEY, UnitWeights.Entry);
            return collection.find(entry => entry.key === this._weight);
        }
        get caste() {
            const collection = this.collectionCache.getCollection(UnitCastes.KEY, UnitCastes.Entry);
            return collection.find(entry => entry.caste === this._caste);
        }
        get additionalBuildingRequirement() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._additionalBuildingRequirement);
        }
        get religionRequirement() {
            const collection = this.collectionCache.getCollection(Religions.KEY, Religions.Entry);
            return collection.find(entry => entry.religionKey === this._religionRequirement);
        }
        get resourceRequirement() {
            const collection = this.collectionCache.getCollection(Resources.KEY, Resources.Entry);
            return collection.find(entry => entry.key === this._resourceRequirement);
        }
        get regionUnitResourceRequirement() {
            const collection = this.collectionCache.getCollection(RegionUnitResources.KEY, RegionUnitResources.Entry);
            return collection.find(entry => entry.key === this._regionUnitResourceRequirement);
        }
        get audioLanguage() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._audioLanguage);
        }
        get audioVoActorGroup() {
            const collection = this.collectionCache.getCollection(AudioVoActorGroups.KEY, AudioVoActorGroups.Entry);
            return collection.find(entry => entry.key === this._audioVoActorGroup);
        }
    }
    MainUnits.Entry = Entry;
})(MainUnits || (MainUnits = {}));

var MovieEventStrings;
(function (MovieEventStrings) {
    MovieEventStrings.KEY = new CollectionKey("movie_event_strings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.event = values["event"];
            this._culture = values["culture"];
            this.title = values["title"];
            this.movie = values["movie"];
            this.id = values["id"];
        }
    }
    MovieEventStrings.Entry = Entry;
})(MovieEventStrings || (MovieEventStrings = {}));

var Genders;
(function (Genders) {
    Genders.KEY = new CollectionKey("genders");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.gender = values["gender"];
            this.onscreen = values["onscreen"];
        }
    }
    Genders.Entry = Entry;
})(Genders || (Genders = {}));

var AgentCultureDetails;
(function (AgentCultureDetails) {
    AgentCultureDetails.KEY = new CollectionKey("agent_culture_details");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._agent = values["agent"];
            this._culture = values["culture"];
            this.onscreenName = values["onscreen_name"];
            this._associatedUnit = values["associated_unit"];
            this.descriptionText = values["description_text"];
            this.season = values["season"];
            this.level = values["level"];
            this.equipmentTheme = values["equipment_theme"];
            this._agentRecruitedMovie = values["agent_recruited_movie"];
            this._gender = values["gender"];
        }
        get agent() {
            const collection = this.collectionCache.getCollection(Agents.KEY, Agents.Entry);
            return collection.find(entry => entry.key === this._agent);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get associatedUnit() {
            const collection = this.collectionCache.getCollection(MainUnits.KEY, MainUnits.Entry);
            return collection.find(entry => entry.unit === this._associatedUnit);
        }
        get agentRecruitedMovie() {
            const collection = this.collectionCache.getCollection(MovieEventStrings.KEY, MovieEventStrings.Entry);
            return collection.find(entry => entry.event === this._agentRecruitedMovie);
        }
        get gender() {
            const collection = this.collectionCache.getCollection(Genders.KEY, Genders.Entry);
            return collection.find(entry => entry.gender === this._gender);
        }
    }
    AgentCultureDetails.Entry = Entry;
})(AgentCultureDetails || (AgentCultureDetails = {}));

var AgentLocalisations;
(function (AgentLocalisations) {
    AgentLocalisations.KEY = new CollectionKey("agent_localisations");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.text = values["text"];
        }
    }
    AgentLocalisations.Entry = Entry;
})(AgentLocalisations || (AgentLocalisations = {}));

var NamesGroups;
(function (NamesGroups) {
    NamesGroups.KEY = new CollectionKey("names_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["ID"];
            this.description = values["Description"];
            this.key = values["key"];
        }
    }
    NamesGroups.Entry = Entry;
})(NamesGroups || (NamesGroups = {}));

var GroupingsMilitary;
(function (GroupingsMilitary) {
    GroupingsMilitary.KEY = new CollectionKey("groupings_military");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.militaryGroup = values["military_group"];
        }
    }
    GroupingsMilitary.Entry = Entry;
})(GroupingsMilitary || (GroupingsMilitary = {}));

var PreBattleSpeechParametersEnum;
(function (PreBattleSpeechParametersEnum) {
    PreBattleSpeechParametersEnum.KEY = new CollectionKey("pre_battle_speech_parameters_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    PreBattleSpeechParametersEnum.Entry = Entry;
})(PreBattleSpeechParametersEnum || (PreBattleSpeechParametersEnum = {}));

var Factions;
(function (Factions) {
    Factions.KEY = new CollectionKey("factions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.index = values["index"];
            this._subculture = values["subculture"];
            this.category = values["category"];
            this.screenName = values["screen_name"];
            this.screenNameWhenRebels = values["screen_name_when_rebels"];
            this.screenAdjective = values["screen_adjective"];
            this._nameGroup = values["name_group"];
            this.skin = values["skin"];
            this.isRebel = !!values["is_rebel"];
            this.iconsPathUnits = values["icons_path_units"];
            this.flagsPath = values["flags_path"];
            this.republicanFlagPath = values["republican_flag_path"];
            this.sameGovTypeRevolutionFlagPath = values["same_gov_type_revolution_flag_path"];
            this.primaryColourR = values["primary_colour_r"];
            this.primaryColourG = values["primary_colour_g"];
            this.primaryColourB = values["primary_colour_b"];
            this.altPrimaryColourR = values["alt_primary_colour_r"];
            this.altPrimaryColourG = values["alt_primary_colour_g"];
            this.altPrimaryColourB = values["alt_primary_colour_b"];
            this.secondaryColourR = values["secondary_colour_r"];
            this.secondaryColourG = values["secondary_colour_g"];
            this.secondaryColourB = values["secondary_colour_b"];
            this.altSecondaryColourR = values["alt_secondary_colour_r"];
            this.altSecondaryColourG = values["alt_secondary_colour_g"];
            this.altSecondaryColourB = values["alt_secondary_colour_b"];
            this.rebelColourR = values["rebel_colour_r"];
            this.rebelColourG = values["rebel_colour_g"];
            this.rebelColourB = values["rebel_colour_b"];
            this.uniformColourR = values["uniform_colour_r"];
            this.uniformColourG = values["uniform_colour_g"];
            this.uniformColourB = values["uniform_colour_b"];
            this.altUniformColourR = values["alt_uniform_colour_r"];
            this.altUniformColourG = values["alt_uniform_colour_g"];
            this.altUniformColourB = values["alt_uniform_colour_b"];
            this._militaryGroup = values["military_group"];
            this._settlerRebellionFaction = values["settler_rebellion_faction"];
            this.mpAvailable = !!values["mp_available"];
            this.mpAvailableNaval = !!values["mp_available_naval"];
            this._movieDeathEvent = values["movie_death_event"];
            this.mpUseRepublicEarly = !!values["mp_use_republic_early"];
            this.mpUseRepublicLate = !!values["mp_use_republic_late"];
            this._unitRegimentNameGroup = values["unit_regiment_name_group"];
            this._shipNameGroup = values["ship_name_group"];
            this.uiSkin = values["ui_skin"];
            this.attackDesc = values["attack_desc"];
            this.defendDesc = values["defend_desc"];
            this.mpStatsName = values["mp_stats_name"];
            this._preBattleSpeechParameter = values["pre_battle_speech_parameter"];
            this.screenNameWhenShogun = values["screen_name_when_shogun"];
            this.clanSummaryName = values["clan_summary_name"];
            this.clanSummaryNameWhenShogun = values["clan_summary_name_when_shogun"];
            this.canBeRegionless = !!values["can_be_regionless"];
            this.cardColourR = values["card_colour_r"];
            this.cardColourG = values["card_colour_g"];
            this.cardColourB = values["card_colour_b"];
            this._diplomacyCulture = values["diplomacy_culture"];
            this.senatorTotal = values["senator_total"];
            this.senatorTextNOutOfN = values["senator_text_n_out_of_n"];
            this.senatorTextLoseN = values["senator_text_lose_n"];
            this.senatorTextLose1 = values["senator_text_lose_1"];
            this.senatorTextGainN = values["senator_text_gain_n"];
            this.senatorTextGain1 = values["senator_text_gain_1"];
            this.usesLegionNames = !!values["uses_legion_names"];
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
        get nameGroup() {
            const collection = this.collectionCache.getCollection(NamesGroups.KEY, NamesGroups.Entry);
            return collection.find(entry => entry.key === this._nameGroup);
        }
        get militaryGroup() {
            const collection = this.collectionCache.getCollection(GroupingsMilitary.KEY, GroupingsMilitary.Entry);
            return collection.find(entry => entry.militaryGroup === this._militaryGroup);
        }
        get unitRegimentNameGroup() {
            const collection = this.collectionCache.getCollection(NamesGroups.KEY, NamesGroups.Entry);
            return collection.find(entry => entry.key === this._unitRegimentNameGroup);
        }
        get shipNameGroup() {
            const collection = this.collectionCache.getCollection(NamesGroups.KEY, NamesGroups.Entry);
            return collection.find(entry => entry.key === this._shipNameGroup);
        }
        get preBattleSpeechParameter() {
            const collection = this.collectionCache.getCollection(PreBattleSpeechParametersEnum.KEY, PreBattleSpeechParametersEnum.Entry);
            return collection.find(entry => entry.key === this._preBattleSpeechParameter);
        }
        get diplomacyCulture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._diplomacyCulture);
        }
    }
    Factions.Entry = Entry;
})(Factions || (Factions = {}));

var AgentStringFactionOverrides;
(function (AgentStringFactionOverrides) {
    AgentStringFactionOverrides.KEY = new CollectionKey("agent_string_faction_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._agent = values["agent"];
            this._faction = values["faction"];
            this._gender = values["gender"];
            this.nameOverride = values["name_override"];
            this.descriptionOverride = values["description_override"];
            this.iconPath = values["icon_path"];
        }
        get agent() {
            const collection = this.collectionCache.getCollection(Agents.KEY, Agents.Entry);
            return collection.find(entry => entry.key === this._agent);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get gender() {
            const collection = this.collectionCache.getCollection(Genders.KEY, Genders.Entry);
            return collection.find(entry => entry.gender === this._gender);
        }
    }
    AgentStringFactionOverrides.Entry = Entry;
})(AgentStringFactionOverrides || (AgentStringFactionOverrides = {}));

var AgentStringSubcultureOverrides;
(function (AgentStringSubcultureOverrides) {
    AgentStringSubcultureOverrides.KEY = new CollectionKey("agent_string_subculture_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._agent = values["agent"];
            this._subculture = values["subculture"];
            this._gender = values["gender"];
            this.nameOverride = values["name_override"];
            this.descriptionOverride = values["description_override"];
            this.iconPath = values["icon_path"];
        }
        get agent() {
            const collection = this.collectionCache.getCollection(Agents.KEY, Agents.Entry);
            return collection.find(entry => entry.key === this._agent);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
        get gender() {
            const collection = this.collectionCache.getCollection(Genders.KEY, Genders.Entry);
            return collection.find(entry => entry.gender === this._gender);
        }
    }
    AgentStringSubcultureOverrides.Entry = Entry;
})(AgentStringSubcultureOverrides || (AgentStringSubcultureOverrides = {}));

var AgentSubcultureGenderOverrides;
(function (AgentSubcultureGenderOverrides) {
    AgentSubcultureGenderOverrides.KEY = new CollectionKey("agent_subculture_gender_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._agent = values["agent"];
            this._subculture = values["subculture"];
            this._gender = values["gender"];
        }
        get agent() {
            const collection = this.collectionCache.getCollection(Agents.KEY, Agents.Entry);
            return collection.find(entry => entry.key === this._agent);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
        get gender() {
            const collection = this.collectionCache.getCollection(Genders.KEY, Genders.Entry);
            return collection.find(entry => entry.gender === this._gender);
        }
    }
    AgentSubcultureGenderOverrides.Entry = Entry;
})(AgentSubcultureGenderOverrides || (AgentSubcultureGenderOverrides = {}));

var AgentToAgentAbilities;
(function (AgentToAgentAbilities) {
    AgentToAgentAbilities.KEY = new CollectionKey("agent_to_agent_abilities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._agent = values["agent"];
            this._ability = values["ability"];
            this.localisedAbilityName = values["localised_ability_name"];
            this.localisedAbilityDescription = values["localised_ability_description"];
        }
        get agent() {
            const collection = this.collectionCache.getCollection(Agents.KEY, Agents.Entry);
            return collection.find(entry => entry.key === this._agent);
        }
        get ability() {
            const collection = this.collectionCache.getCollection(Abilities.KEY, Abilities.Entry);
            return collection.find(entry => entry.ability === this._ability);
        }
    }
    AgentToAgentAbilities.Entry = Entry;
})(AgentToAgentAbilities || (AgentToAgentAbilities = {}));

var AgentToAgentAttributes;
(function (AgentToAgentAttributes) {
    AgentToAgentAttributes.KEY = new CollectionKey("agent_to_agent_attributes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._attribute = values["attribute"];
            this._agent = values["agent"];
            this.defaultValue = values["default_value"];
        }
        get attribute() {
            const collection = this.collectionCache.getCollection(AgentAttributes.KEY, AgentAttributes.Entry);
            return collection.find(entry => entry.key === this._attribute);
        }
        get agent() {
            const collection = this.collectionCache.getCollection(Agents.KEY, Agents.Entry);
            return collection.find(entry => entry.key === this._agent);
        }
    }
    AgentToAgentAttributes.Entry = Entry;
})(AgentToAgentAttributes || (AgentToAgentAttributes = {}));

var AgentUniforms;
(function (AgentUniforms) {
    AgentUniforms.KEY = new CollectionKey("agent_uniforms");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.uniformName = values["uniform_name"];
            this._filename = values["filename"];
            this._battleFilename = values["battle_filename"];
            this._campaignPortholeFilename = values["campaign_porthole_filename"];
            this._audioArmourType = values["audio_armour_type"];
            this._audioWeaponType = values["audio_weapon_type"];
            this._audioShieldType = values["audio_shield_type"];
            this.campaignPoliticianFilename = values["campaign_politician_filename"];
        }
        get filename() {
            const collection = this.collectionCache.getCollection(Variants.KEY, Variants.Entry);
            return collection.find(entry => entry.variantName === this._filename);
        }
        get battleFilename() {
            const collection = this.collectionCache.getCollection(Variants.KEY, Variants.Entry);
            return collection.find(entry => entry.variantName === this._battleFilename);
        }
        get campaignPortholeFilename() {
            const collection = this.collectionCache.getCollection(Variants.KEY, Variants.Entry);
            return collection.find(entry => entry.variantName === this._campaignPortholeFilename);
        }
        get audioArmourType() {
            const collection = this.collectionCache.getCollection(AudioMaterialsEnums.KEY, AudioMaterialsEnums.Entry);
            return collection.find(entry => entry.key === this._audioArmourType);
        }
        get audioWeaponType() {
            const collection = this.collectionCache.getCollection(AudioMaterialsEnums.KEY, AudioMaterialsEnums.Entry);
            return collection.find(entry => entry.key === this._audioWeaponType);
        }
        get audioShieldType() {
            const collection = this.collectionCache.getCollection(AudioMaterialsEnums.KEY, AudioMaterialsEnums.Entry);
            return collection.find(entry => entry.key === this._audioShieldType);
        }
    }
    AgentUniforms.Entry = Entry;
})(AgentUniforms || (AgentUniforms = {}));

var AgentVoiceEventsJunctions;
(function (AgentVoiceEventsJunctions) {
    AgentVoiceEventsJunctions.KEY = new CollectionKey("agent_voice_events_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._agentKey = values["agent_key"];
            this._voiceEventKey = values["voice_event_key"];
            this._soundEventKey = values["sound_event_key"];
        }
    }
    AgentVoiceEventsJunctions.Entry = Entry;
})(AgentVoiceEventsJunctions || (AgentVoiceEventsJunctions = {}));

var BattleCinematicEventCategories;
(function (BattleCinematicEventCategories) {
    BattleCinematicEventCategories.KEY = new CollectionKey("battle_cinematic_event_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    BattleCinematicEventCategories.Entry = Entry;
})(BattleCinematicEventCategories || (BattleCinematicEventCategories = {}));

var BattleCinematicEvents;
(function (BattleCinematicEvents) {
    BattleCinematicEvents.KEY = new CollectionKey("battle_cinematic_events");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.filename = values["filename"];
            this.priority = values["priority"];
            this.level = values["level"];
            this.windowIn = values["window_in"];
            this.windowOut = values["window_out"];
            this.repeatWaitMs = values["repeat_wait_ms"];
            this._eventCategory = values["event_category"];
            this.timeAfterEvent = values["time_after_event"];
        }
        get eventCategory() {
            const collection = this.collectionCache.getCollection(BattleCinematicEventCategories.KEY, BattleCinematicEventCategories.Entry);
            return collection.find(entry => entry.key === this._eventCategory);
        }
    }
    BattleCinematicEvents.Entry = Entry;
})(BattleCinematicEvents || (BattleCinematicEvents = {}));

var AideDeCampSpeeches;
(function (AideDeCampSpeeches) {
    AideDeCampSpeeches.KEY = new CollectionKey("aide_de_camp_speeches");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.text = values["text"];
            this.pictureInPicture = !!values["picture_in_picture"];
            this.offsetAngle = values["offset_angle"];
            this.offsetRange = values["offset_range"];
            this.circumventCooldown = !!values["circumvent_cooldown"];
            this._cinematicEvent = values["cinematic_event"];
        }
        get cinematicEvent() {
            const collection = this.collectionCache.getCollection(BattleCinematicEvents.KEY, BattleCinematicEvents.Entry);
            return collection.find(entry => entry.key === this._cinematicEvent);
        }
    }
    AideDeCampSpeeches.Entry = Entry;
})(AideDeCampSpeeches || (AideDeCampSpeeches = {}));

var AmbientBattlefieldObjects;
(function (AmbientBattlefieldObjects) {
    AmbientBattlefieldObjects.KEY = new CollectionKey("ambient_battlefield_objects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.ambientBattlefieldObject = values["ambient_battlefield_object"];
        }
    }
    AmbientBattlefieldObjects.Entry = Entry;
})(AmbientBattlefieldObjects || (AmbientBattlefieldObjects = {}));

var Climates;
(function (Climates) {
    Climates.KEY = new CollectionKey("climates");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.climateType = values["climate_type"];
            this.colourIndex = values["colour_index"];
            this.coniferLine = values["conifer_line"];
            this.treeLine = values["tree_line"];
            this.isLand = !!values["is_land"];
        }
    }
    Climates.Entry = Entry;
})(Climates || (Climates = {}));

var AmbientBattlefieldObjectsJunc;
(function (AmbientBattlefieldObjectsJunc) {
    AmbientBattlefieldObjectsJunc.KEY = new CollectionKey("ambient_battlefield_objects_junc");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._climate = values["climate"];
            this._season = values["season"];
            this._ambientBattlefieldObject = values["ambient_battlefield_object"];
        }
        get climate() {
            const collection = this.collectionCache.getCollection(Climates.KEY, Climates.Entry);
            return collection.find(entry => entry.climateType === this._climate);
        }
    }
    AmbientBattlefieldObjectsJunc.Entry = Entry;
})(AmbientBattlefieldObjectsJunc || (AmbientBattlefieldObjectsJunc = {}));

var AncillaryInfo;
(function (AncillaryInfo) {
    AncillaryInfo.KEY = new CollectionKey("ancillary_info");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.ancillary = values["ancillary"];
            this.historicalExample = values["historical_example"];
            this.author = values["author"];
            this.comment = values["comment"];
        }
    }
    AncillaryInfo.Entry = Entry;
})(AncillaryInfo || (AncillaryInfo = {}));

var AncillaryTypes;
(function (AncillaryTypes) {
    AncillaryTypes.KEY = new CollectionKey("ancillary_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.type = values["type"];
            this.uiIcon = values["ui_icon"];
        }
    }
    AncillaryTypes.Entry = Entry;
})(AncillaryTypes || (AncillaryTypes = {}));

var AncillariesCategories;
(function (AncillariesCategories) {
    AncillariesCategories.KEY = new CollectionKey("ancillaries_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.category = values["category"];
        }
    }
    AncillariesCategories.Entry = Entry;
})(AncillariesCategories || (AncillariesCategories = {}));

var MarriageTypes;
(function (MarriageTypes) {
    MarriageTypes.KEY = new CollectionKey("marriage_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    MarriageTypes.Entry = Entry;
})(MarriageTypes || (MarriageTypes = {}));

var Ancillaries;
(function (Ancillaries) {
    Ancillaries.KEY = new CollectionKey("ancillaries");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this.onscreenName = values["onscreen_name"];
            this._type = values["type"];
            this.appliesTo = values["applies_to"];
            this.transferrable = !!values["transferrable"];
            this.uniqueToWorld = !!values["unique_to_world"];
            this.uniqueToFaction = !!values["unique_to_faction"];
            this.precedence = values["precedence"];
            this.startDate = values["start_date"];
            this.endDate = values["end_date"];
            this.effectText = values["effect_text"];
            this.colourText = values["colour_text"];
            this.explanationText = values["explanation_text"];
            this.exclusionText = values["exclusion_text"];
            this.avatarSkill = values["avatar_skill"];
            this.avatarSpecialAbility = values["avatar_special_ability"];
            this.legendaryItem = !!values["legendary_item"];
            this.mpExclusive = !!values["mp_exclusive"];
            this.isWifeAncillary = !!values["is_wife_ancillary"];
            this.isHusbandAncillary = !!values["is_husband_ancillary"];
            this.isDiplomaticAncillary = !!values["is_diplomatic_ancillary"];
            this.isDynasticAncillary = !!values["is_dynastic_ancillary"];
            this._spouseSubculture = values["spouse_subculture"];
            this._category = values["category"];
            this.minStartingAge = values["min_starting_age"];
            this.maxStartingAge = values["max_starting_age"];
            this.minExpiryAge = values["min_expiry_age"];
            this.maxExpiryAge = values["max_expiry_age"];
            this._spouseType = values["spouse_type"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(AncillaryInfo.KEY, AncillaryInfo.Entry);
            return collection.find(entry => entry.ancillary === this._key);
        }
        get type() {
            const collection = this.collectionCache.getCollection(AncillaryTypes.KEY, AncillaryTypes.Entry);
            return collection.find(entry => entry.type === this._type);
        }
        get spouseSubculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._spouseSubculture);
        }
        get category() {
            const collection = this.collectionCache.getCollection(AncillariesCategories.KEY, AncillariesCategories.Entry);
            return collection.find(entry => entry.category === this._category);
        }
        get spouseType() {
            const collection = this.collectionCache.getCollection(MarriageTypes.KEY, MarriageTypes.Entry);
            return collection.find(entry => entry.key === this._spouseType);
        }
    }
    Ancillaries.Entry = Entry;
})(Ancillaries || (Ancillaries = {}));

var AncillaryIncludedSubcultures;
(function (AncillaryIncludedSubcultures) {
    AncillaryIncludedSubcultures.KEY = new CollectionKey("ancillary_included_subcultures");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._ancillary = values["ancillary"];
            this._subculture = values["subculture"];
        }
        get ancillary() {
            const collection = this.collectionCache.getCollection(AncillaryInfo.KEY, AncillaryInfo.Entry);
            return collection.find(entry => entry.ancillary === this._ancillary);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
    }
    AncillaryIncludedSubcultures.Entry = Entry;
})(AncillaryIncludedSubcultures || (AncillaryIncludedSubcultures = {}));

var AncillaryToEffects;
(function (AncillaryToEffects) {
    AncillaryToEffects.KEY = new CollectionKey("ancillary_to_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._ancillary = values["ancillary"];
            this._effect = values["effect"];
            this.value = values["value"];
            this._effectScope = values["effect_scope"];
        }
        get ancillary() {
            const collection = this.collectionCache.getCollection(AncillaryInfo.KEY, AncillaryInfo.Entry);
            return collection.find(entry => entry.ancillary === this._ancillary);
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get effectScope() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes.KEY, CampaignEffectScopes.Entry);
            return collection.find(entry => entry.key === this._effectScope);
        }
    }
    AncillaryToEffects.Entry = Entry;
})(AncillaryToEffects || (AncillaryToEffects = {}));

var AncillaryToExcludedAncillaries;
(function (AncillaryToExcludedAncillaries) {
    AncillaryToExcludedAncillaries.KEY = new CollectionKey("ancillary_to_excluded_ancillaries");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._ancillary = values["ancillary"];
            this._excludedAncillary = values["excluded_ancillary"];
        }
        get ancillary() {
            const collection = this.collectionCache.getCollection(AncillaryInfo.KEY, AncillaryInfo.Entry);
            return collection.find(entry => entry.ancillary === this._ancillary);
        }
    }
    AncillaryToExcludedAncillaries.Entry = Entry;
})(AncillaryToExcludedAncillaries || (AncillaryToExcludedAncillaries = {}));

var AncillaryToIncludedAgents;
(function (AncillaryToIncludedAgents) {
    AncillaryToIncludedAgents.KEY = new CollectionKey("ancillary_to_included_agents");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._ancillary = values["ancillary"];
            this._agent = values["agent"];
        }
        get ancillary() {
            const collection = this.collectionCache.getCollection(AncillaryInfo.KEY, AncillaryInfo.Entry);
            return collection.find(entry => entry.ancillary === this._ancillary);
        }
        get agent() {
            const collection = this.collectionCache.getCollection(Agents.KEY, Agents.Entry);
            return collection.find(entry => entry.key === this._agent);
        }
    }
    AncillaryToIncludedAgents.Entry = Entry;
})(AncillaryToIncludedAgents || (AncillaryToIncludedAgents = {}));

var AncillaryTriggers;
(function (AncillaryTriggers) {
    AncillaryTriggers.KEY = new CollectionKey("ancillary_triggers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.trigger = values["trigger"];
            this._event = values["event"];
            this.conditions = values["conditions"];
        }
        get event() {
            const collection = this.collectionCache.getCollection(TriggerEvents.KEY, TriggerEvents.Entry);
            return collection.find(entry => entry.event === this._event);
        }
    }
    AncillaryTriggers.Entry = Entry;
})(AncillaryTriggers || (AncillaryTriggers = {}));

var AncillaryTriggersToAncillaryRemovals;
(function (AncillaryTriggersToAncillaryRemovals) {
    AncillaryTriggersToAncillaryRemovals.KEY = new CollectionKey("ancillary_triggers_to_ancillary_removals");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._trigger = values["trigger"];
            this._ancillary = values["ancillary"];
        }
        get trigger() {
            const collection = this.collectionCache.getCollection(AncillaryTriggers.KEY, AncillaryTriggers.Entry);
            return collection.find(entry => entry.trigger === this._trigger);
        }
        get ancillary() {
            const collection = this.collectionCache.getCollection(AncillaryInfo.KEY, AncillaryInfo.Entry);
            return collection.find(entry => entry.ancillary === this._ancillary);
        }
    }
    AncillaryTriggersToAncillaryRemovals.Entry = Entry;
})(AncillaryTriggersToAncillaryRemovals || (AncillaryTriggersToAncillaryRemovals = {}));

var AncillaryTriggerEffects;
(function (AncillaryTriggerEffects) {
    AncillaryTriggerEffects.KEY = new CollectionKey("ancillary_trigger_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._trigger = values["trigger"];
            this._ancillary = values["ancillary"];
            this.chance = values["chance"];
        }
        get trigger() {
            const collection = this.collectionCache.getCollection(AncillaryTriggers.KEY, AncillaryTriggers.Entry);
            return collection.find(entry => entry.trigger === this._trigger);
        }
        get ancillary() {
            const collection = this.collectionCache.getCollection(AncillaryInfo.KEY, AncillaryInfo.Entry);
            return collection.find(entry => entry.ancillary === this._ancillary);
        }
    }
    AncillaryTriggerEffects.Entry = Entry;
})(AncillaryTriggerEffects || (AncillaryTriggerEffects = {}));

var AnimationCategories;
(function (AnimationCategories) {
    AnimationCategories.KEY = new CollectionKey("animation_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
            this.order = values["order"];
        }
    }
    AnimationCategories.Entry = Entry;
})(AnimationCategories || (AnimationCategories = {}));

var AnimationSlotCategories;
(function (AnimationSlotCategories) {
    AnimationSlotCategories.KEY = new CollectionKey("animation_slot_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.slot = values["slot"];
            this._category = values["category"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(AnimationCategories.KEY, AnimationCategories.Entry);
            return collection.find(entry => entry.name === this._category);
        }
    }
    AnimationSlotCategories.Entry = Entry;
})(AnimationSlotCategories || (AnimationSlotCategories = {}));

var AnimReferencePoses;
(function (AnimReferencePoses) {
    AnimReferencePoses.KEY = new CollectionKey("anim_reference_poses");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.path = values["path"];
            this.rootNode = values["root_node"];
        }
    }
    AnimReferencePoses.Entry = Entry;
})(AnimReferencePoses || (AnimReferencePoses = {}));

var ArmedCitizenryUnitGroups;
(function (ArmedCitizenryUnitGroups) {
    ArmedCitizenryUnitGroups.KEY = new CollectionKey("armed_citizenry_unit_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.unitGroup = values["unit_group"];
        }
    }
    ArmedCitizenryUnitGroups.Entry = Entry;
})(ArmedCitizenryUnitGroups || (ArmedCitizenryUnitGroups = {}));

var ArmedCitizenryUnitsToUnitGroupsJunctions;
(function (ArmedCitizenryUnitsToUnitGroupsJunctions) {
    ArmedCitizenryUnitsToUnitGroupsJunctions.KEY = new CollectionKey("armed_citizenry_units_to_unit_groups_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._unitGroup = values["unit_group"];
            this._unit = values["unit"];
            this.priority = values["priority"];
        }
        get unitGroup() {
            const collection = this.collectionCache.getCollection(ArmedCitizenryUnitGroups.KEY, ArmedCitizenryUnitGroups.Entry);
            return collection.find(entry => entry.unitGroup === this._unitGroup);
        }
        get unit() {
            const collection = this.collectionCache.getCollection(MainUnits.KEY, MainUnits.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
    }
    ArmedCitizenryUnitsToUnitGroupsJunctions.Entry = Entry;
})(ArmedCitizenryUnitsToUnitGroupsJunctions || (ArmedCitizenryUnitsToUnitGroupsJunctions = {}));

var AudioLanguages;
(function (AudioLanguages) {
    AudioLanguages.KEY = new CollectionKey("audio_languages");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    AudioLanguages.Entry = Entry;
})(AudioLanguages || (AudioLanguages = {}));

var BanditryEvents;
(function (BanditryEvents) {
    BanditryEvents.KEY = new CollectionKey("banditry_events");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
            this._messageEvent = values["message_event"];
            this._provinceEffectBundle = values["province_effect_bundle"];
            this.minimumBanditry = values["minimum_banditry"];
            this.maximumBanditry = values["maximum_banditry"];
            this.weight = values["weight"];
            this.duration = values["duration"];
        }
        get messageEvent() {
            const collection = this.collectionCache.getCollection(MessageEvents.KEY, MessageEvents.Entry);
            return collection.find(entry => entry.event === this._messageEvent);
        }
        get provinceEffectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles.KEY, EffectBundles.Entry);
            return collection.find(entry => entry.key === this._provinceEffectBundle);
        }
    }
    BanditryEvents.Entry = Entry;
})(BanditryEvents || (BanditryEvents = {}));

var BattlefieldBuildingCategories;
(function (BattlefieldBuildingCategories) {
    BattlefieldBuildingCategories.KEY = new CollectionKey("battlefield_building_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.category = values["category"];
            this._defaultDestructionEffect = values["default_destruction_effect"];
            this.iconPath = values["icon_path"];
        }
    }
    BattlefieldBuildingCategories.Entry = Entry;
})(BattlefieldBuildingCategories || (BattlefieldBuildingCategories = {}));

var ModelsBuilding;
(function (ModelsBuilding) {
    ModelsBuilding.KEY = new CollectionKey("models_building");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.modelFile = values["model_file"];
            this.logicFile = values["logic_file"];
            this.displayPath = values["display_path"];
        }
    }
    ModelsBuilding.Entry = Entry;
})(ModelsBuilding || (ModelsBuilding = {}));

var BattlefieldBuildingsNames;
(function (BattlefieldBuildingsNames) {
    BattlefieldBuildingsNames.KEY = new CollectionKey("battlefield_buildings_names");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.onscreenName = values["onscreen_name"];
            this.key = values["key"];
            this.globalEffectsDescription = values["global_effects_description"];
            this.localEffectsDescription = values["local_effects_description"];
        }
    }
    BattlefieldBuildingsNames.Entry = Entry;
})(BattlefieldBuildingsNames || (BattlefieldBuildingsNames = {}));

var BattlefieldBuildings;
(function (BattlefieldBuildings) {
    BattlefieldBuildings.KEY = new CollectionKey("battlefield_buildings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._category = values["category"];
            this._model = values["model"];
            this._audioMaterial = values["audio_material"];
            this.hitPoints = values["hit_points"];
            this._gunType = values["gun_type"];
            this._onscreenName = values["onscreen_name"];
            this.ignitionThreshold = values["ignition_threshold"];
            this.radarIcon = values["radar_icon"];
            this.visibleInPublicTed = !!values["visible_in_public_ted"];
            this.fortwallPenetrationChance = values["fortwall_penetration_chance"];
            this.collision3D = !!values["collision_3d"];
            this.destructThresholds = values["destruct_thresholds"];
            this.joiner = !!values["joiner"];
            this.auxiliary = !!values["auxiliary"];
            this.burnRate = values["burn_rate"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(BattlefieldBuildingCategories.KEY, BattlefieldBuildingCategories.Entry);
            return collection.find(entry => entry.category === this._category);
        }
        get model() {
            const collection = this.collectionCache.getCollection(ModelsBuilding.KEY, ModelsBuilding.Entry);
            return collection.find(entry => entry.key === this._model);
        }
        get audioMaterial() {
            const collection = this.collectionCache.getCollection(AudioMaterialsEnums.KEY, AudioMaterialsEnums.Entry);
            return collection.find(entry => entry.key === this._audioMaterial);
        }
        get gunType() {
            const collection = this.collectionCache.getCollection(MissileWeapons.KEY, MissileWeapons.Entry);
            return collection.find(entry => entry.key === this._gunType);
        }
        get onscreenName() {
            const collection = this.collectionCache.getCollection(BattlefieldBuildingsNames.KEY, BattlefieldBuildingsNames.Entry);
            return collection.find(entry => entry.key === this._onscreenName);
        }
    }
    BattlefieldBuildings.Entry = Entry;
})(BattlefieldBuildings || (BattlefieldBuildings = {}));

var BattlefieldBuildingsWithProjectilesNames;
(function (BattlefieldBuildingsWithProjectilesNames) {
    BattlefieldBuildingsWithProjectilesNames.KEY = new CollectionKey("battlefield_buildings_with_projectiles_names");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._buildingCategory = values["building_category"];
            this._projectile = values["projectile"];
            this._name = values["name"];
        }
        get buildingCategory() {
            const collection = this.collectionCache.getCollection(BattlefieldBuildingCategories.KEY, BattlefieldBuildingCategories.Entry);
            return collection.find(entry => entry.category === this._buildingCategory);
        }
        get projectile() {
            const collection = this.collectionCache.getCollection(Projectiles.KEY, Projectiles.Entry);
            return collection.find(entry => entry.key === this._projectile);
        }
        get name() {
            const collection = this.collectionCache.getCollection(BattlefieldBuildingsNames.KEY, BattlefieldBuildingsNames.Entry);
            return collection.find(entry => entry.key === this._name);
        }
    }
    BattlefieldBuildingsWithProjectilesNames.Entry = Entry;
})(BattlefieldBuildingsWithProjectilesNames || (BattlefieldBuildingsWithProjectilesNames = {}));

var BattlefieldBuildingTransformations;
(function (BattlefieldBuildingTransformations) {
    BattlefieldBuildingTransformations.KEY = new CollectionKey("battlefield_building_transformations");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.transformation = values["transformation"];
            this.description = values["description"];
        }
    }
    BattlefieldBuildingTransformations.Entry = Entry;
})(BattlefieldBuildingTransformations || (BattlefieldBuildingTransformations = {}));

var ModelsSieges;
(function (ModelsSieges) {
    ModelsSieges.KEY = new CollectionKey("models_sieges");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.modelFile = values["model_file"];
            this.logicFile = values["logic_file"];
            this.displayPath = values["display_path"];
        }
    }
    ModelsSieges.Entry = Entry;
})(ModelsSieges || (ModelsSieges = {}));

var BattlefieldSiegeVehicles;
(function (BattlefieldSiegeVehicles) {
    BattlefieldSiegeVehicles.KEY = new CollectionKey("battlefield_siege_vehicles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._model = values["model"];
            this.hitPoints = values["hit_points"];
            this._battleEntity = values["battle_entity"];
            this.gunType = values["gun_type"];
            this.dockingClearance = values["docking_clearance"];
            this._engine = values["engine"];
            this.onscreenName = values["onscreen_name"];
            this.description = values["description"];
            this.imagePath = values["image_path"];
            this.recruitmentCap = values["recruitment_cap"];
            this.uses8MWall = !!values["uses_8m_wall"];
            this.uses15MWall = !!values["uses_15m_wall"];
            this.cost = values["cost"];
            this.categoryImagePath = values["category_image_path"];
            this.specialEditionMask = values["special_edition_mask"];
            this.ignitionThreshold = values["ignition_threshold"];
            this.attackDamage = values["attack_damage"];
            this.selectionPriority = values["selection_priority"];
        }
        get model() {
            const collection = this.collectionCache.getCollection(ModelsSieges.KEY, ModelsSieges.Entry);
            return collection.find(entry => entry.key === this._model);
        }
        get battleEntity() {
            const collection = this.collectionCache.getCollection(BattleEntities.KEY, BattleEntities.Entry);
            return collection.find(entry => entry.key === this._battleEntity);
        }
        get engine() {
            const collection = this.collectionCache.getCollection(BattlefieldEnginesAutonomous.KEY, BattlefieldEnginesAutonomous.Entry);
            return collection.find(entry => entry.key === this._engine);
        }
    }
    BattlefieldSiegeVehicles.Entry = Entry;
})(BattlefieldSiegeVehicles || (BattlefieldSiegeVehicles = {}));

var BattlefieldDeployableSiegeItems;
(function (BattlefieldDeployableSiegeItems) {
    BattlefieldDeployableSiegeItems.KEY = new CollectionKey("battlefield_deployable_siege_items");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._battlefieldSiegeVehicle = values["battlefield_siege_vehicle"];
            this.level = values["level"];
            this.type = values["type"];
        }
        get battlefieldSiegeVehicle() {
            const collection = this.collectionCache.getCollection(BattlefieldSiegeVehicles.KEY, BattlefieldSiegeVehicles.Entry);
            return collection.find(entry => entry.key === this._battlefieldSiegeVehicle);
        }
    }
    BattlefieldDeployableSiegeItems.Entry = Entry;
})(BattlefieldDeployableSiegeItems || (BattlefieldDeployableSiegeItems = {}));

var BattlefieldSiegeVehiclesCustomBattles;
(function (BattlefieldSiegeVehiclesCustomBattles) {
    BattlefieldSiegeVehiclesCustomBattles.KEY = new CollectionKey("battlefield_siege_vehicles_custom_battles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._vehicle = values["vehicle"];
            this.cap = values["cap"];
            this.probability = values["probability"];
        }
        get vehicle() {
            const collection = this.collectionCache.getCollection(BattlefieldSiegeVehicles.KEY, BattlefieldSiegeVehicles.Entry);
            return collection.find(entry => entry.key === this._vehicle);
        }
    }
    BattlefieldSiegeVehiclesCustomBattles.Entry = Entry;
})(BattlefieldSiegeVehiclesCustomBattles || (BattlefieldSiegeVehiclesCustomBattles = {}));

var BattlefieldSiegeVehiclesToAutonomousEngines;
(function (BattlefieldSiegeVehiclesToAutonomousEngines) {
    BattlefieldSiegeVehiclesToAutonomousEngines.KEY = new CollectionKey("battlefield_siege_vehicles_to_autonomous_engines");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._vehicle = values["vehicle"];
            this._engine = values["engine"];
        }
        get vehicle() {
            const collection = this.collectionCache.getCollection(BattlefieldSiegeVehicles.KEY, BattlefieldSiegeVehicles.Entry);
            return collection.find(entry => entry.key === this._vehicle);
        }
        get engine() {
            const collection = this.collectionCache.getCollection(BattlefieldEnginesAutonomous.KEY, BattlefieldEnginesAutonomous.Entry);
            return collection.find(entry => entry.key === this._engine);
        }
    }
    BattlefieldSiegeVehiclesToAutonomousEngines.Entry = Entry;
})(BattlefieldSiegeVehiclesToAutonomousEngines || (BattlefieldSiegeVehiclesToAutonomousEngines = {}));

var BattlefieldSnowProps;
(function (BattlefieldSnowProps) {
    BattlefieldSnowProps.KEY = new CollectionKey("battlefield_snow_props");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._prop = values["prop"];
            this._enableForSnow = values["enable_for_snow"];
        }
        get prop() {
            const collection = this.collectionCache.getCollection(BattlefieldBuildings.KEY, BattlefieldBuildings.Entry);
            return collection.find(entry => entry.key === this._prop);
        }
    }
    BattlefieldSnowProps.Entry = Entry;
})(BattlefieldSnowProps || (BattlefieldSnowProps = {}));

var Seasons;
(function (Seasons) {
    Seasons.KEY = new CollectionKey("seasons");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.season = values["season"];
            this.onscreen = values["onscreen"];
            this.order = values["order"];
        }
    }
    Seasons.Entry = Entry;
})(Seasons || (Seasons = {}));

var BattlefieldTemperatures;
(function (BattlefieldTemperatures) {
    BattlefieldTemperatures.KEY = new CollectionKey("battlefield_temperatures");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._climate = values["climate"];
            this._season = values["season"];
            this.temperature = values["temperature"];
        }
        get climate() {
            const collection = this.collectionCache.getCollection(Climates.KEY, Climates.Entry);
            return collection.find(entry => entry.climateType === this._climate);
        }
        get season() {
            const collection = this.collectionCache.getCollection(Seasons.KEY, Seasons.Entry);
            return collection.find(entry => entry.season === this._season);
        }
    }
    BattlefieldTemperatures.Entry = Entry;
})(BattlefieldTemperatures || (BattlefieldTemperatures = {}));

var BattleTypes;
(function (BattleTypes) {
    BattleTypes.KEY = new CollectionKey("battle_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.type = values["type"];
            this.onscreen = values["onscreen"];
            this.sortOrder = values["sort_order"];
            this.defenderFundsRatio = values["defender_funds_ratio"];
            this.maxTeamsize = values["max_teamsize"];
        }
    }
    BattleTypes.Entry = Entry;
})(BattleTypes || (BattleTypes = {}));

var Battles;
(function (Battles) {
    Battles.KEY = new CollectionKey("battles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._type = values["type"];
            this.isNaval = !!values["is_naval"];
            this.specification = values["specification"];
            this.localisedName = values["localised_name"];
            this.description = values["description"];
            this.objectivesTeam1 = values["objectives_team_1"];
            this.objectivesTeam2 = values["objectives_team_2"];
            this.screenshotPath = values["screenshot_path"];
            this.mapPath = values["map_path"];
            this.teamSize1 = values["team_size_1"];
            this.teamSize2 = values["team_size_2"];
            this.release = !!values["release"];
            this.multiplayer = !!values["multiplayer"];
            this.singleplayer = !!values["singleplayer"];
            this.introMovie = values["intro_movie"];
            this.year = values["year"];
            this.defenderFundsRatio = values["defender_funds_ratio"];
            this.hasKeyBuildings = !!values["has_key_buildings"];
            this.matchmaking = !!values["matchmaking"];
            this.playableAreaWidth = values["playable_area_width"];
            this.playableAreaHeight = values["playable_area_height"];
            this.isLargeSettlement = !!values["is_large_settlement"];
            this.has15MWalls = !!values["has_15m_walls"];
        }
        get type() {
            const collection = this.collectionCache.getCollection(BattleTypes.KEY, BattleTypes.Entry);
            return collection.find(entry => entry.type === this._type);
        }
    }
    Battles.Entry = Entry;
})(Battles || (Battles = {}));

var BattleSkyTypes;
(function (BattleSkyTypes) {
    BattleSkyTypes.KEY = new CollectionKey("battle_sky_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._season = values["season"];
            this._weatherType = values["weather_type"];
            this.timeOfDay = values["time_of_day"];
            this._climate = values["climate"];
            this.skyFile = values["sky_file"];
            this.supportsAmbientFog = !!values["supports_ambient_fog"];
            this.supportsVolumetricFog = !!values["supports_volumetric_fog"];
        }
        get climate() {
            const collection = this.collectionCache.getCollection(Climates.KEY, Climates.Entry);
            return collection.find(entry => entry.climateType === this._climate);
        }
    }
    BattleSkyTypes.Entry = Entry;
})(BattleSkyTypes || (BattleSkyTypes = {}));

var BattlesToBattleSkyTypesJunctions;
(function (BattlesToBattleSkyTypesJunctions) {
    BattlesToBattleSkyTypesJunctions.KEY = new CollectionKey("battles_to_battle_sky_types_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._battleKey = values["battle_key"];
            this._battleSkyTypeKey = values["battle_sky_type_key"];
        }
        get battleKey() {
            const collection = this.collectionCache.getCollection(Battles.KEY, Battles.Entry);
            return collection.find(entry => entry.key === this._battleKey);
        }
        get battleSkyTypeKey() {
            const collection = this.collectionCache.getCollection(BattleSkyTypes.KEY, BattleSkyTypes.Entry);
            return collection.find(entry => entry.key === this._battleSkyTypeKey);
        }
    }
    BattlesToBattleSkyTypesJunctions.Entry = Entry;
})(BattlesToBattleSkyTypesJunctions || (BattlesToBattleSkyTypesJunctions = {}));

var BattleAutoresolverBalances;
(function (BattleAutoresolverBalances) {
    BattleAutoresolverBalances.KEY = new CollectionKey("battle_autoresolver_balances");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._sourceUnitClass = values["source_unit_class"];
            this._targetUnitClass = values["target_unit_class"];
            this.meleePotentialMultiplier = values["melee_potential_multiplier"];
            this.missilePotentialMultiplier = values["missile_potential_multiplier"];
        }
        get sourceUnitClass() {
            const collection = this.collectionCache.getCollection(UnitClass.KEY, UnitClass.Entry);
            return collection.find(entry => entry.key === this._sourceUnitClass);
        }
        get targetUnitClass() {
            const collection = this.collectionCache.getCollection(UnitClass.KEY, UnitClass.Entry);
            return collection.find(entry => entry.key === this._targetUnitClass);
        }
    }
    BattleAutoresolverBalances.Entry = Entry;
})(BattleAutoresolverBalances || (BattleAutoresolverBalances = {}));

var BattleBridgeSubcultureJcts;
(function (BattleBridgeSubcultureJcts) {
    BattleBridgeSubcultureJcts.KEY = new CollectionKey("battle_bridge_subculture_jcts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._subculture = values["subculture"];
            this._simpleBridge = values["simple_bridge"];
            this._refinedBridge = values["refined_bridge"];
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
        get simpleBridge() {
            const collection = this.collectionCache.getCollection(BattlefieldBuildings.KEY, BattlefieldBuildings.Entry);
            return collection.find(entry => entry.key === this._simpleBridge);
        }
    }
    BattleBridgeSubcultureJcts.Entry = Entry;
})(BattleBridgeSubcultureJcts || (BattleBridgeSubcultureJcts = {}));

var BattleCameras;
(function (BattleCameras) {
    BattleCameras.KEY = new CollectionKey("battle_cameras");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.minHeight = values["min_height"];
            this.maxHeightSmall = values["max_height_small"];
            this.maxHeightLarge = values["max_height_large"];
            this.minFortMaxHeight = values["min_fort_max_height"];
            this.moveSpeedMinMultiplier = values["move_speed_min_multiplier"];
            this.moveSpeedMaxMultiplier = values["move_speed_max_multiplier"];
            this.turnSpeedMultiplier = values["turn_speed_multiplier"];
            this.moveFastMultiplier = values["move_fast_multiplier"];
        }
    }
    BattleCameras.Entry = Entry;
})(BattleCameras || (BattleCameras = {}));

var BattleCities;
(function (BattleCities) {
    BattleCities.KEY = new CollectionKey("battle_cities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.city = values["city"];
            this.minimumBuildingScale = values["minimum_building_scale"];
            this.maximumBuildingScale = values["maximum_building_scale"];
            this.townMinDistance = values["town_min_distance"];
            this.cityMinDistance = values["city_min_distance"];
            this.townRadius = values["town_radius"];
            this.cityRadius = values["city_radius"];
            this.numberOfTownBuildings = values["number_of_town_buildings"];
            this.numberOfCityBuildings = values["number_of_city_buildings"];
        }
    }
    BattleCities.Entry = Entry;
})(BattleCities || (BattleCities = {}));

var BattleCityBuildings;
(function (BattleCityBuildings) {
    BattleCityBuildings.KEY = new CollectionKey("battle_city_buildings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._building = values["building"];
            this._city = values["city"];
            this.amountInTown = values["amount_in_town"];
            this.amountInCity = values["amount_in_city"];
        }
        get building() {
            const collection = this.collectionCache.getCollection(WarscapeRigid.KEY, WarscapeRigid.Entry);
            return collection.find(entry => entry.key === this._building);
        }
        get city() {
            const collection = this.collectionCache.getCollection(BattleCities.KEY, BattleCities.Entry);
            return collection.find(entry => entry.city === this._city);
        }
    }
    BattleCityBuildings.Entry = Entry;
})(BattleCityBuildings || (BattleCityBuildings = {}));

var BattleCitySubcultureJct;
(function (BattleCitySubcultureJct) {
    BattleCitySubcultureJct.KEY = new CollectionKey("battle_city_subculture_jct");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._subculture = values["subculture"];
            this._city = values["city"];
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
        get city() {
            const collection = this.collectionCache.getCollection(BattleCities.KEY, BattleCities.Entry);
            return collection.find(entry => entry.city === this._city);
        }
    }
    BattleCitySubcultureJct.Entry = Entry;
})(BattleCitySubcultureJct || (BattleCitySubcultureJct = {}));

var BattleWeatherTypes;
(function (BattleWeatherTypes) {
    BattleWeatherTypes.KEY = new CollectionKey("battle_weather_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.level = values["level"];
            this.precipitationType = values["precipitation_type"];
            this.numParticles = values["num_particles"];
            this.particleSize = values["particle_size"];
            this.particleSpeed = values["particle_speed"];
            this.onscreen = values["onscreen"];
            this.listOrder = values["list_order"];
            this.navalAppropriate = !!values["naval_appropriate"];
        }
    }
    BattleWeatherTypes.Entry = Entry;
})(BattleWeatherTypes || (BattleWeatherTypes = {}));

var BattleClimateWeatherDescriptions;
(function (BattleClimateWeatherDescriptions) {
    BattleClimateWeatherDescriptions.KEY = new CollectionKey("battle_climate_weather_descriptions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._climateType = values["climate_type"];
            this._season = values["season"];
            this._weatherType = values["weather_type"];
            this.probability = values["probability"];
            this.heatFatigue = values["heat_fatigue"];
            this.coldFatigue = values["cold_fatigue"];
            this.spottingScalar = values["spotting_scalar"];
        }
        get climateType() {
            const collection = this.collectionCache.getCollection(Climates.KEY, Climates.Entry);
            return collection.find(entry => entry.climateType === this._climateType);
        }
        get season() {
            const collection = this.collectionCache.getCollection(Seasons.KEY, Seasons.Entry);
            return collection.find(entry => entry.season === this._season);
        }
        get weatherType() {
            const collection = this.collectionCache.getCollection(BattleWeatherTypes.KEY, BattleWeatherTypes.Entry);
            return collection.find(entry => entry.key === this._weatherType);
        }
    }
    BattleClimateWeatherDescriptions.Entry = Entry;
})(BattleClimateWeatherDescriptions || (BattleClimateWeatherDescriptions = {}));

var UiUnitStats;
(function (UiUnitStats) {
    UiUnitStats.KEY = new CollectionKey("ui_unit_stats");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreenName = values["onscreen_name"];
            this.maxValue = values["max_value"];
            this.campaignOnly = !!values["campaign_only"];
            this.sortOrder = values["sort_order"];
            this.tooltipText = values["tooltip_text"];
        }
    }
    UiUnitStats.Entry = Entry;
})(UiUnitStats || (UiUnitStats = {}));

var BattleDifficultyModifiers;
(function (BattleDifficultyModifiers) {
    BattleDifficultyModifiers.KEY = new CollectionKey("battle_difficulty_modifiers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.difficultyLevel = values["difficulty_level"];
            this.human = !!values["human"];
            this.stat = values["stat"];
            this._value = values["value"];
        }
        get value() {
            const collection = this.collectionCache.getCollection(UiUnitStats.KEY, UiUnitStats.Entry);
            return collection.find(entry => entry.key === this._value);
        }
    }
    BattleDifficultyModifiers.Entry = Entry;
})(BattleDifficultyModifiers || (BattleDifficultyModifiers = {}));

var BattleEntitiesClassValidationEnum;
(function (BattleEntitiesClassValidationEnum) {
    BattleEntitiesClassValidationEnum.KEY = new CollectionKey("battle_entities_class_validation_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    BattleEntitiesClassValidationEnum.Entry = Entry;
})(BattleEntitiesClassValidationEnum || (BattleEntitiesClassValidationEnum = {}));

var BattleEntitiesShapeEnum;
(function (BattleEntitiesShapeEnum) {
    BattleEntitiesShapeEnum.KEY = new CollectionKey("battle_entities_shape_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    BattleEntitiesShapeEnum.Entry = Entry;
})(BattleEntitiesShapeEnum || (BattleEntitiesShapeEnum = {}));

var BattleEntityEffects;
(function (BattleEntityEffects) {
    BattleEntityEffects.KEY = new CollectionKey("battle_entity_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
            this._forest = values["forest"];
            this._grass = values["grass"];
            this._mud = values["mud"];
            this._sand = values["sand"];
            this._scrub = values["scrub"];
            this._rock = values["rock"];
            this._deepWater = values["deep_water"];
            this._shallowWater = values["shallow_water"];
            this._road = values["road"];
            this._woodenFloor = values["wooden_floor"];
            this._snow = values["snow"];
        }
        get forest() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._forest);
        }
        get grass() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._grass);
        }
        get mud() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._mud);
        }
        get sand() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._sand);
        }
        get scrub() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._scrub);
        }
        get rock() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._rock);
        }
        get deepWater() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._deepWater);
        }
        get shallowWater() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._shallowWater);
        }
        get road() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._road);
        }
        get woodenFloor() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._woodenFloor);
        }
        get snow() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._snow);
        }
    }
    BattleEntityEffects.Entry = Entry;
})(BattleEntityEffects || (BattleEntityEffects = {}));

var BattleMiscEffects;
(function (BattleMiscEffects) {
    BattleMiscEffects.KEY = new CollectionKey("battle_misc_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
            this._effect = values["effect"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._effect);
        }
    }
    BattleMiscEffects.Entry = Entry;
})(BattleMiscEffects || (BattleMiscEffects = {}));

var BattlePersonalityTypesEnum;
(function (BattlePersonalityTypesEnum) {
    BattlePersonalityTypesEnum.KEY = new CollectionKey("battle_personality_types_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    BattlePersonalityTypesEnum.Entry = Entry;
})(BattlePersonalityTypesEnum || (BattlePersonalityTypesEnum = {}));

var BattleSequences;
(function (BattleSequences) {
    BattleSequences.KEY = new CollectionKey("battle_sequences");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._battle = values["battle"];
            this.unlockOrder = values["unlock_order"];
        }
        get battle() {
            const collection = this.collectionCache.getCollection(Battles.KEY, Battles.Entry);
            return collection.find(entry => entry.key === this._battle);
        }
    }
    BattleSequences.Entry = Entry;
})(BattleSequences || (BattleSequences = {}));

var BattleSiegeVehiclePermissions;
(function (BattleSiegeVehiclePermissions) {
    BattleSiegeVehiclePermissions.KEY = new CollectionKey("battle_siege_vehicle_permissions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._vehicle = values["vehicle"];
            this._faction = values["faction"];
        }
        get vehicle() {
            const collection = this.collectionCache.getCollection(BattlefieldSiegeVehicles.KEY, BattlefieldSiegeVehicles.Entry);
            return collection.find(entry => entry.key === this._vehicle);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    BattleSiegeVehiclePermissions.Entry = Entry;
})(BattleSiegeVehiclePermissions || (BattleSiegeVehiclePermissions = {}));

var BattleSkeletonCategoryEnums;
(function (BattleSkeletonCategoryEnums) {
    BattleSkeletonCategoryEnums.KEY = new CollectionKey("battle_skeleton_category_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.type = values["type"];
        }
    }
    BattleSkeletonCategoryEnums.Entry = Entry;
})(BattleSkeletonCategoryEnums || (BattleSkeletonCategoryEnums = {}));

var BattleSkeletons;
(function (BattleSkeletons) {
    BattleSkeletons.KEY = new CollectionKey("battle_skeletons");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
            this._category = values["category"];
            this.root = values["root"];
            this.scale = values["scale"];
            this.scaleDeviation = values["scale_deviation"];
            this.hipsNode = values["hips_node"];
            this.spineNode = values["spine_node"];
            this.weapon1Node = values["weapon1_node"];
            this.weapon2Node = values["weapon2_node"];
            this.weapon3Node = values["weapon3_node"];
            this.weapon4Node = values["weapon4_node"];
            this.weapon5Node = values["weapon5_node"];
            this.headNode = values["head_node"];
            this.neckNode = values["neck_node"];
            this.leftshoulderNode = values["leftshoulder_node"];
            this.rightshoulderNode = values["rightshoulder_node"];
            this.leftarmNode = values["leftarm_node"];
            this.rightarmNode = values["rightarm_node"];
            this.lefthandNode = values["lefthand_node"];
            this.righthandNode = values["righthand_node"];
            this.leftuplegNode = values["leftupleg_node"];
            this.rightuplegNode = values["rightupleg_node"];
            this.leftlegNode = values["leftleg_node"];
            this.rightlegNode = values["rightleg_node"];
            this.leftfootNode = values["leftfoot_node"];
            this.rightfootNode = values["rightfoot_node"];
            this.leftfingerNode = values["leftfinger_node"];
            this.rightfingerNode = values["rightfinger_node"];
            this.lefttoeNode = values["lefttoe_node"];
            this.righttoeNode = values["righttoe_node"];
            this.leftwheelNode = values["leftwheel_node"];
            this.rightwheelNode = values["rightwheel_node"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(BattleSkeletonCategoryEnums.KEY, BattleSkeletonCategoryEnums.Entry);
            return collection.find(entry => entry.type === this._category);
        }
    }
    BattleSkeletons.Entry = Entry;
})(BattleSkeletons || (BattleSkeletons = {}));

var VictoryConditions;
(function (VictoryConditions) {
    VictoryConditions.KEY = new CollectionKey("victory_conditions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.condition = values["condition"];
        }
    }
    VictoryConditions.Entry = Entry;
})(VictoryConditions || (VictoryConditions = {}));

var BattleTypesToVictoryConditions;
(function (BattleTypesToVictoryConditions) {
    BattleTypesToVictoryConditions.KEY = new CollectionKey("battle_types_to_victory_conditions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._battleType = values["battle_type"];
            this._attackerVictoryCondition = values["attacker_victory_condition"];
            this._defenderVictoryCondition = values["defender_victory_condition"];
        }
        get battleType() {
            const collection = this.collectionCache.getCollection(BattleTypes.KEY, BattleTypes.Entry);
            return collection.find(entry => entry.type === this._battleType);
        }
        get attackerVictoryCondition() {
            const collection = this.collectionCache.getCollection(VictoryConditions.KEY, VictoryConditions.Entry);
            return collection.find(entry => entry.condition === this._attackerVictoryCondition);
        }
        get defenderVictoryCondition() {
            const collection = this.collectionCache.getCollection(VictoryConditions.KEY, VictoryConditions.Entry);
            return collection.find(entry => entry.condition === this._defenderVictoryCondition);
        }
    }
    BattleTypesToVictoryConditions.Entry = Entry;
})(BattleTypesToVictoryConditions || (BattleTypesToVictoryConditions = {}));

var BattleTypeSetupLimits;
(function (BattleTypeSetupLimits) {
    BattleTypeSetupLimits.KEY = new CollectionKey("battle_type_setup_limits");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._battleType = values["battle_type"];
            this.weightingType = values["weighting_type"];
            this.armySize = values["army_size"];
            this.era = values["era"];
            this.maxInfantry = values["max_infantry"];
            this.maxCavalry = values["max_cavalry"];
            this.maxArtillery = values["max_artillery"];
            this.maxSmallShip = values["max_small_ship"];
            this.maxFrigate = values["max_frigate"];
            this.maxLineOfBattle = values["max_line_of_battle"];
            this.id = values["id"];
        }
        get battleType() {
            const collection = this.collectionCache.getCollection(BattleTypes.KEY, BattleTypes.Entry);
            return collection.find(entry => entry.type === this._battleType);
        }
    }
    BattleTypeSetupLimits.Entry = Entry;
})(BattleTypeSetupLimits || (BattleTypeSetupLimits = {}));

var BattleTypeFactionPresets;
(function (BattleTypeFactionPresets) {
    BattleTypeFactionPresets.KEY = new CollectionKey("battle_type_faction_presets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._faction = values["faction"];
            this._weightingType = values["weighting_type"];
            this.id = values["id"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get weightingType() {
            const collection = this.collectionCache.getCollection(BattleTypeSetupLimits.KEY, BattleTypeSetupLimits.Entry);
            return collection.find(entry => entry.id === this._weightingType);
        }
    }
    BattleTypeFactionPresets.Entry = Entry;
})(BattleTypeFactionPresets || (BattleTypeFactionPresets = {}));

var BattleUnitPermissionJunctions;
(function (BattleUnitPermissionJunctions) {
    BattleUnitPermissionJunctions.KEY = new CollectionKey("battle_unit_permission_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unit = values["unit"];
            this._battleType = values["battle_type"];
        }
        get unit() {
            const collection = this.collectionCache.getCollection(MainUnits.KEY, MainUnits.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
        get battleType() {
            const collection = this.collectionCache.getCollection(BattleTypes.KEY, BattleTypes.Entry);
            return collection.find(entry => entry.type === this._battleType);
        }
    }
    BattleUnitPermissionJunctions.Entry = Entry;
})(BattleUnitPermissionJunctions || (BattleUnitPermissionJunctions = {}));

var BattleWeatherEffects;
(function (BattleWeatherEffects) {
    BattleWeatherEffects.KEY = new CollectionKey("battle_weather_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._weatherType = values["weather_type"];
            this._stat = values["stat"];
            this.value = values["value"];
        }
        get weatherType() {
            const collection = this.collectionCache.getCollection(BattleWeatherTypes.KEY, BattleWeatherTypes.Entry);
            return collection.find(entry => entry.key === this._weatherType);
        }
        get stat() {
            const collection = this.collectionCache.getCollection(UiUnitStats.KEY, UiUnitStats.Entry);
            return collection.find(entry => entry.key === this._stat);
        }
    }
    BattleWeatherEffects.Entry = Entry;
})(BattleWeatherEffects || (BattleWeatherEffects = {}));

var BuildingCategories;
(function (BuildingCategories) {
    BuildingCategories.KEY = new CollectionKey("building_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    BuildingCategories.Entry = Entry;
})(BuildingCategories || (BuildingCategories = {}));

var BuildingChainAvailabilitySetIds;
(function (BuildingChainAvailabilitySetIds) {
    BuildingChainAvailabilitySetIds.KEY = new CollectionKey("building_chain_availability_set_ids");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
        }
    }
    BuildingChainAvailabilitySetIds.Entry = Entry;
})(BuildingChainAvailabilitySetIds || (BuildingChainAvailabilitySetIds = {}));

var CampaignMaps;
(function (CampaignMaps) {
    CampaignMaps.KEY = new CollectionKey("campaign_maps");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.mapname = values["mapname"];
            this.minx = values["minx"];
            this.miny = values["miny"];
            this.maxx = values["maxx"];
            this.maxy = values["maxy"];
        }
    }
    CampaignMaps.Entry = Entry;
})(CampaignMaps || (CampaignMaps = {}));

var Campaigns;
(function (Campaigns) {
    Campaigns.KEY = new CollectionKey("campaigns");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.campaignName = values["campaign_name"];
            this.onscreenName = values["onscreen_name"];
            this.description = values["description"];
            this._mapName = values["map_name"];
            this.dataDirectory = values["data_directory"];
            this.isGrand = !!values["is_grand"];
            this.exportable = !!values["exportable"];
            this.campaignOrder = values["campaign_order"];
            this.bulletList = values["bullet_list"];
            this.displayLocation = values["display_location"];
            this.isTutorial = !!values["is_tutorial"];
            this.bannerImage = values["banner_image"];
            this.bannerIcon = values["banner_icon"];
            this.availableForMp = !!values["available_for_mp"];
            this.mpSortOrder = values["mp_sort_order"];
        }
        get mapName() {
            const collection = this.collectionCache.getCollection(CampaignMaps.KEY, CampaignMaps.Entry);
            return collection.find(entry => entry.mapname === this._mapName);
        }
    }
    Campaigns.Entry = Entry;
})(Campaigns || (Campaigns = {}));

var BuildingChainAvailabilities;
(function (BuildingChainAvailabilities) {
    BuildingChainAvailabilities.KEY = new CollectionKey("building_chain_availabilities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._setId = values["set_id"];
            this._culture = values["culture"];
            this._subCulture = values["sub_culture"];
            this._faction = values["faction"];
            this._campaign = values["campaign"];
        }
        get setId() {
            const collection = this.collectionCache.getCollection(BuildingChainAvailabilitySetIds.KEY, BuildingChainAvailabilitySetIds.Entry);
            return collection.find(entry => entry.id === this._setId);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get subCulture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._subCulture);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
    }
    BuildingChainAvailabilities.Entry = Entry;
})(BuildingChainAvailabilities || (BuildingChainAvailabilities = {}));

var BuildingChainAvailabilitySets;
(function (BuildingChainAvailabilitySets) {
    BuildingChainAvailabilitySets.KEY = new CollectionKey("building_chain_availability_sets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._id = values["id"];
            this._buildingChain = values["building_chain"];
        }
        get id() {
            const collection = this.collectionCache.getCollection(BuildingChainAvailabilitySetIds.KEY, BuildingChainAvailabilitySetIds.Entry);
            return collection.find(entry => entry.id === this._id);
        }
        get buildingChain() {
            const collection = this.collectionCache.getCollection(BuildingChains.KEY, BuildingChains.Entry);
            return collection.find(entry => entry.key === this._buildingChain);
        }
    }
    BuildingChainAvailabilitySets.Entry = Entry;
})(BuildingChainAvailabilitySets || (BuildingChainAvailabilitySets = {}));

var BuildingChainToSlots;
(function (BuildingChainToSlots) {
    BuildingChainToSlots.KEY = new CollectionKey("building_chain_to_slots");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._chain = values["chain"];
            this._slot = values["slot"];
        }
        get chain() {
            const collection = this.collectionCache.getCollection(BuildingChains.KEY, BuildingChains.Entry);
            return collection.find(entry => entry.key === this._chain);
        }
        get slot() {
            const collection = this.collectionCache.getCollection(Slots.KEY, Slots.Entry);
            return collection.find(entry => entry.slot === this._slot);
        }
    }
    BuildingChainToSlots.Entry = Entry;
})(BuildingChainToSlots || (BuildingChainToSlots = {}));

var PopulationClasses;
(function (PopulationClasses) {
    PopulationClasses.KEY = new CollectionKey("population_classes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.populationClass = values["population_class"];
            this.riots = !!values["riots"];
            this.demands = !!values["demands"];
            this.spawnRebelGeneral = !!values["spawn_rebel_general"];
            this.onscreenName = values["onscreen_name"];
        }
    }
    PopulationClasses.Entry = Entry;
})(PopulationClasses || (PopulationClasses = {}));

var GovernmentTypes;
(function (GovernmentTypes) {
    GovernmentTypes.KEY = new CollectionKey("government_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.governmentType = values["government_type"];
            this.onscreen = values["onscreen"];
            this.electedMinisters = !!values["elected_ministers"];
            this.hereditaryMinisters = !!values["hereditary_ministers"];
            this.rank = values["rank"];
            this._activeUpperClass = values["active_upper_class"];
            this._activeLowerClass = values["active_lower_class"];
        }
        get activeUpperClass() {
            const collection = this.collectionCache.getCollection(PopulationClasses.KEY, PopulationClasses.Entry);
            return collection.find(entry => entry.populationClass === this._activeUpperClass);
        }
    }
    GovernmentTypes.Entry = Entry;
})(GovernmentTypes || (GovernmentTypes = {}));

var BuildingDescriptionTexts;
(function (BuildingDescriptionTexts) {
    BuildingDescriptionTexts.KEY = new CollectionKey("building_description_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.longDescription = values["long_description"];
        }
    }
    BuildingDescriptionTexts.Entry = Entry;
})(BuildingDescriptionTexts || (BuildingDescriptionTexts = {}));

var BuildingShortDescriptionTexts;
(function (BuildingShortDescriptionTexts) {
    BuildingShortDescriptionTexts.KEY = new CollectionKey("building_short_description_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.shortDescription = values["short_description"];
        }
    }
    BuildingShortDescriptionTexts.Entry = Entry;
})(BuildingShortDescriptionTexts || (BuildingShortDescriptionTexts = {}));

var BuildingCultureGovTypeVariants;
(function (BuildingCultureGovTypeVariants) {
    BuildingCultureGovTypeVariants.KEY = new CollectionKey("building_culture_gov_type_variants");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._building = values["building"];
            this._culture = values["culture"];
            this._governmentType = values["government_type"];
            this.name = values["name"];
            this._artpiece = values["artpiece"];
            this._artpieceAnimated = values["artpiece_animated"];
            this._description = values["description"];
            this.icon = values["icon"];
            this._shortDescription = values["short_description"];
        }
        get building() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._building);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get governmentType() {
            const collection = this.collectionCache.getCollection(GovernmentTypes.KEY, GovernmentTypes.Entry);
            return collection.find(entry => entry.governmentType === this._governmentType);
        }
        get artpiece() {
            const collection = this.collectionCache.getCollection(WarscapeRigid.KEY, WarscapeRigid.Entry);
            return collection.find(entry => entry.key === this._artpiece);
        }
        get artpieceAnimated() {
            const collection = this.collectionCache.getCollection(WarscapeAnimated.KEY, WarscapeAnimated.Entry);
            return collection.find(entry => entry.key === this._artpieceAnimated);
        }
        get description() {
            const collection = this.collectionCache.getCollection(BuildingDescriptionTexts.KEY, BuildingDescriptionTexts.Entry);
            return collection.find(entry => entry.key === this._description);
        }
        get shortDescription() {
            const collection = this.collectionCache.getCollection(BuildingShortDescriptionTexts.KEY, BuildingShortDescriptionTexts.Entry);
            return collection.find(entry => entry.key === this._shortDescription);
        }
    }
    BuildingCultureGovTypeVariants.Entry = Entry;
})(BuildingCultureGovTypeVariants || (BuildingCultureGovTypeVariants = {}));

var BuildingFlavourTexts;
(function (BuildingFlavourTexts) {
    BuildingFlavourTexts.KEY = new CollectionKey("building_flavour_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.flavour = values["flavour"];
        }
    }
    BuildingFlavourTexts.Entry = Entry;
})(BuildingFlavourTexts || (BuildingFlavourTexts = {}));

var BuildingCultureVariants;
(function (BuildingCultureVariants) {
    BuildingCultureVariants.KEY = new CollectionKey("building_culture_variants");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._building = values["building"];
            this._culture = values["culture"];
            this.name = values["name"];
            this._battlefieldBuilding = values["battlefield_building"];
            this._artpiece = values["artpiece"];
            this._artpieceAnimated = values["artpiece_animated"];
            this._description = values["description"];
            this.icon = values["icon"];
            this._subculture = values["subculture"];
            this._faction = values["faction"];
            this.disables = !!values["disables"];
            this._shortDescription = values["short_description"];
            this._flavour = values["flavour"];
            this.displayTooltip = !!values["display_tooltip"];
        }
        get building() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._building);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get battlefieldBuilding() {
            const collection = this.collectionCache.getCollection(BattlefieldBuildings.KEY, BattlefieldBuildings.Entry);
            return collection.find(entry => entry.key === this._battlefieldBuilding);
        }
        get artpiece() {
            const collection = this.collectionCache.getCollection(WarscapeRigid.KEY, WarscapeRigid.Entry);
            return collection.find(entry => entry.key === this._artpiece);
        }
        get artpieceAnimated() {
            const collection = this.collectionCache.getCollection(WarscapeAnimated.KEY, WarscapeAnimated.Entry);
            return collection.find(entry => entry.key === this._artpieceAnimated);
        }
        get description() {
            const collection = this.collectionCache.getCollection(BuildingDescriptionTexts.KEY, BuildingDescriptionTexts.Entry);
            return collection.find(entry => entry.key === this._description);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get shortDescription() {
            const collection = this.collectionCache.getCollection(BuildingShortDescriptionTexts.KEY, BuildingShortDescriptionTexts.Entry);
            return collection.find(entry => entry.key === this._shortDescription);
        }
        get flavour() {
            const collection = this.collectionCache.getCollection(BuildingFlavourTexts.KEY, BuildingFlavourTexts.Entry);
            return collection.find(entry => entry.key === this._flavour);
        }
    }
    BuildingCultureVariants.Entry = Entry;
})(BuildingCultureVariants || (BuildingCultureVariants = {}));

var BuildingEffectsJunction;
(function (BuildingEffectsJunction) {
    BuildingEffectsJunction.KEY = new CollectionKey("building_effects_junction");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._building = values["building"];
            this._effect = values["effect"];
            this.value = values["value"];
            this._effectScope = values["effect_scope"];
            this.valueDamaged = values["value_damaged"];
            this.valueRuined = values["value_ruined"];
        }
        get building() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._building);
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get effectScope() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes.KEY, CampaignEffectScopes.Entry);
            return collection.find(entry => entry.key === this._effectScope);
        }
    }
    BuildingEffectsJunction.Entry = Entry;
})(BuildingEffectsJunction || (BuildingEffectsJunction = {}));

var BuildingFactionwideEffectsJunctions;
(function (BuildingFactionwideEffectsJunctions) {
    BuildingFactionwideEffectsJunctions.KEY = new CollectionKey("building_factionwide_effects_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._building = values["building"];
            this._effect = values["effect"];
            this.effectValue = values["effect_value"];
        }
        get building() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._building);
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
    }
    BuildingFactionwideEffectsJunctions.Entry = Entry;
})(BuildingFactionwideEffectsJunctions || (BuildingFactionwideEffectsJunctions = {}));

var BuildingFactionVariants;
(function (BuildingFactionVariants) {
    BuildingFactionVariants.KEY = new CollectionKey("building_faction_variants");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._building = values["building"];
            this._faction = values["faction"];
            this.onscreenName = values["onscreen_name"];
            this._artpiece = values["artpiece"];
            this._description = values["description"];
            this.icon = values["icon"];
            this._shortDescription = values["short_description"];
        }
        get building() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._building);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get description() {
            const collection = this.collectionCache.getCollection(BuildingDescriptionTexts.KEY, BuildingDescriptionTexts.Entry);
            return collection.find(entry => entry.key === this._description);
        }
        get shortDescription() {
            const collection = this.collectionCache.getCollection(BuildingShortDescriptionTexts.KEY, BuildingShortDescriptionTexts.Entry);
            return collection.find(entry => entry.key === this._shortDescription);
        }
    }
    BuildingFactionVariants.Entry = Entry;
})(BuildingFactionVariants || (BuildingFactionVariants = {}));

var BuildingLevelArmedCitizenryJunctions;
(function (BuildingLevelArmedCitizenryJunctions) {
    BuildingLevelArmedCitizenryJunctions.KEY = new CollectionKey("building_level_armed_citizenry_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._buildingLevel = values["building_level"];
            this._unitGroup = values["unit_group"];
        }
        get buildingLevel() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._buildingLevel);
        }
        get unitGroup() {
            const collection = this.collectionCache.getCollection(ArmedCitizenryUnitGroups.KEY, ArmedCitizenryUnitGroups.Entry);
            return collection.find(entry => entry.unitGroup === this._unitGroup);
        }
    }
    BuildingLevelArmedCitizenryJunctions.Entry = Entry;
})(BuildingLevelArmedCitizenryJunctions || (BuildingLevelArmedCitizenryJunctions = {}));

var Technologies;
(function (Technologies) {
    Technologies.KEY = new CollectionKey("technologies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._buildingLevel = values["building_level"];
            this.positionIndex = values["position_index"];
            this.onscreenName = values["onscreen_name"];
            this.shortDescription = values["short_description"];
            this.longDescription = values["long_description"];
            this.iconName = values["icon_name"];
            this.researchPointsRequired = values["research_points_required"];
            this.militaryPrestige = values["military_prestige"];
            this.navalPrestige = values["naval_prestige"];
            this.economicPrestige = values["economic_prestige"];
            this.enlightenmentPrestige = values["enlightenment_prestige"];
            this.mpAvailableEarly = !!values["mp_available_early"];
            this.mpAvailableLate = !!values["mp_available_late"];
            this.infoPic = values["info_pic"];
            this.aiBias = values["ai_bias"];
            this.uniqueIndex = values["unique_index"];
            this.inEncyclopedia = !!values["in_encyclopedia"];
            this.costPerRound = values["cost_per_round"];
            this.isCivil = !!values["is_civil"];
            this.isEngineering = !!values["is_engineering"];
            this.isMilitary = !!values["is_military"];
        }
        get buildingLevel() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._buildingLevel);
        }
    }
    Technologies.Entry = Entry;
})(Technologies || (Technologies = {}));

var BuildingLevelRequiredTechnologyJunctions;
(function (BuildingLevelRequiredTechnologyJunctions) {
    BuildingLevelRequiredTechnologyJunctions.KEY = new CollectionKey("building_level_required_technology_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._buildingLevelKey = values["building_level_key"];
            this._technologyKey = values["technology_key"];
        }
        get buildingLevelKey() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._buildingLevelKey);
        }
        get technologyKey() {
            const collection = this.collectionCache.getCollection(Technologies.KEY, Technologies.Entry);
            return collection.find(entry => entry.key === this._technologyKey);
        }
    }
    BuildingLevelRequiredTechnologyJunctions.Entry = Entry;
})(BuildingLevelRequiredTechnologyJunctions || (BuildingLevelRequiredTechnologyJunctions = {}));

var BuildingSets;
(function (BuildingSets) {
    BuildingSets.KEY = new CollectionKey("building_sets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    BuildingSets.Entry = Entry;
})(BuildingSets || (BuildingSets = {}));

var BuildingSetToBuildingJunctions;
(function (BuildingSetToBuildingJunctions) {
    BuildingSetToBuildingJunctions.KEY = new CollectionKey("building_set_to_building_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._buildingSet = values["building_set"];
            this._buildingLevel = values["building_level"];
            this._buildingChain = values["building_chain"];
            this.exclude = !!values["exclude"];
        }
        get buildingSet() {
            const collection = this.collectionCache.getCollection(BuildingSets.KEY, BuildingSets.Entry);
            return collection.find(entry => entry.key === this._buildingSet);
        }
        get buildingLevel() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._buildingLevel);
        }
        get buildingChain() {
            const collection = this.collectionCache.getCollection(BuildingChains.KEY, BuildingChains.Entry);
            return collection.find(entry => entry.key === this._buildingChain);
        }
    }
    BuildingSetToBuildingJunctions.Entry = Entry;
})(BuildingSetToBuildingJunctions || (BuildingSetToBuildingJunctions = {}));

var BuildingStates;
(function (BuildingStates) {
    BuildingStates.KEY = new CollectionKey("building_states");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    BuildingStates.Entry = Entry;
})(BuildingStates || (BuildingStates = {}));

var UnitAbilities;
(function (UnitAbilities) {
    UnitAbilities.KEY = new CollectionKey("unit_abilities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.stationaryForTurn = !!values["stationary_for_turn"];
            this.supersedesAbility = values["supersedes_ability"];
            this.requiresEffectEnabling = !!values["requires_effect_enabling"];
            this.tooltipText = values["tooltip_text"];
        }
    }
    UnitAbilities.Entry = Entry;
})(UnitAbilities || (UnitAbilities = {}));

var BuildingToUnitAbilitiesJunctions;
(function (BuildingToUnitAbilitiesJunctions) {
    BuildingToUnitAbilitiesJunctions.KEY = new CollectionKey("building_to_unit_abilities_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._buildingName = values["building_name"];
            this._ability = values["ability"];
        }
        get buildingName() {
            const collection = this.collectionCache.getCollection(BattlefieldBuildings.KEY, BattlefieldBuildings.Entry);
            return collection.find(entry => entry.key === this._buildingName);
        }
        get ability() {
            const collection = this.collectionCache.getCollection(UnitAbilities.KEY, UnitAbilities.Entry);
            return collection.find(entry => entry.key === this._ability);
        }
    }
    BuildingToUnitAbilitiesJunctions.Entry = Entry;
})(BuildingToUnitAbilitiesJunctions || (BuildingToUnitAbilitiesJunctions = {}));

var BuildingUnitsAllowed;
(function (BuildingUnitsAllowed) {
    BuildingUnitsAllowed.KEY = new CollectionKey("building_units_allowed");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._building = values["building"];
            this._unit = values["unit"];
            this.xp = values["XP"];
            this.conditions = values["conditions"];
            this.key = values["key"];
            this._faction = values["faction"];
            this.enabled = !!values["enabled"];
        }
        get building() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._building);
        }
        get unit() {
            const collection = this.collectionCache.getCollection(MainUnits.KEY, MainUnits.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    BuildingUnitsAllowed.Entry = Entry;
})(BuildingUnitsAllowed || (BuildingUnitsAllowed = {}));

var BuildingUpgradesJunction;
(function (BuildingUpgradesJunction) {
    BuildingUpgradesJunction.KEY = new CollectionKey("building_upgrades_junction");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._from = values["from"];
            this._to = values["to"];
        }
        get from() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._from);
        }
        get to() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._to);
        }
    }
    BuildingUpgradesJunction.Entry = Entry;
})(BuildingUpgradesJunction || (BuildingUpgradesJunction = {}));

var CaiAgentDistributionProfiles;
(function (CaiAgentDistributionProfiles) {
    CaiAgentDistributionProfiles.KEY = new CollectionKey("cai_agent_distribution_profiles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiAgentDistributionProfiles.Entry = Entry;
})(CaiAgentDistributionProfiles || (CaiAgentDistributionProfiles = {}));

var CaiAgentDistributionTypes;
(function (CaiAgentDistributionTypes) {
    CaiAgentDistributionTypes.KEY = new CollectionKey("cai_agent_distribution_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiAgentDistributionTypes.Entry = Entry;
})(CaiAgentDistributionTypes || (CaiAgentDistributionTypes = {}));

var CaiAgentTypes;
(function (CaiAgentTypes) {
    CaiAgentTypes.KEY = new CollectionKey("cai_agent_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiAgentTypes.Entry = Entry;
})(CaiAgentTypes || (CaiAgentTypes = {}));

var CaiAgentRecordToCaiAgentTypeJunctions;
(function (CaiAgentRecordToCaiAgentTypeJunctions) {
    CaiAgentRecordToCaiAgentTypeJunctions.KEY = new CollectionKey("cai_agent_record_to_cai_agent_type_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._agentTypeKey = values["agent_type_key"];
            this._agentRecordKey = values["agent_record_key"];
        }
        get agentTypeKey() {
            const collection = this.collectionCache.getCollection(CaiAgentTypes.KEY, CaiAgentTypes.Entry);
            return collection.find(entry => entry.key === this._agentTypeKey);
        }
        get agentRecordKey() {
            const collection = this.collectionCache.getCollection(Agents.KEY, Agents.Entry);
            return collection.find(entry => entry.key === this._agentRecordKey);
        }
    }
    CaiAgentRecordToCaiAgentTypeJunctions.Entry = Entry;
})(CaiAgentRecordToCaiAgentTypeJunctions || (CaiAgentRecordToCaiAgentTypeJunctions = {}));

var CaiAgentRecruitmentProfiles;
(function (CaiAgentRecruitmentProfiles) {
    CaiAgentRecruitmentProfiles.KEY = new CollectionKey("cai_agent_recruitment_profiles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiAgentRecruitmentProfiles.Entry = Entry;
})(CaiAgentRecruitmentProfiles || (CaiAgentRecruitmentProfiles = {}));

var CaiAgentRecruitmentTypes;
(function (CaiAgentRecruitmentTypes) {
    CaiAgentRecruitmentTypes.KEY = new CollectionKey("cai_agent_recruitment_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiAgentRecruitmentTypes.Entry = Entry;
})(CaiAgentRecruitmentTypes || (CaiAgentRecruitmentTypes = {}));

var CaiAgentTypeDistributionProfileJunctions;
(function (CaiAgentTypeDistributionProfileJunctions) {
    CaiAgentTypeDistributionProfileJunctions.KEY = new CollectionKey("cai_agent_type_distribution_profile_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._distributionProfileKey = values["distribution_profile_key"];
            this._agentTypeKey = values["agent_type_key"];
            this._distributionTypeKey = values["distribution_type_key"];
        }
        get distributionProfileKey() {
            const collection = this.collectionCache.getCollection(CaiAgentDistributionProfiles.KEY, CaiAgentDistributionProfiles.Entry);
            return collection.find(entry => entry.key === this._distributionProfileKey);
        }
        get agentTypeKey() {
            const collection = this.collectionCache.getCollection(CaiAgentTypes.KEY, CaiAgentTypes.Entry);
            return collection.find(entry => entry.key === this._agentTypeKey);
        }
        get distributionTypeKey() {
            const collection = this.collectionCache.getCollection(CaiAgentDistributionTypes.KEY, CaiAgentDistributionTypes.Entry);
            return collection.find(entry => entry.key === this._distributionTypeKey);
        }
    }
    CaiAgentTypeDistributionProfileJunctions.Entry = Entry;
})(CaiAgentTypeDistributionProfileJunctions || (CaiAgentTypeDistributionProfileJunctions = {}));

var CaiAgentTypeRecruitmentProfileJunctions;
(function (CaiAgentTypeRecruitmentProfileJunctions) {
    CaiAgentTypeRecruitmentProfileJunctions.KEY = new CollectionKey("cai_agent_type_recruitment_profile_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._recruitmentProfileKey = values["recruitment_profile_key"];
            this._agentTypeKey = values["agent_type_key"];
            this._recruitmentTypeKey = values["recruitment_type_key"];
        }
        get recruitmentProfileKey() {
            const collection = this.collectionCache.getCollection(CaiAgentRecruitmentProfiles.KEY, CaiAgentRecruitmentProfiles.Entry);
            return collection.find(entry => entry.key === this._recruitmentProfileKey);
        }
        get agentTypeKey() {
            const collection = this.collectionCache.getCollection(CaiAgentTypes.KEY, CaiAgentTypes.Entry);
            return collection.find(entry => entry.key === this._agentTypeKey);
        }
        get recruitmentTypeKey() {
            const collection = this.collectionCache.getCollection(CaiAgentRecruitmentTypes.KEY, CaiAgentRecruitmentTypes.Entry);
            return collection.find(entry => entry.key === this._recruitmentTypeKey);
        }
    }
    CaiAgentTypeRecruitmentProfileJunctions.Entry = Entry;
})(CaiAgentTypeRecruitmentProfileJunctions || (CaiAgentTypeRecruitmentProfileJunctions = {}));

var CaiBaseBuildingContextValues;
(function (CaiBaseBuildingContextValues) {
    CaiBaseBuildingContextValues.KEY = new CollectionKey("cai_base_building_context_values");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._buildingKey = values["building_key"];
            this.economicValue = values["economic_value"];
            this.militaryValue = values["military_value"];
            this.happinessValue = values["happiness_value"];
            this.prestigeValue = values["prestige_value"];
            this.educationValue = values["education_value"];
            this.existingBuildingsApplyDiscountOverLimit = values["existing_buildings_apply_discount_over_limit"];
            this.existingBuildingsDiscountPerBuilding = values["existing_buildings_discount_per_building"];
            this.existingBuildingsMaximumDiscount = values["existing_buildings_maximum_discount"];
        }
        get buildingKey() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._buildingKey);
        }
    }
    CaiBaseBuildingContextValues.Entry = Entry;
})(CaiBaseBuildingContextValues || (CaiBaseBuildingContextValues = {}));

var CaiConstructionSystemCategoryGroups;
(function (CaiConstructionSystemCategoryGroups) {
    CaiConstructionSystemCategoryGroups.KEY = new CollectionKey("cai_construction_system_category_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiConstructionSystemCategoryGroups.Entry = Entry;
})(CaiConstructionSystemCategoryGroups || (CaiConstructionSystemCategoryGroups = {}));

var CdirMilitaryGeneratorUnitGroups;
(function (CdirMilitaryGeneratorUnitGroups) {
    CdirMilitaryGeneratorUnitGroups.KEY = new CollectionKey("cdir_military_generator_unit_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CdirMilitaryGeneratorUnitGroups.Entry = Entry;
})(CdirMilitaryGeneratorUnitGroups || (CdirMilitaryGeneratorUnitGroups = {}));

var CaiConstructionSystemCategories;
(function (CaiConstructionSystemCategories) {
    CaiConstructionSystemCategories.KEY = new CollectionKey("cai_construction_system_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._caiConstructionSystemCategoryGroup = values["cai_construction_system_category_group"];
            this._cdirMilitaryGeneratorUnitGroup = values["cdir_military_generator_unit_group"];
        }
        get caiConstructionSystemCategoryGroup() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemCategoryGroups.KEY, CaiConstructionSystemCategoryGroups.Entry);
            return collection.find(entry => entry.key === this._caiConstructionSystemCategoryGroup);
        }
        get cdirMilitaryGeneratorUnitGroup() {
            const collection = this.collectionCache.getCollection(CdirMilitaryGeneratorUnitGroups.KEY, CdirMilitaryGeneratorUnitGroups.Entry);
            return collection.find(entry => entry.key === this._cdirMilitaryGeneratorUnitGroup);
        }
    }
    CaiConstructionSystemCategories.Entry = Entry;
})(CaiConstructionSystemCategories || (CaiConstructionSystemCategories = {}));

var CaiConstructionSystemBuildingValues;
(function (CaiConstructionSystemBuildingValues) {
    CaiConstructionSystemBuildingValues.KEY = new CollectionKey("cai_construction_system_building_values");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaign = values["campaign"];
            this._faction = values["faction"];
            this._subCulture = values["sub_culture"];
            this._culture = values["culture"];
            this._buildingOrBuildingRangeStartInclusive = values["building_or_building_range_start_inclusive"];
            this._buildingRangeEndInclusive = values["building_range_end_inclusive"];
            this._buildingInstance = values["building_instance"];
            this._buildingChain = values["building_chain"];
            this._buildingSuperChain = values["building_super_chain"];
            this._caiConstructionSystemCategory = values["cai_construction_system_category"];
            this._caiConstructionSystemCategoryGroup = values["cai_construction_system_category_group"];
            this.scoreOrScoreStartInclusive = values["score_or_score_start_inclusive"];
            this.scoreEndInclusive = values["score_end_inclusive"];
            this.perProvinceBuildingLimitStart = values["per_province_building_limit_start"];
            this.perProvinceBuildingMinimumDiscountWhenExceedingLimitStart = values["per_province_building_minimum_discount_when_exceeding_limit_start"];
            this.perProvinceBuildingMaximumDiscountWhenExceedingLimitStart = values["per_province_building_maximum_discount_when_exceeding_limit_start"];
            this.perProvincePerBuildingDiscountIncrementWhenExceedingLimitStart = values["per_province_per_building_discount_increment_when_exceeding_limit_start"];
            this.perProvinceBuildingLimitEnd = values["per_province_building_limit_end"];
            this.perProvinceBuildingMinimumDiscountWhenExceedingLimitEnd = values["per_province_building_minimum_discount_when_exceeding_limit_end"];
            this.perProvinceBuildingMaximumDiscountWhenExceedingLimitEnd = values["per_province_building_maximum_discount_when_exceeding_limit_end"];
            this.perProvincePerBuildingDiscountIncrementWhenExceedingLimitEnd = values["per_province_per_building_discount_increment_when_exceeding_limit_end"];
            this.perFactionBuildingLimitStart = values["per_faction_building_limit_start"];
            this.perFactionBuildingMinimumDiscountWhenExceedingLimitStart = values["per_faction_building_minimum_discount_when_exceeding_limit_start"];
            this.perFactionBuildingMaximumDiscountWhenExceedingLimitStart = values["per_faction_building_maximum_discount_when_exceeding_limit_start"];
            this.perFactionPerBuildingDiscountIncrementWhenExceedingLimitStart = values["per_faction_per_building_discount_increment_when_exceeding_limit_start"];
            this.perFactionBuildingLimitEnd = values["per_faction_building_limit_end"];
            this.perFactionBuildingMinimumDiscountWhenExceedingLimitEnd = values["per_faction_building_minimum_discount_when_exceeding_limit_end"];
            this.perFactionBuildingMaximumDiscountWhenExceedingLimitEnd = values["per_faction_building_maximum_discount_when_exceeding_limit_end"];
            this.perFactionPerBuildingDiscountIncrementWhenExceedingLimitEnd = values["per_faction_per_building_discount_increment_when_exceeding_limit_end"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get subCulture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._subCulture);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get buildingOrBuildingRangeStartInclusive() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._buildingOrBuildingRangeStartInclusive);
        }
        get buildingRangeEndInclusive() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._buildingRangeEndInclusive);
        }
        get buildingInstance() {
            const collection = this.collectionCache.getCollection(BuildingInstances.KEY, BuildingInstances.Entry);
            return collection.find(entry => entry.key === this._buildingInstance);
        }
        get buildingChain() {
            const collection = this.collectionCache.getCollection(BuildingChains.KEY, BuildingChains.Entry);
            return collection.find(entry => entry.key === this._buildingChain);
        }
        get buildingSuperChain() {
            const collection = this.collectionCache.getCollection(BuildingSuperchains.KEY, BuildingSuperchains.Entry);
            return collection.find(entry => entry.key === this._buildingSuperChain);
        }
        get caiConstructionSystemCategory() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemCategories.KEY, CaiConstructionSystemCategories.Entry);
            return collection.find(entry => entry.key === this._caiConstructionSystemCategory);
        }
        get caiConstructionSystemCategoryGroup() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemCategoryGroups.KEY, CaiConstructionSystemCategoryGroups.Entry);
            return collection.find(entry => entry.key === this._caiConstructionSystemCategoryGroup);
        }
    }
    CaiConstructionSystemBuildingValues.Entry = Entry;
})(CaiConstructionSystemBuildingValues || (CaiConstructionSystemBuildingValues = {}));

var CaiConstructionSystemTemplates;
(function (CaiConstructionSystemTemplates) {
    CaiConstructionSystemTemplates.KEY = new CollectionKey("cai_construction_system_templates");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.defaultCategoryAndGroupValue = values["default_category_and_group_value"];
        }
    }
    CaiConstructionSystemTemplates.Entry = Entry;
})(CaiConstructionSystemTemplates || (CaiConstructionSystemTemplates = {}));

var CaiConstructionSystemProvinceTemplateAssignmentPolicies;
(function (CaiConstructionSystemProvinceTemplateAssignmentPolicies) {
    CaiConstructionSystemProvinceTemplateAssignmentPolicies.KEY = new CollectionKey("cai_construction_system_province_template_assignment_policies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._capitalProvinceTemplate = values["capital_province_template"];
            this._militaryProvinceTemplate = values["military_province_template"];
            this._economicProvinceTemplate = values["economic_province_template"];
            this._militaryPortProvinceTemplate = values["military_port_province_template"];
            this._economicPortProvinceTemplate = values["economic_port_province_template"];
            this.nonPortProvinceMilitaryIdealPercentage = values["non_port_province_military_ideal_percentage"];
            this.portProvinceMilitaryIdealPercentage = values["port_province_military_ideal_percentage"];
        }
        get capitalProvinceTemplate() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemTemplates.KEY, CaiConstructionSystemTemplates.Entry);
            return collection.find(entry => entry.key === this._capitalProvinceTemplate);
        }
        get militaryProvinceTemplate() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemTemplates.KEY, CaiConstructionSystemTemplates.Entry);
            return collection.find(entry => entry.key === this._militaryProvinceTemplate);
        }
        get economicProvinceTemplate() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemTemplates.KEY, CaiConstructionSystemTemplates.Entry);
            return collection.find(entry => entry.key === this._economicProvinceTemplate);
        }
        get militaryPortProvinceTemplate() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemTemplates.KEY, CaiConstructionSystemTemplates.Entry);
            return collection.find(entry => entry.key === this._militaryPortProvinceTemplate);
        }
        get economicPortProvinceTemplate() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemTemplates.KEY, CaiConstructionSystemTemplates.Entry);
            return collection.find(entry => entry.key === this._economicPortProvinceTemplate);
        }
    }
    CaiConstructionSystemProvinceTemplateAssignmentPolicies.Entry = Entry;
})(CaiConstructionSystemProvinceTemplateAssignmentPolicies || (CaiConstructionSystemProvinceTemplateAssignmentPolicies = {}));

var CaiConstructionSystemStrategicContextTemplatePolicies;
(function (CaiConstructionSystemStrategicContextTemplatePolicies) {
    CaiConstructionSystemStrategicContextTemplatePolicies.KEY = new CollectionKey("cai_construction_system_strategic_context_template_policies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._defaultCaiConstructionSystemTemplate = values["default_cai_construction_system_template"];
        }
        get defaultCaiConstructionSystemTemplate() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemTemplates.KEY, CaiConstructionSystemTemplates.Entry);
            return collection.find(entry => entry.key === this._defaultCaiConstructionSystemTemplate);
        }
    }
    CaiConstructionSystemStrategicContextTemplatePolicies.Entry = Entry;
})(CaiConstructionSystemStrategicContextTemplatePolicies || (CaiConstructionSystemStrategicContextTemplatePolicies = {}));

var CaiStrategicContextTypes;
(function (CaiStrategicContextTypes) {
    CaiStrategicContextTypes.KEY = new CollectionKey("cai_strategic_context_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiStrategicContextTypes.Entry = Entry;
})(CaiStrategicContextTypes || (CaiStrategicContextTypes = {}));

var CaiConstructionSystemStrategicContextTemplatePolicyJunctions;
(function (CaiConstructionSystemStrategicContextTemplatePolicyJunctions) {
    CaiConstructionSystemStrategicContextTemplatePolicyJunctions.KEY = new CollectionKey("cai_construction_system_strategic_context_template_policy_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._caiConstructionSystemStrategicContextPolicy = values["cai_construction_system_strategic_context_policy"];
            this._caiStrategicContext = values["cai_strategic_context"];
            this._caiConstructionSystemTemplate = values["cai_construction_system_template"];
        }
        get caiConstructionSystemStrategicContextPolicy() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemStrategicContextTemplatePolicies.KEY, CaiConstructionSystemStrategicContextTemplatePolicies.Entry);
            return collection.find(entry => entry.key === this._caiConstructionSystemStrategicContextPolicy);
        }
        get caiStrategicContext() {
            const collection = this.collectionCache.getCollection(CaiStrategicContextTypes.KEY, CaiStrategicContextTypes.Entry);
            return collection.find(entry => entry.key === this._caiStrategicContext);
        }
        get caiConstructionSystemTemplate() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemTemplates.KEY, CaiConstructionSystemTemplates.Entry);
            return collection.find(entry => entry.key === this._caiConstructionSystemTemplate);
        }
    }
    CaiConstructionSystemStrategicContextTemplatePolicyJunctions.Entry = Entry;
})(CaiConstructionSystemStrategicContextTemplatePolicyJunctions || (CaiConstructionSystemStrategicContextTemplatePolicyJunctions = {}));

var CaiConstructionSystemSuperchainHints;
(function (CaiConstructionSystemSuperchainHints) {
    CaiConstructionSystemSuperchainHints.KEY = new CollectionKey("cai_construction_system_superchain_hints");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._superChainKey = values["super_chain_key"];
            this.militarySpecialisationRecommended = !!values["military_specialisation_recommended"];
            this.economicSpecialisationRecommended = !!values["economic_specialisation_recommended"];
        }
        get superChainKey() {
            const collection = this.collectionCache.getCollection(BuildingSuperchains.KEY, BuildingSuperchains.Entry);
            return collection.find(entry => entry.key === this._superChainKey);
        }
    }
    CaiConstructionSystemSuperchainHints.Entry = Entry;
})(CaiConstructionSystemSuperchainHints || (CaiConstructionSystemSuperchainHints = {}));

var CaiConstructionSystemSynergyPolicies;
(function (CaiConstructionSystemSynergyPolicies) {
    CaiConstructionSystemSynergyPolicies.KEY = new CollectionKey("cai_construction_system_synergy_policies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiConstructionSystemSynergyPolicies.Entry = Entry;
})(CaiConstructionSystemSynergyPolicies || (CaiConstructionSystemSynergyPolicies = {}));

var CaiConstructionSystemSynergyLevels;
(function (CaiConstructionSystemSynergyLevels) {
    CaiConstructionSystemSynergyLevels.KEY = new CollectionKey("cai_construction_system_synergy_levels");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.relativeEffect = values["relative_effect"];
            this.absoluteEffect = values["absolute_effect"];
            this.priority = values["priority"];
        }
    }
    CaiConstructionSystemSynergyLevels.Entry = Entry;
})(CaiConstructionSystemSynergyLevels || (CaiConstructionSystemSynergyLevels = {}));

var CaiConstructionSystemSynergies;
(function (CaiConstructionSystemSynergies) {
    CaiConstructionSystemSynergies.KEY = new CollectionKey("cai_construction_system_synergies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._synergyPolicyKey = values["synergy_policy_key"];
            this._existingBuildingChainKey = values["existing_building_chain_key"];
            this._existingBuildingLevelInclusiveStart = values["existing_building_level_inclusive_start"];
            this._existingBuildingLevelInclusiveEnd = values["existing_building_level_inclusive_end"];
            this._potentialBuidingChainKey = values["potential_buiding_chain_key"];
            this._potentialBuildingLevelInclusiveStart = values["potential_building_level_inclusive_start"];
            this._potentialBuildingLevelInclusiveEnd = values["potential_building_level_inclusive_end"];
            this._synergyLevelKey = values["synergy_level_key"];
            this._existingBuildingInstance = values["existing_building_instance"];
            this._existingBuildingSuperChain = values["existing_building_super_chain"];
            this._potentialBuildingInstance = values["potential_building_instance"];
            this._potentialBuildingSuperChain = values["potential_building_super_chain"];
        }
        get synergyPolicyKey() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemSynergyPolicies.KEY, CaiConstructionSystemSynergyPolicies.Entry);
            return collection.find(entry => entry.key === this._synergyPolicyKey);
        }
        get existingBuildingChainKey() {
            const collection = this.collectionCache.getCollection(BuildingChains.KEY, BuildingChains.Entry);
            return collection.find(entry => entry.key === this._existingBuildingChainKey);
        }
        get existingBuildingLevelInclusiveStart() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._existingBuildingLevelInclusiveStart);
        }
        get existingBuildingLevelInclusiveEnd() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._existingBuildingLevelInclusiveEnd);
        }
        get potentialBuidingChainKey() {
            const collection = this.collectionCache.getCollection(BuildingChains.KEY, BuildingChains.Entry);
            return collection.find(entry => entry.key === this._potentialBuidingChainKey);
        }
        get potentialBuildingLevelInclusiveStart() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._potentialBuildingLevelInclusiveStart);
        }
        get potentialBuildingLevelInclusiveEnd() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._potentialBuildingLevelInclusiveEnd);
        }
        get synergyLevelKey() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemSynergyLevels.KEY, CaiConstructionSystemSynergyLevels.Entry);
            return collection.find(entry => entry.key === this._synergyLevelKey);
        }
        get existingBuildingInstance() {
            const collection = this.collectionCache.getCollection(BuildingInstances.KEY, BuildingInstances.Entry);
            return collection.find(entry => entry.key === this._existingBuildingInstance);
        }
        get existingBuildingSuperChain() {
            const collection = this.collectionCache.getCollection(BuildingSuperchains.KEY, BuildingSuperchains.Entry);
            return collection.find(entry => entry.key === this._existingBuildingSuperChain);
        }
        get potentialBuildingInstance() {
            const collection = this.collectionCache.getCollection(BuildingInstances.KEY, BuildingInstances.Entry);
            return collection.find(entry => entry.key === this._potentialBuildingInstance);
        }
        get potentialBuildingSuperChain() {
            const collection = this.collectionCache.getCollection(BuildingSuperchains.KEY, BuildingSuperchains.Entry);
            return collection.find(entry => entry.key === this._potentialBuildingSuperChain);
        }
    }
    CaiConstructionSystemSynergies.Entry = Entry;
})(CaiConstructionSystemSynergies || (CaiConstructionSystemSynergies = {}));

var CaiConstructionSystemTemplatesJunctions;
(function (CaiConstructionSystemTemplatesJunctions) {
    CaiConstructionSystemTemplatesJunctions.KEY = new CollectionKey("cai_construction_system_templates_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._caiConstructionSystemTemplate = values["cai_construction_system_template"];
            this._caiConstructionSystemCategory = values["cai_construction_system_category"];
            this._caiConstructionSystemCategoryGroup = values["cai_construction_system_category_group"];
            this.value = values["value"];
        }
        get caiConstructionSystemTemplate() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemTemplates.KEY, CaiConstructionSystemTemplates.Entry);
            return collection.find(entry => entry.key === this._caiConstructionSystemTemplate);
        }
        get caiConstructionSystemCategory() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemCategories.KEY, CaiConstructionSystemCategories.Entry);
            return collection.find(entry => entry.key === this._caiConstructionSystemCategory);
        }
        get caiConstructionSystemCategoryGroup() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemCategoryGroups.KEY, CaiConstructionSystemCategoryGroups.Entry);
            return collection.find(entry => entry.key === this._caiConstructionSystemCategoryGroup);
        }
    }
    CaiConstructionSystemTemplatesJunctions.Entry = Entry;
})(CaiConstructionSystemTemplatesJunctions || (CaiConstructionSystemTemplatesJunctions = {}));

var DiplomacyStrings;
(function (DiplomacyStrings) {
    DiplomacyStrings.KEY = new CollectionKey("diplomacy_strings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.string = values["string"];
        }
    }
    DiplomacyStrings.Entry = Entry;
})(DiplomacyStrings || (DiplomacyStrings = {}));

var CaiPersonalityDiplomaticEvents;
(function (CaiPersonalityDiplomaticEvents) {
    CaiPersonalityDiplomaticEvents.KEY = new CollectionKey("cai_personality_diplomatic_events");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._diplomaticFactorGroupActive = values["diplomatic_factor_group_active"];
            this._diplomaticFactorGroupInactive = values["diplomatic_factor_group_inactive"];
        }
        get diplomaticFactorGroupActive() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings.KEY, DiplomacyStrings.Entry);
            return collection.find(entry => entry.key === this._diplomaticFactorGroupActive);
        }
        get diplomaticFactorGroupInactive() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings.KEY, DiplomacyStrings.Entry);
            return collection.find(entry => entry.key === this._diplomaticFactorGroupInactive);
        }
    }
    CaiPersonalityDiplomaticEvents.Entry = Entry;
})(CaiPersonalityDiplomaticEvents || (CaiPersonalityDiplomaticEvents = {}));

var CaiDiplomacyComplexTreacheries;
(function (CaiDiplomacyComplexTreacheries) {
    CaiDiplomacyComplexTreacheries.KEY = new CollectionKey("cai_diplomacy_complex_treacheries");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._firstEvent = values["first_event"];
            this._secondEvent = values["second_event"];
            this.maxTurnDifference = values["max_turn_difference"];
            this.value = values["value"];
        }
        get firstEvent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDiplomaticEvents.KEY, CaiPersonalityDiplomaticEvents.Entry);
            return collection.find(entry => entry.id === this._firstEvent);
        }
        get secondEvent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDiplomaticEvents.KEY, CaiPersonalityDiplomaticEvents.Entry);
            return collection.find(entry => entry.id === this._secondEvent);
        }
    }
    CaiDiplomacyComplexTreacheries.Entry = Entry;
})(CaiDiplomacyComplexTreacheries || (CaiDiplomacyComplexTreacheries = {}));

var CaiDiplomacySimpleTreacheries;
(function (CaiDiplomacySimpleTreacheries) {
    CaiDiplomacySimpleTreacheries.KEY = new CollectionKey("cai_diplomacy_simple_treacheries");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._event = values["event"];
            this.value = values["value"];
        }
        get event() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDiplomaticEvents.KEY, CaiPersonalityDiplomaticEvents.Entry);
            return collection.find(entry => entry.id === this._event);
        }
    }
    CaiDiplomacySimpleTreacheries.Entry = Entry;
})(CaiDiplomacySimpleTreacheries || (CaiDiplomacySimpleTreacheries = {}));

var CaiMilitaryAggressivenessPolicies;
(function (CaiMilitaryAggressivenessPolicies) {
    CaiMilitaryAggressivenessPolicies.KEY = new CollectionKey("cai_military_aggressiveness_policies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiMilitaryAggressivenessPolicies.Entry = Entry;
})(CaiMilitaryAggressivenessPolicies || (CaiMilitaryAggressivenessPolicies = {}));

var CaiMilitaryBehaviourPolicies;
(function (CaiMilitaryBehaviourPolicies) {
    CaiMilitaryBehaviourPolicies.KEY = new CollectionKey("cai_military_behaviour_policies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiMilitaryBehaviourPolicies.Entry = Entry;
})(CaiMilitaryBehaviourPolicies || (CaiMilitaryBehaviourPolicies = {}));

var TaxesLevels;
(function (TaxesLevels) {
    TaxesLevels.KEY = new CollectionKey("taxes_levels");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.taxLevel = values["tax_level"];
            this.percentage = values["percentage"];
        }
    }
    TaxesLevels.Entry = Entry;
})(TaxesLevels || (TaxesLevels = {}));

var CaiPersonalitiesBudgetAllocations;
(function (CaiPersonalitiesBudgetAllocations) {
    CaiPersonalitiesBudgetAllocations.KEY = new CollectionKey("cai_personalities_budget_allocations");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.armyFundsAllocationPercentage = values["army_funds_allocation_percentage"];
            this.armyTurnsOfInactivityUntilCap = values["army_turns_of_inactivity_until_cap"];
            this.armyFundingCap = values["army_funding_cap"];
            this.armyPercentageOfPoolToSaveOnFail = values["army_percentage_of_pool_to_save_on_fail"];
            this.navyFundsAllocationPercentage = values["navy_funds_allocation_percentage"];
            this.navyTurnsOfInactivityUntilCap = values["navy_turns_of_inactivity_until_cap"];
            this.navyFundingCap = values["navy_funding_cap"];
            this.navyPercentageOfPoolToSaveOnFail = values["navy_percentage_of_pool_to_save_on_fail"];
            this.agentsFundsAllocationPercentage = values["agents_funds_allocation_percentage"];
            this.agentsTurnsOfInactivityUntilCap = values["agents_turns_of_inactivity_until_cap"];
            this.agentsFundingCap = values["agents_funding_cap"];
            this.agentsPercentageOfPoolToSaveOnFail = values["agents_percentage_of_pool_to_save_on_fail"];
            this.constructionFundsAllocationPercentage = values["construction_funds_allocation_percentage"];
            this.constructionTurnsOfInactivityUntilCap = values["construction_turns_of_inactivity_until_cap"];
            this.constructionFundingCap = values["construction_funding_cap"];
            this.constructionPercentageOfPoolToSaveOnFail = values["construction_percentage_of_pool_to_save_on_fail"];
            this.diplomacyFundsAllocationPercentage = values["diplomacy_funds_allocation_percentage"];
            this.diplomacyTurnsOfInactivityUntilCap = values["diplomacy_turns_of_inactivity_until_cap"];
            this.diplomacyFundingCap = values["diplomacy_funding_cap"];
            this.diplomacyPercentageOfPoolToSaveOnFail = values["diplomacy_percentage_of_pool_to_save_on_fail"];
            this._minimumSettableTaxLevel = values["minimum_settable_tax_level"];
            this._maximumSettableTaxLevel = values["maximum_settable_tax_level"];
            this.technologyFundsAllocationPercentage = values["technology_funds_allocation_percentage"];
            this.technologyTurnsOfInactivityUntilCap = values["technology_turns_of_inactivity_until_cap"];
            this.technologyFundingCap = values["technology_funding_cap"];
            this.technologyPercentageOfPoolToSaveOnFail = values["technology_percentage_of_pool_to_save_on_fail"];
        }
        get minimumSettableTaxLevel() {
            const collection = this.collectionCache.getCollection(TaxesLevels.KEY, TaxesLevels.Entry);
            return collection.find(entry => entry.taxLevel === this._minimumSettableTaxLevel);
        }
        get maximumSettableTaxLevel() {
            const collection = this.collectionCache.getCollection(TaxesLevels.KEY, TaxesLevels.Entry);
            return collection.find(entry => entry.taxLevel === this._maximumSettableTaxLevel);
        }
    }
    CaiPersonalitiesBudgetAllocations.Entry = Entry;
})(CaiPersonalitiesBudgetAllocations || (CaiPersonalitiesBudgetAllocations = {}));

var CaiPersonalitiesBudgetPolicies;
(function (CaiPersonalitiesBudgetPolicies) {
    CaiPersonalitiesBudgetPolicies.KEY = new CollectionKey("cai_personalities_budget_policies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._defaultBudgetAllocationKey = values["default_budget_allocation_key"];
        }
        get defaultBudgetAllocationKey() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesBudgetAllocations.KEY, CaiPersonalitiesBudgetAllocations.Entry);
            return collection.find(entry => entry.key === this._defaultBudgetAllocationKey);
        }
    }
    CaiPersonalitiesBudgetPolicies.Entry = Entry;
})(CaiPersonalitiesBudgetPolicies || (CaiPersonalitiesBudgetPolicies = {}));

var CampaignAiTechnologyManagers;
(function (CampaignAiTechnologyManagers) {
    CampaignAiTechnologyManagers.KEY = new CollectionKey("campaign_ai_technology_managers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignAiTechnologyManagers.Entry = Entry;
})(CampaignAiTechnologyManagers || (CampaignAiTechnologyManagers = {}));

var CampaignAiCharacterSkillTreeManagers;
(function (CampaignAiCharacterSkillTreeManagers) {
    CampaignAiCharacterSkillTreeManagers.KEY = new CollectionKey("campaign_ai_character_skill_tree_managers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignAiCharacterSkillTreeManagers.Entry = Entry;
})(CampaignAiCharacterSkillTreeManagers || (CampaignAiCharacterSkillTreeManagers = {}));

var CaiPersonalitiesReliabilityPolicies;
(function (CaiPersonalitiesReliabilityPolicies) {
    CaiPersonalitiesReliabilityPolicies.KEY = new CollectionKey("cai_personalities_reliability_policies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.joinAllyBias = values["join_ally_bias"];
        }
    }
    CaiPersonalitiesReliabilityPolicies.Entry = Entry;
})(CaiPersonalitiesReliabilityPolicies || (CaiPersonalitiesReliabilityPolicies = {}));

var CaiPersonalitiesReligiousConversionPolicies;
(function (CaiPersonalitiesReligiousConversionPolicies) {
    CaiPersonalitiesReligiousConversionPolicies.KEY = new CollectionKey("cai_personalities_religious_conversion_policies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiPersonalitiesReligiousConversionPolicies.Entry = Entry;
})(CaiPersonalitiesReligiousConversionPolicies || (CaiPersonalitiesReligiousConversionPolicies = {}));

var CaiPersonalityDiplomaticComponents;
(function (CaiPersonalityDiplomaticComponents) {
    CaiPersonalityDiplomaticComponents.KEY = new CollectionKey("cai_personality_diplomatic_components");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
        }
    }
    CaiPersonalityDiplomaticComponents.Entry = Entry;
})(CaiPersonalityDiplomaticComponents || (CaiPersonalityDiplomaticComponents = {}));

var CaiPersonalityStrategicComponents;
(function (CaiPersonalityStrategicComponents) {
    CaiPersonalityStrategicComponents.KEY = new CollectionKey("cai_personality_strategic_components");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this.maxFriendlyAttitude = values["max_friendly_attitude"];
            this.friendlyTowardsFriendMultiplier = values["friendly_towards_friend_multiplier"];
            this.hostileTowardsFriendMultiplier = values["hostile_towards_friend_multiplier"];
            this.maxHostileAttitude = values["max_hostile_attitude"];
            this.friendlyTowardsEnemyMultiplier = values["friendly_towards_enemy_multiplier"];
            this.hostileTowardsEnemyMultiplier = values["hostile_towards_enemy_multiplier"];
            this.unknownFactionMultiplier = values["unknown_faction_multiplier"];
            this.maxMercProportion = values["max_merc_proportion"];
            this.minMercCap = values["min_merc_cap"];
            this.enemyStrengthModifier = values["enemy_strength_modifier"];
            this.enemyThreatStrengthModifier = values["enemy_threat_strength_modifier"];
            this.minRetreatRatio = values["min_retreat_ratio"];
            this.minRetreatToSettlementRatio = values["min_retreat_to_settlement_ratio"];
            this.strategicBalanceOpportunismFactor = values["strategic_balance_opportunism_factor"];
            this.fortifiedSettlementAssaultStrengthModifier = values["fortified_settlement_assault_strength_modifier"];
            this.fortifiedSettlementDefendStrengthModifier = values["fortified_settlement_defend_strength_modifier"];
        }
    }
    CaiPersonalityStrategicComponents.Entry = Entry;
})(CaiPersonalityStrategicComponents || (CaiPersonalityStrategicComponents = {}));

var CaiPersonalityCulturalComponents;
(function (CaiPersonalityCulturalComponents) {
    CaiPersonalityCulturalComponents.KEY = new CollectionKey("cai_personality_cultural_components");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
        }
    }
    CaiPersonalityCulturalComponents.Entry = Entry;
})(CaiPersonalityCulturalComponents || (CaiPersonalityCulturalComponents = {}));

var CaiPersonalityDealEvaluationComponents;
(function (CaiPersonalityDealEvaluationComponents) {
    CaiPersonalityDealEvaluationComponents.KEY = new CollectionKey("cai_personality_deal_evaluation_components");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this.maxPaymentValue = values["max_payment_value"];
            this.paymentTreacheryValue = values["payment_treachery_value"];
            this.paymentOfferedMultiplier = values["payment_offered_multiplier"];
            this.paymentRequestedMultiplier = values["payment_requested_multiplier"];
        }
    }
    CaiPersonalityDealEvaluationComponents.Entry = Entry;
})(CaiPersonalityDealEvaluationComponents || (CaiPersonalityDealEvaluationComponents = {}));

var CaiPersonalityDealGenerationComponents;
(function (CaiPersonalityDealGenerationComponents) {
    CaiPersonalityDealGenerationComponents.KEY = new CollectionKey("cai_personality_deal_generation_components");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
        }
    }
    CaiPersonalityDealGenerationComponents.Entry = Entry;
})(CaiPersonalityDealGenerationComponents || (CaiPersonalityDealGenerationComponents = {}));

var CaiPersonalitiesConstructionSystemPolicies;
(function (CaiPersonalitiesConstructionSystemPolicies) {
    CaiPersonalitiesConstructionSystemPolicies.KEY = new CollectionKey("cai_personalities_construction_system_policies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._strategicContextTemplateAssignmentPolicy = values["strategic_context_template_assignment_policy"];
            this._provinceSpecialisationTemplateAssignmentPolicy = values["province_specialisation_template_assignment_policy"];
            this._buildingSynergiesPolicy = values["building_synergies_policy"];
        }
        get strategicContextTemplateAssignmentPolicy() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemStrategicContextTemplatePolicies.KEY, CaiConstructionSystemStrategicContextTemplatePolicies.Entry);
            return collection.find(entry => entry.key === this._strategicContextTemplateAssignmentPolicy);
        }
        get provinceSpecialisationTemplateAssignmentPolicy() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemProvinceTemplateAssignmentPolicies.KEY, CaiConstructionSystemProvinceTemplateAssignmentPolicies.Entry);
            return collection.find(entry => entry.key === this._provinceSpecialisationTemplateAssignmentPolicy);
        }
        get buildingSynergiesPolicy() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemSynergyPolicies.KEY, CaiConstructionSystemSynergyPolicies.Entry);
            return collection.find(entry => entry.key === this._buildingSynergiesPolicy);
        }
    }
    CaiPersonalitiesConstructionSystemPolicies.Entry = Entry;
})(CaiPersonalitiesConstructionSystemPolicies || (CaiPersonalitiesConstructionSystemPolicies = {}));

var CaiTaskManagementSystemTaskGeneratorGroups;
(function (CaiTaskManagementSystemTaskGeneratorGroups) {
    CaiTaskManagementSystemTaskGeneratorGroups.KEY = new CollectionKey("cai_task_management_system_task_generator_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiTaskManagementSystemTaskGeneratorGroups.Entry = Entry;
})(CaiTaskManagementSystemTaskGeneratorGroups || (CaiTaskManagementSystemTaskGeneratorGroups = {}));

var CaiPersonalitiesTaskManagementSystemTaskGeneratorProfiles;
(function (CaiPersonalitiesTaskManagementSystemTaskGeneratorProfiles) {
    CaiPersonalitiesTaskManagementSystemTaskGeneratorProfiles.KEY = new CollectionKey("cai_personalities_task_management_system_task_generator_profiles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._defaultGeneratorGroupWhenOwningRegions = values["default_generator_group_when_owning_regions"];
            this._defaultGeneratorGroupWhenNoOwnedRegions = values["default_generator_group_when_no_owned_regions"];
        }
        get defaultGeneratorGroupWhenOwningRegions() {
            const collection = this.collectionCache.getCollection(CaiTaskManagementSystemTaskGeneratorGroups.KEY, CaiTaskManagementSystemTaskGeneratorGroups.Entry);
            return collection.find(entry => entry.key === this._defaultGeneratorGroupWhenOwningRegions);
        }
        get defaultGeneratorGroupWhenNoOwnedRegions() {
            const collection = this.collectionCache.getCollection(CaiTaskManagementSystemTaskGeneratorGroups.KEY, CaiTaskManagementSystemTaskGeneratorGroups.Entry);
            return collection.find(entry => entry.key === this._defaultGeneratorGroupWhenNoOwnedRegions);
        }
    }
    CaiPersonalitiesTaskManagementSystemTaskGeneratorProfiles.Entry = Entry;
})(CaiPersonalitiesTaskManagementSystemTaskGeneratorProfiles || (CaiPersonalitiesTaskManagementSystemTaskGeneratorProfiles = {}));

var CaiPersonalityNegotiationComponents;
(function (CaiPersonalityNegotiationComponents) {
    CaiPersonalityNegotiationComponents.KEY = new CollectionKey("cai_personality_negotiation_components");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this.initialDecline = values["initial_decline"];
            this.initialCounter = values["initial_counter"];
            this.irrelevantDecline = values["irrelevant_decline"];
            this.irrelevantAccept = values["irrelevant_accept"];
            this.irrelevantCounterNew = values["irrelevant_counter_new"];
            this.irrelevantCounterLast = values["irrelevant_counter_last"];
            this.angryRejectMin = values["angry_reject_min"];
            this.angryRejectMax = values["angry_reject_max"];
            this.noPaymentChance = values["no_payment_chance"];
            this.maxStepsAboveAcceptable = values["max_steps_above_acceptable"];
            this.noOfferChance = values["no_offer_chance"];
            this.numGoalsGenerated = values["num_goals_generated"];
            this.maxInteractions = values["max_interactions"];
        }
    }
    CaiPersonalityNegotiationComponents.Entry = Entry;
})(CaiPersonalityNegotiationComponents || (CaiPersonalityNegotiationComponents = {}));

var CaiPersonalitiesIncomeAllocationPolicies;
(function (CaiPersonalitiesIncomeAllocationPolicies) {
    CaiPersonalitiesIncomeAllocationPolicies.KEY = new CollectionKey("cai_personalities_income_allocation_policies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.defaultProportionOfNetIncomeToSpend = values["default_proportion_of_net_income_to_spend"];
            this.defaultZeroOrNegativeNetIncomeSurvivalRounds = values["default_zero_or_negative_net_income_survival_rounds"];
            this.defaultPositiveNetIncomeSurvivalRounds = values["default_positive_net_income_survival_rounds"];
        }
    }
    CaiPersonalitiesIncomeAllocationPolicies.Entry = Entry;
})(CaiPersonalitiesIncomeAllocationPolicies || (CaiPersonalitiesIncomeAllocationPolicies = {}));

var CaiPersonalityOccupationDecisionComponents;
(function (CaiPersonalityOccupationDecisionComponents) {
    CaiPersonalityOccupationDecisionComponents.KEY = new CollectionKey("cai_personality_occupation_decision_components");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this.foodShortageCap = values["food_shortage_cap"];
            this.foodExcessCap = values["food_excess_cap"];
            this.squalorCap = values["squalor_cap"];
            this.minAttitude = values["min_attitude"];
        }
    }
    CaiPersonalityOccupationDecisionComponents.Entry = Entry;
})(CaiPersonalityOccupationDecisionComponents || (CaiPersonalityOccupationDecisionComponents = {}));

var CaiPersonalities;
(function (CaiPersonalities) {
    CaiPersonalities.KEY = new CollectionKey("cai_personalities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._budgetPolicyKey = values["budget_policy_key"];
            this._technologyManagerKey = values["technology_manager_key"];
            this._characterSkillTreeManagerKey = values["character_skill_tree_manager_key"];
            this._agentDistributionProfileKey = values["agent_distribution_profile_key"];
            this._agentRecruitmentProfileKey = values["agent_recruitment_profile_key"];
            this._reliabilityPolicyKey = values["reliability_policy_key"];
            this._religiousConversionPolicy = values["religious_conversion_policy"];
            this._militaryAggressivenessPolicy = values["military_aggressiveness_policy"];
            this._militaryBehaviourPolicy = values["military_behaviour_policy"];
            this.allowedForRandomSelection = !!values["allowed_for_random_selection"];
            this._diplomaticComponent = values["diplomatic_component"];
            this._strategicComponent = values["strategic_component"];
            this._culturalComponent = values["cultural_component"];
            this._dealEvaluationComponent = values["deal_evaluation_component"];
            this._dealGenerationComponent = values["deal_generation_component"];
            this._constructionSystemPolicy = values["construction_system_policy"];
            this._taskManagementSystemTaskGenerationProfile = values["task_management_system_task_generation_profile"];
            this._negotiationComponent = values["negotiation_component"];
            this._incomeAllocationPolicy = values["income_allocation_policy"];
            this._occupationDecisionComponent = values["occupation_decision_component"];
        }
        get budgetPolicyKey() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesBudgetPolicies.KEY, CaiPersonalitiesBudgetPolicies.Entry);
            return collection.find(entry => entry.key === this._budgetPolicyKey);
        }
        get technologyManagerKey() {
            const collection = this.collectionCache.getCollection(CampaignAiTechnologyManagers.KEY, CampaignAiTechnologyManagers.Entry);
            return collection.find(entry => entry.key === this._technologyManagerKey);
        }
        get characterSkillTreeManagerKey() {
            const collection = this.collectionCache.getCollection(CampaignAiCharacterSkillTreeManagers.KEY, CampaignAiCharacterSkillTreeManagers.Entry);
            return collection.find(entry => entry.key === this._characterSkillTreeManagerKey);
        }
        get agentDistributionProfileKey() {
            const collection = this.collectionCache.getCollection(CaiAgentDistributionProfiles.KEY, CaiAgentDistributionProfiles.Entry);
            return collection.find(entry => entry.key === this._agentDistributionProfileKey);
        }
        get agentRecruitmentProfileKey() {
            const collection = this.collectionCache.getCollection(CaiAgentRecruitmentProfiles.KEY, CaiAgentRecruitmentProfiles.Entry);
            return collection.find(entry => entry.key === this._agentRecruitmentProfileKey);
        }
        get reliabilityPolicyKey() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesReliabilityPolicies.KEY, CaiPersonalitiesReliabilityPolicies.Entry);
            return collection.find(entry => entry.key === this._reliabilityPolicyKey);
        }
        get religiousConversionPolicy() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesReligiousConversionPolicies.KEY, CaiPersonalitiesReligiousConversionPolicies.Entry);
            return collection.find(entry => entry.key === this._religiousConversionPolicy);
        }
        get militaryAggressivenessPolicy() {
            const collection = this.collectionCache.getCollection(CaiMilitaryAggressivenessPolicies.KEY, CaiMilitaryAggressivenessPolicies.Entry);
            return collection.find(entry => entry.key === this._militaryAggressivenessPolicy);
        }
        get militaryBehaviourPolicy() {
            const collection = this.collectionCache.getCollection(CaiMilitaryBehaviourPolicies.KEY, CaiMilitaryBehaviourPolicies.Entry);
            return collection.find(entry => entry.key === this._militaryBehaviourPolicy);
        }
        get diplomaticComponent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDiplomaticComponents.KEY, CaiPersonalityDiplomaticComponents.Entry);
            return collection.find(entry => entry.id === this._diplomaticComponent);
        }
        get strategicComponent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityStrategicComponents.KEY, CaiPersonalityStrategicComponents.Entry);
            return collection.find(entry => entry.id === this._strategicComponent);
        }
        get culturalComponent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityCulturalComponents.KEY, CaiPersonalityCulturalComponents.Entry);
            return collection.find(entry => entry.id === this._culturalComponent);
        }
        get dealEvaluationComponent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDealEvaluationComponents.KEY, CaiPersonalityDealEvaluationComponents.Entry);
            return collection.find(entry => entry.id === this._dealEvaluationComponent);
        }
        get dealGenerationComponent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDealGenerationComponents.KEY, CaiPersonalityDealGenerationComponents.Entry);
            return collection.find(entry => entry.id === this._dealGenerationComponent);
        }
        get constructionSystemPolicy() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesConstructionSystemPolicies.KEY, CaiPersonalitiesConstructionSystemPolicies.Entry);
            return collection.find(entry => entry.key === this._constructionSystemPolicy);
        }
        get taskManagementSystemTaskGenerationProfile() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesTaskManagementSystemTaskGeneratorProfiles.KEY, CaiPersonalitiesTaskManagementSystemTaskGeneratorProfiles.Entry);
            return collection.find(entry => entry.key === this._taskManagementSystemTaskGenerationProfile);
        }
        get negotiationComponent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityNegotiationComponents.KEY, CaiPersonalityNegotiationComponents.Entry);
            return collection.find(entry => entry.id === this._negotiationComponent);
        }
        get incomeAllocationPolicy() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesIncomeAllocationPolicies.KEY, CaiPersonalitiesIncomeAllocationPolicies.Entry);
            return collection.find(entry => entry.key === this._incomeAllocationPolicy);
        }
        get occupationDecisionComponent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityOccupationDecisionComponents.KEY, CaiPersonalityOccupationDecisionComponents.Entry);
            return collection.find(entry => entry.id === this._occupationDecisionComponent);
        }
    }
    CaiPersonalities.Entry = Entry;
})(CaiPersonalities || (CaiPersonalities = {}));

var CaiPersonalitiesBudgetAllocationPolicyJunctions;
(function (CaiPersonalitiesBudgetAllocationPolicyJunctions) {
    CaiPersonalitiesBudgetAllocationPolicyJunctions.KEY = new CollectionKey("cai_personalities_budget_allocation_policy_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._budgetPolicyKey = values["budget_policy_key"];
            this._budgetContextKey = values["budget_context_key"];
            this._budgetAllocationKey = values["budget_allocation_key"];
            this.priority = values["priority"];
        }
        get budgetPolicyKey() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesBudgetPolicies.KEY, CaiPersonalitiesBudgetPolicies.Entry);
            return collection.find(entry => entry.key === this._budgetPolicyKey);
        }
        get budgetContextKey() {
            const collection = this.collectionCache.getCollection(CaiStrategicContextTypes.KEY, CaiStrategicContextTypes.Entry);
            return collection.find(entry => entry.key === this._budgetContextKey);
        }
        get budgetAllocationKey() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesBudgetAllocations.KEY, CaiPersonalitiesBudgetAllocations.Entry);
            return collection.find(entry => entry.key === this._budgetAllocationKey);
        }
    }
    CaiPersonalitiesBudgetAllocationPolicyJunctions.Entry = Entry;
})(CaiPersonalitiesBudgetAllocationPolicyJunctions || (CaiPersonalitiesBudgetAllocationPolicyJunctions = {}));

var CaiPersonalitiesConstructionPreferencePolicies;
(function (CaiPersonalitiesConstructionPreferencePolicies) {
    CaiPersonalitiesConstructionPreferencePolicies.KEY = new CollectionKey("cai_personalities_construction_preference_policies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiPersonalitiesConstructionPreferencePolicies.Entry = Entry;
})(CaiPersonalitiesConstructionPreferencePolicies || (CaiPersonalitiesConstructionPreferencePolicies = {}));

var CaiPersonalitiesConstructionPreferencePolicyBuildingJunctions;
(function (CaiPersonalitiesConstructionPreferencePolicyBuildingJunctions) {
    CaiPersonalitiesConstructionPreferencePolicyBuildingJunctions.KEY = new CollectionKey("cai_personalities_construction_preference_policy_building_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._policyKey = values["policy_key"];
            this._buildingKey = values["building_key"];
            this.biasLevel = values["bias_level"];
            this.absoluteAdjustment = values["absolute_adjustment"];
            this.buildingDiscountLimitAdjustment = values["building_discount_limit_adjustment"];
        }
        get policyKey() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesConstructionPreferencePolicies.KEY, CaiPersonalitiesConstructionPreferencePolicies.Entry);
            return collection.find(entry => entry.key === this._policyKey);
        }
        get buildingKey() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._buildingKey);
        }
    }
    CaiPersonalitiesConstructionPreferencePolicyBuildingJunctions.Entry = Entry;
})(CaiPersonalitiesConstructionPreferencePolicyBuildingJunctions || (CaiPersonalitiesConstructionPreferencePolicyBuildingJunctions = {}));

var CaiPersonalitiesRandomGroups;
(function (CaiPersonalitiesRandomGroups) {
    CaiPersonalitiesRandomGroups.KEY = new CollectionKey("cai_personalities_random_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.randomPersonalityGroupKey = values["random_personality_group_key"];
        }
    }
    CaiPersonalitiesRandomGroups.Entry = Entry;
})(CaiPersonalitiesRandomGroups || (CaiPersonalitiesRandomGroups = {}));

var CaiPersonalitiesRandomisationPolicies;
(function (CaiPersonalitiesRandomisationPolicies) {
    CaiPersonalitiesRandomisationPolicies.KEY = new CollectionKey("cai_personalities_randomisation_policies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.randomisationPolicyKey = values["randomisation_policy_key"];
        }
    }
    CaiPersonalitiesRandomisationPolicies.Entry = Entry;
})(CaiPersonalitiesRandomisationPolicies || (CaiPersonalitiesRandomisationPolicies = {}));

var CaiPersonalitiesFactionJunctions;
(function (CaiPersonalitiesFactionJunctions) {
    CaiPersonalitiesFactionJunctions.KEY = new CollectionKey("cai_personalities_faction_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._factionKey = values["faction_key"];
            this._campaignKey = values["campaign_key"];
            this._defaultPersonality = values["default_personality"];
            this._personalityGroup = values["personality_group"];
            this._randomisationPolicyKey = values["randomisation_policy_key"];
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get campaignKey() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaignKey);
        }
        get defaultPersonality() {
            const collection = this.collectionCache.getCollection(CaiPersonalities.KEY, CaiPersonalities.Entry);
            return collection.find(entry => entry.key === this._defaultPersonality);
        }
        get personalityGroup() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesRandomGroups.KEY, CaiPersonalitiesRandomGroups.Entry);
            return collection.find(entry => entry.randomPersonalityGroupKey === this._personalityGroup);
        }
        get randomisationPolicyKey() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesRandomisationPolicies.KEY, CaiPersonalitiesRandomisationPolicies.Entry);
            return collection.find(entry => entry.randomisationPolicyKey === this._randomisationPolicyKey);
        }
    }
    CaiPersonalitiesFactionJunctions.Entry = Entry;
})(CaiPersonalitiesFactionJunctions || (CaiPersonalitiesFactionJunctions = {}));

var CaiPersonalitiesIncomeAllocationPolicyStrategicContextJunctions;
(function (CaiPersonalitiesIncomeAllocationPolicyStrategicContextJunctions) {
    CaiPersonalitiesIncomeAllocationPolicyStrategicContextJunctions.KEY = new CollectionKey("cai_personalities_income_allocation_policy_strategic_context_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._incomeAllocationPolicyKey = values["income_allocation_policy_key"];
            this._strategicContextKey = values["strategic_context_key"];
            this.proportionOfNetIncomeToSpend = values["proportion_of_net_income_to_spend"];
            this.zeroOrNegativeNetIncomeSurvivalRounds = values["zero_or_negative_net_income_survival_rounds"];
            this.positiveNetIncomeSurvivalRounds = values["positive_net_income_survival_rounds"];
        }
        get incomeAllocationPolicyKey() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesIncomeAllocationPolicies.KEY, CaiPersonalitiesIncomeAllocationPolicies.Entry);
            return collection.find(entry => entry.key === this._incomeAllocationPolicyKey);
        }
        get strategicContextKey() {
            const collection = this.collectionCache.getCollection(CaiStrategicContextTypes.KEY, CaiStrategicContextTypes.Entry);
            return collection.find(entry => entry.key === this._strategicContextKey);
        }
    }
    CaiPersonalitiesIncomeAllocationPolicyStrategicContextJunctions.Entry = Entry;
})(CaiPersonalitiesIncomeAllocationPolicyStrategicContextJunctions || (CaiPersonalitiesIncomeAllocationPolicyStrategicContextJunctions = {}));

var CaiPersonalitiesRandomGroupJunctions;
(function (CaiPersonalitiesRandomGroupJunctions) {
    CaiPersonalitiesRandomGroupJunctions.KEY = new CollectionKey("cai_personalities_random_group_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._randomPersonalityGroupKey = values["random_personality_group_key"];
            this._personalityKey = values["personality_key"];
        }
        get randomPersonalityGroupKey() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesRandomGroups.KEY, CaiPersonalitiesRandomGroups.Entry);
            return collection.find(entry => entry.randomPersonalityGroupKey === this._randomPersonalityGroupKey);
        }
        get personalityKey() {
            const collection = this.collectionCache.getCollection(CaiPersonalities.KEY, CaiPersonalities.Entry);
            return collection.find(entry => entry.key === this._personalityKey);
        }
    }
    CaiPersonalitiesRandomGroupJunctions.Entry = Entry;
})(CaiPersonalitiesRandomGroupJunctions || (CaiPersonalitiesRandomGroupJunctions = {}));

var CaiPersonalitiesTmsTaskGeneratorProfilesStrategicContextsJunctions;
(function (CaiPersonalitiesTmsTaskGeneratorProfilesStrategicContextsJunctions) {
    CaiPersonalitiesTmsTaskGeneratorProfilesStrategicContextsJunctions.KEY = new CollectionKey("cai_personalities_tms_task_generator_profiles_strategic_contexts_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._taskGeneratorProfileKey = values["task_generator_profile_key"];
            this._strategicContextKey = values["strategic_context_key"];
            this.forUseWhenTheFactionHasRegions = !!values["for_use_when_the_faction_has_regions"];
            this._generatorGroupKey = values["generator_group_key"];
        }
        get taskGeneratorProfileKey() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesTaskManagementSystemTaskGeneratorProfiles.KEY, CaiPersonalitiesTaskManagementSystemTaskGeneratorProfiles.Entry);
            return collection.find(entry => entry.key === this._taskGeneratorProfileKey);
        }
        get strategicContextKey() {
            const collection = this.collectionCache.getCollection(CaiStrategicContextTypes.KEY, CaiStrategicContextTypes.Entry);
            return collection.find(entry => entry.key === this._strategicContextKey);
        }
        get generatorGroupKey() {
            const collection = this.collectionCache.getCollection(CaiTaskManagementSystemTaskGeneratorGroups.KEY, CaiTaskManagementSystemTaskGeneratorGroups.Entry);
            return collection.find(entry => entry.key === this._generatorGroupKey);
        }
    }
    CaiPersonalitiesTmsTaskGeneratorProfilesStrategicContextsJunctions.Entry = Entry;
})(CaiPersonalitiesTmsTaskGeneratorProfilesStrategicContextsJunctions || (CaiPersonalitiesTmsTaskGeneratorProfilesStrategicContextsJunctions = {}));

var CaiPersonalityCulturalMultipliers;
(function (CaiPersonalityCulturalMultipliers) {
    CaiPersonalityCulturalMultipliers.KEY = new CollectionKey("cai_personality_cultural_multipliers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._componentId = values["component_id"];
            this._source = values["source"];
            this._target = values["target"];
            this.positiveAttitudeMultiplier = values["positive_attitude_multiplier"];
            this.negativeAttitudeMultiplier = values["negative_attitude_multiplier"];
            this.attitudeBase = values["attitude_base"];
        }
        get componentId() {
            const collection = this.collectionCache.getCollection(CaiPersonalityCulturalComponents.KEY, CaiPersonalityCulturalComponents.Entry);
            return collection.find(entry => entry.id === this._componentId);
        }
        get source() {
            const collection = this.collectionCache.getCollection(Religions.KEY, Religions.Entry);
            return collection.find(entry => entry.religionKey === this._source);
        }
        get target() {
            const collection = this.collectionCache.getCollection(Religions.KEY, Religions.Entry);
            return collection.find(entry => entry.religionKey === this._target);
        }
    }
    CaiPersonalityCulturalMultipliers.Entry = Entry;
})(CaiPersonalityCulturalMultipliers || (CaiPersonalityCulturalMultipliers = {}));

var CaiPersonalityDealEvaluationComponentOverrides;
(function (CaiPersonalityDealEvaluationComponentOverrides) {
    CaiPersonalityDealEvaluationComponentOverrides.KEY = new CollectionKey("cai_personality_deal_evaluation_component_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._component = values["component"];
            this._parent = values["parent"];
        }
        get component() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDealEvaluationComponents.KEY, CaiPersonalityDealEvaluationComponents.Entry);
            return collection.find(entry => entry.id === this._component);
        }
        get parent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDealEvaluationComponents.KEY, CaiPersonalityDealEvaluationComponents.Entry);
            return collection.find(entry => entry.id === this._parent);
        }
    }
    CaiPersonalityDealEvaluationComponentOverrides.Entry = Entry;
})(CaiPersonalityDealEvaluationComponentOverrides || (CaiPersonalityDealEvaluationComponentOverrides = {}));

var CaiPersonalityDealEvaluationDealComponentNames;
(function (CaiPersonalityDealEvaluationDealComponentNames) {
    CaiPersonalityDealEvaluationDealComponentNames.KEY = new CollectionKey("cai_personality_deal_evaluation_deal_component_names");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
        }
    }
    CaiPersonalityDealEvaluationDealComponentNames.Entry = Entry;
})(CaiPersonalityDealEvaluationDealComponentNames || (CaiPersonalityDealEvaluationDealComponentNames = {}));

var CaiPersonalityDealEvaluationDealComponentValues;
(function (CaiPersonalityDealEvaluationDealComponentValues) {
    CaiPersonalityDealEvaluationDealComponentValues.KEY = new CollectionKey("cai_personality_deal_evaluation_deal_component_values");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._personalityComponent = values["personality_component"];
            this._dealComponent = values["deal_component"];
            this.bestFriendsValue = values["best_friends_value"];
            this.veryFriendlyValue = values["very_friendly_value"];
            this.friendlyValue = values["friendly_value"];
            this.neutralValue = values["neutral_value"];
            this.unfriendlyValue = values["unfriendly_value"];
            this.veryUnfriendlyValue = values["very_unfriendly_value"];
            this.bitterEnemiesValue = values["bitter_enemies_value"];
            this.lastStandBalanceFactor = values["last_stand_balance_factor"];
            this.totalWarBalanceFactor = values["total_war_balance_factor"];
            this.warBalanceFactor = values["war_balance_factor"];
            this.tensionBalanceFactor = values["tension_balance_factor"];
            this.peaceBalanceFactor = values["peace_balance_factor"];
            this.treacheryValue = values["treachery_value"];
        }
        get personalityComponent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDealEvaluationComponents.KEY, CaiPersonalityDealEvaluationComponents.Entry);
            return collection.find(entry => entry.id === this._personalityComponent);
        }
        get dealComponent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDealEvaluationDealComponentNames.KEY, CaiPersonalityDealEvaluationDealComponentNames.Entry);
            return collection.find(entry => entry.id === this._dealComponent);
        }
    }
    CaiPersonalityDealEvaluationDealComponentValues.Entry = Entry;
})(CaiPersonalityDealEvaluationDealComponentValues || (CaiPersonalityDealEvaluationDealComponentValues = {}));

var CaiPersonalityDealGenerationGenerators;
(function (CaiPersonalityDealGenerationGenerators) {
    CaiPersonalityDealGenerationGenerators.KEY = new CollectionKey("cai_personality_deal_generation_generators");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
        }
    }
    CaiPersonalityDealGenerationGenerators.Entry = Entry;
})(CaiPersonalityDealGenerationGenerators || (CaiPersonalityDealGenerationGenerators = {}));

var CaiPersonalityDealGenerationGeneratorPriorities;
(function (CaiPersonalityDealGenerationGeneratorPriorities) {
    CaiPersonalityDealGenerationGeneratorPriorities.KEY = new CollectionKey("cai_personality_deal_generation_generator_priorities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._componentKey = values["component_key"];
            this._generatorKey = values["generator_key"];
            this.lastStandPriority = values["last_stand_priority"];
            this.totalWarPriority = values["total_war_priority"];
            this.warPriority = values["war_priority"];
            this.tensionPriority = values["tension_priority"];
            this.peacePriority = values["peace_priority"];
            this.param1 = values["param1"];
            this.param2 = values["param2"];
            this.param3 = values["param3"];
            this.param4 = values["param4"];
            this.failureTimeout = values["failure_timeout"];
            this.minPaymentCap = values["min_payment_cap"];
            this.maxPaymentCap = values["max_payment_cap"];
            this.maxPaymentPct = values["max_payment_pct"];
        }
        get componentKey() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDealGenerationComponents.KEY, CaiPersonalityDealGenerationComponents.Entry);
            return collection.find(entry => entry.id === this._componentKey);
        }
        get generatorKey() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDealGenerationGenerators.KEY, CaiPersonalityDealGenerationGenerators.Entry);
            return collection.find(entry => entry.id === this._generatorKey);
        }
    }
    CaiPersonalityDealGenerationGeneratorPriorities.Entry = Entry;
})(CaiPersonalityDealGenerationGeneratorPriorities || (CaiPersonalityDealGenerationGeneratorPriorities = {}));

var CaiPersonalityDiplomaticComponentOverrides;
(function (CaiPersonalityDiplomaticComponentOverrides) {
    CaiPersonalityDiplomaticComponentOverrides.KEY = new CollectionKey("cai_personality_diplomatic_component_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._component = values["component"];
            this._parent = values["parent"];
        }
        get component() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDiplomaticComponents.KEY, CaiPersonalityDiplomaticComponents.Entry);
            return collection.find(entry => entry.id === this._component);
        }
        get parent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDiplomaticComponents.KEY, CaiPersonalityDiplomaticComponents.Entry);
            return collection.find(entry => entry.id === this._parent);
        }
    }
    CaiPersonalityDiplomaticComponentOverrides.Entry = Entry;
})(CaiPersonalityDiplomaticComponentOverrides || (CaiPersonalityDiplomaticComponentOverrides = {}));

var CaiPersonalityDiplomaticEventValues;
(function (CaiPersonalityDiplomaticEventValues) {
    CaiPersonalityDiplomaticEventValues.KEY = new CollectionKey("cai_personality_diplomatic_event_values");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._componentId = values["component_id"];
            this._eventId = values["event_id"];
            this.value = values["value"];
            this.falloff = values["falloff"];
        }
        get componentId() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDiplomaticComponents.KEY, CaiPersonalityDiplomaticComponents.Entry);
            return collection.find(entry => entry.id === this._componentId);
        }
        get eventId() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDiplomaticEvents.KEY, CaiPersonalityDiplomaticEvents.Entry);
            return collection.find(entry => entry.id === this._eventId);
        }
    }
    CaiPersonalityDiplomaticEventValues.Entry = Entry;
})(CaiPersonalityDiplomaticEventValues || (CaiPersonalityDiplomaticEventValues = {}));

var CaiPersonalityDiplomaticTreatyValues;
(function (CaiPersonalityDiplomaticTreatyValues) {
    CaiPersonalityDiplomaticTreatyValues.KEY = new CollectionKey("cai_personality_diplomatic_treaty_values");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._componentId = values["component_id"];
            this.defensiveAlliance = values["defensive_alliance"];
            this.tradeAgreement = values["trade_agreement"];
            this.militaryAlliance = values["military_alliance"];
            this.nonAggressionPact = values["non_aggression_pact"];
            this.vassalageMaster = values["vassalage_master"];
            this.vassalageVassal = values["vassalage_vassal"];
            this.clientStateProtector = values["client_state_protector"];
            this.clientStateClient = values["client_state_client"];
            this.war = values["war"];
            this.militaryAccess = values["military_access"];
        }
        get componentId() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDiplomaticComponents.KEY, CaiPersonalityDiplomaticComponents.Entry);
            return collection.find(entry => entry.id === this._componentId);
        }
    }
    CaiPersonalityDiplomaticTreatyValues.Entry = Entry;
})(CaiPersonalityDiplomaticTreatyValues || (CaiPersonalityDiplomaticTreatyValues = {}));

var CaiPersonalityOccupationDecisionPriorities;
(function (CaiPersonalityOccupationDecisionPriorities) {
    CaiPersonalityOccupationDecisionPriorities.KEY = new CollectionKey("cai_personality_occupation_decision_priorities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._componentId = values["component_id"];
            this.option = values["option"];
            this.lastStandPriority = values["last_stand_priority"];
            this.totalWarPriority = values["total_war_priority"];
            this.warPriority = values["war_priority"];
            this.tensionPriority = values["tension_priority"];
            this.peacePriority = values["peace_priority"];
        }
        get componentId() {
            const collection = this.collectionCache.getCollection(CaiPersonalityOccupationDecisionComponents.KEY, CaiPersonalityOccupationDecisionComponents.Entry);
            return collection.find(entry => entry.id === this._componentId);
        }
    }
    CaiPersonalityOccupationDecisionPriorities.Entry = Entry;
})(CaiPersonalityOccupationDecisionPriorities || (CaiPersonalityOccupationDecisionPriorities = {}));

var CaiPersonalityStrategicDesiredAttitudes;
(function (CaiPersonalityStrategicDesiredAttitudes) {
    CaiPersonalityStrategicDesiredAttitudes.KEY = new CollectionKey("cai_personality_strategic_desired_attitudes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._strategicComponent = values["strategic_component"];
            this.bestFriendsAttitude = values["best_friends_attitude"];
            this.veryFriendlyAttitude = values["very_friendly_attitude"];
            this.friendlyAttitude = values["friendly_attitude"];
            this.neutralAttitude = values["neutral_attitude"];
            this.unfriendlyAttitude = values["unfriendly_attitude"];
            this.veryUnfriendlyAttitude = values["very_unfriendly_attitude"];
            this.bitterEnemiesAttitude = values["bitter_enemies_attitude"];
            this.bestFriendsPositiveFactor = values["best_friends_positive_factor"];
            this.veryFriendlyPositiveFactor = values["very_friendly_positive_factor"];
            this.friendlyPositiveFactor = values["friendly_positive_factor"];
            this.neutralPositiveFactor = values["neutral_positive_factor"];
            this.unfriendlyPositiveFactor = values["unfriendly_positive_factor"];
            this.veryUnfriendlyPositiveFactor = values["very_unfriendly_positive_factor"];
            this.bitterEnemiesPositiveFactor = values["bitter_enemies_positive_factor"];
            this.bestFriendsNegativeFactor = values["best_friends_negative_factor"];
            this.veryFriendlyNegativeFactor = values["very_friendly_negative_factor"];
            this.friendlyNegativeFactor = values["friendly_negative_factor"];
            this.neutralNegativeFactor = values["neutral_negative_factor"];
            this.unfriendlyNegativeFactor = values["unfriendly_negative_factor"];
            this.veryUnfriendlyNegativeFactor = values["very_unfriendly_negative_factor"];
            this.bitterEnemiesNegativeFactor = values["bitter_enemies_negative_factor"];
        }
        get strategicComponent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityStrategicComponents.KEY, CaiPersonalityStrategicComponents.Entry);
            return collection.find(entry => entry.id === this._strategicComponent);
        }
    }
    CaiPersonalityStrategicDesiredAttitudes.Entry = Entry;
})(CaiPersonalityStrategicDesiredAttitudes || (CaiPersonalityStrategicDesiredAttitudes = {}));

var CaiPersonalityStrategicResourceValues;
(function (CaiPersonalityStrategicResourceValues) {
    CaiPersonalityStrategicResourceValues.KEY = new CollectionKey("cai_personality_strategic_resource_values");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._strategicComponent = values["strategic_component"];
            this._resource = values["resource"];
            this.tradeValue = values["trade_value"];
            this.tradeFalloff = values["trade_falloff"];
            this.ownershipValue = values["ownership_value"];
            this.ownershipFalloff = values["ownership_falloff"];
        }
        get strategicComponent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityStrategicComponents.KEY, CaiPersonalityStrategicComponents.Entry);
            return collection.find(entry => entry.id === this._strategicComponent);
        }
        get resource() {
            const collection = this.collectionCache.getCollection(Resources.KEY, Resources.Entry);
            return collection.find(entry => entry.key === this._resource);
        }
    }
    CaiPersonalityStrategicResourceValues.Entry = Entry;
})(CaiPersonalityStrategicResourceValues || (CaiPersonalityStrategicResourceValues = {}));

var CaiSiegeStrengthModifiers;
(function (CaiSiegeStrengthModifiers) {
    CaiSiegeStrengthModifiers.KEY = new CollectionKey("cai_siege_strength_modifiers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._subculture = values["subculture"];
            this.defenceStrengthModifier = values["defence_strength_modifier"];
            this.assaultStrengthModifier = values["assault_strength_modifier"];
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
    }
    CaiSiegeStrengthModifiers.Entry = Entry;
})(CaiSiegeStrengthModifiers || (CaiSiegeStrengthModifiers = {}));

var CaiTaskManagementSystemTaskGenerators;
(function (CaiTaskManagementSystemTaskGenerators) {
    CaiTaskManagementSystemTaskGenerators.KEY = new CollectionKey("cai_task_management_system_task_generators");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiTaskManagementSystemTaskGenerators.Entry = Entry;
})(CaiTaskManagementSystemTaskGenerators || (CaiTaskManagementSystemTaskGenerators = {}));

var CaiTaskManagementSystemTaskGeneratorGroupsGeneratorsJunctions;
(function (CaiTaskManagementSystemTaskGeneratorGroupsGeneratorsJunctions) {
    CaiTaskManagementSystemTaskGeneratorGroupsGeneratorsJunctions.KEY = new CollectionKey("cai_task_management_system_task_generator_groups_generators_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._taskGeneratorGroupKey = values["task_generator_group_key"];
            this._taskGeneratorKey = values["task_generator_key"];
            this.priority = values["priority"];
        }
        get taskGeneratorGroupKey() {
            const collection = this.collectionCache.getCollection(CaiTaskManagementSystemTaskGeneratorGroups.KEY, CaiTaskManagementSystemTaskGeneratorGroups.Entry);
            return collection.find(entry => entry.key === this._taskGeneratorGroupKey);
        }
        get taskGeneratorKey() {
            const collection = this.collectionCache.getCollection(CaiTaskManagementSystemTaskGenerators.KEY, CaiTaskManagementSystemTaskGenerators.Entry);
            return collection.find(entry => entry.key === this._taskGeneratorKey);
        }
    }
    CaiTaskManagementSystemTaskGeneratorGroupsGeneratorsJunctions.Entry = Entry;
})(CaiTaskManagementSystemTaskGeneratorGroupsGeneratorsJunctions || (CaiTaskManagementSystemTaskGeneratorGroupsGeneratorsJunctions = {}));

var CaiVariables;
(function (CaiVariables) {
    CaiVariables.KEY = new CollectionKey("cai_variables");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.value = values["value"];
            this.description = values["description"];
        }
    }
    CaiVariables.Entry = Entry;
})(CaiVariables || (CaiVariables = {}));

var CaiVariablesOverides;
(function (CaiVariablesOverides) {
    CaiVariablesOverides.KEY = new CollectionKey("cai_variables_overides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._caiVariableKey = values["cai_variable_key"];
            this._campaignKey = values["campaign_key"];
            this.value = values["value"];
            this.optionalDifficultyLevel = values["optional_difficulty_level"];
            this.optionalCampaignType = values["optional_campaign_type"];
        }
        get caiVariableKey() {
            const collection = this.collectionCache.getCollection(CaiVariables.KEY, CaiVariables.Entry);
            return collection.find(entry => entry.key === this._caiVariableKey);
        }
        get campaignKey() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaignKey);
        }
    }
    CaiVariablesOverides.Entry = Entry;
})(CaiVariablesOverides || (CaiVariablesOverides = {}));

var CampaignVariables;
(function (CampaignVariables) {
    CampaignVariables.KEY = new CollectionKey("campaign_variables");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.variableKey = values["variable_key"];
            this.value = values["value"];
            this.description = values["description"];
        }
    }
    CampaignVariables.Entry = Entry;
})(CampaignVariables || (CampaignVariables = {}));

var CampaignsCampaignVariablesJunctions;
(function (CampaignsCampaignVariablesJunctions) {
    CampaignsCampaignVariablesJunctions.KEY = new CollectionKey("campaigns_campaign_variables_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._variableKey = values["variable_key"];
            this._campaignName = values["campaign_name"];
            this.value = values["value"];
            this.optionalDifficultyLevel = values["optional_difficulty_level"];
            this.optionalCampaignType = values["optional_campaign_type"];
        }
        get variableKey() {
            const collection = this.collectionCache.getCollection(CampaignVariables.KEY, CampaignVariables.Entry);
            return collection.find(entry => entry.variableKey === this._variableKey);
        }
        get campaignName() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaignName);
        }
    }
    CampaignsCampaignVariablesJunctions.Entry = Entry;
})(CampaignsCampaignVariablesJunctions || (CampaignsCampaignVariablesJunctions = {}));

var CampaignAiBehaviours;
(function (CampaignAiBehaviours) {
    CampaignAiBehaviours.KEY = new CollectionKey("campaign_ai_behaviours");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.behaviour = values["behaviour"];
            this.description = values["description"];
        }
    }
    CampaignAiBehaviours.Entry = Entry;
})(CampaignAiBehaviours || (CampaignAiBehaviours = {}));

var CampaignAiCharacterSkillTreeAgentManagers;
(function (CampaignAiCharacterSkillTreeAgentManagers) {
    CampaignAiCharacterSkillTreeAgentManagers.KEY = new CollectionKey("campaign_ai_character_skill_tree_agent_managers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignAiCharacterSkillTreeAgentManagers.Entry = Entry;
})(CampaignAiCharacterSkillTreeAgentManagers || (CampaignAiCharacterSkillTreeAgentManagers = {}));

var CampaignAiCharacterSkillTreeDistributions;
(function (CampaignAiCharacterSkillTreeDistributions) {
    CampaignAiCharacterSkillTreeDistributions.KEY = new CollectionKey("campaign_ai_character_skill_tree_distributions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignAiCharacterSkillTreeDistributions.Entry = Entry;
})(CampaignAiCharacterSkillTreeDistributions || (CampaignAiCharacterSkillTreeDistributions = {}));

var CampaignAiCharacterSkillTreeDistributionJunctions;
(function (CampaignAiCharacterSkillTreeDistributionJunctions) {
    CampaignAiCharacterSkillTreeDistributionJunctions.KEY = new CollectionKey("campaign_ai_character_skill_tree_distribution_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._agentManagerKey = values["agent_manager_key"];
            this._distributionKey = values["distribution_key"];
            this.priority = values["priority"];
        }
        get agentManagerKey() {
            const collection = this.collectionCache.getCollection(CampaignAiCharacterSkillTreeAgentManagers.KEY, CampaignAiCharacterSkillTreeAgentManagers.Entry);
            return collection.find(entry => entry.key === this._agentManagerKey);
        }
        get distributionKey() {
            const collection = this.collectionCache.getCollection(CampaignAiCharacterSkillTreeDistributions.KEY, CampaignAiCharacterSkillTreeDistributions.Entry);
            return collection.find(entry => entry.key === this._distributionKey);
        }
    }
    CampaignAiCharacterSkillTreeDistributionJunctions.Entry = Entry;
})(CampaignAiCharacterSkillTreeDistributionJunctions || (CampaignAiCharacterSkillTreeDistributionJunctions = {}));

var CampaignAiCharacterSkillTreeJunctions;
(function (CampaignAiCharacterSkillTreeJunctions) {
    CampaignAiCharacterSkillTreeJunctions.KEY = new CollectionKey("campaign_ai_character_skill_tree_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._agentManagerKey = values["agent_manager_key"];
            this._skillKey = values["skill_key"];
            this.priority = values["priority"];
        }
        get agentManagerKey() {
            const collection = this.collectionCache.getCollection(CampaignAiCharacterSkillTreeAgentManagers.KEY, CampaignAiCharacterSkillTreeAgentManagers.Entry);
            return collection.find(entry => entry.key === this._agentManagerKey);
        }
    }
    CampaignAiCharacterSkillTreeJunctions.Entry = Entry;
})(CampaignAiCharacterSkillTreeJunctions || (CampaignAiCharacterSkillTreeJunctions = {}));

var CharacterSkillNodeSets;
(function (CharacterSkillNodeSets) {
    CharacterSkillNodeSets.KEY = new CollectionKey("character_skill_node_sets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._factionKey = values["faction_key"];
            this._campaignKey = values["campaign_key"];
            this._agentKey = values["agent_key"];
            this.encTitle = values["enc_title"];
            this._subculture = values["subculture"];
            this.forArmy = !!values["for_army"];
            this.forNavy = !!values["for_navy"];
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get campaignKey() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaignKey);
        }
        get agentKey() {
            const collection = this.collectionCache.getCollection(Agents.KEY, Agents.Entry);
            return collection.find(entry => entry.key === this._agentKey);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
    }
    CharacterSkillNodeSets.Entry = Entry;
})(CharacterSkillNodeSets || (CharacterSkillNodeSets = {}));

var CampaignAiCharacterSkillTreeManagerAgentJunctions;
(function (CampaignAiCharacterSkillTreeManagerAgentJunctions) {
    CampaignAiCharacterSkillTreeManagerAgentJunctions.KEY = new CollectionKey("campaign_ai_character_skill_tree_manager_agent_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._managerKey = values["manager_key"];
            this._agentKey = values["agent_key"];
            this._agentManagerKey = values["agent_manager_key"];
        }
        get managerKey() {
            const collection = this.collectionCache.getCollection(CampaignAiCharacterSkillTreeManagers.KEY, CampaignAiCharacterSkillTreeManagers.Entry);
            return collection.find(entry => entry.key === this._managerKey);
        }
        get agentKey() {
            const collection = this.collectionCache.getCollection(CharacterSkillNodeSets.KEY, CharacterSkillNodeSets.Entry);
            return collection.find(entry => entry.key === this._agentKey);
        }
        get agentManagerKey() {
            const collection = this.collectionCache.getCollection(CampaignAiCharacterSkillTreeAgentManagers.KEY, CampaignAiCharacterSkillTreeAgentManagers.Entry);
            return collection.find(entry => entry.key === this._agentManagerKey);
        }
    }
    CampaignAiCharacterSkillTreeManagerAgentJunctions.Entry = Entry;
})(CampaignAiCharacterSkillTreeManagerAgentJunctions || (CampaignAiCharacterSkillTreeManagerAgentJunctions = {}));

var CampaignAiManagers;
(function (CampaignAiManagers) {
    CampaignAiManagers.KEY = new CollectionKey("campaign_ai_managers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.manager = values["manager"];
            this.description = values["description"];
        }
    }
    CampaignAiManagers.Entry = Entry;
})(CampaignAiManagers || (CampaignAiManagers = {}));

var CampaignAiManagerBehaviourJunctions;
(function (CampaignAiManagerBehaviourJunctions) {
    CampaignAiManagerBehaviourJunctions.KEY = new CollectionKey("campaign_ai_manager_behaviour_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._manager = values["manager"];
            this._behaviour = values["behaviour"];
            this.priority = values["priority"];
        }
        get manager() {
            const collection = this.collectionCache.getCollection(CampaignAiManagers.KEY, CampaignAiManagers.Entry);
            return collection.find(entry => entry.manager === this._manager);
        }
        get behaviour() {
            const collection = this.collectionCache.getCollection(CampaignAiBehaviours.KEY, CampaignAiBehaviours.Entry);
            return collection.find(entry => entry.behaviour === this._behaviour);
        }
    }
    CampaignAiManagerBehaviourJunctions.Entry = Entry;
})(CampaignAiManagerBehaviourJunctions || (CampaignAiManagerBehaviourJunctions = {}));

var CampaignAiPersonalities;
(function (CampaignAiPersonalities) {
    CampaignAiPersonalities.KEY = new CollectionKey("campaign_ai_personalities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.personality = values["personality"];
            this.isDefault = !!values["is_default"];
            this.description = values["description"];
        }
    }
    CampaignAiPersonalities.Entry = Entry;
})(CampaignAiPersonalities || (CampaignAiPersonalities = {}));

var CampaignAiPersonalityProperties;
(function (CampaignAiPersonalityProperties) {
    CampaignAiPersonalityProperties.KEY = new CollectionKey("campaign_ai_personality_properties");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.property = values["property"];
            this.description = values["description"];
        }
    }
    CampaignAiPersonalityProperties.Entry = Entry;
})(CampaignAiPersonalityProperties || (CampaignAiPersonalityProperties = {}));

var CampaignAiPersonalityJunctions;
(function (CampaignAiPersonalityJunctions) {
    CampaignAiPersonalityJunctions.KEY = new CollectionKey("campaign_ai_personality_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._personality = values["personality"];
            this._property = values["property"];
            this.propertyValue = values["property_value"];
        }
        get personality() {
            const collection = this.collectionCache.getCollection(CampaignAiPersonalities.KEY, CampaignAiPersonalities.Entry);
            return collection.find(entry => entry.personality === this._personality);
        }
        get property() {
            const collection = this.collectionCache.getCollection(CampaignAiPersonalityProperties.KEY, CampaignAiPersonalityProperties.Entry);
            return collection.find(entry => entry.property === this._property);
        }
    }
    CampaignAiPersonalityJunctions.Entry = Entry;
})(CampaignAiPersonalityJunctions || (CampaignAiPersonalityJunctions = {}));

var CampaignAiTechnologyPaths;
(function (CampaignAiTechnologyPaths) {
    CampaignAiTechnologyPaths.KEY = new CollectionKey("campaign_ai_technology_paths");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignAiTechnologyPaths.Entry = Entry;
})(CampaignAiTechnologyPaths || (CampaignAiTechnologyPaths = {}));

var CampaignAiTechnologyManagerPathJunctions;
(function (CampaignAiTechnologyManagerPathJunctions) {
    CampaignAiTechnologyManagerPathJunctions.KEY = new CollectionKey("campaign_ai_technology_manager_path_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._managerKey = values["manager_key"];
            this._pathKey = values["path_key"];
            this.priority = values["priority"];
        }
        get managerKey() {
            const collection = this.collectionCache.getCollection(CampaignAiTechnologyManagers.KEY, CampaignAiTechnologyManagers.Entry);
            return collection.find(entry => entry.key === this._managerKey);
        }
        get pathKey() {
            const collection = this.collectionCache.getCollection(CampaignAiTechnologyPaths.KEY, CampaignAiTechnologyPaths.Entry);
            return collection.find(entry => entry.key === this._pathKey);
        }
    }
    CampaignAiTechnologyManagerPathJunctions.Entry = Entry;
})(CampaignAiTechnologyManagerPathJunctions || (CampaignAiTechnologyManagerPathJunctions = {}));

var CampaignAiTechnologyPathJunctions;
(function (CampaignAiTechnologyPathJunctions) {
    CampaignAiTechnologyPathJunctions.KEY = new CollectionKey("campaign_ai_technology_path_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._pathKey = values["path_key"];
            this._technologyKey = values["technology_key"];
            this.priority = values["priority"];
        }
        get pathKey() {
            const collection = this.collectionCache.getCollection(CampaignAiTechnologyPaths.KEY, CampaignAiTechnologyPaths.Entry);
            return collection.find(entry => entry.key === this._pathKey);
        }
        get technologyKey() {
            const collection = this.collectionCache.getCollection(Technologies.KEY, Technologies.Entry);
            return collection.find(entry => entry.key === this._technologyKey);
        }
    }
    CampaignAiTechnologyPathJunctions.Entry = Entry;
})(CampaignAiTechnologyPathJunctions || (CampaignAiTechnologyPathJunctions = {}));

var CampaignGroundTypes;
(function (CampaignGroundTypes) {
    CampaignGroundTypes.KEY = new CollectionKey("campaign_ground_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.type = values["type"];
            this.movementCost = values["movement_cost"];
            this.canAmbush = !!values["can_ambush"];
            this.onscreenName = values["onscreen_name"];
            this.isSea = !!values["is_sea"];
            this.icon = values["icon"];
        }
    }
    CampaignGroundTypes.Entry = Entry;
})(CampaignGroundTypes || (CampaignGroundTypes = {}));

var CampaignAmbushGroundTypes;
(function (CampaignAmbushGroundTypes) {
    CampaignAmbushGroundTypes.KEY = new CollectionKey("campaign_ambush_ground_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this.ambushChanceOfSuccess = values["ambush_chance_of_success"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(CampaignGroundTypes.KEY, CampaignGroundTypes.Entry);
            return collection.find(entry => entry.type === this._key);
        }
    }
    CampaignAmbushGroundTypes.Entry = Entry;
})(CampaignAmbushGroundTypes || (CampaignAmbushGroundTypes = {}));

var CampaignAnimSetEnums;
(function (CampaignAnimSetEnums) {
    CampaignAnimSetEnums.KEY = new CollectionKey("campaign_anim_set_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
            this.skeleton = values["skeleton"];
        }
    }
    CampaignAnimSetEnums.Entry = Entry;
})(CampaignAnimSetEnums || (CampaignAnimSetEnums = {}));

var CampaignBattleTypeEnums;
(function (CampaignBattleTypeEnums) {
    CampaignBattleTypeEnums.KEY = new CollectionKey("campaign_battle_type_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignBattleTypeEnums.Entry = Entry;
})(CampaignBattleTypeEnums || (CampaignBattleTypeEnums = {}));

var CampaignAutoresolverBattleSituations;
(function (CampaignAutoresolverBattleSituations) {
    CampaignAutoresolverBattleSituations.KEY = new CollectionKey("campaign_autoresolver_battle_situations");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._battleType = values["battle_type"];
            this.nightBattle = values["night_battle"];
            this.stance = values["stance"];
        }
        get battleType() {
            const collection = this.collectionCache.getCollection(CampaignBattleTypeEnums.KEY, CampaignBattleTypeEnums.Entry);
            return collection.find(entry => entry.key === this._battleType);
        }
    }
    CampaignAutoresolverBattleSituations.Entry = Entry;
})(CampaignAutoresolverBattleSituations || (CampaignAutoresolverBattleSituations = {}));

var CampaignAutoresolverStatVariables;
(function (CampaignAutoresolverStatVariables) {
    CampaignAutoresolverStatVariables.KEY = new CollectionKey("campaign_autoresolver_stat_variables");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this.description = values["description"];
        }
    }
    CampaignAutoresolverStatVariables.Entry = Entry;
})(CampaignAutoresolverStatVariables || (CampaignAutoresolverStatVariables = {}));

var CampaignAutoresolverModifiers;
(function (CampaignAutoresolverModifiers) {
    CampaignAutoresolverModifiers.KEY = new CollectionKey("campaign_autoresolver_modifiers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._class = values["class"];
            this._vsClass = values["vs_class"];
            this._statVariableId = values["stat_variable_id"];
        }
        get class() {
            const collection = this.collectionCache.getCollection(UnitClass.KEY, UnitClass.Entry);
            return collection.find(entry => entry.key === this._class);
        }
        get vsClass() {
            const collection = this.collectionCache.getCollection(UnitClass.KEY, UnitClass.Entry);
            return collection.find(entry => entry.key === this._vsClass);
        }
        get statVariableId() {
            const collection = this.collectionCache.getCollection(CampaignAutoresolverStatVariables.KEY, CampaignAutoresolverStatVariables.Entry);
            return collection.find(entry => entry.id === this._statVariableId);
        }
    }
    CampaignAutoresolverModifiers.Entry = Entry;
})(CampaignAutoresolverModifiers || (CampaignAutoresolverModifiers = {}));

var CampaignAutoresolverModGroups;
(function (CampaignAutoresolverModGroups) {
    CampaignAutoresolverModGroups.KEY = new CollectionKey("campaign_autoresolver_mod_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
        }
    }
    CampaignAutoresolverModGroups.Entry = Entry;
})(CampaignAutoresolverModGroups || (CampaignAutoresolverModGroups = {}));

var CampaignAutoresolverModGroupModifierValues;
(function (CampaignAutoresolverModGroupModifierValues) {
    CampaignAutoresolverModGroupModifierValues.KEY = new CollectionKey("campaign_autoresolver_mod_group_modifier_values");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._groupId = values["group_id"];
            this._modificationId = values["modification_id"];
            this.value = values["value"];
        }
        get groupId() {
            const collection = this.collectionCache.getCollection(CampaignAutoresolverModGroups.KEY, CampaignAutoresolverModGroups.Entry);
            return collection.find(entry => entry.id === this._groupId);
        }
        get modificationId() {
            const collection = this.collectionCache.getCollection(CampaignAutoresolverModifiers.KEY, CampaignAutoresolverModifiers.Entry);
            return collection.find(entry => entry.id === this._modificationId);
        }
    }
    CampaignAutoresolverModGroupModifierValues.Entry = Entry;
})(CampaignAutoresolverModGroupModifierValues || (CampaignAutoresolverModGroupModifierValues = {}));

var CampaignAutoresolverModGroupTargets;
(function (CampaignAutoresolverModGroupTargets) {
    CampaignAutoresolverModGroupTargets.KEY = new CollectionKey("campaign_autoresolver_mod_group_targets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this.mechanicTarget = values["mechanic_target"];
            this.allianceTarget = values["alliance_target"];
            this.playerTarget = values["player_target"];
        }
    }
    CampaignAutoresolverModGroupTargets.Entry = Entry;
})(CampaignAutoresolverModGroupTargets || (CampaignAutoresolverModGroupTargets = {}));

var CampaignAutoresolverSituationModGroups;
(function (CampaignAutoresolverSituationModGroups) {
    CampaignAutoresolverSituationModGroups.KEY = new CollectionKey("campaign_autoresolver_situation_mod_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._situationId = values["situation_id"];
            this._groupTargetId = values["group_target_id"];
            this._groupId = values["group_id"];
        }
        get situationId() {
            const collection = this.collectionCache.getCollection(CampaignAutoresolverBattleSituations.KEY, CampaignAutoresolverBattleSituations.Entry);
            return collection.find(entry => entry.id === this._situationId);
        }
        get groupTargetId() {
            const collection = this.collectionCache.getCollection(CampaignAutoresolverModGroupTargets.KEY, CampaignAutoresolverModGroupTargets.Entry);
            return collection.find(entry => entry.id === this._groupTargetId);
        }
        get groupId() {
            const collection = this.collectionCache.getCollection(CampaignAutoresolverModGroups.KEY, CampaignAutoresolverModGroups.Entry);
            return collection.find(entry => entry.id === this._groupId);
        }
    }
    CampaignAutoresolverSituationModGroups.Entry = Entry;
})(CampaignAutoresolverSituationModGroups || (CampaignAutoresolverSituationModGroups = {}));

var CampaignMapPlayableAreas;
(function (CampaignMapPlayableAreas) {
    CampaignMapPlayableAreas.KEY = new CollectionKey("campaign_map_playable_areas");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._mapname = values["mapname"];
            this.index = values["index"];
            this.minx = values["minx"];
            this.maxx = values["maxx"];
            this.miny = values["miny"];
            this.maxy = values["maxy"];
            this.seaTrade = !!values["sea_trade"];
            this.onscreenName = values["onscreen_name"];
            this.mapFile = values["map_file"];
            this.overlayFile = values["overlay_file"];
            this.radarFile = values["radar_file"];
            this.meaningfulId = values["meaningful_id"];
            this.previewWidth = values["preview_width"];
            this.previewHeight = values["preview_height"];
            this.previewBorder = values["preview_border"];
            this.minimapLookupFile = values["minimap_lookup_file"];
            this.isAvailableInCustomBattle = !!values["is_available_in_custom_battle"];
        }
        get mapname() {
            const collection = this.collectionCache.getCollection(CampaignMaps.KEY, CampaignMaps.Entry);
            return collection.find(entry => entry.mapname === this._mapname);
        }
    }
    CampaignMapPlayableAreas.Entry = Entry;
})(CampaignMapPlayableAreas || (CampaignMapPlayableAreas = {}));

var CampaignBattlePresets;
(function (CampaignBattlePresets) {
    CampaignBattlePresets.KEY = new CollectionKey("campaign_battle_presets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreenName = values["onscreen_name"];
            this.description = values["description"];
            this.coordX = values["coord_x"];
            this.coordY = values["coord_y"];
            this.tileUpgrade = values["tile_upgrade"];
            this._battleType = values["battle_type"];
            this.isUniqueSettlement = !!values["is_unique_settlement"];
            this._campaignMap = values["campaign_map"];
        }
        get battleType() {
            const collection = this.collectionCache.getCollection(CampaignBattleTypeEnums.KEY, CampaignBattleTypeEnums.Entry);
            return collection.find(entry => entry.key === this._battleType);
        }
        get campaignMap() {
            const collection = this.collectionCache.getCollection(CampaignMapPlayableAreas.KEY, CampaignMapPlayableAreas.Entry);
            return collection.find(entry => entry.index === this._campaignMap);
        }
    }
    CampaignBattlePresets.Entry = Entry;
})(CampaignBattlePresets || (CampaignBattlePresets = {}));

var CampaignBonusValueBattleContextSpecifiers;
(function (CampaignBonusValueBattleContextSpecifiers) {
    CampaignBonusValueBattleContextSpecifiers.KEY = new CollectionKey("campaign_bonus_value_battle_context_specifiers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.nightBattlesOnly = !!values["night_battles_only"];
        }
    }
    CampaignBonusValueBattleContextSpecifiers.Entry = Entry;
})(CampaignBonusValueBattleContextSpecifiers || (CampaignBonusValueBattleContextSpecifiers = {}));

var CampaignBonusValueBattleContextBattleTypeJunctions;
(function (CampaignBonusValueBattleContextBattleTypeJunctions) {
    CampaignBonusValueBattleContextBattleTypeJunctions.KEY = new CollectionKey("campaign_bonus_value_battle_context_battle_type_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._battleContextKey = values["battle_context_key"];
            this._battleTypeKey = values["battle_type_key"];
        }
        get battleContextKey() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueBattleContextSpecifiers.KEY, CampaignBonusValueBattleContextSpecifiers.Entry);
            return collection.find(entry => entry.key === this._battleContextKey);
        }
        get battleTypeKey() {
            const collection = this.collectionCache.getCollection(CampaignBattleTypeEnums.KEY, CampaignBattleTypeEnums.Entry);
            return collection.find(entry => entry.key === this._battleTypeKey);
        }
    }
    CampaignBonusValueBattleContextBattleTypeJunctions.Entry = Entry;
})(CampaignBonusValueBattleContextBattleTypeJunctions || (CampaignBonusValueBattleContextBattleTypeJunctions = {}));

var CampaignBonusValueBattleContextCultureJunctions;
(function (CampaignBonusValueBattleContextCultureJunctions) {
    CampaignBonusValueBattleContextCultureJunctions.KEY = new CollectionKey("campaign_bonus_value_battle_context_culture_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._battleContextKey = values["battle_context_key"];
            this._cultureKey = values["culture_key"];
        }
        get battleContextKey() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueBattleContextSpecifiers.KEY, CampaignBonusValueBattleContextSpecifiers.Entry);
            return collection.find(entry => entry.key === this._battleContextKey);
        }
        get cultureKey() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._cultureKey);
        }
    }
    CampaignBonusValueBattleContextCultureJunctions.Entry = Entry;
})(CampaignBonusValueBattleContextCultureJunctions || (CampaignBonusValueBattleContextCultureJunctions = {}));

var CampaignBonusValueBattleContextFactionJunctions;
(function (CampaignBonusValueBattleContextFactionJunctions) {
    CampaignBonusValueBattleContextFactionJunctions.KEY = new CollectionKey("campaign_bonus_value_battle_context_faction_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._battleContextKey = values["battle_context_key"];
            this._factionKey = values["faction_key"];
        }
        get battleContextKey() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueBattleContextSpecifiers.KEY, CampaignBonusValueBattleContextSpecifiers.Entry);
            return collection.find(entry => entry.key === this._battleContextKey);
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
    }
    CampaignBonusValueBattleContextFactionJunctions.Entry = Entry;
})(CampaignBonusValueBattleContextFactionJunctions || (CampaignBonusValueBattleContextFactionJunctions = {}));

var CampaignBonusValueBattleContextForceStatus;
(function (CampaignBonusValueBattleContextForceStatus) {
    CampaignBonusValueBattleContextForceStatus.KEY = new CollectionKey("campaign_bonus_value_battle_context_force_status");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignBonusValueBattleContextForceStatus.Entry = Entry;
})(CampaignBonusValueBattleContextForceStatus || (CampaignBonusValueBattleContextForceStatus = {}));

var CampaignBonusValueBattleContextForceStatusJunctions;
(function (CampaignBonusValueBattleContextForceStatusJunctions) {
    CampaignBonusValueBattleContextForceStatusJunctions.KEY = new CollectionKey("campaign_bonus_value_battle_context_force_status_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._battleContextKey = values["battle_context_key"];
            this._forceStatusKey = values["force_status_key"];
            this.isYours = !!values["is_yours"];
        }
        get battleContextKey() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueBattleContextSpecifiers.KEY, CampaignBonusValueBattleContextSpecifiers.Entry);
            return collection.find(entry => entry.key === this._battleContextKey);
        }
        get forceStatusKey() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueBattleContextForceStatus.KEY, CampaignBonusValueBattleContextForceStatus.Entry);
            return collection.find(entry => entry.key === this._forceStatusKey);
        }
    }
    CampaignBonusValueBattleContextForceStatusJunctions.Entry = Entry;
})(CampaignBonusValueBattleContextForceStatusJunctions || (CampaignBonusValueBattleContextForceStatusJunctions = {}));

var CampaignBonusValueBattleContextGroundTypeJunctions;
(function (CampaignBonusValueBattleContextGroundTypeJunctions) {
    CampaignBonusValueBattleContextGroundTypeJunctions.KEY = new CollectionKey("campaign_bonus_value_battle_context_ground_type_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._battleContextKey = values["battle_context_key"];
            this._groundTypeKey = values["ground_type_key"];
        }
        get battleContextKey() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueBattleContextSpecifiers.KEY, CampaignBonusValueBattleContextSpecifiers.Entry);
            return collection.find(entry => entry.key === this._battleContextKey);
        }
        get groundTypeKey() {
            const collection = this.collectionCache.getCollection(CampaignGroundTypes.KEY, CampaignGroundTypes.Entry);
            return collection.find(entry => entry.type === this._groundTypeKey);
        }
    }
    CampaignBonusValueBattleContextGroundTypeJunctions.Entry = Entry;
})(CampaignBonusValueBattleContextGroundTypeJunctions || (CampaignBonusValueBattleContextGroundTypeJunctions = {}));

var CampaignBonusValueBattleContextTerritoryStatus;
(function (CampaignBonusValueBattleContextTerritoryStatus) {
    CampaignBonusValueBattleContextTerritoryStatus.KEY = new CollectionKey("campaign_bonus_value_battle_context_territory_status");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignBonusValueBattleContextTerritoryStatus.Entry = Entry;
})(CampaignBonusValueBattleContextTerritoryStatus || (CampaignBonusValueBattleContextTerritoryStatus = {}));

var CampaignBonusValueBattleContextTerritoryStatusJunctions;
(function (CampaignBonusValueBattleContextTerritoryStatusJunctions) {
    CampaignBonusValueBattleContextTerritoryStatusJunctions.KEY = new CollectionKey("campaign_bonus_value_battle_context_territory_status_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._battleContextKey = values["battle_context_key"];
            this._territoryStatusKey = values["territory_status_key"];
        }
        get battleContextKey() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueBattleContextSpecifiers.KEY, CampaignBonusValueBattleContextSpecifiers.Entry);
            return collection.find(entry => entry.key === this._battleContextKey);
        }
        get territoryStatusKey() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueBattleContextTerritoryStatus.KEY, CampaignBonusValueBattleContextTerritoryStatus.Entry);
            return collection.find(entry => entry.key === this._territoryStatusKey);
        }
    }
    CampaignBonusValueBattleContextTerritoryStatusJunctions.Entry = Entry;
})(CampaignBonusValueBattleContextTerritoryStatusJunctions || (CampaignBonusValueBattleContextTerritoryStatusJunctions = {}));

var CampaignBonusValueIdsActionResultsAdditionalOutcomes;
(function (CampaignBonusValueIdsActionResultsAdditionalOutcomes) {
    CampaignBonusValueIdsActionResultsAdditionalOutcomes.KEY = new CollectionKey("campaign_bonus_value_ids_action_results_additional_outcomes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsActionResultsAdditionalOutcomes.Entry = Entry;
})(CampaignBonusValueIdsActionResultsAdditionalOutcomes || (CampaignBonusValueIdsActionResultsAdditionalOutcomes = {}));

var CampaignBonusValueIdsAgent;
(function (CampaignBonusValueIdsAgent) {
    CampaignBonusValueIdsAgent.KEY = new CollectionKey("campaign_bonus_value_ids_agent");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsAgent.Entry = Entry;
})(CampaignBonusValueIdsAgent || (CampaignBonusValueIdsAgent = {}));

var CampaignBonusValueIdsBasic;
(function (CampaignBonusValueIdsBasic) {
    CampaignBonusValueIdsBasic.KEY = new CollectionKey("campaign_bonus_value_ids_basic");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsBasic.Entry = Entry;
})(CampaignBonusValueIdsBasic || (CampaignBonusValueIdsBasic = {}));

var CampaignBonusValueIdsBattlefieldDeployables;
(function (CampaignBonusValueIdsBattlefieldDeployables) {
    CampaignBonusValueIdsBattlefieldDeployables.KEY = new CollectionKey("campaign_bonus_value_ids_battlefield_deployables");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsBattlefieldDeployables.Entry = Entry;
})(CampaignBonusValueIdsBattlefieldDeployables || (CampaignBonusValueIdsBattlefieldDeployables = {}));

var CampaignBonusValueIdsBattleContexts;
(function (CampaignBonusValueIdsBattleContexts) {
    CampaignBonusValueIdsBattleContexts.KEY = new CollectionKey("campaign_bonus_value_ids_battle_contexts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignBonusValueIdsBattleContexts.Entry = Entry;
})(CampaignBonusValueIdsBattleContexts || (CampaignBonusValueIdsBattleContexts = {}));

var CampaignBonusValueIdsBuildingChain;
(function (CampaignBonusValueIdsBuildingChain) {
    CampaignBonusValueIdsBuildingChain.KEY = new CollectionKey("campaign_bonus_value_ids_building_chain");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsBuildingChain.Entry = Entry;
})(CampaignBonusValueIdsBuildingChain || (CampaignBonusValueIdsBuildingChain = {}));

var CampaignBonusValueIdsBuildingSets;
(function (CampaignBonusValueIdsBuildingSets) {
    CampaignBonusValueIdsBuildingSets.KEY = new CollectionKey("campaign_bonus_value_ids_building_sets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsBuildingSets.Entry = Entry;
})(CampaignBonusValueIdsBuildingSets || (CampaignBonusValueIdsBuildingSets = {}));

var CampaignBonusValueIdsCommodity;
(function (CampaignBonusValueIdsCommodity) {
    CampaignBonusValueIdsCommodity.KEY = new CollectionKey("campaign_bonus_value_ids_commodity");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsCommodity.Entry = Entry;
})(CampaignBonusValueIdsCommodity || (CampaignBonusValueIdsCommodity = {}));

var CampaignBonusValueIdsMeleeWeapon;
(function (CampaignBonusValueIdsMeleeWeapon) {
    CampaignBonusValueIdsMeleeWeapon.KEY = new CollectionKey("campaign_bonus_value_ids_melee_weapon");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsMeleeWeapon.Entry = Entry;
})(CampaignBonusValueIdsMeleeWeapon || (CampaignBonusValueIdsMeleeWeapon = {}));

var CampaignBonusValueIdsMissileWeapon;
(function (CampaignBonusValueIdsMissileWeapon) {
    CampaignBonusValueIdsMissileWeapon.KEY = new CollectionKey("campaign_bonus_value_ids_missile_weapon");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsMissileWeapon.Entry = Entry;
})(CampaignBonusValueIdsMissileWeapon || (CampaignBonusValueIdsMissileWeapon = {}));

var CampaignBonusValueIdsPopulationClass;
(function (CampaignBonusValueIdsPopulationClass) {
    CampaignBonusValueIdsPopulationClass.KEY = new CollectionKey("campaign_bonus_value_ids_population_class");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsPopulationClass.Entry = Entry;
})(CampaignBonusValueIdsPopulationClass || (CampaignBonusValueIdsPopulationClass = {}));

var CampaignBonusValueIdsPopulationClassAndReligion;
(function (CampaignBonusValueIdsPopulationClassAndReligion) {
    CampaignBonusValueIdsPopulationClassAndReligion.KEY = new CollectionKey("campaign_bonus_value_ids_population_class_and_religion");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsPopulationClassAndReligion.Entry = Entry;
})(CampaignBonusValueIdsPopulationClassAndReligion || (CampaignBonusValueIdsPopulationClassAndReligion = {}));

var CampaignBonusValueIdsProjectile;
(function (CampaignBonusValueIdsProjectile) {
    CampaignBonusValueIdsProjectile.KEY = new CollectionKey("campaign_bonus_value_ids_projectile");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsProjectile.Entry = Entry;
})(CampaignBonusValueIdsProjectile || (CampaignBonusValueIdsProjectile = {}));

var CampaignBonusValueIdsProjectileShotTypeEnum;
(function (CampaignBonusValueIdsProjectileShotTypeEnum) {
    CampaignBonusValueIdsProjectileShotTypeEnum.KEY = new CollectionKey("campaign_bonus_value_ids_projectile_shot_type_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsProjectileShotTypeEnum.Entry = Entry;
})(CampaignBonusValueIdsProjectileShotTypeEnum || (CampaignBonusValueIdsProjectileShotTypeEnum = {}));

var CampaignBonusValueIdsProjectileType;
(function (CampaignBonusValueIdsProjectileType) {
    CampaignBonusValueIdsProjectileType.KEY = new CollectionKey("campaign_bonus_value_ids_projectile_type");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsProjectileType.Entry = Entry;
})(CampaignBonusValueIdsProjectileType || (CampaignBonusValueIdsProjectileType = {}));

var CampaignBonusValueIdsProvincialInitiativeEffectRecords;
(function (CampaignBonusValueIdsProvincialInitiativeEffectRecords) {
    CampaignBonusValueIdsProvincialInitiativeEffectRecords.KEY = new CollectionKey("campaign_bonus_value_ids_provincial_initiative_effect_records");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsProvincialInitiativeEffectRecords.Entry = Entry;
})(CampaignBonusValueIdsProvincialInitiativeEffectRecords || (CampaignBonusValueIdsProvincialInitiativeEffectRecords = {}));

var CampaignBonusValueIdsReligion;
(function (CampaignBonusValueIdsReligion) {
    CampaignBonusValueIdsReligion.KEY = new CollectionKey("campaign_bonus_value_ids_religion");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsReligion.Entry = Entry;
})(CampaignBonusValueIdsReligion || (CampaignBonusValueIdsReligion = {}));

var CampaignBonusValueIdsResource;
(function (CampaignBonusValueIdsResource) {
    CampaignBonusValueIdsResource.KEY = new CollectionKey("campaign_bonus_value_ids_resource");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsResource.Entry = Entry;
})(CampaignBonusValueIdsResource || (CampaignBonusValueIdsResource = {}));

var CampaignBonusValueIdsSiegeItems;
(function (CampaignBonusValueIdsSiegeItems) {
    CampaignBonusValueIdsSiegeItems.KEY = new CollectionKey("campaign_bonus_value_ids_siege_items");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsSiegeItems.Entry = Entry;
})(CampaignBonusValueIdsSiegeItems || (CampaignBonusValueIdsSiegeItems = {}));

var CampaignBonusValueIdsTechnologyCategories;
(function (CampaignBonusValueIdsTechnologyCategories) {
    CampaignBonusValueIdsTechnologyCategories.KEY = new CollectionKey("campaign_bonus_value_ids_technology_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsTechnologyCategories.Entry = Entry;
})(CampaignBonusValueIdsTechnologyCategories || (CampaignBonusValueIdsTechnologyCategories = {}));

var CampaignBonusValueIdsUnitAbility;
(function (CampaignBonusValueIdsUnitAbility) {
    CampaignBonusValueIdsUnitAbility.KEY = new CollectionKey("campaign_bonus_value_ids_unit_ability");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsUnitAbility.Entry = Entry;
})(CampaignBonusValueIdsUnitAbility || (CampaignBonusValueIdsUnitAbility = {}));

var CampaignBonusValueIdsUnitCaste;
(function (CampaignBonusValueIdsUnitCaste) {
    CampaignBonusValueIdsUnitCaste.KEY = new CollectionKey("campaign_bonus_value_ids_unit_caste");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsUnitCaste.Entry = Entry;
})(CampaignBonusValueIdsUnitCaste || (CampaignBonusValueIdsUnitCaste = {}));

var CampaignBonusValueIdsUnitCategory;
(function (CampaignBonusValueIdsUnitCategory) {
    CampaignBonusValueIdsUnitCategory.KEY = new CollectionKey("campaign_bonus_value_ids_unit_category");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsUnitCategory.Entry = Entry;
})(CampaignBonusValueIdsUnitCategory || (CampaignBonusValueIdsUnitCategory = {}));

var CampaignBonusValueIdsUnitClass;
(function (CampaignBonusValueIdsUnitClass) {
    CampaignBonusValueIdsUnitClass.KEY = new CollectionKey("campaign_bonus_value_ids_unit_class");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsUnitClass.Entry = Entry;
})(CampaignBonusValueIdsUnitClass || (CampaignBonusValueIdsUnitClass = {}));

var CampaignBonusValueIdsUnitRecords;
(function (CampaignBonusValueIdsUnitRecords) {
    CampaignBonusValueIdsUnitRecords.KEY = new CollectionKey("campaign_bonus_value_ids_unit_records");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsUnitRecords.Entry = Entry;
})(CampaignBonusValueIdsUnitRecords || (CampaignBonusValueIdsUnitRecords = {}));

var CampaignBonusValueIdsUnitSets;
(function (CampaignBonusValueIdsUnitSets) {
    CampaignBonusValueIdsUnitSets.KEY = new CollectionKey("campaign_bonus_value_ids_unit_sets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsUnitSets.Entry = Entry;
})(CampaignBonusValueIdsUnitSets || (CampaignBonusValueIdsUnitSets = {}));

var CampaignCharacterAnimStatus;
(function (CampaignCharacterAnimStatus) {
    CampaignCharacterAnimStatus.KEY = new CollectionKey("campaign_character_anim_status");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.status = values["status"];
        }
    }
    CampaignCharacterAnimStatus.Entry = Entry;
})(CampaignCharacterAnimStatus || (CampaignCharacterAnimStatus = {}));

var CampaignCharacterArtSetsCampaignGroups;
(function (CampaignCharacterArtSetsCampaignGroups) {
    CampaignCharacterArtSetsCampaignGroups.KEY = new CollectionKey("campaign_character_art_sets_campaign_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignCharacterArtSetsCampaignGroups.Entry = Entry;
})(CampaignCharacterArtSetsCampaignGroups || (CampaignCharacterArtSetsCampaignGroups = {}));

var CampaignCharacterArtSets;
(function (CampaignCharacterArtSets) {
    CampaignCharacterArtSets.KEY = new CollectionKey("campaign_character_art_sets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.artSetId = values["art_set_id"];
            this.isCustom = !!values["is_custom"];
            this._agentType = values["agent_type"];
            this._faction = values["faction"];
            this._culture = values["culture"];
            this._subculture = values["subculture"];
            this.isMale = !!values["is_male"];
            this._group = values["group"];
        }
        get agentType() {
            const collection = this.collectionCache.getCollection(Agents.KEY, Agents.Entry);
            return collection.find(entry => entry.key === this._agentType);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
        get group() {
            const collection = this.collectionCache.getCollection(CampaignCharacterArtSetsCampaignGroups.KEY, CampaignCharacterArtSetsCampaignGroups.Entry);
            return collection.find(entry => entry.key === this._group);
        }
    }
    CampaignCharacterArtSets.Entry = Entry;
})(CampaignCharacterArtSets || (CampaignCharacterArtSets = {}));

var CampaignCharacterArts;
(function (CampaignCharacterArts) {
    CampaignCharacterArts.KEY = new CollectionKey("campaign_character_arts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._artSetId = values["art_set_id"];
            this.level = values["level"];
            this.season = values["season"];
            this.age = values["age"];
            this.portrait = values["portrait"];
            this._uniform = values["uniform"];
            this.card = values["card"];
            this.info = values["info"];
            this._seaUniform = values["sea_uniform"];
            this._navyUniform = values["navy_uniform"];
            this._landAnimation = values["land_animation"];
            this._seaAnimation = values["sea_animation"];
            this._navyAnimation = values["navy_animation"];
        }
        get artSetId() {
            const collection = this.collectionCache.getCollection(CampaignCharacterArtSets.KEY, CampaignCharacterArtSets.Entry);
            return collection.find(entry => entry.artSetId === this._artSetId);
        }
        get uniform() {
            const collection = this.collectionCache.getCollection(AgentUniforms.KEY, AgentUniforms.Entry);
            return collection.find(entry => entry.uniformName === this._uniform);
        }
        get seaUniform() {
            const collection = this.collectionCache.getCollection(AgentUniforms.KEY, AgentUniforms.Entry);
            return collection.find(entry => entry.uniformName === this._seaUniform);
        }
        get navyUniform() {
            const collection = this.collectionCache.getCollection(AgentUniforms.KEY, AgentUniforms.Entry);
            return collection.find(entry => entry.uniformName === this._navyUniform);
        }
        get landAnimation() {
            const collection = this.collectionCache.getCollection(CampaignAnimSetEnums.KEY, CampaignAnimSetEnums.Entry);
            return collection.find(entry => entry.name === this._landAnimation);
        }
        get seaAnimation() {
            const collection = this.collectionCache.getCollection(CampaignAnimSetEnums.KEY, CampaignAnimSetEnums.Entry);
            return collection.find(entry => entry.name === this._seaAnimation);
        }
        get navyAnimation() {
            const collection = this.collectionCache.getCollection(CampaignAnimSetEnums.KEY, CampaignAnimSetEnums.Entry);
            return collection.find(entry => entry.name === this._navyAnimation);
        }
    }
    CampaignCharacterArts.Entry = Entry;
})(CampaignCharacterArts || (CampaignCharacterArts = {}));

var CampaignCharacterArtSetsGroupJunctions;
(function (CampaignCharacterArtSetsGroupJunctions) {
    CampaignCharacterArtSetsGroupJunctions.KEY = new CollectionKey("campaign_character_art_sets_group_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._group = values["group"];
            this._campaign = values["campaign"];
        }
        get group() {
            const collection = this.collectionCache.getCollection(CampaignCharacterArtSetsCampaignGroups.KEY, CampaignCharacterArtSetsCampaignGroups.Entry);
            return collection.find(entry => entry.key === this._group);
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
    }
    CampaignCharacterArtSetsGroupJunctions.Entry = Entry;
})(CampaignCharacterArtSetsGroupJunctions || (CampaignCharacterArtSetsGroupJunctions = {}));

var CampaignCharacterArtSetCampaignJunctions;
(function (CampaignCharacterArtSetCampaignJunctions) {
    CampaignCharacterArtSetCampaignJunctions.KEY = new CollectionKey("campaign_character_art_set_campaign_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._artSetId = values["art_set_id"];
            this._campaign = values["campaign"];
        }
        get artSetId() {
            const collection = this.collectionCache.getCollection(CampaignCharacterArtSets.KEY, CampaignCharacterArtSets.Entry);
            return collection.find(entry => entry.artSetId === this._artSetId);
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
    }
    CampaignCharacterArtSetCampaignJunctions.Entry = Entry;
})(CampaignCharacterArtSetCampaignJunctions || (CampaignCharacterArtSetCampaignJunctions = {}));

var CampaignCharacterAttributeEffects;
(function (CampaignCharacterAttributeEffects) {
    CampaignCharacterAttributeEffects.KEY = new CollectionKey("campaign_character_attribute_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._agentRecord = values["agent_record"];
            this._attributeRecord = values["attribute_record"];
            this.attributeLevel = values["attribute_level"];
            this._effectRecord = values["effect_record"];
            this._effectScope = values["effect_scope"];
            this.effectValue = values["effect_value"];
            this._cultureRecord = values["culture_record"];
            this._subcultureRecord = values["subculture_record"];
            this._factionRecord = values["faction_record"];
            this._campaignRecord = values["campaign_record"];
        }
        get agentRecord() {
            const collection = this.collectionCache.getCollection(Agents.KEY, Agents.Entry);
            return collection.find(entry => entry.key === this._agentRecord);
        }
        get attributeRecord() {
            const collection = this.collectionCache.getCollection(AgentAttributes.KEY, AgentAttributes.Entry);
            return collection.find(entry => entry.key === this._attributeRecord);
        }
        get effectRecord() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effectRecord);
        }
        get effectScope() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes.KEY, CampaignEffectScopes.Entry);
            return collection.find(entry => entry.key === this._effectScope);
        }
        get cultureRecord() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._cultureRecord);
        }
        get subcultureRecord() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._subcultureRecord);
        }
        get factionRecord() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._factionRecord);
        }
        get campaignRecord() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaignRecord);
        }
    }
    CampaignCharacterAttributeEffects.Entry = Entry;
})(CampaignCharacterAttributeEffects || (CampaignCharacterAttributeEffects = {}));

var CampaignClanLevelInfos;
(function (CampaignClanLevelInfos) {
    CampaignClanLevelInfos.KEY = new CollectionKey("campaign_clan_level_infos");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.clanLevel = values["clan_level"];
            this._optionalFactionKey = values["optional_faction_key"];
            this.optionalDifficultyLevel = values["optional_difficulty_level"];
            this.modernisationThreshold = values["modernisation_threshold"];
            this.technologyUnlockLevel = values["technology_unlock_level"];
            this._effectBundle = values["effect_bundle"];
        }
        get optionalFactionKey() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._optionalFactionKey);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles.KEY, EffectBundles.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    CampaignClanLevelInfos.Entry = Entry;
})(CampaignClanLevelInfos || (CampaignClanLevelInfos = {}));

var CampaignDifficultyHandicapEffects;
(function (CampaignDifficultyHandicapEffects) {
    CampaignDifficultyHandicapEffects.KEY = new CollectionKey("campaign_difficulty_handicap_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.campaignDifficultyHandicap = values["campaign_difficulty_handicap"];
            this.human = !!values["human"];
            this._effect = values["effect"];
            this.effectValue = values["effect_value"];
            this._optionalCampaignKey = values["optional_campaign_key"];
            this._effectScope = values["effect_scope"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get optionalCampaignKey() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._optionalCampaignKey);
        }
        get effectScope() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes.KEY, CampaignEffectScopes.Entry);
            return collection.find(entry => entry.key === this._effectScope);
        }
    }
    CampaignDifficultyHandicapEffects.Entry = Entry;
})(CampaignDifficultyHandicapEffects || (CampaignDifficultyHandicapEffects = {}));

var CampaignEffectScopeAgentJunctions;
(function (CampaignEffectScopeAgentJunctions) {
    CampaignEffectScopeAgentJunctions.KEY = new CollectionKey("campaign_effect_scope_agent_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignEffectScopeKey = values["campaign_effect_scope_key"];
            this._agentKey = values["agent_key"];
        }
        get campaignEffectScopeKey() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes.KEY, CampaignEffectScopes.Entry);
            return collection.find(entry => entry.key === this._campaignEffectScopeKey);
        }
        get agentKey() {
            const collection = this.collectionCache.getCollection(Agents.KEY, Agents.Entry);
            return collection.find(entry => entry.key === this._agentKey);
        }
    }
    CampaignEffectScopeAgentJunctions.Entry = Entry;
})(CampaignEffectScopeAgentJunctions || (CampaignEffectScopeAgentJunctions = {}));

var CampaignEffectScopeCharacterForceRelationships;
(function (CampaignEffectScopeCharacterForceRelationships) {
    CampaignEffectScopeCharacterForceRelationships.KEY = new CollectionKey("campaign_effect_scope_character_force_relationships");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignEffectScopeCharacterForceRelationships.Entry = Entry;
})(CampaignEffectScopeCharacterForceRelationships || (CampaignEffectScopeCharacterForceRelationships = {}));

var CampaignEffectScopeCharacterForceRelationshipJunctions;
(function (CampaignEffectScopeCharacterForceRelationshipJunctions) {
    CampaignEffectScopeCharacterForceRelationshipJunctions.KEY = new CollectionKey("campaign_effect_scope_character_force_relationship_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignEffectScopeKey = values["campaign_effect_scope_key"];
            this._forceRelationshipKey = values["force_relationship_key"];
        }
        get campaignEffectScopeKey() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes.KEY, CampaignEffectScopes.Entry);
            return collection.find(entry => entry.key === this._campaignEffectScopeKey);
        }
        get forceRelationshipKey() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopeCharacterForceRelationships.KEY, CampaignEffectScopeCharacterForceRelationships.Entry);
            return collection.find(entry => entry.key === this._forceRelationshipKey);
        }
    }
    CampaignEffectScopeCharacterForceRelationshipJunctions.Entry = Entry;
})(CampaignEffectScopeCharacterForceRelationshipJunctions || (CampaignEffectScopeCharacterForceRelationshipJunctions = {}));

var CampaignEffectScopeCharacterUnitRelationships;
(function (CampaignEffectScopeCharacterUnitRelationships) {
    CampaignEffectScopeCharacterUnitRelationships.KEY = new CollectionKey("campaign_effect_scope_character_unit_relationships");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignEffectScopeCharacterUnitRelationships.Entry = Entry;
})(CampaignEffectScopeCharacterUnitRelationships || (CampaignEffectScopeCharacterUnitRelationships = {}));

var CampaignEffectScopeCharacterUnitRelationshipJunctions;
(function (CampaignEffectScopeCharacterUnitRelationshipJunctions) {
    CampaignEffectScopeCharacterUnitRelationshipJunctions.KEY = new CollectionKey("campaign_effect_scope_character_unit_relationship_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignEffectScopeKey = values["campaign_effect_scope_key"];
            this._unitRelationshipKey = values["unit_relationship_key"];
        }
        get campaignEffectScopeKey() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes.KEY, CampaignEffectScopes.Entry);
            return collection.find(entry => entry.key === this._campaignEffectScopeKey);
        }
        get unitRelationshipKey() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopeCharacterUnitRelationships.KEY, CampaignEffectScopeCharacterUnitRelationships.Entry);
            return collection.find(entry => entry.key === this._unitRelationshipKey);
        }
    }
    CampaignEffectScopeCharacterUnitRelationshipJunctions.Entry = Entry;
})(CampaignEffectScopeCharacterUnitRelationshipJunctions || (CampaignEffectScopeCharacterUnitRelationshipJunctions = {}));

var CampaignLocalisedStrings;
(function (CampaignLocalisedStrings) {
    CampaignLocalisedStrings.KEY = new CollectionKey("campaign_localised_strings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.string = values["string"];
        }
    }
    CampaignLocalisedStrings.Entry = Entry;
})(CampaignLocalisedStrings || (CampaignLocalisedStrings = {}));

var CampaignMapAttritionTypes;
(function (CampaignMapAttritionTypes) {
    CampaignMapAttritionTypes.KEY = new CollectionKey("campaign_map_attrition_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignMapAttritionTypes.Entry = Entry;
})(CampaignMapAttritionTypes || (CampaignMapAttritionTypes = {}));

var CampaignMapAttritionDamages;
(function (CampaignMapAttritionDamages) {
    CampaignMapAttritionDamages.KEY = new CollectionKey("campaign_map_attrition_damages");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.percentUnitDamage = values["percent_unit_damage"];
        }
    }
    CampaignMapAttritionDamages.Entry = Entry;
})(CampaignMapAttritionDamages || (CampaignMapAttritionDamages = {}));

var CampaignMapAttritions;
(function (CampaignMapAttritions) {
    CampaignMapAttritions.KEY = new CollectionKey("campaign_map_attritions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._type = values["type"];
            this._damage = values["damage"];
            this.campaignMapTooltip = values["campaign_map_tooltip"];
            this.unitCardTooltip = values["unit_card_tooltip"];
            this.unitImmunityText = values["unit_immunity_text"];
            this._messageEventAssociation = values["message_event_association"];
        }
        get type() {
            const collection = this.collectionCache.getCollection(CampaignMapAttritionTypes.KEY, CampaignMapAttritionTypes.Entry);
            return collection.find(entry => entry.key === this._type);
        }
        get damage() {
            const collection = this.collectionCache.getCollection(CampaignMapAttritionDamages.KEY, CampaignMapAttritionDamages.Entry);
            return collection.find(entry => entry.key === this._damage);
        }
        get messageEventAssociation() {
            const collection = this.collectionCache.getCollection(MessageEvents.KEY, MessageEvents.Entry);
            return collection.find(entry => entry.event === this._messageEventAssociation);
        }
    }
    CampaignMapAttritions.Entry = Entry;
})(CampaignMapAttritions || (CampaignMapAttritions = {}));

var CampaignMapAttritionFactionImmunities;
(function (CampaignMapAttritionFactionImmunities) {
    CampaignMapAttritionFactionImmunities.KEY = new CollectionKey("campaign_map_attrition_faction_immunities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._attrition = values["attrition"];
            this._faction = values["faction"];
        }
        get attrition() {
            const collection = this.collectionCache.getCollection(CampaignMapAttritions.KEY, CampaignMapAttritions.Entry);
            return collection.find(entry => entry.key === this._attrition);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    CampaignMapAttritionFactionImmunities.Entry = Entry;
})(CampaignMapAttritionFactionImmunities || (CampaignMapAttritionFactionImmunities = {}));

var CampaignMapAttritionUnitImmunities;
(function (CampaignMapAttritionUnitImmunities) {
    CampaignMapAttritionUnitImmunities.KEY = new CollectionKey("campaign_map_attrition_unit_immunities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._attrition = values["attrition"];
            this._unit = values["unit"];
        }
        get attrition() {
            const collection = this.collectionCache.getCollection(CampaignMapAttritions.KEY, CampaignMapAttritions.Entry);
            return collection.find(entry => entry.key === this._attrition);
        }
        get unit() {
            const collection = this.collectionCache.getCollection(MainUnits.KEY, MainUnits.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
    }
    CampaignMapAttritionUnitImmunities.Entry = Entry;
})(CampaignMapAttritionUnitImmunities || (CampaignMapAttritionUnitImmunities = {}));

var CampaignMapPieces;
(function (CampaignMapPieces) {
    CampaignMapPieces.KEY = new CollectionKey("campaign_map_pieces");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["ID"];
        }
    }
    CampaignMapPieces.Entry = Entry;
})(CampaignMapPieces || (CampaignMapPieces = {}));

var Regions;
(function (Regions) {
    Regions.KEY = new CollectionKey("regions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreen = values["onscreen"];
            this.paletteEntry = values["palette_entry"];
            this.r = values["r"];
            this.g = values["g"];
            this.b = values["b"];
            this.battleName = values["battle_name"];
            this.inEncyclopedia = !!values["in_encyclopedia"];
            this.isSea = !!values["is_sea"];
            this._ownerBundle = values["owner_bundle"];
        }
        get ownerBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles.KEY, EffectBundles.Entry);
            return collection.find(entry => entry.key === this._ownerBundle);
        }
    }
    Regions.Entry = Entry;
})(Regions || (Regions = {}));

var CampaignMapRegions;
(function (CampaignMapRegions) {
    CampaignMapRegions.KEY = new CollectionKey("campaign_map_regions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignMap = values["campaign_map"];
            this._region = values["region"];
        }
        get campaignMap() {
            const collection = this.collectionCache.getCollection(CampaignMaps.KEY, CampaignMaps.Entry);
            return collection.find(entry => entry.mapname === this._campaignMap);
        }
        get region() {
            const collection = this.collectionCache.getCollection(Regions.KEY, Regions.Entry);
            return collection.find(entry => entry.key === this._region);
        }
    }
    CampaignMapRegions.Entry = Entry;
})(CampaignMapRegions || (CampaignMapRegions = {}));

var CampaignMapRoads;
(function (CampaignMapRoads) {
    CampaignMapRoads.KEY = new CollectionKey("campaign_map_roads");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._campaign = values["campaign"];
            this.threshold = values["threshold"];
            this.turnsRequiredToUpgradeTo = values["turns_required_to_upgrade_to"];
            this.turnsRequiredToDowngradeFrom = values["turns_required_to_downgrade_from"];
            this.movementCost = values["movement_cost"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
    }
    CampaignMapRoads.Entry = Entry;
})(CampaignMapRoads || (CampaignMapRoads = {}));

var CampaignMapSettlementTemplates;
(function (CampaignMapSettlementTemplates) {
    CampaignMapSettlementTemplates.KEY = new CollectionKey("campaign_map_settlement_templates");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.templateName = values["template_name"];
            this.slotTotal = values["slot_total"];
        }
    }
    CampaignMapSettlementTemplates.Entry = Entry;
})(CampaignMapSettlementTemplates || (CampaignMapSettlementTemplates = {}));

var CampaignMapSettlements;
(function (CampaignMapSettlements) {
    CampaignMapSettlements.KEY = new CollectionKey("campaign_map_settlements");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.settlementId = values["settlement_id"];
            this._region = values["region"];
            this.defaultOnscreenName = values["default_onscreen_name"];
            this._templateName = values["template_name"];
            this.slotCount = values["slot_count"];
            this._slotType = values["slot_type"];
        }
        get region() {
            const collection = this.collectionCache.getCollection(Regions.KEY, Regions.Entry);
            return collection.find(entry => entry.key === this._region);
        }
        get templateName() {
            const collection = this.collectionCache.getCollection(CampaignMapSettlementTemplates.KEY, CampaignMapSettlementTemplates.Entry);
            return collection.find(entry => entry.templateName === this._templateName);
        }
        get slotType() {
            const collection = this.collectionCache.getCollection(Slots.KEY, Slots.Entry);
            return collection.find(entry => entry.slot === this._slotType);
        }
    }
    CampaignMapSettlements.Entry = Entry;
})(CampaignMapSettlements || (CampaignMapSettlements = {}));

var CampaignMapSettlementTemplatesCultArtJct;
(function (CampaignMapSettlementTemplatesCultArtJct) {
    CampaignMapSettlementTemplatesCultArtJct.KEY = new CollectionKey("campaign_map_settlement_templates_cult_art_jct");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._settlementTemplate = values["settlement_template"];
            this._culture = values["culture"];
            this.artpiece = values["artpiece"];
        }
        get settlementTemplate() {
            const collection = this.collectionCache.getCollection(CampaignMapSettlementTemplates.KEY, CampaignMapSettlementTemplates.Entry);
            return collection.find(entry => entry.templateName === this._settlementTemplate);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
    }
    CampaignMapSettlementTemplatesCultArtJct.Entry = Entry;
})(CampaignMapSettlementTemplatesCultArtJct || (CampaignMapSettlementTemplatesCultArtJct = {}));

var CampaignMapSlotsTemplates;
(function (CampaignMapSlotsTemplates) {
    CampaignMapSlotsTemplates.KEY = new CollectionKey("campaign_map_slots_templates");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.templateName = values["template_name"];
            this._slot = values["slot"];
            this.levels = values["levels"];
            this.artFile = values["art_file"];
        }
        get slot() {
            const collection = this.collectionCache.getCollection(Slots.KEY, Slots.Entry);
            return collection.find(entry => entry.slot === this._slot);
        }
    }
    CampaignMapSlotsTemplates.Entry = Entry;
})(CampaignMapSlotsTemplates || (CampaignMapSlotsTemplates = {}));

var WarscapeUnderlayTextures;
(function (WarscapeUnderlayTextures) {
    WarscapeUnderlayTextures.KEY = new CollectionKey("warscape_underlay_textures");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.underlayKey = values["underlay_key"];
            this.filename = values["filename"];
            this.filepath = values["filepath"];
            this.levels = values["levels"];
            this.orientationAngle = values["orientation-angle"];
            this.width = values["width"];
            this.height = values["height"];
        }
    }
    WarscapeUnderlayTextures.Entry = Entry;
})(WarscapeUnderlayTextures || (WarscapeUnderlayTextures = {}));

var CampaignMapSlots;
(function (CampaignMapSlots) {
    CampaignMapSlots.KEY = new CollectionKey("campaign_map_slots");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.slotId = values["slot_id"];
            this._region = values["region"];
            this._slotType = values["slot_type"];
            this._template = values["template"];
            this.rotation = values["rotation"];
            this._underlay = values["underlay"];
            this.onscreen = values["onscreen"];
        }
        get region() {
            const collection = this.collectionCache.getCollection(Regions.KEY, Regions.Entry);
            return collection.find(entry => entry.key === this._region);
        }
        get slotType() {
            const collection = this.collectionCache.getCollection(Slots.KEY, Slots.Entry);
            return collection.find(entry => entry.slot === this._slotType);
        }
        get template() {
            const collection = this.collectionCache.getCollection(CampaignMapSlotsTemplates.KEY, CampaignMapSlotsTemplates.Entry);
            return collection.find(entry => entry.templateName === this._template);
        }
        get underlay() {
            const collection = this.collectionCache.getCollection(WarscapeUnderlayTextures.KEY, WarscapeUnderlayTextures.Entry);
            return collection.find(entry => entry.underlayKey === this._underlay);
        }
    }
    CampaignMapSlots.Entry = Entry;
})(CampaignMapSlots || (CampaignMapSlots = {}));

var CampaignMapTooltipTexts;
(function (CampaignMapTooltipTexts) {
    CampaignMapTooltipTexts.KEY = new CollectionKey("campaign_map_tooltip_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.tooltipText = values["tooltip_text"];
        }
    }
    CampaignMapTooltipTexts.Entry = Entry;
})(CampaignMapTooltipTexts || (CampaignMapTooltipTexts = {}));

var CampaignMapTooltips;
(function (CampaignMapTooltips) {
    CampaignMapTooltips.KEY = new CollectionKey("campaign_map_tooltips");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._selectContext = values["select_context"];
            this._overContext = values["over_context"];
            this._tooltipLine = values["tooltip_line"];
            this._adviceLine = values["advice_line"];
            this._mainLine = values["main_line"];
        }
        get tooltipLine() {
            const collection = this.collectionCache.getCollection(CampaignMapTooltipTexts.KEY, CampaignMapTooltipTexts.Entry);
            return collection.find(entry => entry.key === this._tooltipLine);
        }
        get adviceLine() {
            const collection = this.collectionCache.getCollection(CampaignMapTooltipTexts.KEY, CampaignMapTooltipTexts.Entry);
            return collection.find(entry => entry.key === this._adviceLine);
        }
        get mainLine() {
            const collection = this.collectionCache.getCollection(CampaignMapTooltipTexts.KEY, CampaignMapTooltipTexts.Entry);
            return collection.find(entry => entry.key === this._mainLine);
        }
    }
    CampaignMapTooltips.Entry = Entry;
})(CampaignMapTooltips || (CampaignMapTooltips = {}));

var CampaignMapTooltipOverContexts;
(function (CampaignMapTooltipOverContexts) {
    CampaignMapTooltipOverContexts.KEY = new CollectionKey("campaign_map_tooltip_over_contexts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.overContexts = values["over_contexts"];
        }
    }
    CampaignMapTooltipOverContexts.Entry = Entry;
})(CampaignMapTooltipOverContexts || (CampaignMapTooltipOverContexts = {}));

var CampaignMapTooltipSelectContexts;
(function (CampaignMapTooltipSelectContexts) {
    CampaignMapTooltipSelectContexts.KEY = new CollectionKey("campaign_map_tooltip_select_contexts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.selectContext = values["select_context"];
        }
    }
    CampaignMapTooltipSelectContexts.Entry = Entry;
})(CampaignMapTooltipSelectContexts || (CampaignMapTooltipSelectContexts = {}));

var CampaignMapTownsAndPorts;
(function (CampaignMapTownsAndPorts) {
    CampaignMapTownsAndPorts.KEY = new CollectionKey("campaign_map_towns_and_ports");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.townId = values["town_id"];
            this._region = values["region"];
            this._slotType = values["slot_type"];
            this.onscreenName = values["onscreen_name"];
            this._template = values["template"];
        }
        get region() {
            const collection = this.collectionCache.getCollection(Regions.KEY, Regions.Entry);
            return collection.find(entry => entry.key === this._region);
        }
        get slotType() {
            const collection = this.collectionCache.getCollection(Slots.KEY, Slots.Entry);
            return collection.find(entry => entry.slot === this._slotType);
        }
        get template() {
            const collection = this.collectionCache.getCollection(CampaignMapSlotsTemplates.KEY, CampaignMapSlotsTemplates.Entry);
            return collection.find(entry => entry.templateName === this._template);
        }
    }
    CampaignMapTownsAndPorts.Entry = Entry;
})(CampaignMapTownsAndPorts || (CampaignMapTownsAndPorts = {}));

var CampaignMapTownTemplatesCultArtJct;
(function (CampaignMapTownTemplatesCultArtJct) {
    CampaignMapTownTemplatesCultArtJct.KEY = new CollectionKey("campaign_map_town_templates_cult_art_jct");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._culture = values["culture"];
            this.artpiece = values["artpiece"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
    }
    CampaignMapTownTemplatesCultArtJct.Entry = Entry;
})(CampaignMapTownTemplatesCultArtJct || (CampaignMapTownTemplatesCultArtJct = {}));

var CampaignMapTransitionAreas;
(function (CampaignMapTransitionAreas) {
    CampaignMapTransitionAreas.KEY = new CollectionKey("campaign_map_transition_areas");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._mapname = values["mapname"];
            this.index = values["index"];
            this.minx = values["minx"];
            this.miny = values["miny"];
            this.maxx = values["maxx"];
            this.maxy = values["maxy"];
            this.stormChancePercentage = values["storm_chance_percentage"];
            this.onscreenName = values["onscreen_name"];
        }
    }
    CampaignMapTransitionAreas.Entry = Entry;
})(CampaignMapTransitionAreas || (CampaignMapTransitionAreas = {}));

var CampaignMapTransitionLinks;
(function (CampaignMapTransitionLinks) {
    CampaignMapTransitionLinks.KEY = new CollectionKey("campaign_map_transition_links");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.index = values["index"];
            this._startArea = values["start_area"];
            this._endArea = values["end_area"];
            this.delayChancePercentage = values["delay_chance_percentage"];
            this.turnsStartToEnd = values["turns_start_to_end"];
            this.turnsEndToStart = values["turns_end_to_start"];
        }
        get startArea() {
            const collection = this.collectionCache.getCollection(CampaignMapTransitionAreas.KEY, CampaignMapTransitionAreas.Entry);
            return collection.find(entry => entry.index === this._startArea);
        }
        get endArea() {
            const collection = this.collectionCache.getCollection(CampaignMapTransitionAreas.KEY, CampaignMapTransitionAreas.Entry);
            return collection.find(entry => entry.index === this._endArea);
        }
    }
    CampaignMapTransitionLinks.Entry = Entry;
})(CampaignMapTransitionLinks || (CampaignMapTransitionLinks = {}));

var CampaignMpCoopGroups;
(function (CampaignMpCoopGroups) {
    CampaignMpCoopGroups.KEY = new CollectionKey("campaign_mp_coop_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignMpCoopGroups.Entry = Entry;
})(CampaignMpCoopGroups || (CampaignMpCoopGroups = {}));

var CampaignMpCoopGroupsToFactions;
(function (CampaignMpCoopGroupsToFactions) {
    CampaignMpCoopGroupsToFactions.KEY = new CollectionKey("campaign_mp_coop_groups_to_factions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._factionKey = values["faction_key"];
            this._mpCoopGroup = values["mp_coop_group"];
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get mpCoopGroup() {
            const collection = this.collectionCache.getCollection(CampaignMpCoopGroups.KEY, CampaignMpCoopGroups.Entry);
            return collection.find(entry => entry.key === this._mpCoopGroup);
        }
    }
    CampaignMpCoopGroupsToFactions.Entry = Entry;
})(CampaignMpCoopGroupsToFactions || (CampaignMpCoopGroupsToFactions = {}));

var CampaignPoliticsStrings;
(function (CampaignPoliticsStrings) {
    CampaignPoliticsStrings.KEY = new CollectionKey("campaign_politics_strings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.string = values["string"];
        }
    }
    CampaignPoliticsStrings.Entry = Entry;
})(CampaignPoliticsStrings || (CampaignPoliticsStrings = {}));

var CampaignPublicOrderPopulaceEffects;
(function (CampaignPublicOrderPopulaceEffects) {
    CampaignPublicOrderPopulaceEffects.KEY = new CollectionKey("campaign_public_order_populace_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.populaceHappiness = values["populace_happiness"];
            this._culture = values["culture"];
            this._effectBundle = values["effect_bundle"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles.KEY, EffectBundles.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    CampaignPublicOrderPopulaceEffects.Entry = Entry;
})(CampaignPublicOrderPopulaceEffects || (CampaignPublicOrderPopulaceEffects = {}));

var CampaignSettlementDisplayAqueducts;
(function (CampaignSettlementDisplayAqueducts) {
    CampaignSettlementDisplayAqueducts.KEY = new CollectionKey("campaign_settlement_display_aqueducts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._regionKey = values["region_key"];
            this.buildingPath = values["building_path"];
            this.positionXMap = values["position_x_map"];
            this.positionYMap = values["position_y_map"];
            this.positionZHeight = values["position_z_height"];
            this.rotationCwRadians = values["rotation_cw_radians"];
        }
        get regionKey() {
            const collection = this.collectionCache.getCollection(Regions.KEY, Regions.Entry);
            return collection.find(entry => entry.key === this._regionKey);
        }
    }
    CampaignSettlementDisplayAqueducts.Entry = Entry;
})(CampaignSettlementDisplayAqueducts || (CampaignSettlementDisplayAqueducts = {}));

var CampaignSettlementDisplaySprawlPieces;
(function (CampaignSettlementDisplaySprawlPieces) {
    CampaignSettlementDisplaySprawlPieces.KEY = new CollectionKey("campaign_settlement_display_sprawl_pieces");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignSettlementDisplaySprawlPieces.Entry = Entry;
})(CampaignSettlementDisplaySprawlPieces || (CampaignSettlementDisplaySprawlPieces = {}));

var CampaignSettlementDisplayBuildingIds;
(function (CampaignSettlementDisplayBuildingIds) {
    CampaignSettlementDisplayBuildingIds.KEY = new CollectionKey("campaign_settlement_display_building_ids");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._buildingLevelKey = values["building_level_key"];
            this._sprawlPieceType = values["sprawl_piece_type"];
            this.sprawlPieceLevel = values["sprawl_piece_level"];
            this._culture = values["culture"];
            this._subCulture = values["sub_culture"];
            this._faction = values["faction"];
        }
        get buildingLevelKey() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._buildingLevelKey);
        }
        get sprawlPieceType() {
            const collection = this.collectionCache.getCollection(CampaignSettlementDisplaySprawlPieces.KEY, CampaignSettlementDisplaySprawlPieces.Entry);
            return collection.find(entry => entry.key === this._sprawlPieceType);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get subCulture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._subCulture);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    CampaignSettlementDisplayBuildingIds.Entry = Entry;
})(CampaignSettlementDisplayBuildingIds || (CampaignSettlementDisplayBuildingIds = {}));

var CampaignSettlementDisplayBuildingsEnums;
(function (CampaignSettlementDisplayBuildingsEnums) {
    CampaignSettlementDisplayBuildingsEnums.KEY = new CollectionKey("campaign_settlement_display_buildings_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.type = values["type"];
        }
    }
    CampaignSettlementDisplayBuildingsEnums.Entry = Entry;
})(CampaignSettlementDisplayBuildingsEnums || (CampaignSettlementDisplayBuildingsEnums = {}));

var CampaignSettlementDisplayBuildings;
(function (CampaignSettlementDisplayBuildings) {
    CampaignSettlementDisplayBuildings.KEY = new CollectionKey("campaign_settlement_display_buildings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._displayBuildingKey = values["display_building_key"];
            this._state = values["state"];
            this.isSlum = !!values["is_slum"];
            this.isSieged = !!values["is_sieged"];
            this.isBlockaded = !!values["is_blockaded"];
            this.buildingPath = values["building_path"];
            this.destructionAdditionalModel = values["destruction_additional_model"];
            this.destructionOverrideModel = values["destruction_override_model"];
            this.constructionAdditionalModel = values["construction_additional_model"];
            this.constructionOverrideModel = values["construction_override_model"];
        }
        get displayBuildingKey() {
            const collection = this.collectionCache.getCollection(CampaignSettlementDisplayBuildingIds.KEY, CampaignSettlementDisplayBuildingIds.Entry);
            return collection.find(entry => entry.key === this._displayBuildingKey);
        }
        get state() {
            const collection = this.collectionCache.getCollection(CampaignSettlementDisplayBuildingsEnums.KEY, CampaignSettlementDisplayBuildingsEnums.Entry);
            return collection.find(entry => entry.type === this._state);
        }
    }
    CampaignSettlementDisplayBuildings.Entry = Entry;
})(CampaignSettlementDisplayBuildings || (CampaignSettlementDisplayBuildings = {}));

var CampaignSettlementDisplayBuildingConstructionEnums;
(function (CampaignSettlementDisplayBuildingConstructionEnums) {
    CampaignSettlementDisplayBuildingConstructionEnums.KEY = new CollectionKey("campaign_settlement_display_building_construction_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.type = values["type"];
        }
    }
    CampaignSettlementDisplayBuildingConstructionEnums.Entry = Entry;
})(CampaignSettlementDisplayBuildingConstructionEnums || (CampaignSettlementDisplayBuildingConstructionEnums = {}));

var CampaignSettlementDisplayBuildingConstructions;
(function (CampaignSettlementDisplayBuildingConstructions) {
    CampaignSettlementDisplayBuildingConstructions.KEY = new CollectionKey("campaign_settlement_display_building_constructions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._displayBuildingKey = values["display_building_key"];
            this._constructionType = values["construction_type"];
            this.phase = values["phase"];
            this.buildingPath = values["building_path"];
        }
        get displayBuildingKey() {
            const collection = this.collectionCache.getCollection(CampaignSettlementDisplayBuildingIds.KEY, CampaignSettlementDisplayBuildingIds.Entry);
            return collection.find(entry => entry.key === this._displayBuildingKey);
        }
        get constructionType() {
            const collection = this.collectionCache.getCollection(CampaignSettlementDisplayBuildingConstructionEnums.KEY, CampaignSettlementDisplayBuildingConstructionEnums.Entry);
            return collection.find(entry => entry.type === this._constructionType);
        }
    }
    CampaignSettlementDisplayBuildingConstructions.Entry = Entry;
})(CampaignSettlementDisplayBuildingConstructions || (CampaignSettlementDisplayBuildingConstructions = {}));

var CampaignSettlementDisplayBuildingTrees;
(function (CampaignSettlementDisplayBuildingTrees) {
    CampaignSettlementDisplayBuildingTrees.KEY = new CollectionKey("campaign_settlement_display_building_trees");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this.rigidLookupKey = values["rigid_lookup_key"];
            this._climateType = values["climate_type"];
            this.buildingPath = values["building_path"];
        }
        get climateType() {
            const collection = this.collectionCache.getCollection(Climates.KEY, Climates.Entry);
            return collection.find(entry => entry.climateType === this._climateType);
        }
    }
    CampaignSettlementDisplayBuildingTrees.Entry = Entry;
})(CampaignSettlementDisplayBuildingTrees || (CampaignSettlementDisplayBuildingTrees = {}));

var CampaignSettlementDisplaySiegeItemIds;
(function (CampaignSettlementDisplaySiegeItemIds) {
    CampaignSettlementDisplaySiegeItemIds.KEY = new CollectionKey("campaign_settlement_display_siege_item_ids");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._battlefieldDeployableSiegeItem = values["battlefield_deployable_siege_item"];
            this._sprawlPiece = values["sprawl_piece"];
        }
        get battlefieldDeployableSiegeItem() {
            const collection = this.collectionCache.getCollection(BattlefieldDeployableSiegeItems.KEY, BattlefieldDeployableSiegeItems.Entry);
            return collection.find(entry => entry.key === this._battlefieldDeployableSiegeItem);
        }
        get sprawlPiece() {
            const collection = this.collectionCache.getCollection(CampaignSettlementDisplaySprawlPieces.KEY, CampaignSettlementDisplaySprawlPieces.Entry);
            return collection.find(entry => entry.key === this._sprawlPiece);
        }
    }
    CampaignSettlementDisplaySiegeItemIds.Entry = Entry;
})(CampaignSettlementDisplaySiegeItemIds || (CampaignSettlementDisplaySiegeItemIds = {}));

var CampaignStances;
(function (CampaignStances) {
    CampaignStances.KEY = new CollectionKey("campaign_stances");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignStances.Entry = Entry;
})(CampaignStances || (CampaignStances = {}));

var CampaignStanceEffectsJunctions;
(function (CampaignStanceEffectsJunctions) {
    CampaignStanceEffectsJunctions.KEY = new CollectionKey("campaign_stance_effects_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._stance = values["stance"];
            this._effectBundle = values["effect_bundle"];
            this._culture = values["culture"];
            this._subculture = values["subculture"];
            this._faction = values["faction"];
        }
        get stance() {
            const collection = this.collectionCache.getCollection(CampaignStances.KEY, CampaignStances.Entry);
            return collection.find(entry => entry.key === this._stance);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles.KEY, EffectBundles.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    CampaignStanceEffectsJunctions.Entry = Entry;
})(CampaignStanceEffectsJunctions || (CampaignStanceEffectsJunctions = {}));

var CampaignStatisticsCategories;
(function (CampaignStatisticsCategories) {
    CampaignStatisticsCategories.KEY = new CollectionKey("campaign_statistics_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.localisedDescription = values["localised_description"];
            this.categoryOrder = values["category_order"];
        }
    }
    CampaignStatisticsCategories.Entry = Entry;
})(CampaignStatisticsCategories || (CampaignStatisticsCategories = {}));

var CampaignStatisticsEnums;
(function (CampaignStatisticsEnums) {
    CampaignStatisticsEnums.KEY = new CollectionKey("campaign_statistics_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignStatisticsEnums.Entry = Entry;
})(CampaignStatisticsEnums || (CampaignStatisticsEnums = {}));

var CampaignStatisticsStrings;
(function (CampaignStatisticsStrings) {
    CampaignStatisticsStrings.KEY = new CollectionKey("campaign_statistics_strings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignStatistic = values["campaign_statistic"];
            this.localisedDescription = values["localised_description"];
            this._campaignStatisticCategory = values["campaign_statistic_category"];
            this.statisticOrder = values["statistic_order"];
        }
        get campaignStatistic() {
            const collection = this.collectionCache.getCollection(CampaignStatisticsEnums.KEY, CampaignStatisticsEnums.Entry);
            return collection.find(entry => entry.key === this._campaignStatistic);
        }
        get campaignStatisticCategory() {
            const collection = this.collectionCache.getCollection(CampaignStatisticsCategories.KEY, CampaignStatisticsCategories.Entry);
            return collection.find(entry => entry.key === this._campaignStatisticCategory);
        }
    }
    CampaignStatisticsStrings.Entry = Entry;
})(CampaignStatisticsStrings || (CampaignStatisticsStrings = {}));

var CampaignSubjectStrings;
(function (CampaignSubjectStrings) {
    CampaignSubjectStrings.KEY = new CollectionKey("campaign_subject_strings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.string = values["string"];
        }
    }
    CampaignSubjectStrings.Entry = Entry;
})(CampaignSubjectStrings || (CampaignSubjectStrings = {}));

var CampaignSubjects;
(function (CampaignSubjects) {
    CampaignSubjects.KEY = new CollectionKey("campaign_subjects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._optionalName = values["optional_name"];
            this._optionalNameSourceFaction = values["optional_name_source_faction"];
            this.uiImage = values["ui_image"];
            this._flavourText = values["flavour_text"];
            this.male = !!values["male"];
        }
        get optionalName() {
            const collection = this.collectionCache.getCollection(CampaignSubjectStrings.KEY, CampaignSubjectStrings.Entry);
            return collection.find(entry => entry.key === this._optionalName);
        }
        get optionalNameSourceFaction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._optionalNameSourceFaction);
        }
        get flavourText() {
            const collection = this.collectionCache.getCollection(CampaignSubjectStrings.KEY, CampaignSubjectStrings.Entry);
            return collection.find(entry => entry.key === this._flavourText);
        }
    }
    CampaignSubjects.Entry = Entry;
})(CampaignSubjects || (CampaignSubjects = {}));

var CampaignSubjectMessages;
(function (CampaignSubjectMessages) {
    CampaignSubjectMessages.KEY = new CollectionKey("campaign_subject_messages");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._messageType = values["message_type"];
            this.optionalText = values["optional_text"];
        }
        get messageType() {
            const collection = this.collectionCache.getCollection(MessageEvents.KEY, MessageEvents.Entry);
            return collection.find(entry => entry.event === this._messageType);
        }
    }
    CampaignSubjectMessages.Entry = Entry;
})(CampaignSubjectMessages || (CampaignSubjectMessages = {}));

var CampaignSubjectEvolutions;
(function (CampaignSubjectEvolutions) {
    CampaignSubjectEvolutions.KEY = new CollectionKey("campaign_subject_evolutions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._campaignSubjectKey = values["campaign_subject_key"];
            this._effectBundleKey = values["effect_bundle_key"];
            this.minTurns = values["min_turns"];
            this.maxTurns = values["max_turns"];
            this.weighting = values["weighting"];
            this._arrivalMessage = values["arrival_message"];
            this._departureMessage = values["departure_message"];
            this._flavourText = values["flavour_text"];
        }
        get campaignSubjectKey() {
            const collection = this.collectionCache.getCollection(CampaignSubjects.KEY, CampaignSubjects.Entry);
            return collection.find(entry => entry.key === this._campaignSubjectKey);
        }
        get effectBundleKey() {
            const collection = this.collectionCache.getCollection(EffectBundles.KEY, EffectBundles.Entry);
            return collection.find(entry => entry.key === this._effectBundleKey);
        }
        get arrivalMessage() {
            const collection = this.collectionCache.getCollection(CampaignSubjectMessages.KEY, CampaignSubjectMessages.Entry);
            return collection.find(entry => entry.key === this._arrivalMessage);
        }
        get departureMessage() {
            const collection = this.collectionCache.getCollection(CampaignSubjectMessages.KEY, CampaignSubjectMessages.Entry);
            return collection.find(entry => entry.key === this._departureMessage);
        }
        get flavourText() {
            const collection = this.collectionCache.getCollection(CampaignSubjectStrings.KEY, CampaignSubjectStrings.Entry);
            return collection.find(entry => entry.key === this._flavourText);
        }
    }
    CampaignSubjectEvolutions.Entry = Entry;
})(CampaignSubjectEvolutions || (CampaignSubjectEvolutions = {}));

var CampaignSubjectEvolutionLinks;
(function (CampaignSubjectEvolutionLinks) {
    CampaignSubjectEvolutionLinks.KEY = new CollectionKey("campaign_subject_evolution_links");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._parent = values["parent"];
            this._child = values["child"];
        }
        get parent() {
            const collection = this.collectionCache.getCollection(CampaignSubjectEvolutions.KEY, CampaignSubjectEvolutions.Entry);
            return collection.find(entry => entry.key === this._parent);
        }
        get child() {
            const collection = this.collectionCache.getCollection(CampaignSubjectEvolutions.KEY, CampaignSubjectEvolutions.Entry);
            return collection.find(entry => entry.key === this._child);
        }
    }
    CampaignSubjectEvolutionLinks.Entry = Entry;
})(CampaignSubjectEvolutionLinks || (CampaignSubjectEvolutionLinks = {}));

var CampaignSubjectFactionRestrictionJunctions;
(function (CampaignSubjectFactionRestrictionJunctions) {
    CampaignSubjectFactionRestrictionJunctions.KEY = new CollectionKey("campaign_subject_faction_restriction_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignSubjectKey = values["campaign_subject_key"];
            this._factionKey = values["faction_key"];
        }
        get campaignSubjectKey() {
            const collection = this.collectionCache.getCollection(CampaignSubjects.KEY, CampaignSubjects.Entry);
            return collection.find(entry => entry.key === this._campaignSubjectKey);
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
    }
    CampaignSubjectFactionRestrictionJunctions.Entry = Entry;
})(CampaignSubjectFactionRestrictionJunctions || (CampaignSubjectFactionRestrictionJunctions = {}));

var CampaignUnitStatBonuses;
(function (CampaignUnitStatBonuses) {
    CampaignUnitStatBonuses.KEY = new CollectionKey("campaign_unit_stat_bonuses");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.bonus = values["bonus"];
            this.level = values["level"];
            this.threshold = values["threshold"];
            this.description = values["description"];
            this.iconPath = values["icon_path"];
            this.upgradeCostNew = values["upgrade_cost_new"];
            this.upgradeCostFromPreviousLevel = values["upgrade_cost_from_previous_level"];
        }
    }
    CampaignUnitStatBonuses.Entry = Entry;
})(CampaignUnitStatBonuses || (CampaignUnitStatBonuses = {}));

var CampaignVfxCampaignVfxEventIds;
(function (CampaignVfxCampaignVfxEventIds) {
    CampaignVfxCampaignVfxEventIds.KEY = new CollectionKey("campaign_vfx_campaign_vfx_event_ids");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.campaignVfxEvent = values["campaign_vfx_event"];
        }
    }
    CampaignVfxCampaignVfxEventIds.Entry = Entry;
})(CampaignVfxCampaignVfxEventIds || (CampaignVfxCampaignVfxEventIds = {}));

var CampaignVfxDescriptions;
(function (CampaignVfxDescriptions) {
    CampaignVfxDescriptions.KEY = new CollectionKey("campaign_vfx_descriptions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._vfx = values["vfx"];
            this.xOffset = values["x_offset"];
            this.yOffset = values["y_offset"];
            this.zOffset = values["z_offset"];
        }
        get vfx() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._vfx);
        }
    }
    CampaignVfxDescriptions.Entry = Entry;
})(CampaignVfxDescriptions || (CampaignVfxDescriptions = {}));

var CampaignVfxLookups;
(function (CampaignVfxLookups) {
    CampaignVfxLookups.KEY = new CollectionKey("campaign_vfx_lookups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._vfxEvent = values["vfx_event"];
            this._vfxDescription = values["vfx_description"];
            this._factionFilter = values["faction_filter"];
            this._cultureFilter = values["culture_filter"];
            this._agentFilter = values["agent_filter"];
        }
        get vfxEvent() {
            const collection = this.collectionCache.getCollection(CampaignVfxCampaignVfxEventIds.KEY, CampaignVfxCampaignVfxEventIds.Entry);
            return collection.find(entry => entry.campaignVfxEvent === this._vfxEvent);
        }
        get vfxDescription() {
            const collection = this.collectionCache.getCollection(CampaignVfxDescriptions.KEY, CampaignVfxDescriptions.Entry);
            return collection.find(entry => entry.key === this._vfxDescription);
        }
        get factionFilter() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._factionFilter);
        }
        get cultureFilter() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._cultureFilter);
        }
        get agentFilter() {
            const collection = this.collectionCache.getCollection(Agents.KEY, Agents.Entry);
            return collection.find(entry => entry.key === this._agentFilter);
        }
    }
    CampaignVfxLookups.Entry = Entry;
})(CampaignVfxLookups || (CampaignVfxLookups = {}));

var CampaignWalkAnimSets;
(function (CampaignWalkAnimSets) {
    CampaignWalkAnimSets.KEY = new CollectionKey("campaign_walk_anim_sets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._referencePose = values["reference_pose"];
            this.preStepTo = values["pre_step_to"];
            this.stepTo = values["step_to"];
            this.postStepTo = values["post_step_to"];
            this.preStandToWalk = values["pre_stand_to_walk"];
            this.standToWalk = values["stand_to_walk"];
            this.standToWalkDistance = values["stand_to_walk_distance"];
            this.walk = values["walk"];
            this.walkDistance = values["walk_distance"];
            this.walkToStand = values["walk_to_stand"];
            this.midWalkToStand = values["mid_walk_to_stand"];
            this.walkToStandDistance = values["walk_to_stand_distance"];
            this.postWalkToStand = values["post_walk_to_stand"];
            this.postMidWalkToStand = values["post_mid_walk_to_stand"];
        }
        get referencePose() {
            const collection = this.collectionCache.getCollection(AnimReferencePoses.KEY, AnimReferencePoses.Entry);
            return collection.find(entry => entry.key === this._referencePose);
        }
    }
    CampaignWalkAnimSets.Entry = Entry;
})(CampaignWalkAnimSets || (CampaignWalkAnimSets = {}));

var CapturePointTypes;
(function (CapturePointTypes) {
    CapturePointTypes.KEY = new CollectionKey("capture_point_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreenName = values["onscreen_name"];
            this.iconName = values["icon_name"];
        }
    }
    CapturePointTypes.Entry = Entry;
})(CapturePointTypes || (CapturePointTypes = {}));

var CdirCampaignJunctions;
(function (CdirCampaignJunctions) {
    CdirCampaignJunctions.KEY = new CollectionKey("cdir_campaign_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._campaign = values["campaign"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
    }
    CdirCampaignJunctions.Entry = Entry;
})(CdirCampaignJunctions || (CdirCampaignJunctions = {}));

var CdirFactionJunctions;
(function (CdirFactionJunctions) {
    CdirFactionJunctions.KEY = new CollectionKey("cdir_faction_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._faction = values["faction"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    CdirFactionJunctions.Entry = Entry;
})(CdirFactionJunctions || (CdirFactionJunctions = {}));

var CdirConfigValues;
(function (CdirConfigValues) {
    CdirConfigValues.KEY = new CollectionKey("cdir_config_values");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CdirConfigValues.Entry = Entry;
})(CdirConfigValues || (CdirConfigValues = {}));

var CdirConfigs;
(function (CdirConfigs) {
    CdirConfigs.KEY = new CollectionKey("cdir_configs");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignKey = values["campaign_key"];
            this._factionKey = values["faction_key"];
            this._cdirConfigKey = values["cdir_config_key"];
            this.value = values["value"];
        }
        get campaignKey() {
            const collection = this.collectionCache.getCollection(CdirCampaignJunctions.KEY, CdirCampaignJunctions.Entry);
            return collection.find(entry => entry.key === this._campaignKey);
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(CdirFactionJunctions.KEY, CdirFactionJunctions.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get cdirConfigKey() {
            const collection = this.collectionCache.getCollection(CdirConfigValues.KEY, CdirConfigValues.Entry);
            return collection.find(entry => entry.key === this._cdirConfigKey);
        }
    }
    CdirConfigs.Entry = Entry;
})(CdirConfigs || (CdirConfigs = {}));

var CdirDesires;
(function (CdirDesires) {
    CdirDesires.KEY = new CollectionKey("cdir_desires");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CdirDesires.Entry = Entry;
})(CdirDesires || (CdirDesires = {}));

var CdirDesirePriorities;
(function (CdirDesirePriorities) {
    CdirDesirePriorities.KEY = new CollectionKey("cdir_desire_priorities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignKey = values["campaign_key"];
            this._desireKey = values["desire_key"];
            this.priority = values["priority"];
        }
        get campaignKey() {
            const collection = this.collectionCache.getCollection(CdirCampaignJunctions.KEY, CdirCampaignJunctions.Entry);
            return collection.find(entry => entry.key === this._campaignKey);
        }
        get desireKey() {
            const collection = this.collectionCache.getCollection(CdirDesires.KEY, CdirDesires.Entry);
            return collection.find(entry => entry.key === this._desireKey);
        }
    }
    CdirDesirePriorities.Entry = Entry;
})(CdirDesirePriorities || (CdirDesirePriorities = {}));

var CdirEventsDilemmaChoices;
(function (CdirEventsDilemmaChoices) {
    CdirEventsDilemmaChoices.KEY = new CollectionKey("cdir_events_dilemma_choices");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.choiceKey = values["choice_key"];
        }
    }
    CdirEventsDilemmaChoices.Entry = Entry;
})(CdirEventsDilemmaChoices || (CdirEventsDilemmaChoices = {}));

var Dilemmas;
(function (Dilemmas) {
    Dilemmas.KEY = new CollectionKey("dilemmas");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.localisedTitle = values["localised_title"];
            this.localisedDescription = values["localised_description"];
            this.uiImage = values["ui_image"];
            this.uiIcon = values["ui_icon"];
            this.generate = !!values["generate"];
            this.prioritized = !!values["prioritized"];
        }
    }
    Dilemmas.Entry = Entry;
})(Dilemmas || (Dilemmas = {}));

var CdirEventsDilemmaChoiceDetails;
(function (CdirEventsDilemmaChoiceDetails) {
    CdirEventsDilemmaChoiceDetails.KEY = new CollectionKey("cdir_events_dilemma_choice_details");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._dilemmaKey = values["dilemma_key"];
            this._choiceKey = values["choice_key"];
            this.localisedChoiceLabel = values["localised_choice_label"];
            this.localisedChoiceTitle = values["localised_choice_title"];
        }
        get dilemmaKey() {
            const collection = this.collectionCache.getCollection(Dilemmas.KEY, Dilemmas.Entry);
            return collection.find(entry => entry.key === this._dilemmaKey);
        }
        get choiceKey() {
            const collection = this.collectionCache.getCollection(CdirEventsDilemmaChoices.KEY, CdirEventsDilemmaChoices.Entry);
            return collection.find(entry => entry.choiceKey === this._choiceKey);
        }
    }
    CdirEventsDilemmaChoiceDetails.Entry = Entry;
})(CdirEventsDilemmaChoiceDetails || (CdirEventsDilemmaChoiceDetails = {}));

var CdirEventsDilemmaFollowupDilemmas;
(function (CdirEventsDilemmaFollowupDilemmas) {
    CdirEventsDilemmaFollowupDilemmas.KEY = new CollectionKey("cdir_events_dilemma_followup_dilemmas");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._dilemmaKey = values["dilemma_key"];
            this._choiceKey = values["choice_key"];
            this._followupDilemmaKey = values["followup_dilemma_key"];
        }
        get dilemmaKey() {
            const collection = this.collectionCache.getCollection(Dilemmas.KEY, Dilemmas.Entry);
            return collection.find(entry => entry.key === this._dilemmaKey);
        }
        get choiceKey() {
            const collection = this.collectionCache.getCollection(CdirEventsDilemmaChoices.KEY, CdirEventsDilemmaChoices.Entry);
            return collection.find(entry => entry.choiceKey === this._choiceKey);
        }
        get followupDilemmaKey() {
            const collection = this.collectionCache.getCollection(Dilemmas.KEY, Dilemmas.Entry);
            return collection.find(entry => entry.key === this._followupDilemmaKey);
        }
    }
    CdirEventsDilemmaFollowupDilemmas.Entry = Entry;
})(CdirEventsDilemmaFollowupDilemmas || (CdirEventsDilemmaFollowupDilemmas = {}));

var MissionTypes;
(function (MissionTypes) {
    MissionTypes.KEY = new CollectionKey("mission_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    MissionTypes.Entry = Entry;
})(MissionTypes || (MissionTypes = {}));

var Missions;
(function (Missions) {
    Missions.KEY = new CollectionKey("missions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._missionType = values["mission_type"];
            this.localisedTitle = values["localised_title"];
            this.localisedDescription = values["localised_description"];
            this.uiImage = values["ui_image"];
            this.uiIcon = values["ui_icon"];
            this.generate = !!values["generate"];
            this.prioritised = !!values["prioritised"];
        }
        get missionType() {
            const collection = this.collectionCache.getCollection(MissionTypes.KEY, MissionTypes.Entry);
            return collection.find(entry => entry.key === this._missionType);
        }
    }
    Missions.Entry = Entry;
})(Missions || (Missions = {}));

var CdirEventsDilemmaFollowupMissions;
(function (CdirEventsDilemmaFollowupMissions) {
    CdirEventsDilemmaFollowupMissions.KEY = new CollectionKey("cdir_events_dilemma_followup_missions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._dilemmaKey = values["dilemma_key"];
            this._choiceKey = values["choice_key"];
            this._followupMissionKey = values["followup_mission_key"];
        }
        get dilemmaKey() {
            const collection = this.collectionCache.getCollection(Dilemmas.KEY, Dilemmas.Entry);
            return collection.find(entry => entry.key === this._dilemmaKey);
        }
        get choiceKey() {
            const collection = this.collectionCache.getCollection(CdirEventsDilemmaChoices.KEY, CdirEventsDilemmaChoices.Entry);
            return collection.find(entry => entry.choiceKey === this._choiceKey);
        }
        get followupMissionKey() {
            const collection = this.collectionCache.getCollection(Missions.KEY, Missions.Entry);
            return collection.find(entry => entry.key === this._followupMissionKey);
        }
    }
    CdirEventsDilemmaFollowupMissions.Entry = Entry;
})(CdirEventsDilemmaFollowupMissions || (CdirEventsDilemmaFollowupMissions = {}));

var Incidents;
(function (Incidents) {
    Incidents.KEY = new CollectionKey("incidents");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.uiImage = values["ui_image"];
            this.uiIcon = values["ui_icon"];
            this.generate = !!values["generate"];
            this.prioritised = !!values["prioritised"];
            this.localisedTitle = values["localised_title"];
            this.localisedDescription = values["localised_description"];
        }
    }
    Incidents.Entry = Entry;
})(Incidents || (Incidents = {}));

var CdirEventsDilemmaIncidents;
(function (CdirEventsDilemmaIncidents) {
    CdirEventsDilemmaIncidents.KEY = new CollectionKey("cdir_events_dilemma_incidents");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._dilemmaKey = values["dilemma_key"];
            this._choiceKey = values["choice_key"];
            this._incidentKey = values["incident_key"];
        }
        get dilemmaKey() {
            const collection = this.collectionCache.getCollection(Dilemmas.KEY, Dilemmas.Entry);
            return collection.find(entry => entry.key === this._dilemmaKey);
        }
        get choiceKey() {
            const collection = this.collectionCache.getCollection(CdirEventsDilemmaChoices.KEY, CdirEventsDilemmaChoices.Entry);
            return collection.find(entry => entry.choiceKey === this._choiceKey);
        }
        get incidentKey() {
            const collection = this.collectionCache.getCollection(Incidents.KEY, Incidents.Entry);
            return collection.find(entry => entry.key === this._incidentKey);
        }
    }
    CdirEventsDilemmaIncidents.Entry = Entry;
})(CdirEventsDilemmaIncidents || (CdirEventsDilemmaIncidents = {}));

var CdirEventsDilemmaOptions;
(function (CdirEventsDilemmaOptions) {
    CdirEventsDilemmaOptions.KEY = new CollectionKey("cdir_events_dilemma_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.optionKey = values["option_key"];
        }
    }
    CdirEventsDilemmaOptions.Entry = Entry;
})(CdirEventsDilemmaOptions || (CdirEventsDilemmaOptions = {}));

var CdirEventsDilemmaOptionJunctions;
(function (CdirEventsDilemmaOptionJunctions) {
    CdirEventsDilemmaOptionJunctions.KEY = new CollectionKey("cdir_events_dilemma_option_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._dilemmaKey = values["dilemma_key"];
            this._optionKey = values["option_key"];
            this.value = values["value"];
        }
        get dilemmaKey() {
            const collection = this.collectionCache.getCollection(Dilemmas.KEY, Dilemmas.Entry);
            return collection.find(entry => entry.key === this._dilemmaKey);
        }
        get optionKey() {
            const collection = this.collectionCache.getCollection(CdirEventsDilemmaOptions.KEY, CdirEventsDilemmaOptions.Entry);
            return collection.find(entry => entry.optionKey === this._optionKey);
        }
    }
    CdirEventsDilemmaOptionJunctions.Entry = Entry;
})(CdirEventsDilemmaOptionJunctions || (CdirEventsDilemmaOptionJunctions = {}));

var CdirEventsPayloads;
(function (CdirEventsPayloads) {
    CdirEventsPayloads.KEY = new CollectionKey("cdir_events_payloads");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.payloadKey = values["payload_key"];
            this._effectBundleKey = values["effect_bundle_key"];
        }
        get effectBundleKey() {
            const collection = this.collectionCache.getCollection(EffectBundles.KEY, EffectBundles.Entry);
            return collection.find(entry => entry.key === this._effectBundleKey);
        }
    }
    CdirEventsPayloads.Entry = Entry;
})(CdirEventsPayloads || (CdirEventsPayloads = {}));

var CdirEventsDilemmaPayloads;
(function (CdirEventsDilemmaPayloads) {
    CdirEventsDilemmaPayloads.KEY = new CollectionKey("cdir_events_dilemma_payloads");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._dilemmaKey = values["dilemma_key"];
            this._choiceKey = values["choice_key"];
            this._payloadKey = values["payload_key"];
            this.value = values["value"];
        }
        get dilemmaKey() {
            const collection = this.collectionCache.getCollection(Dilemmas.KEY, Dilemmas.Entry);
            return collection.find(entry => entry.key === this._dilemmaKey);
        }
        get choiceKey() {
            const collection = this.collectionCache.getCollection(CdirEventsDilemmaChoices.KEY, CdirEventsDilemmaChoices.Entry);
            return collection.find(entry => entry.choiceKey === this._choiceKey);
        }
        get payloadKey() {
            const collection = this.collectionCache.getCollection(CdirEventsPayloads.KEY, CdirEventsPayloads.Entry);
            return collection.find(entry => entry.payloadKey === this._payloadKey);
        }
    }
    CdirEventsDilemmaPayloads.Entry = Entry;
})(CdirEventsDilemmaPayloads || (CdirEventsDilemmaPayloads = {}));

var CdirEventsIncidentFollowupDilemmas;
(function (CdirEventsIncidentFollowupDilemmas) {
    CdirEventsIncidentFollowupDilemmas.KEY = new CollectionKey("cdir_events_incident_followup_dilemmas");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._incidentKey = values["incident_key"];
            this._followupDliemmaKey = values["followup_dliemma_key"];
        }
        get incidentKey() {
            const collection = this.collectionCache.getCollection(Incidents.KEY, Incidents.Entry);
            return collection.find(entry => entry.key === this._incidentKey);
        }
        get followupDliemmaKey() {
            const collection = this.collectionCache.getCollection(Dilemmas.KEY, Dilemmas.Entry);
            return collection.find(entry => entry.key === this._followupDliemmaKey);
        }
    }
    CdirEventsIncidentFollowupDilemmas.Entry = Entry;
})(CdirEventsIncidentFollowupDilemmas || (CdirEventsIncidentFollowupDilemmas = {}));

var CdirEventsIncidentFollowupIncidents;
(function (CdirEventsIncidentFollowupIncidents) {
    CdirEventsIncidentFollowupIncidents.KEY = new CollectionKey("cdir_events_incident_followup_incidents");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._incidentKey = values["incident_key"];
            this._followupIncidentKey = values["followup_incident_key"];
        }
        get incidentKey() {
            const collection = this.collectionCache.getCollection(Incidents.KEY, Incidents.Entry);
            return collection.find(entry => entry.key === this._incidentKey);
        }
        get followupIncidentKey() {
            const collection = this.collectionCache.getCollection(Incidents.KEY, Incidents.Entry);
            return collection.find(entry => entry.key === this._followupIncidentKey);
        }
    }
    CdirEventsIncidentFollowupIncidents.Entry = Entry;
})(CdirEventsIncidentFollowupIncidents || (CdirEventsIncidentFollowupIncidents = {}));

var CdirEventsIncidentFollowupMissions;
(function (CdirEventsIncidentFollowupMissions) {
    CdirEventsIncidentFollowupMissions.KEY = new CollectionKey("cdir_events_incident_followup_missions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._incidentKey = values["incident_key"];
            this._followupMissionKey = values["followup_mission_key"];
        }
        get incidentKey() {
            const collection = this.collectionCache.getCollection(Incidents.KEY, Incidents.Entry);
            return collection.find(entry => entry.key === this._incidentKey);
        }
        get followupMissionKey() {
            const collection = this.collectionCache.getCollection(Missions.KEY, Missions.Entry);
            return collection.find(entry => entry.key === this._followupMissionKey);
        }
    }
    CdirEventsIncidentFollowupMissions.Entry = Entry;
})(CdirEventsIncidentFollowupMissions || (CdirEventsIncidentFollowupMissions = {}));

var CdirEventsIncidentOptions;
(function (CdirEventsIncidentOptions) {
    CdirEventsIncidentOptions.KEY = new CollectionKey("cdir_events_incident_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.optionKey = values["option_key"];
        }
    }
    CdirEventsIncidentOptions.Entry = Entry;
})(CdirEventsIncidentOptions || (CdirEventsIncidentOptions = {}));

var CdirEventsIncidentOptionJunctions;
(function (CdirEventsIncidentOptionJunctions) {
    CdirEventsIncidentOptionJunctions.KEY = new CollectionKey("cdir_events_incident_option_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._incidentKey = values["incident_key"];
            this._optionKey = values["option_key"];
            this.value = values["value"];
        }
        get incidentKey() {
            const collection = this.collectionCache.getCollection(Incidents.KEY, Incidents.Entry);
            return collection.find(entry => entry.key === this._incidentKey);
        }
        get optionKey() {
            const collection = this.collectionCache.getCollection(CdirEventsIncidentOptions.KEY, CdirEventsIncidentOptions.Entry);
            return collection.find(entry => entry.optionKey === this._optionKey);
        }
    }
    CdirEventsIncidentOptionJunctions.Entry = Entry;
})(CdirEventsIncidentOptionJunctions || (CdirEventsIncidentOptionJunctions = {}));

var CdirEventsIncidentPayloads;
(function (CdirEventsIncidentPayloads) {
    CdirEventsIncidentPayloads.KEY = new CollectionKey("cdir_events_incident_payloads");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._incidentKey = values["incident_key"];
            this._payloadKey = values["payload_key"];
            this.value = values["value"];
        }
        get incidentKey() {
            const collection = this.collectionCache.getCollection(Incidents.KEY, Incidents.Entry);
            return collection.find(entry => entry.key === this._incidentKey);
        }
        get payloadKey() {
            const collection = this.collectionCache.getCollection(CdirEventsPayloads.KEY, CdirEventsPayloads.Entry);
            return collection.find(entry => entry.payloadKey === this._payloadKey);
        }
    }
    CdirEventsIncidentPayloads.Entry = Entry;
})(CdirEventsIncidentPayloads || (CdirEventsIncidentPayloads = {}));

var CdirEventsMissionStatuses;
(function (CdirEventsMissionStatuses) {
    CdirEventsMissionStatuses.KEY = new CollectionKey("cdir_events_mission_statuses");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.statusKey = values["status_key"];
        }
    }
    CdirEventsMissionStatuses.Entry = Entry;
})(CdirEventsMissionStatuses || (CdirEventsMissionStatuses = {}));

var CdirEventsMissionFollowupDilemmas;
(function (CdirEventsMissionFollowupDilemmas) {
    CdirEventsMissionFollowupDilemmas.KEY = new CollectionKey("cdir_events_mission_followup_dilemmas");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._missionKey = values["mission_key"];
            this._statusKey = values["status_key"];
            this._followupDilemmaKey = values["followup_dilemma_key"];
        }
        get missionKey() {
            const collection = this.collectionCache.getCollection(Missions.KEY, Missions.Entry);
            return collection.find(entry => entry.key === this._missionKey);
        }
        get statusKey() {
            const collection = this.collectionCache.getCollection(CdirEventsMissionStatuses.KEY, CdirEventsMissionStatuses.Entry);
            return collection.find(entry => entry.statusKey === this._statusKey);
        }
        get followupDilemmaKey() {
            const collection = this.collectionCache.getCollection(Dilemmas.KEY, Dilemmas.Entry);
            return collection.find(entry => entry.key === this._followupDilemmaKey);
        }
    }
    CdirEventsMissionFollowupDilemmas.Entry = Entry;
})(CdirEventsMissionFollowupDilemmas || (CdirEventsMissionFollowupDilemmas = {}));

var CdirEventsMissionFollowupMissions;
(function (CdirEventsMissionFollowupMissions) {
    CdirEventsMissionFollowupMissions.KEY = new CollectionKey("cdir_events_mission_followup_missions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._missionKey = values["mission_key"];
            this._statusKey = values["status_key"];
            this._followupMissionKey = values["followup_mission_key"];
        }
        get missionKey() {
            const collection = this.collectionCache.getCollection(Missions.KEY, Missions.Entry);
            return collection.find(entry => entry.key === this._missionKey);
        }
        get statusKey() {
            const collection = this.collectionCache.getCollection(CdirEventsMissionStatuses.KEY, CdirEventsMissionStatuses.Entry);
            return collection.find(entry => entry.statusKey === this._statusKey);
        }
        get followupMissionKey() {
            const collection = this.collectionCache.getCollection(Missions.KEY, Missions.Entry);
            return collection.find(entry => entry.key === this._followupMissionKey);
        }
    }
    CdirEventsMissionFollowupMissions.Entry = Entry;
})(CdirEventsMissionFollowupMissions || (CdirEventsMissionFollowupMissions = {}));

var CdirEventsMissionIncidents;
(function (CdirEventsMissionIncidents) {
    CdirEventsMissionIncidents.KEY = new CollectionKey("cdir_events_mission_incidents");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._missionKey = values["mission_key"];
            this._statusKey = values["status_key"];
            this._incidentKey = values["incident_key"];
        }
        get missionKey() {
            const collection = this.collectionCache.getCollection(Missions.KEY, Missions.Entry);
            return collection.find(entry => entry.key === this._missionKey);
        }
        get statusKey() {
            const collection = this.collectionCache.getCollection(CdirEventsMissionStatuses.KEY, CdirEventsMissionStatuses.Entry);
            return collection.find(entry => entry.statusKey === this._statusKey);
        }
        get incidentKey() {
            const collection = this.collectionCache.getCollection(Incidents.KEY, Incidents.Entry);
            return collection.find(entry => entry.key === this._incidentKey);
        }
    }
    CdirEventsMissionIncidents.Entry = Entry;
})(CdirEventsMissionIncidents || (CdirEventsMissionIncidents = {}));

var MissionIssuers;
(function (MissionIssuers) {
    MissionIssuers.KEY = new CollectionKey("mission_issuers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.issuerKey = values["issuer_key"];
        }
    }
    MissionIssuers.Entry = Entry;
})(MissionIssuers || (MissionIssuers = {}));

var CdirEventsMissionIssuerJunctions;
(function (CdirEventsMissionIssuerJunctions) {
    CdirEventsMissionIssuerJunctions.KEY = new CollectionKey("cdir_events_mission_issuer_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._missionKey = values["mission_key"];
            this._issuerKey = values["issuer_key"];
        }
        get missionKey() {
            const collection = this.collectionCache.getCollection(Missions.KEY, Missions.Entry);
            return collection.find(entry => entry.key === this._missionKey);
        }
        get issuerKey() {
            const collection = this.collectionCache.getCollection(MissionIssuers.KEY, MissionIssuers.Entry);
            return collection.find(entry => entry.issuerKey === this._issuerKey);
        }
    }
    CdirEventsMissionIssuerJunctions.Entry = Entry;
})(CdirEventsMissionIssuerJunctions || (CdirEventsMissionIssuerJunctions = {}));

var CdirEventsMissionOptions;
(function (CdirEventsMissionOptions) {
    CdirEventsMissionOptions.KEY = new CollectionKey("cdir_events_mission_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.optionKey = values["option_key"];
        }
    }
    CdirEventsMissionOptions.Entry = Entry;
})(CdirEventsMissionOptions || (CdirEventsMissionOptions = {}));

var CdirEventsMissionOptionJunctions;
(function (CdirEventsMissionOptionJunctions) {
    CdirEventsMissionOptionJunctions.KEY = new CollectionKey("cdir_events_mission_option_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._missionKey = values["mission_key"];
            this._optionKey = values["option_key"];
            this.value = values["value"];
        }
        get missionKey() {
            const collection = this.collectionCache.getCollection(Missions.KEY, Missions.Entry);
            return collection.find(entry => entry.key === this._missionKey);
        }
        get optionKey() {
            const collection = this.collectionCache.getCollection(CdirEventsMissionOptions.KEY, CdirEventsMissionOptions.Entry);
            return collection.find(entry => entry.optionKey === this._optionKey);
        }
    }
    CdirEventsMissionOptionJunctions.Entry = Entry;
})(CdirEventsMissionOptionJunctions || (CdirEventsMissionOptionJunctions = {}));

var CdirEventsMissionPayloads;
(function (CdirEventsMissionPayloads) {
    CdirEventsMissionPayloads.KEY = new CollectionKey("cdir_events_mission_payloads");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._missionKey = values["mission_key"];
            this._statusKey = values["status_key"];
            this._payloadKey = values["payload_key"];
            this.value = values["value"];
        }
        get missionKey() {
            const collection = this.collectionCache.getCollection(Missions.KEY, Missions.Entry);
            return collection.find(entry => entry.key === this._missionKey);
        }
        get statusKey() {
            const collection = this.collectionCache.getCollection(CdirEventsMissionStatuses.KEY, CdirEventsMissionStatuses.Entry);
            return collection.find(entry => entry.statusKey === this._statusKey);
        }
        get payloadKey() {
            const collection = this.collectionCache.getCollection(CdirEventsPayloads.KEY, CdirEventsPayloads.Entry);
            return collection.find(entry => entry.payloadKey === this._payloadKey);
        }
    }
    CdirEventsMissionPayloads.Entry = Entry;
})(CdirEventsMissionPayloads || (CdirEventsMissionPayloads = {}));

var CdirMilitaryGeneratorConfigs;
(function (CdirMilitaryGeneratorConfigs) {
    CdirMilitaryGeneratorConfigs.KEY = new CollectionKey("cdir_military_generator_configs");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CdirMilitaryGeneratorConfigs.Entry = Entry;
})(CdirMilitaryGeneratorConfigs || (CdirMilitaryGeneratorConfigs = {}));

var CdirMilitaryGeneratorTemplates;
(function (CdirMilitaryGeneratorTemplates) {
    CdirMilitaryGeneratorTemplates.KEY = new CollectionKey("cdir_military_generator_templates");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CdirMilitaryGeneratorTemplates.Entry = Entry;
})(CdirMilitaryGeneratorTemplates || (CdirMilitaryGeneratorTemplates = {}));

var CdirMilitaryGeneratorTemplatePriorities;
(function (CdirMilitaryGeneratorTemplatePriorities) {
    CdirMilitaryGeneratorTemplatePriorities.KEY = new CollectionKey("cdir_military_generator_template_priorities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._configKey = values["config_key"];
            this._templateKey = values["template_key"];
            this.priority = values["priority"];
        }
        get configKey() {
            const collection = this.collectionCache.getCollection(CdirMilitaryGeneratorConfigs.KEY, CdirMilitaryGeneratorConfigs.Entry);
            return collection.find(entry => entry.key === this._configKey);
        }
        get templateKey() {
            const collection = this.collectionCache.getCollection(CdirMilitaryGeneratorTemplates.KEY, CdirMilitaryGeneratorTemplates.Entry);
            return collection.find(entry => entry.key === this._templateKey);
        }
    }
    CdirMilitaryGeneratorTemplatePriorities.Entry = Entry;
})(CdirMilitaryGeneratorTemplatePriorities || (CdirMilitaryGeneratorTemplatePriorities = {}));

var CdirMilitaryGeneratorTemplateRatios;
(function (CdirMilitaryGeneratorTemplateRatios) {
    CdirMilitaryGeneratorTemplateRatios.KEY = new CollectionKey("cdir_military_generator_template_ratios");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._templateKey = values["template_key"];
            this._unitGroupKey = values["unit_group_key"];
            this.ratio = values["ratio"];
        }
        get templateKey() {
            const collection = this.collectionCache.getCollection(CdirMilitaryGeneratorTemplates.KEY, CdirMilitaryGeneratorTemplates.Entry);
            return collection.find(entry => entry.key === this._templateKey);
        }
        get unitGroupKey() {
            const collection = this.collectionCache.getCollection(CdirMilitaryGeneratorUnitGroups.KEY, CdirMilitaryGeneratorUnitGroups.Entry);
            return collection.find(entry => entry.key === this._unitGroupKey);
        }
    }
    CdirMilitaryGeneratorTemplateRatios.Entry = Entry;
})(CdirMilitaryGeneratorTemplateRatios || (CdirMilitaryGeneratorTemplateRatios = {}));

var CdirMilitaryGeneratorUnitQualities;
(function (CdirMilitaryGeneratorUnitQualities) {
    CdirMilitaryGeneratorUnitQualities.KEY = new CollectionKey("cdir_military_generator_unit_qualities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._groupKey = values["group_key"];
            this._unitKey = values["unit_key"];
            this.quality = values["quality"];
        }
        get groupKey() {
            const collection = this.collectionCache.getCollection(CdirMilitaryGeneratorUnitGroups.KEY, CdirMilitaryGeneratorUnitGroups.Entry);
            return collection.find(entry => entry.key === this._groupKey);
        }
        get unitKey() {
            const collection = this.collectionCache.getCollection(MainUnits.KEY, MainUnits.Entry);
            return collection.find(entry => entry.unit === this._unitKey);
        }
    }
    CdirMilitaryGeneratorUnitQualities.Entry = Entry;
})(CdirMilitaryGeneratorUnitQualities || (CdirMilitaryGeneratorUnitQualities = {}));

var CentralisedUpgradeBuildingLevelJunctions;
(function (CentralisedUpgradeBuildingLevelJunctions) {
    CentralisedUpgradeBuildingLevelJunctions.KEY = new CollectionKey("centralised_upgrade_building_level_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._upgradedBuildingLevel = values["upgraded_building_level"];
            this._centralBuildingLevel = values["central_building_level"];
            this.priority = values["priority"];
        }
        get upgradedBuildingLevel() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._upgradedBuildingLevel);
        }
        get centralBuildingLevel() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._centralBuildingLevel);
        }
    }
    CentralisedUpgradeBuildingLevelJunctions.Entry = Entry;
})(CentralisedUpgradeBuildingLevelJunctions || (CentralisedUpgradeBuildingLevelJunctions = {}));

var CharacterExperienceSkillTiers;
(function (CharacterExperienceSkillTiers) {
    CharacterExperienceSkillTiers.KEY = new CollectionKey("character_experience_skill_tiers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._agentKey = values["agent_key"];
            this.skillRank = values["skill_rank"];
            this.experienceThreshold = values["experience_threshold"];
            this.skillPoints = values["skill_points"];
            this._optionalCampaignKey = values["optional_campaign_key"];
            this.forArmy = !!values["for_army"];
            this.forNavy = !!values["for_navy"];
        }
        get agentKey() {
            const collection = this.collectionCache.getCollection(Agents.KEY, Agents.Entry);
            return collection.find(entry => entry.key === this._agentKey);
        }
        get optionalCampaignKey() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._optionalCampaignKey);
        }
    }
    CharacterExperienceSkillTiers.Entry = Entry;
})(CharacterExperienceSkillTiers || (CharacterExperienceSkillTiers = {}));

var CharacterSkills;
(function (CharacterSkills) {
    CharacterSkills.KEY = new CollectionKey("character_skills");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.imagePath = values["image_path"];
            this.localisedName = values["localised_name"];
            this.localisedDescription = values["localised_description"];
            this._preBattleSpeechParameter = values["pre_battle_speech_parameter"];
            this.unlockedAtRank = values["unlocked_at_rank"];
            this.isBackgroundSkill = !!values["is_background_skill"];
            this.isFemaleOnlyBackgroundSkill = !!values["is_female_only_background_skill"];
            this.isMaleOnlyBackgroundSkill = !!values["is_male_only_background_skill"];
            this.backgroundWeighting = values["background_weighting"];
        }
        get preBattleSpeechParameter() {
            const collection = this.collectionCache.getCollection(PreBattleSpeechParametersEnum.KEY, PreBattleSpeechParametersEnum.Entry);
            return collection.find(entry => entry.key === this._preBattleSpeechParameter);
        }
    }
    CharacterSkills.Entry = Entry;
})(CharacterSkills || (CharacterSkills = {}));

var CharacterSkillLevelDetails;
(function (CharacterSkillLevelDetails) {
    CharacterSkillLevelDetails.KEY = new CollectionKey("character_skill_level_details");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.level = values["level"];
            this._skillKey = values["skill_key"];
            this._factionKey = values["faction_key"];
            this._campaignKey = values["campaign_key"];
            this._subcultureKey = values["subculture_key"];
            this.localisedName = values["localised_name"];
            this.localisedDescription = values["localised_description"];
            this.imagePath = values["image_path"];
            this.unlockedAtRank = values["unlocked_at_rank"];
        }
        get skillKey() {
            const collection = this.collectionCache.getCollection(CharacterSkills.KEY, CharacterSkills.Entry);
            return collection.find(entry => entry.key === this._skillKey);
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get campaignKey() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaignKey);
        }
        get subcultureKey() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._subcultureKey);
        }
    }
    CharacterSkillLevelDetails.Entry = Entry;
})(CharacterSkillLevelDetails || (CharacterSkillLevelDetails = {}));

var CharacterSkillLevelToEffectsJunctions;
(function (CharacterSkillLevelToEffectsJunctions) {
    CharacterSkillLevelToEffectsJunctions.KEY = new CollectionKey("character_skill_level_to_effects_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._characterSkillKey = values["character_skill_key"];
            this.level = values["level"];
            this._effectKey = values["effect_key"];
            this.value = values["value"];
            this.isFactionwide = !!values["is_factionwide"];
            this._effectScope = values["effect_scope"];
        }
        get characterSkillKey() {
            const collection = this.collectionCache.getCollection(CharacterSkills.KEY, CharacterSkills.Entry);
            return collection.find(entry => entry.key === this._characterSkillKey);
        }
        get effectKey() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effectKey);
        }
        get effectScope() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes.KEY, CampaignEffectScopes.Entry);
            return collection.find(entry => entry.key === this._effectScope);
        }
    }
    CharacterSkillLevelToEffectsJunctions.Entry = Entry;
})(CharacterSkillLevelToEffectsJunctions || (CharacterSkillLevelToEffectsJunctions = {}));

var CharacterSkillNodes;
(function (CharacterSkillNodes) {
    CharacterSkillNodes.KEY = new CollectionKey("character_skill_nodes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._characterSkillNodeSetKey = values["character_skill_node_set_key"];
            this._characterSkillKey = values["character_skill_key"];
            this._factionKey = values["faction_key"];
            this._campaignKey = values["campaign_key"];
            this.tier = values["tier"];
            this.indent = values["indent"];
            this._subculture = values["subculture"];
        }
        get characterSkillNodeSetKey() {
            const collection = this.collectionCache.getCollection(CharacterSkillNodeSets.KEY, CharacterSkillNodeSets.Entry);
            return collection.find(entry => entry.key === this._characterSkillNodeSetKey);
        }
        get characterSkillKey() {
            const collection = this.collectionCache.getCollection(CharacterSkills.KEY, CharacterSkills.Entry);
            return collection.find(entry => entry.key === this._characterSkillKey);
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get campaignKey() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaignKey);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
    }
    CharacterSkillNodes.Entry = Entry;
})(CharacterSkillNodes || (CharacterSkillNodes = {}));

var CharacterSkillNodeLinks;
(function (CharacterSkillNodeLinks) {
    CharacterSkillNodeLinks.KEY = new CollectionKey("character_skill_node_links");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._parentKey = values["parent_key"];
            this._childKey = values["child_key"];
            this.initialDescentTiers = values["initial_descent_tiers"];
            this.parentLinkPosition = values["parent_link_position"];
            this.childLinkPosition = values["child_link_position"];
        }
        get parentKey() {
            const collection = this.collectionCache.getCollection(CharacterSkillNodes.KEY, CharacterSkillNodes.Entry);
            return collection.find(entry => entry.key === this._parentKey);
        }
        get childKey() {
            const collection = this.collectionCache.getCollection(CharacterSkillNodes.KEY, CharacterSkillNodes.Entry);
            return collection.find(entry => entry.key === this._childKey);
        }
    }
    CharacterSkillNodeLinks.Entry = Entry;
})(CharacterSkillNodeLinks || (CharacterSkillNodeLinks = {}));

var TraitInfo;
(function (TraitInfo) {
    TraitInfo.KEY = new CollectionKey("trait_info");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.trait = values["trait"];
            this.applicableTo = values["applicable_to"];
        }
    }
    TraitInfo.Entry = Entry;
})(TraitInfo || (TraitInfo = {}));

var TraitCategories;
(function (TraitCategories) {
    TraitCategories.KEY = new CollectionKey("trait_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.category = values["category"];
            this.iconPath = values["icon_path"];
        }
    }
    TraitCategories.Entry = Entry;
})(TraitCategories || (TraitCategories = {}));

var CharacterTraits;
(function (CharacterTraits) {
    CharacterTraits.KEY = new CollectionKey("character_traits");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this.noGoingBackLevel = values["no_going_back_level"];
            this.hidden = !!values["hidden"];
            this.precedence = values["precedence"];
            this._icon = values["icon"];
            this.author = values["author"];
            this.comment = values["comment"];
            this._preBattleSpeechParameter = values["pre_battle_speech_parameter"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(TraitInfo.KEY, TraitInfo.Entry);
            return collection.find(entry => entry.trait === this._key);
        }
        get icon() {
            const collection = this.collectionCache.getCollection(TraitCategories.KEY, TraitCategories.Entry);
            return collection.find(entry => entry.category === this._icon);
        }
        get preBattleSpeechParameter() {
            const collection = this.collectionCache.getCollection(PreBattleSpeechParametersEnum.KEY, PreBattleSpeechParametersEnum.Entry);
            return collection.find(entry => entry.key === this._preBattleSpeechParameter);
        }
    }
    CharacterTraits.Entry = Entry;
})(CharacterTraits || (CharacterTraits = {}));

var CharacterTraitLevels;
(function (CharacterTraitLevels) {
    CharacterTraitLevels.KEY = new CollectionKey("character_trait_levels");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreenName = values["onscreen_name"];
            this._trait = values["trait"];
            this.level = values["level"];
            this.thresholdPoints = values["threshold_points"];
            this.epithetText = values["epithet_text"];
            this.gainText = values["gain_text"];
            this.effectText = values["effect_text"];
            this.colourText = values["colour_text"];
            this.explanationText = values["explanation_text"];
            this.removalText = values["removal_text"];
            this._enabledByTech = values["enabled_by_tech"];
        }
        get trait() {
            const collection = this.collectionCache.getCollection(CharacterTraits.KEY, CharacterTraits.Entry);
            return collection.find(entry => entry._key === this._trait);
        }
        get enabledByTech() {
            const collection = this.collectionCache.getCollection(Technologies.KEY, Technologies.Entry);
            return collection.find(entry => entry.key === this._enabledByTech);
        }
    }
    CharacterTraitLevels.Entry = Entry;
})(CharacterTraitLevels || (CharacterTraitLevels = {}));

var ChatShortcuts;
(function (ChatShortcuts) {
    ChatShortcuts.KEY = new CollectionKey("chat_shortcuts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.description = values["description"];
            this._gameArea = values["game_area"];
        }
    }
    ChatShortcuts.Entry = Entry;
})(ChatShortcuts || (ChatShortcuts = {}));

var ClimateToWeatherLand;
(function (ClimateToWeatherLand) {
    ClimateToWeatherLand.KEY = new CollectionKey("climate_to_weather_land");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._climateType = values["Climate_type"];
            this._season = values["season"];
            this.dry = values["Dry"];
            this.dusty = values["Dusty"];
            this.sandstorm = values["Sandstorm"];
            this.drizzle = values["Drizzle"];
            this.lightRain = values["Light_rain"];
            this.moderateRain = values["Moderate_rain"];
            this.heavyRain = values["Heavy_rain"];
            this.storm = values["Storm"];
            this.lightSnow = values["Light_snow"];
            this.moderateSnow = values["Moderate_snow"];
            this.heavySnow = values["Heavy_snow"];
            this.blizzard = values["Blizzard"];
            this.heatFatigue = values["Heat_fatigue"];
            this.coldFatigue = values["Cold_fatigue"];
            this.hazeIndex = values["Haze_index"];
            this.fogIndex = values["Fog_index"];
        }
        get climateType() {
            const collection = this.collectionCache.getCollection(Climates.KEY, Climates.Entry);
            return collection.find(entry => entry.climateType === this._climateType);
        }
        get season() {
            const collection = this.collectionCache.getCollection(Seasons.KEY, Seasons.Entry);
            return collection.find(entry => entry.season === this._season);
        }
    }
    ClimateToWeatherLand.Entry = Entry;
})(ClimateToWeatherLand || (ClimateToWeatherLand = {}));

var CommanderUnitPermissions;
(function (CommanderUnitPermissions) {
    CommanderUnitPermissions.KEY = new CollectionKey("commander_unit_permissions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unitKey = values["unit_key"];
            this._factionKey = values["faction_key"];
            this._cultureKey = values["culture_key"];
            this._subcultureKey = values["subculture_key"];
        }
        get unitKey() {
            const collection = this.collectionCache.getCollection(MainUnits.KEY, MainUnits.Entry);
            return collection.find(entry => entry.unit === this._unitKey);
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get cultureKey() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._cultureKey);
        }
        get subcultureKey() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._subcultureKey);
        }
    }
    CommanderUnitPermissions.Entry = Entry;
})(CommanderUnitPermissions || (CommanderUnitPermissions = {}));

var CskTestMilitaryForceLegacyNames;
(function (CskTestMilitaryForceLegacyNames) {
    CskTestMilitaryForceLegacyNames.KEY = new CollectionKey("csk_test_military_force_legacy_names");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._subculture = values["subculture"];
            this.localisedName = values["localised_name"];
        }
    }
    CskTestMilitaryForceLegacyNames.Entry = Entry;
})(CskTestMilitaryForceLegacyNames || (CskTestMilitaryForceLegacyNames = {}));

var CultureSettlementOccupationOptions;
(function (CultureSettlementOccupationOptions) {
    CultureSettlementOccupationOptions.KEY = new CollectionKey("culture_settlement_occupation_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._culture = values["culture"];
            this.option = values["option"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
    }
    CultureSettlementOccupationOptions.Entry = Entry;
})(CultureSettlementOccupationOptions || (CultureSettlementOccupationOptions = {}));

var PortraitTypes;
(function (PortraitTypes) {
    PortraitTypes.KEY = new CollectionKey("portrait_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    PortraitTypes.Entry = Entry;
})(PortraitTypes || (PortraitTypes = {}));

var CultureSubcultureCharacterPortraits;
(function (CultureSubcultureCharacterPortraits) {
    CultureSubcultureCharacterPortraits.KEY = new CollectionKey("culture_subculture_character_portraits");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._portraitType = values["portrait_type"];
            this._culture = values["culture"];
            this._subculture = values["subculture"];
            this._faction = values["faction"];
            this.path = values["path"];
        }
        get portraitType() {
            const collection = this.collectionCache.getCollection(PortraitTypes.KEY, PortraitTypes.Entry);
            return collection.find(entry => entry.key === this._portraitType);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    CultureSubcultureCharacterPortraits.Entry = Entry;
})(CultureSubcultureCharacterPortraits || (CultureSubcultureCharacterPortraits = {}));

var PoliticsGovernmentTypes;
(function (PoliticsGovernmentTypes) {
    PoliticsGovernmentTypes.KEY = new CollectionKey("politics_government_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.governmentType = values["government_type"];
        }
    }
    PoliticsGovernmentTypes.Entry = Entry;
})(PoliticsGovernmentTypes || (PoliticsGovernmentTypes = {}));

var CultureSubculturePoliticsGovernmentTypes;
(function (CultureSubculturePoliticsGovernmentTypes) {
    CultureSubculturePoliticsGovernmentTypes.KEY = new CollectionKey("culture_subculture_politics_government_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._culture = values["culture"];
            this._governmentType = values["government_type"];
            this._faction = values["faction"];
            this.onScreenNameGovernmentType = values["on_screen_name_government_type"];
            this.onScreenNameFactionLeader = values["on_screen_name_faction_leader"];
            this._effectBundle = values["effect_bundle"];
            this.isDefault = !!values["is_default"];
            this._factionLeaderTrait = values["faction_leader_trait"];
            this.onScreenNameFactionLeaderFemale = values["on_screen_name_faction_leader_female"];
            this._factionLeaderTraitFemale = values["faction_leader_trait_female"];
            this.onScreenNameGovernmentActions = values["on_screen_name_government_actions"];
            this.onScreenDescrGovernmentActions = values["on_screen_descr_government_actions"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get governmentType() {
            const collection = this.collectionCache.getCollection(PoliticsGovernmentTypes.KEY, PoliticsGovernmentTypes.Entry);
            return collection.find(entry => entry.governmentType === this._governmentType);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles.KEY, EffectBundles.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
        get factionLeaderTrait() {
            const collection = this.collectionCache.getCollection(TraitInfo.KEY, TraitInfo.Entry);
            return collection.find(entry => entry.trait === this._factionLeaderTrait);
        }
        get factionLeaderTraitFemale() {
            const collection = this.collectionCache.getCollection(TraitInfo.KEY, TraitInfo.Entry);
            return collection.find(entry => entry.trait === this._factionLeaderTraitFemale);
        }
    }
    CultureSubculturePoliticsGovernmentTypes.Entry = Entry;
})(CultureSubculturePoliticsGovernmentTypes || (CultureSubculturePoliticsGovernmentTypes = {}));

var Cursors;
(function (Cursors) {
    Cursors.KEY = new CollectionKey("cursors");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.image = values["image"];
            this.frames = values["frames"];
            this.framerate = values["framerate"];
            this.hotspotX = values["hotspotX"];
            this.hotspotY = values["hotspotY"];
            this.loop = !!values["loop"];
            this.width = values["width"];
            this.height = values["height"];
        }
    }
    Cursors.Entry = Entry;
})(Cursors || (Cursors = {}));

var CursorMouseEvents;
(function (CursorMouseEvents) {
    CursorMouseEvents.KEY = new CollectionKey("cursor_mouse_events");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CursorMouseEvents.Entry = Entry;
})(CursorMouseEvents || (CursorMouseEvents = {}));

var CursorTransitions;
(function (CursorTransitions) {
    CursorTransitions.KEY = new CollectionKey("cursor_transitions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._initiatingCursor = values["initiating_cursor"];
            this._resultingCursor = values["resulting_cursor"];
            this._mouseEvent = values["mouse_event"];
        }
        get initiatingCursor() {
            const collection = this.collectionCache.getCollection(Cursors.KEY, Cursors.Entry);
            return collection.find(entry => entry.key === this._initiatingCursor);
        }
        get resultingCursor() {
            const collection = this.collectionCache.getCollection(Cursors.KEY, Cursors.Entry);
            return collection.find(entry => entry.key === this._resultingCursor);
        }
        get mouseEvent() {
            const collection = this.collectionCache.getCollection(CursorMouseEvents.KEY, CursorMouseEvents.Entry);
            return collection.find(entry => entry.key === this._mouseEvent);
        }
    }
    CursorTransitions.Entry = Entry;
})(CursorTransitions || (CursorTransitions = {}));

var CursusHonorumLevelRequirements;
(function (CursusHonorumLevelRequirements) {
    CursusHonorumLevelRequirements.KEY = new CollectionKey("cursus_honorum_level_requirements");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._subcultureKey = values["subculture_key"];
            this.level = values["level"];
            this.rank = values["rank"];
            this.age = values["age"];
            this._factionKey = values["faction_key"];
        }
        get subcultureKey() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._subcultureKey);
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
    }
    CursusHonorumLevelRequirements.Entry = Entry;
})(CursusHonorumLevelRequirements || (CursusHonorumLevelRequirements = {}));

var CursusHonorumTraitJunctions;
(function (CursusHonorumTraitJunctions) {
    CursusHonorumTraitJunctions.KEY = new CollectionKey("cursus_honorum_trait_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._subcultureKey = values["subculture_key"];
            this._traitInfoKey = values["trait_info_key"];
            this._factionKey = values["faction_key"];
            this._traitInfoKeyFemale = values["trait_info_key_female"];
        }
        get subcultureKey() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._subcultureKey);
        }
        get traitInfoKey() {
            const collection = this.collectionCache.getCollection(TraitInfo.KEY, TraitInfo.Entry);
            return collection.find(entry => entry.trait === this._traitInfoKey);
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get traitInfoKeyFemale() {
            const collection = this.collectionCache.getCollection(TraitInfo.KEY, TraitInfo.Entry);
            return collection.find(entry => entry.trait === this._traitInfoKeyFemale);
        }
    }
    CursusHonorumTraitJunctions.Entry = Entry;
})(CursusHonorumTraitJunctions || (CursusHonorumTraitJunctions = {}));

var DavePermissions;
(function (DavePermissions) {
    DavePermissions.KEY = new CollectionKey("dave_permissions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.permission = values["permission"];
        }
    }
    DavePermissions.Entry = Entry;
})(DavePermissions || (DavePermissions = {}));

var TExcPackCategories;
(function (TExcPackCategories) {
    TExcPackCategories.KEY = new CollectionKey("TExc_PackCategories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.packCategory = values["pack_category"];
            this.scriptName = values["script_name"];
            this.packFile = values["pack_file"];
            this.localisationFile = values["localisation_file"];
            this.locked = !!values["locked"];
            this.lockedBy = values["locked_by"];
        }
    }
    TExcPackCategories.Entry = Entry;
})(TExcPackCategories || (TExcPackCategories = {}));

var TExcImplementedTables;
(function (TExcImplementedTables) {
    TExcImplementedTables.KEY = new CollectionKey("TExc_ImplementedTables");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.tableName = values["table_name"];
            this.designer = values["Designer"];
            this.implemented = !!values["Implemented"];
            this.implementer = values["Implementer"];
            this.modified = !!values["Modified"];
            this._destinationPack = values["destination_pack"];
        }
        get destinationPack() {
            const collection = this.collectionCache.getCollection(TExcPackCategories.KEY, TExcPackCategories.Entry);
            return collection.find(entry => entry.packCategory === this._destinationPack);
        }
    }
    TExcImplementedTables.Entry = Entry;
})(TExcImplementedTables || (TExcImplementedTables = {}));

var DaveRestrictedTables;
(function (DaveRestrictedTables) {
    DaveRestrictedTables.KEY = new CollectionKey("dave_restricted_tables");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._tableName = values["table_name"];
        }
        get tableName() {
            const collection = this.collectionCache.getCollection(TExcImplementedTables.KEY, TExcImplementedTables.Entry);
            return collection.find(entry => entry.tableName === this._tableName);
        }
    }
    DaveRestrictedTables.Entry = Entry;
})(DaveRestrictedTables || (DaveRestrictedTables = {}));

var DaveUserTablePermissions;
(function (DaveUserTablePermissions) {
    DaveUserTablePermissions.KEY = new CollectionKey("dave_user_table_permissions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.userName = values["user_name"];
            this._tableName = values["table_name"];
            this._permission = values["permission"];
        }
        get tableName() {
            const collection = this.collectionCache.getCollection(TExcImplementedTables.KEY, TExcImplementedTables.Entry);
            return collection.find(entry => entry.tableName === this._tableName);
        }
        get permission() {
            const collection = this.collectionCache.getCollection(DavePermissions.KEY, DavePermissions.Entry);
            return collection.find(entry => entry.permission === this._permission);
        }
    }
    DaveUserTablePermissions.Entry = Entry;
})(DaveUserTablePermissions || (DaveUserTablePermissions = {}));

var DeathTypes;
(function (DeathTypes) {
    DeathTypes.KEY = new CollectionKey("death_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    DeathTypes.Entry = Entry;
})(DeathTypes || (DeathTypes = {}));

var ModelsDeployables;
(function (ModelsDeployables) {
    ModelsDeployables.KEY = new CollectionKey("models_deployables");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.modelFile = values["model_file"];
            this.logicFile = values["logic_file"];
            this.displayPath = values["display_path"];
        }
    }
    ModelsDeployables.Entry = Entry;
})(ModelsDeployables || (ModelsDeployables = {}));

var UnitStatModifiersHowEnums;
(function (UnitStatModifiersHowEnums) {
    UnitStatModifiersHowEnums.KEY = new CollectionKey("unit_stat_modifiers_how_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    UnitStatModifiersHowEnums.Entry = Entry;
})(UnitStatModifiersHowEnums || (UnitStatModifiersHowEnums = {}));

var Deployables;
(function (Deployables) {
    Deployables.KEY = new CollectionKey("deployables");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.name = values["name"];
            this._model = values["model"];
            this._model2 = values["model_2"];
            this.number = values["number"];
            this.spacingX = values["spacing_x"];
            this.spacingY = values["spacing_y"];
            this.minRows = values["min_rows"];
            this.minColumns = values["min_columns"];
            this.randomOffset = values["random_offset"];
            this.hitpoints = values["hitpoints"];
            this.killChance = values["kill_chance"];
            this._statMod = values["stat_mod"];
            this.value = values["value"];
            this._how = values["how"];
            this.iconName = values["icon_name"];
            this.infoPic = values["info_pic"];
            this.description = values["description"];
            this.tooltip = values["tooltip"];
            this.inEncyclopaedia = !!values["in_encyclopaedia"];
            this.recruitmentCap = values["recruitment_cap"];
            this.maxRows = values["max_rows"];
            this.ignitionThreshold = values["ignition_threshold"];
        }
        get model() {
            const collection = this.collectionCache.getCollection(ModelsDeployables.KEY, ModelsDeployables.Entry);
            return collection.find(entry => entry.key === this._model);
        }
        get model2() {
            const collection = this.collectionCache.getCollection(ModelsDeployables.KEY, ModelsDeployables.Entry);
            return collection.find(entry => entry.key === this._model2);
        }
        get statMod() {
            const collection = this.collectionCache.getCollection(UiUnitStats.KEY, UiUnitStats.Entry);
            return collection.find(entry => entry.key === this._statMod);
        }
        get how() {
            const collection = this.collectionCache.getCollection(UnitStatModifiersHowEnums.KEY, UnitStatModifiersHowEnums.Entry);
            return collection.find(entry => entry.key === this._how);
        }
    }
    Deployables.Entry = Entry;
})(Deployables || (Deployables = {}));

var DeployablesCustomBattles;
(function (DeployablesCustomBattles) {
    DeployablesCustomBattles.KEY = new CollectionKey("deployables_custom_battles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._deployable = values["deployable"];
            this.cap = values["cap"];
            this.probability = values["probability"];
        }
        get deployable() {
            const collection = this.collectionCache.getCollection(Deployables.KEY, Deployables.Entry);
            return collection.find(entry => entry.key === this._deployable);
        }
    }
    DeployablesCustomBattles.Entry = Entry;
})(DeployablesCustomBattles || (DeployablesCustomBattles = {}));

var DilemmaToCampaignSubjectJunctions;
(function (DilemmaToCampaignSubjectJunctions) {
    DilemmaToCampaignSubjectJunctions.KEY = new CollectionKey("dilemma_to_campaign_subject_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._dilemmaKey = values["dilemma_key"];
            this._campaignSubjectKey = values["campaign_subject_key"];
            this.weighting = values["weighting"];
        }
        get dilemmaKey() {
            const collection = this.collectionCache.getCollection(Dilemmas.KEY, Dilemmas.Entry);
            return collection.find(entry => entry.key === this._dilemmaKey);
        }
        get campaignSubjectKey() {
            const collection = this.collectionCache.getCollection(CampaignSubjects.KEY, CampaignSubjects.Entry);
            return collection.find(entry => entry.key === this._campaignSubjectKey);
        }
    }
    DilemmaToCampaignSubjectJunctions.Entry = Entry;
})(DilemmaToCampaignSubjectJunctions || (DilemmaToCampaignSubjectJunctions = {}));

var DiplomacyCurrentTreatiesToDiplomaticOptions;
(function (DiplomacyCurrentTreatiesToDiplomaticOptions) {
    DiplomacyCurrentTreatiesToDiplomaticOptions.KEY = new CollectionKey("diplomacy_current_treaties_to_diplomatic_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._currentTreatyKey = values["current_treaty_key"];
            this._diplomaticOptionKey = values["diplomatic_option_key"];
            this.canBeCancelled = !!values["can_be_cancelled"];
        }
        get currentTreatyKey() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings.KEY, DiplomacyStrings.Entry);
            return collection.find(entry => entry.key === this._currentTreatyKey);
        }
        get diplomaticOptionKey() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings.KEY, DiplomacyStrings.Entry);
            return collection.find(entry => entry.key === this._diplomaticOptionKey);
        }
    }
    DiplomacyCurrentTreatiesToDiplomaticOptions.Entry = Entry;
})(DiplomacyCurrentTreatiesToDiplomaticOptions || (DiplomacyCurrentTreatiesToDiplomaticOptions = {}));

var DiplomacyKeys;
(function (DiplomacyKeys) {
    DiplomacyKeys.KEY = new CollectionKey("diplomacy_keys");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    DiplomacyKeys.Entry = Entry;
})(DiplomacyKeys || (DiplomacyKeys = {}));

var DiplomacyNegotiationAttitudes;
(function (DiplomacyNegotiationAttitudes) {
    DiplomacyNegotiationAttitudes.KEY = new CollectionKey("diplomacy_negotiation_attitudes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.minimumAttitude = values["minimum_attitude"];
            this.maximumAttitude = values["maximum_attitude"];
        }
    }
    DiplomacyNegotiationAttitudes.Entry = Entry;
})(DiplomacyNegotiationAttitudes || (DiplomacyNegotiationAttitudes = {}));

var DiplomacyNegotiationAttitudeOverrideStrings;
(function (DiplomacyNegotiationAttitudeOverrideStrings) {
    DiplomacyNegotiationAttitudeOverrideStrings.KEY = new CollectionKey("diplomacy_negotiation_attitude_override_strings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this._culture = values["culture"];
            this._governmentType = values["government_type"];
            this._attitude = values["attitude"];
            this._string = values["string"];
            this.option = values["option"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(DiplomacyKeys.KEY, DiplomacyKeys.Entry);
            return collection.find(entry => entry.key === this._key);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get governmentType() {
            const collection = this.collectionCache.getCollection(GovernmentTypes.KEY, GovernmentTypes.Entry);
            return collection.find(entry => entry.governmentType === this._governmentType);
        }
        get attitude() {
            const collection = this.collectionCache.getCollection(DiplomacyNegotiationAttitudes.KEY, DiplomacyNegotiationAttitudes.Entry);
            return collection.find(entry => entry.key === this._attitude);
        }
        get string() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings.KEY, DiplomacyStrings.Entry);
            return collection.find(entry => entry.key === this._string);
        }
    }
    DiplomacyNegotiationAttitudeOverrideStrings.Entry = Entry;
})(DiplomacyNegotiationAttitudeOverrideStrings || (DiplomacyNegotiationAttitudeOverrideStrings = {}));

var DiplomacyNegotiationFactionAttitudeOverrideStrings;
(function (DiplomacyNegotiationFactionAttitudeOverrideStrings) {
    DiplomacyNegotiationFactionAttitudeOverrideStrings.KEY = new CollectionKey("diplomacy_negotiation_faction_attitude_override_strings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this._culture = values["culture"];
            this._governmentType = values["government_type"];
            this._faction = values["faction"];
            this._attitude = values["attitude"];
            this._string = values["string"];
            this.option = values["option"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(DiplomacyKeys.KEY, DiplomacyKeys.Entry);
            return collection.find(entry => entry.key === this._key);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get governmentType() {
            const collection = this.collectionCache.getCollection(GovernmentTypes.KEY, GovernmentTypes.Entry);
            return collection.find(entry => entry.governmentType === this._governmentType);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get attitude() {
            const collection = this.collectionCache.getCollection(DiplomacyNegotiationAttitudes.KEY, DiplomacyNegotiationAttitudes.Entry);
            return collection.find(entry => entry.key === this._attitude);
        }
        get string() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings.KEY, DiplomacyStrings.Entry);
            return collection.find(entry => entry.key === this._string);
        }
    }
    DiplomacyNegotiationFactionAttitudeOverrideStrings.Entry = Entry;
})(DiplomacyNegotiationFactionAttitudeOverrideStrings || (DiplomacyNegotiationFactionAttitudeOverrideStrings = {}));

var DiplomacyNegotiationFactionOverrideStrings;
(function (DiplomacyNegotiationFactionOverrideStrings) {
    DiplomacyNegotiationFactionOverrideStrings.KEY = new CollectionKey("diplomacy_negotiation_faction_override_strings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this._culture = values["culture"];
            this._governmentType = values["government_type"];
            this._faction = values["faction"];
            this._string = values["string"];
            this.option = values["option"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(DiplomacyKeys.KEY, DiplomacyKeys.Entry);
            return collection.find(entry => entry.key === this._key);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get governmentType() {
            const collection = this.collectionCache.getCollection(GovernmentTypes.KEY, GovernmentTypes.Entry);
            return collection.find(entry => entry.governmentType === this._governmentType);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get string() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings.KEY, DiplomacyStrings.Entry);
            return collection.find(entry => entry.key === this._string);
        }
    }
    DiplomacyNegotiationFactionOverrideStrings.Entry = Entry;
})(DiplomacyNegotiationFactionOverrideStrings || (DiplomacyNegotiationFactionOverrideStrings = {}));

var DiplomacyNegotiationStrings;
(function (DiplomacyNegotiationStrings) {
    DiplomacyNegotiationStrings.KEY = new CollectionKey("diplomacy_negotiation_strings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this._culture = values["culture"];
            this._governmentType = values["government_type"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(DiplomacyKeys.KEY, DiplomacyKeys.Entry);
            return collection.find(entry => entry.key === this._key);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get governmentType() {
            const collection = this.collectionCache.getCollection(GovernmentTypes.KEY, GovernmentTypes.Entry);
            return collection.find(entry => entry.governmentType === this._governmentType);
        }
    }
    DiplomacyNegotiationStrings.Entry = Entry;
})(DiplomacyNegotiationStrings || (DiplomacyNegotiationStrings = {}));

var DiplomacyNegotiationStringOptions;
(function (DiplomacyNegotiationStringOptions) {
    DiplomacyNegotiationStringOptions.KEY = new CollectionKey("diplomacy_negotiation_string_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this._culture = values["culture"];
            this._governmentType = values["government_type"];
            this._string = values["string"];
            this.option = values["option"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(DiplomacyKeys.KEY, DiplomacyKeys.Entry);
            return collection.find(entry => entry.key === this._key);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get governmentType() {
            const collection = this.collectionCache.getCollection(GovernmentTypes.KEY, GovernmentTypes.Entry);
            return collection.find(entry => entry.governmentType === this._governmentType);
        }
        get string() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings.KEY, DiplomacyStrings.Entry);
            return collection.find(entry => entry.key === this._string);
        }
    }
    DiplomacyNegotiationStringOptions.Entry = Entry;
})(DiplomacyNegotiationStringOptions || (DiplomacyNegotiationStringOptions = {}));

var DiplomaticActionFactionRestrictions;
(function (DiplomaticActionFactionRestrictions) {
    DiplomaticActionFactionRestrictions.KEY = new CollectionKey("diplomatic_action_faction_restrictions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._faction = values["faction"];
            this.canMakeVassals = !!values["can_make_vassals"];
            this.canMakeClientStates = !!values["can_make_client_states"];
            this.canMakeConfederations = !!values["can_make_confederations"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    DiplomaticActionFactionRestrictions.Entry = Entry;
})(DiplomaticActionFactionRestrictions || (DiplomaticActionFactionRestrictions = {}));

var DiplomaticActionSubcultureRestrictions;
(function (DiplomaticActionSubcultureRestrictions) {
    DiplomaticActionSubcultureRestrictions.KEY = new CollectionKey("diplomatic_action_subculture_restrictions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._subculture = values["subculture"];
            this.canMakeVassals = !!values["can_make_vassals"];
            this.canMakeClientStates = !!values["can_make_client_states"];
            this.canMakeConfederations = !!values["can_make_confederations"];
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
    }
    DiplomaticActionSubcultureRestrictions.Entry = Entry;
})(DiplomaticActionSubcultureRestrictions || (DiplomaticActionSubcultureRestrictions = {}));

var DiplomaticRelationsAttitudes;
(function (DiplomaticRelationsAttitudes) {
    DiplomaticRelationsAttitudes.KEY = new CollectionKey("diplomatic_relations_attitudes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.attitude = values["attitude"];
            this.value = values["value"];
        }
    }
    DiplomaticRelationsAttitudes.Entry = Entry;
})(DiplomaticRelationsAttitudes || (DiplomaticRelationsAttitudes = {}));

var DiplomaticRelationsReligion;
(function (DiplomaticRelationsReligion) {
    DiplomaticRelationsReligion.KEY = new CollectionKey("diplomatic_relations_religion");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._religionA = values["religion_A"];
            this._religionB = values["religion_B"];
            this.relationsModifier = values["relations_modifier"];
            this.religiousUnhappinessModifier = values["religious_unhappiness_modifier"];
        }
        get religionA() {
            const collection = this.collectionCache.getCollection(Religions.KEY, Religions.Entry);
            return collection.find(entry => entry.religionKey === this._religionA);
        }
    }
    DiplomaticRelationsReligion.Entry = Entry;
})(DiplomaticRelationsReligion || (DiplomaticRelationsReligion = {}));

var DiseasesCultureDeaths;
(function (DiseasesCultureDeaths) {
    DiseasesCultureDeaths.KEY = new CollectionKey("diseases_culture_deaths");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._disease = values["disease"];
            this._culture = values["culture"];
            this.mortalityRate = values["mortality_rate"];
        }
    }
    DiseasesCultureDeaths.Entry = Entry;
})(DiseasesCultureDeaths || (DiseasesCultureDeaths = {}));

var DiseasesGenerationChance;
(function (DiseasesGenerationChance) {
    DiseasesGenerationChance.KEY = new CollectionKey("diseases_generation_chance");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._disease = values["disease"];
            this._continent = values["continent"];
            this.baseGenerationChance = values["base_generation_chance"];
        }
    }
    DiseasesGenerationChance.Entry = Entry;
})(DiseasesGenerationChance || (DiseasesGenerationChance = {}));

var EffectBonusValueAgentJunction;
(function (EffectBonusValueAgentJunction) {
    EffectBonusValueAgentJunction.KEY = new CollectionKey("effect_bonus_value_agent_junction");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._agent = values["agent"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsAgent.KEY, CampaignBonusValueIdsAgent.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get agent() {
            const collection = this.collectionCache.getCollection(Agents.KEY, Agents.Entry);
            return collection.find(entry => entry.key === this._agent);
        }
    }
    EffectBonusValueAgentJunction.Entry = Entry;
})(EffectBonusValueAgentJunction || (EffectBonusValueAgentJunction = {}));

var EffectBonusValueBasicJunction;
(function (EffectBonusValueBasicJunction) {
    EffectBonusValueBasicJunction.KEY = new CollectionKey("effect_bonus_value_basic_junction");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsBasic.KEY, CampaignBonusValueIdsBasic.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
    }
    EffectBonusValueBasicJunction.Entry = Entry;
})(EffectBonusValueBasicJunction || (EffectBonusValueBasicJunction = {}));

var EffectBonusValueBattlefieldDeployablesJunctions;
(function (EffectBonusValueBattlefieldDeployablesJunctions) {
    EffectBonusValueBattlefieldDeployablesJunctions.KEY = new CollectionKey("effect_bonus_value_battlefield_deployables_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._battlefieldDeployable = values["battlefield_deployable"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsBattlefieldDeployables.KEY, CampaignBonusValueIdsBattlefieldDeployables.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get battlefieldDeployable() {
            const collection = this.collectionCache.getCollection(Deployables.KEY, Deployables.Entry);
            return collection.find(entry => entry.key === this._battlefieldDeployable);
        }
    }
    EffectBonusValueBattlefieldDeployablesJunctions.Entry = Entry;
})(EffectBonusValueBattlefieldDeployablesJunctions || (EffectBonusValueBattlefieldDeployablesJunctions = {}));

var EffectBonusValueBattleContextJunctions;
(function (EffectBonusValueBattleContextJunctions) {
    EffectBonusValueBattleContextJunctions.KEY = new CollectionKey("effect_bonus_value_battle_context_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effectKey = values["effect_key"];
            this._bonusValueId = values["bonus_value_id"];
            this._battleContextKey = values["battle_context_key"];
        }
        get effectKey() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effectKey);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsBattleContexts.KEY, CampaignBonusValueIdsBattleContexts.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get battleContextKey() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueBattleContextSpecifiers.KEY, CampaignBonusValueBattleContextSpecifiers.Entry);
            return collection.find(entry => entry.key === this._battleContextKey);
        }
    }
    EffectBonusValueBattleContextJunctions.Entry = Entry;
})(EffectBonusValueBattleContextJunctions || (EffectBonusValueBattleContextJunctions = {}));

var EffectBonusValueBuildingChainJunctions;
(function (EffectBonusValueBuildingChainJunctions) {
    EffectBonusValueBuildingChainJunctions.KEY = new CollectionKey("effect_bonus_value_building_chain_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._buildingChain = values["building_chain"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsBuildingChain.KEY, CampaignBonusValueIdsBuildingChain.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get buildingChain() {
            const collection = this.collectionCache.getCollection(BuildingChains.KEY, BuildingChains.Entry);
            return collection.find(entry => entry.key === this._buildingChain);
        }
    }
    EffectBonusValueBuildingChainJunctions.Entry = Entry;
})(EffectBonusValueBuildingChainJunctions || (EffectBonusValueBuildingChainJunctions = {}));

var EffectBonusValueBuildingSetJunctions;
(function (EffectBonusValueBuildingSetJunctions) {
    EffectBonusValueBuildingSetJunctions.KEY = new CollectionKey("effect_bonus_value_building_set_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._buildingSet = values["building_set"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsBuildingSets.KEY, CampaignBonusValueIdsBuildingSets.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get buildingSet() {
            const collection = this.collectionCache.getCollection(BuildingSets.KEY, BuildingSets.Entry);
            return collection.find(entry => entry.key === this._buildingSet);
        }
    }
    EffectBonusValueBuildingSetJunctions.Entry = Entry;
})(EffectBonusValueBuildingSetJunctions || (EffectBonusValueBuildingSetJunctions = {}));

var EffectBonusValueCommodityJunction;
(function (EffectBonusValueCommodityJunction) {
    EffectBonusValueCommodityJunction.KEY = new CollectionKey("effect_bonus_value_commodity_junction");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._commodity = values["commodity"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsCommodity.KEY, CampaignBonusValueIdsCommodity.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get commodity() {
            const collection = this.collectionCache.getCollection(Commodities.KEY, Commodities.Entry);
            return collection.find(entry => entry._key === this._commodity);
        }
    }
    EffectBonusValueCommodityJunction.Entry = Entry;
})(EffectBonusValueCommodityJunction || (EffectBonusValueCommodityJunction = {}));

var UnitSets;
(function (UnitSets) {
    UnitSets.KEY = new CollectionKey("unit_sets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    UnitSets.Entry = Entry;
})(UnitSets || (UnitSets = {}));

var EffectBonusValueIdsUnitSets;
(function (EffectBonusValueIdsUnitSets) {
    EffectBonusValueIdsUnitSets.KEY = new CollectionKey("effect_bonus_value_ids_unit_sets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._unitSet = values["unit_set"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsUnitSets.KEY, CampaignBonusValueIdsUnitSets.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get unitSet() {
            const collection = this.collectionCache.getCollection(UnitSets.KEY, UnitSets.Entry);
            return collection.find(entry => entry.key === this._unitSet);
        }
    }
    EffectBonusValueIdsUnitSets.Entry = Entry;
})(EffectBonusValueIdsUnitSets || (EffectBonusValueIdsUnitSets = {}));

var EffectBonusValueIdActionResultsAdditionalOutcomesJunctions;
(function (EffectBonusValueIdActionResultsAdditionalOutcomesJunctions) {
    EffectBonusValueIdActionResultsAdditionalOutcomesJunctions.KEY = new CollectionKey("effect_bonus_value_id_action_results_additional_outcomes_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._actionResultsAdditionalOutcomeRecord = values["action_results_additional_outcome_record"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsActionResultsAdditionalOutcomes.KEY, CampaignBonusValueIdsActionResultsAdditionalOutcomes.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get actionResultsAdditionalOutcomeRecord() {
            const collection = this.collectionCache.getCollection(ActionResultsAdditionalOutcomes.KEY, ActionResultsAdditionalOutcomes.Entry);
            return collection.find(entry => entry.key === this._actionResultsAdditionalOutcomeRecord);
        }
    }
    EffectBonusValueIdActionResultsAdditionalOutcomesJunctions.Entry = Entry;
})(EffectBonusValueIdActionResultsAdditionalOutcomesJunctions || (EffectBonusValueIdActionResultsAdditionalOutcomesJunctions = {}));

var UnitStatModifiers;
(function (UnitStatModifiers) {
    UnitStatModifiers.KEY = new CollectionKey("unit_stat_modifiers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._stat = values["stat"];
            this._how = values["how"];
        }
        get stat() {
            const collection = this.collectionCache.getCollection(UiUnitStats.KEY, UiUnitStats.Entry);
            return collection.find(entry => entry.key === this._stat);
        }
        get how() {
            const collection = this.collectionCache.getCollection(UnitStatModifiersHowEnums.KEY, UnitStatModifiersHowEnums.Entry);
            return collection.find(entry => entry.key === this._how);
        }
    }
    UnitStatModifiers.Entry = Entry;
})(UnitStatModifiers || (UnitStatModifiers = {}));

var EffectBonusValueMeleeWeaponJunction;
(function (EffectBonusValueMeleeWeaponJunction) {
    EffectBonusValueMeleeWeaponJunction.KEY = new CollectionKey("effect_bonus_value_melee_weapon_junction");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._meleeWeapon = values["melee_weapon"];
            this._statModifier = values["stat_modifier"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get meleeWeapon() {
            const collection = this.collectionCache.getCollection(UnitMeleeWeaponsEnum.KEY, UnitMeleeWeaponsEnum.Entry);
            return collection.find(entry => entry.key === this._meleeWeapon);
        }
        get statModifier() {
            const collection = this.collectionCache.getCollection(UnitStatModifiers.KEY, UnitStatModifiers.Entry);
            return collection.find(entry => entry.key === this._statModifier);
        }
    }
    EffectBonusValueMeleeWeaponJunction.Entry = Entry;
})(EffectBonusValueMeleeWeaponJunction || (EffectBonusValueMeleeWeaponJunction = {}));

var EffectBonusValuePopulationClassAndReligionJunction;
(function (EffectBonusValuePopulationClassAndReligionJunction) {
    EffectBonusValuePopulationClassAndReligionJunction.KEY = new CollectionKey("effect_bonus_value_population_class_and_religion_junction");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._populationClass = values["population_class"];
            this._religion = values["religion"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsPopulationClassAndReligion.KEY, CampaignBonusValueIdsPopulationClassAndReligion.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get populationClass() {
            const collection = this.collectionCache.getCollection(PopulationClasses.KEY, PopulationClasses.Entry);
            return collection.find(entry => entry.populationClass === this._populationClass);
        }
        get religion() {
            const collection = this.collectionCache.getCollection(Religions.KEY, Religions.Entry);
            return collection.find(entry => entry.religionKey === this._religion);
        }
    }
    EffectBonusValuePopulationClassAndReligionJunction.Entry = Entry;
})(EffectBonusValuePopulationClassAndReligionJunction || (EffectBonusValuePopulationClassAndReligionJunction = {}));

var EffectBonusValuePopulationClassJunction;
(function (EffectBonusValuePopulationClassJunction) {
    EffectBonusValuePopulationClassJunction.KEY = new CollectionKey("effect_bonus_value_population_class_junction");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._populationClass = values["population_class"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsPopulationClass.KEY, CampaignBonusValueIdsPopulationClass.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get populationClass() {
            const collection = this.collectionCache.getCollection(PopulationClasses.KEY, PopulationClasses.Entry);
            return collection.find(entry => entry.populationClass === this._populationClass);
        }
    }
    EffectBonusValuePopulationClassJunction.Entry = Entry;
})(EffectBonusValuePopulationClassJunction || (EffectBonusValuePopulationClassJunction = {}));

var EffectBonusValueProjectileJunctions;
(function (EffectBonusValueProjectileJunctions) {
    EffectBonusValueProjectileJunctions.KEY = new CollectionKey("effect_bonus_value_projectile_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._projectile = values["projectile"];
            this._bonusValue = values["bonus_value"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get projectile() {
            const collection = this.collectionCache.getCollection(Projectiles.KEY, Projectiles.Entry);
            return collection.find(entry => entry.key === this._projectile);
        }
        get bonusValue() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsProjectile.KEY, CampaignBonusValueIdsProjectile.Entry);
            return collection.find(entry => entry.key === this._bonusValue);
        }
    }
    EffectBonusValueProjectileJunctions.Entry = Entry;
})(EffectBonusValueProjectileJunctions || (EffectBonusValueProjectileJunctions = {}));

var EffectBonusValueProvincialInitiativeEffectRecordJunctions;
(function (EffectBonusValueProvincialInitiativeEffectRecordJunctions) {
    EffectBonusValueProvincialInitiativeEffectRecordJunctions.KEY = new CollectionKey("effect_bonus_value_provincial_initiative_effect_record_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._effectBonusWillModify = values["effect_bonus_will_modify"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsProvincialInitiativeEffectRecords.KEY, CampaignBonusValueIdsProvincialInitiativeEffectRecords.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get effectBonusWillModify() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effectBonusWillModify);
        }
    }
    EffectBonusValueProvincialInitiativeEffectRecordJunctions.Entry = Entry;
})(EffectBonusValueProvincialInitiativeEffectRecordJunctions || (EffectBonusValueProvincialInitiativeEffectRecordJunctions = {}));

var EffectBonusValueReligionJunction;
(function (EffectBonusValueReligionJunction) {
    EffectBonusValueReligionJunction.KEY = new CollectionKey("effect_bonus_value_religion_junction");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._religion = values["religion"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsReligion.KEY, CampaignBonusValueIdsReligion.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get religion() {
            const collection = this.collectionCache.getCollection(Religions.KEY, Religions.Entry);
            return collection.find(entry => entry.religionKey === this._religion);
        }
    }
    EffectBonusValueReligionJunction.Entry = Entry;
})(EffectBonusValueReligionJunction || (EffectBonusValueReligionJunction = {}));

var EffectBonusValueResourceJunction;
(function (EffectBonusValueResourceJunction) {
    EffectBonusValueResourceJunction.KEY = new CollectionKey("effect_bonus_value_resource_junction");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._resource = values["resource"];
        }
        get resource() {
            const collection = this.collectionCache.getCollection(Resources.KEY, Resources.Entry);
            return collection.find(entry => entry.key === this._resource);
        }
    }
    EffectBonusValueResourceJunction.Entry = Entry;
})(EffectBonusValueResourceJunction || (EffectBonusValueResourceJunction = {}));

var EffectBonusValueShotTypeJunctions;
(function (EffectBonusValueShotTypeJunctions) {
    EffectBonusValueShotTypeJunctions.KEY = new CollectionKey("effect_bonus_value_shot_type_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._shotType = values["shot_type"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsProjectileShotTypeEnum.KEY, CampaignBonusValueIdsProjectileShotTypeEnum.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get shotType() {
            const collection = this.collectionCache.getCollection(ProjectileShotTypeEnum.KEY, ProjectileShotTypeEnum.Entry);
            return collection.find(entry => entry.key === this._shotType);
        }
    }
    EffectBonusValueShotTypeJunctions.Entry = Entry;
})(EffectBonusValueShotTypeJunctions || (EffectBonusValueShotTypeJunctions = {}));

var EffectBonusValueSiegeItemJunctions;
(function (EffectBonusValueSiegeItemJunctions) {
    EffectBonusValueSiegeItemJunctions.KEY = new CollectionKey("effect_bonus_value_siege_item_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._siegeItem = values["siege_item"];
        }
    }
    EffectBonusValueSiegeItemJunctions.Entry = Entry;
})(EffectBonusValueSiegeItemJunctions || (EffectBonusValueSiegeItemJunctions = {}));

var TechnologyCategories;
(function (TechnologyCategories) {
    TechnologyCategories.KEY = new CollectionKey("technology_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.position = values["position"];
        }
    }
    TechnologyCategories.Entry = Entry;
})(TechnologyCategories || (TechnologyCategories = {}));

var EffectBonusValueTechnologyCategoryJunctions;
(function (EffectBonusValueTechnologyCategoryJunctions) {
    EffectBonusValueTechnologyCategoryJunctions.KEY = new CollectionKey("effect_bonus_value_technology_category_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._technologyCategory = values["technology_category"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsTechnologyCategories.KEY, CampaignBonusValueIdsTechnologyCategories.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get technologyCategory() {
            const collection = this.collectionCache.getCollection(TechnologyCategories.KEY, TechnologyCategories.Entry);
            return collection.find(entry => entry.key === this._technologyCategory);
        }
    }
    EffectBonusValueTechnologyCategoryJunctions.Entry = Entry;
})(EffectBonusValueTechnologyCategoryJunctions || (EffectBonusValueTechnologyCategoryJunctions = {}));

var EffectBonusValueUnitAbilityJunctions;
(function (EffectBonusValueUnitAbilityJunctions) {
    EffectBonusValueUnitAbilityJunctions.KEY = new CollectionKey("effect_bonus_value_unit_ability_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._unitAbility = values["unit_ability"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsUnitAbility.KEY, CampaignBonusValueIdsUnitAbility.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get unitAbility() {
            const collection = this.collectionCache.getCollection(UnitAbilities.KEY, UnitAbilities.Entry);
            return collection.find(entry => entry.key === this._unitAbility);
        }
    }
    EffectBonusValueUnitAbilityJunctions.Entry = Entry;
})(EffectBonusValueUnitAbilityJunctions || (EffectBonusValueUnitAbilityJunctions = {}));

var EffectBonusValueUnitCasteJunctions;
(function (EffectBonusValueUnitCasteJunctions) {
    EffectBonusValueUnitCasteJunctions.KEY = new CollectionKey("effect_bonus_value_unit_caste_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._caste = values["caste"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsUnitCaste.KEY, CampaignBonusValueIdsUnitCaste.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get caste() {
            const collection = this.collectionCache.getCollection(UnitCastes.KEY, UnitCastes.Entry);
            return collection.find(entry => entry.caste === this._caste);
        }
    }
    EffectBonusValueUnitCasteJunctions.Entry = Entry;
})(EffectBonusValueUnitCasteJunctions || (EffectBonusValueUnitCasteJunctions = {}));

var EffectBonusValueUnitCasteStatModifiersJunctions;
(function (EffectBonusValueUnitCasteStatModifiersJunctions) {
    EffectBonusValueUnitCasteStatModifiersJunctions.KEY = new CollectionKey("effect_bonus_value_unit_caste_stat_modifiers_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._caste = values["caste"];
            this._statModifier = values["stat_modifier"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get caste() {
            const collection = this.collectionCache.getCollection(UnitCastes.KEY, UnitCastes.Entry);
            return collection.find(entry => entry.caste === this._caste);
        }
        get statModifier() {
            const collection = this.collectionCache.getCollection(UnitStatModifiers.KEY, UnitStatModifiers.Entry);
            return collection.find(entry => entry.key === this._statModifier);
        }
    }
    EffectBonusValueUnitCasteStatModifiersJunctions.Entry = Entry;
})(EffectBonusValueUnitCasteStatModifiersJunctions || (EffectBonusValueUnitCasteStatModifiersJunctions = {}));

var EffectBonusValueUnitCategoryJunction;
(function (EffectBonusValueUnitCategoryJunction) {
    EffectBonusValueUnitCategoryJunction.KEY = new CollectionKey("effect_bonus_value_unit_category_junction");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._unitCategory = values["unit_category"];
        }
    }
    EffectBonusValueUnitCategoryJunction.Entry = Entry;
})(EffectBonusValueUnitCategoryJunction || (EffectBonusValueUnitCategoryJunction = {}));

var EffectBonusValueUnitCategoryStatModifiersJunctions;
(function (EffectBonusValueUnitCategoryStatModifiersJunctions) {
    EffectBonusValueUnitCategoryStatModifiersJunctions.KEY = new CollectionKey("effect_bonus_value_unit_category_stat_modifiers_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._category = values["category"];
            this._statModifier = values["stat_modifier"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get category() {
            const collection = this.collectionCache.getCollection(UnitCategory.KEY, UnitCategory.Entry);
            return collection.find(entry => entry.key === this._category);
        }
        get statModifier() {
            const collection = this.collectionCache.getCollection(UnitStatModifiers.KEY, UnitStatModifiers.Entry);
            return collection.find(entry => entry.key === this._statModifier);
        }
    }
    EffectBonusValueUnitCategoryStatModifiersJunctions.Entry = Entry;
})(EffectBonusValueUnitCategoryStatModifiersJunctions || (EffectBonusValueUnitCategoryStatModifiersJunctions = {}));

var EffectBonusValueUnitClassJunction;
(function (EffectBonusValueUnitClassJunction) {
    EffectBonusValueUnitClassJunction.KEY = new CollectionKey("effect_bonus_value_unit_class_junction");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._unitClass = values["unit_class"];
        }
    }
    EffectBonusValueUnitClassJunction.Entry = Entry;
})(EffectBonusValueUnitClassJunction || (EffectBonusValueUnitClassJunction = {}));

var EffectBonusValueUnitClassStatModifiersJunctions;
(function (EffectBonusValueUnitClassStatModifiersJunctions) {
    EffectBonusValueUnitClassStatModifiersJunctions.KEY = new CollectionKey("effect_bonus_value_unit_class_stat_modifiers_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._class = values["class"];
            this._statModifier = values["stat_modifier"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get class() {
            const collection = this.collectionCache.getCollection(UnitClass.KEY, UnitClass.Entry);
            return collection.find(entry => entry.key === this._class);
        }
        get statModifier() {
            const collection = this.collectionCache.getCollection(UnitStatModifiers.KEY, UnitStatModifiers.Entry);
            return collection.find(entry => entry.key === this._statModifier);
        }
    }
    EffectBonusValueUnitClassStatModifiersJunctions.Entry = Entry;
})(EffectBonusValueUnitClassStatModifiersJunctions || (EffectBonusValueUnitClassStatModifiersJunctions = {}));

var EffectBonusValueUnitRecordJunctions;
(function (EffectBonusValueUnitRecordJunctions) {
    EffectBonusValueUnitRecordJunctions.KEY = new CollectionKey("effect_bonus_value_unit_record_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._unitRecordKey = values["unit_record_key"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsUnitRecords.KEY, CampaignBonusValueIdsUnitRecords.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get unitRecordKey() {
            const collection = this.collectionCache.getCollection(MainUnits.KEY, MainUnits.Entry);
            return collection.find(entry => entry.unit === this._unitRecordKey);
        }
    }
    EffectBonusValueUnitRecordJunctions.Entry = Entry;
})(EffectBonusValueUnitRecordJunctions || (EffectBonusValueUnitRecordJunctions = {}));

var UnitDescriptionTexts;
(function (UnitDescriptionTexts) {
    UnitDescriptionTexts.KEY = new CollectionKey("unit_description_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.descriptionText = values["description_text"];
            this.longDescriptionText = values["long_description_text"];
            this.strengthsAndWeaknesses = values["strengths_and_weaknesses"];
        }
    }
    UnitDescriptionTexts.Entry = Entry;
})(UnitDescriptionTexts || (UnitDescriptionTexts = {}));

var Pdlc;
(function (Pdlc) {
    Pdlc.KEY = new CollectionKey("pdlc");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["ID"];
            this.steamId = values["SteamID"];
            this.description = values["description"];
            this.releaseOrder = values["release_order"];
        }
    }
    Pdlc.Entry = Entry;
})(Pdlc || (Pdlc = {}));

var Units;
(function (Units) {
    Units.KEY = new CollectionKey("units");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onScreenName = values["on_screen_name"];
            this._category = values["category"];
            this._class = values["class"];
            this.multiplayerCost = values["multiplayer_cost"];
            this.multiplayerLateCost = values["multiplayer_late_cost"];
            this.createTime = values["create_time"];
            this.createCost = values["create_cost"];
            this.upkeepCost = values["upkeep_cost"];
            this.campaignActionPoints = values["campaign_action_points"];
            this.voice = values["voice"];
            this.fitness = values["fitness"];
            this.iconName = values["icon_name"];
            this._unitDescriptionText = values["unit_description_text"];
            this.infoPic = values["info_pic"];
            this._regionUnitResource = values["region_unit_resource"];
            this.totalCap = values["total_cap"];
            this.era = values["era"];
            this.mpAvailableEarly = !!values["mp_available_early"];
            this.mpAvailableMiddle = !!values["mp_available_middle"];
            this.mpAvailableLate = !!values["mp_available_late"];
            this.prestige = values["prestige"];
            this.armedCitizenry = !!values["armed_citizenry"];
            this.totalCapMp = values["total_cap_mp"];
            this.unitTypeIcon = values["unit_type_icon"];
            this.useOnscreenName = !!values["use_onscreen_name"];
            this._unitCaste = values["unit_caste"];
            this._additionalBuildingLevelRequirement = values["additional_building_level_requirement"];
            this._religionRequirement = values["religion_requirement"];
            this._resourceRequirement = values["resource_requirement"];
            this.inEncyclopedia = !!values["in_encyclopedia"];
            this._unitRecruitedMovie = values["unit_recruited_movie"];
            this.uniqueIndex = values["unique_index"];
            this._pdlc = values["pdlc"];
            this.isMale = !!values["is_male"];
            this.supportsFirstPerson = !!values["supports_first_person"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(UnitCategory.KEY, UnitCategory.Entry);
            return collection.find(entry => entry.key === this._category);
        }
        get class() {
            const collection = this.collectionCache.getCollection(UnitClass.KEY, UnitClass.Entry);
            return collection.find(entry => entry.key === this._class);
        }
        get unitDescriptionText() {
            const collection = this.collectionCache.getCollection(UnitDescriptionTexts.KEY, UnitDescriptionTexts.Entry);
            return collection.find(entry => entry.key === this._unitDescriptionText);
        }
        get regionUnitResource() {
            const collection = this.collectionCache.getCollection(RegionUnitResources.KEY, RegionUnitResources.Entry);
            return collection.find(entry => entry.key === this._regionUnitResource);
        }
        get unitCaste() {
            const collection = this.collectionCache.getCollection(UnitCastes.KEY, UnitCastes.Entry);
            return collection.find(entry => entry.caste === this._unitCaste);
        }
        get additionalBuildingLevelRequirement() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._additionalBuildingLevelRequirement);
        }
        get religionRequirement() {
            const collection = this.collectionCache.getCollection(Religions.KEY, Religions.Entry);
            return collection.find(entry => entry.religionKey === this._religionRequirement);
        }
        get resourceRequirement() {
            const collection = this.collectionCache.getCollection(Resources.KEY, Resources.Entry);
            return collection.find(entry => entry.key === this._resourceRequirement);
        }
        get unitRecruitedMovie() {
            const collection = this.collectionCache.getCollection(MovieEventStrings.KEY, MovieEventStrings.Entry);
            return collection.find(entry => entry.event === this._unitRecruitedMovie);
        }
        get pdlc() {
            const collection = this.collectionCache.getCollection(Pdlc.KEY, Pdlc.Entry);
            return collection.find(entry => entry.id === this._pdlc);
        }
    }
    Units.Entry = Entry;
})(Units || (Units = {}));

var EffectBonusValueUnitRecordStatModifiersJunctions;
(function (EffectBonusValueUnitRecordStatModifiersJunctions) {
    EffectBonusValueUnitRecordStatModifiersJunctions.KEY = new CollectionKey("effect_bonus_value_unit_record_stat_modifiers_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._unit = values["unit"];
            this._statModifier = values["stat_modifier"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get unit() {
            const collection = this.collectionCache.getCollection(Units.KEY, Units.Entry);
            return collection.find(entry => entry.key === this._unit);
        }
        get statModifier() {
            const collection = this.collectionCache.getCollection(UnitStatModifiers.KEY, UnitStatModifiers.Entry);
            return collection.find(entry => entry.key === this._statModifier);
        }
    }
    EffectBonusValueUnitRecordStatModifiersJunctions.Entry = Entry;
})(EffectBonusValueUnitRecordStatModifiersJunctions || (EffectBonusValueUnitRecordStatModifiersJunctions = {}));

var EffectBonusValueUnitStatModifiersJunctions;
(function (EffectBonusValueUnitStatModifiersJunctions) {
    EffectBonusValueUnitStatModifiersJunctions.KEY = new CollectionKey("effect_bonus_value_unit_stat_modifiers_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._statModifier = values["stat_modifier"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get statModifier() {
            const collection = this.collectionCache.getCollection(UnitStatModifiers.KEY, UnitStatModifiers.Entry);
            return collection.find(entry => entry.key === this._statModifier);
        }
    }
    EffectBonusValueUnitStatModifiersJunctions.Entry = Entry;
})(EffectBonusValueUnitStatModifiersJunctions || (EffectBonusValueUnitStatModifiersJunctions = {}));

var EffectBundleAdvancementStages;
(function (EffectBundleAdvancementStages) {
    EffectBundleAdvancementStages.KEY = new CollectionKey("effect_bundle_advancement_stages");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    EffectBundleAdvancementStages.Entry = Entry;
})(EffectBundleAdvancementStages || (EffectBundleAdvancementStages = {}));

var EffectBundlesToEffectsJunctions;
(function (EffectBundlesToEffectsJunctions) {
    EffectBundlesToEffectsJunctions.KEY = new CollectionKey("effect_bundles_to_effects_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effectBundleKey = values["effect_bundle_key"];
            this._effectKey = values["effect_key"];
            this.value = values["value"];
            this._effectScope = values["effect_scope"];
            this._advancementStage = values["advancement_stage"];
        }
        get effectBundleKey() {
            const collection = this.collectionCache.getCollection(EffectBundles.KEY, EffectBundles.Entry);
            return collection.find(entry => entry.key === this._effectBundleKey);
        }
        get effectKey() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effectKey);
        }
        get effectScope() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes.KEY, CampaignEffectScopes.Entry);
            return collection.find(entry => entry.key === this._effectScope);
        }
        get advancementStage() {
            const collection = this.collectionCache.getCollection(EffectBundleAdvancementStages.KEY, EffectBundleAdvancementStages.Entry);
            return collection.find(entry => entry.key === this._advancementStage);
        }
    }
    EffectBundlesToEffectsJunctions.Entry = Entry;
})(EffectBundlesToEffectsJunctions || (EffectBundlesToEffectsJunctions = {}));

var EncyclopediaPages;
(function (EncyclopediaPages) {
    EncyclopediaPages.KEY = new CollectionKey("encyclopedia_pages");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.pageKey = values["page_key"];
            this.title = values["title"];
            this.template = values["template"];
        }
    }
    EncyclopediaPages.Entry = Entry;
})(EncyclopediaPages || (EncyclopediaPages = {}));

var EncyclopediaBlocks;
(function (EncyclopediaBlocks) {
    EncyclopediaBlocks.KEY = new CollectionKey("encyclopedia_blocks");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.blockKey = values["block_key"];
            this._pageKey = values["page_key"];
            this.order = values["order"];
            this.heading = values["heading"];
            this.class = values["class"];
            this.content = values["content"];
            this.image = values["image"];
            this.imageClass = values["image_class"];
            this.video = values["video"];
        }
        get pageKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaPages.KEY, EncyclopediaPages.Entry);
            return collection.find(entry => entry.pageKey === this._pageKey);
        }
    }
    EncyclopediaBlocks.Entry = Entry;
})(EncyclopediaBlocks || (EncyclopediaBlocks = {}));

var EncyclopediaAgentManualBlockLinks;
(function (EncyclopediaAgentManualBlockLinks) {
    EncyclopediaAgentManualBlockLinks.KEY = new CollectionKey("encyclopedia_agent_manual_block_links");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._agentKey = values["agent_key"];
            this._blockKey = values["block_key"];
        }
        get agentKey() {
            const collection = this.collectionCache.getCollection(Agents.KEY, Agents.Entry);
            return collection.find(entry => entry.key === this._agentKey);
        }
        get blockKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaBlocks.KEY, EncyclopediaBlocks.Entry);
            return collection.find(entry => entry.blockKey === this._blockKey);
        }
    }
    EncyclopediaAgentManualBlockLinks.Entry = Entry;
})(EncyclopediaAgentManualBlockLinks || (EncyclopediaAgentManualBlockLinks = {}));

var EncyclopediaAgentManualPageLinks;
(function (EncyclopediaAgentManualPageLinks) {
    EncyclopediaAgentManualPageLinks.KEY = new CollectionKey("encyclopedia_agent_manual_page_links");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._agentKey = values["agent_key"];
            this._pageKey = values["page_key"];
        }
        get agentKey() {
            const collection = this.collectionCache.getCollection(Agents.KEY, Agents.Entry);
            return collection.find(entry => entry.key === this._agentKey);
        }
        get pageKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaPages.KEY, EncyclopediaPages.Entry);
            return collection.find(entry => entry.pageKey === this._pageKey);
        }
    }
    EncyclopediaAgentManualPageLinks.Entry = Entry;
})(EncyclopediaAgentManualPageLinks || (EncyclopediaAgentManualPageLinks = {}));

var EncyclopediaBuildingRedirects;
(function (EncyclopediaBuildingRedirects) {
    EncyclopediaBuildingRedirects.KEY = new CollectionKey("encyclopedia_building_redirects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._building = values["building"];
            this._redirectBuilding = values["redirect_building"];
        }
        get building() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._building);
        }
        get redirectBuilding() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._redirectBuilding);
        }
    }
    EncyclopediaBuildingRedirects.Entry = Entry;
})(EncyclopediaBuildingRedirects || (EncyclopediaBuildingRedirects = {}));

var EncyclopediaFactionGroups;
(function (EncyclopediaFactionGroups) {
    EncyclopediaFactionGroups.KEY = new CollectionKey("encyclopedia_faction_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.groupId = values["group_id"];
        }
    }
    EncyclopediaFactionGroups.Entry = Entry;
})(EncyclopediaFactionGroups || (EncyclopediaFactionGroups = {}));

var EncyclopediaFactionGroupings;
(function (EncyclopediaFactionGroupings) {
    EncyclopediaFactionGroupings.KEY = new CollectionKey("encyclopedia_faction_groupings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._faction = values["faction"];
            this._group = values["group"];
            this.order = values["order"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get group() {
            const collection = this.collectionCache.getCollection(EncyclopediaFactionGroups.KEY, EncyclopediaFactionGroups.Entry);
            return collection.find(entry => entry.groupId === this._group);
        }
    }
    EncyclopediaFactionGroupings.Entry = Entry;
})(EncyclopediaFactionGroupings || (EncyclopediaFactionGroupings = {}));

var EncyclopediaFactionIconicUnits;
(function (EncyclopediaFactionIconicUnits) {
    EncyclopediaFactionIconicUnits.KEY = new CollectionKey("encyclopedia_faction_iconic_units");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._mainUnitKey = values["main_unit_key"];
            this._factionKey = values["faction_key"];
        }
        get mainUnitKey() {
            const collection = this.collectionCache.getCollection(MainUnits.KEY, MainUnits.Entry);
            return collection.find(entry => entry.unit === this._mainUnitKey);
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
    }
    EncyclopediaFactionIconicUnits.Entry = Entry;
})(EncyclopediaFactionIconicUnits || (EncyclopediaFactionIconicUnits = {}));

var EncyclopediaGlossaryPages;
(function (EncyclopediaGlossaryPages) {
    EncyclopediaGlossaryPages.KEY = new CollectionKey("encyclopedia_glossary_pages");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.pageKey = values["page_key"];
            this.title = values["title"];
            this.template = values["template"];
        }
    }
    EncyclopediaGlossaryPages.Entry = Entry;
})(EncyclopediaGlossaryPages || (EncyclopediaGlossaryPages = {}));

var EncyclopediaGlossaryBlocks;
(function (EncyclopediaGlossaryBlocks) {
    EncyclopediaGlossaryBlocks.KEY = new CollectionKey("encyclopedia_glossary_blocks");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.blockKey = values["block_key"];
            this._pageKey = values["page_key"];
            this.order = values["order"];
            this.heading = values["heading"];
            this.class = values["class"];
            this.content = values["content"];
            this.image = values["image"];
            this.imageClass = values["image_class"];
            this.video = values["video"];
        }
        get pageKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaGlossaryPages.KEY, EncyclopediaGlossaryPages.Entry);
            return collection.find(entry => entry.pageKey === this._pageKey);
        }
    }
    EncyclopediaGlossaryBlocks.Entry = Entry;
})(EncyclopediaGlossaryBlocks || (EncyclopediaGlossaryBlocks = {}));

var EncyclopediaGlossaryPageLinkages;
(function (EncyclopediaGlossaryPageLinkages) {
    EncyclopediaGlossaryPageLinkages.KEY = new CollectionKey("encyclopedia_glossary_page_linkages");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._pageKey = values["page_key"];
            this._parentKey = values["parent_key"];
            this._nextKey = values["next_key"];
        }
        get pageKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaGlossaryPages.KEY, EncyclopediaGlossaryPages.Entry);
            return collection.find(entry => entry.pageKey === this._pageKey);
        }
        get parentKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaGlossaryPages.KEY, EncyclopediaGlossaryPages.Entry);
            return collection.find(entry => entry.pageKey === this._parentKey);
        }
        get nextKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaGlossaryPages.KEY, EncyclopediaGlossaryPages.Entry);
            return collection.find(entry => entry.pageKey === this._nextKey);
        }
    }
    EncyclopediaGlossaryPageLinkages.Entry = Entry;
})(EncyclopediaGlossaryPageLinkages || (EncyclopediaGlossaryPageLinkages = {}));

var EncyclopediaHistoricalInfoPages;
(function (EncyclopediaHistoricalInfoPages) {
    EncyclopediaHistoricalInfoPages.KEY = new CollectionKey("encyclopedia_historical_info_pages");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.pageKey = values["page_key"];
            this.title = values["title"];
            this.template = values["template"];
        }
    }
    EncyclopediaHistoricalInfoPages.Entry = Entry;
})(EncyclopediaHistoricalInfoPages || (EncyclopediaHistoricalInfoPages = {}));

var EncyclopediaHistoricalInfoBlocks;
(function (EncyclopediaHistoricalInfoBlocks) {
    EncyclopediaHistoricalInfoBlocks.KEY = new CollectionKey("encyclopedia_historical_info_blocks");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.blockKey = values["block_key"];
            this._pageKey = values["page_key"];
            this.order = values["order"];
            this.heading = values["heading"];
            this.class = values["class"];
            this.content = values["content"];
            this.image = values["image"];
            this.imageClass = values["image_class"];
            this.video = values["video"];
        }
        get pageKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaHistoricalInfoPages.KEY, EncyclopediaHistoricalInfoPages.Entry);
            return collection.find(entry => entry.pageKey === this._pageKey);
        }
    }
    EncyclopediaHistoricalInfoBlocks.Entry = Entry;
})(EncyclopediaHistoricalInfoBlocks || (EncyclopediaHistoricalInfoBlocks = {}));

var EncyclopediaHistoricalInfoPageLinkages;
(function (EncyclopediaHistoricalInfoPageLinkages) {
    EncyclopediaHistoricalInfoPageLinkages.KEY = new CollectionKey("encyclopedia_historical_info_page_linkages");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._pageKey = values["page_key"];
            this._parentKey = values["parent_key"];
            this._nextKey = values["next_key"];
        }
        get pageKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaHistoricalInfoPages.KEY, EncyclopediaHistoricalInfoPages.Entry);
            return collection.find(entry => entry.pageKey === this._pageKey);
        }
        get parentKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaHistoricalInfoPages.KEY, EncyclopediaHistoricalInfoPages.Entry);
            return collection.find(entry => entry.pageKey === this._parentKey);
        }
        get nextKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaHistoricalInfoPages.KEY, EncyclopediaHistoricalInfoPages.Entry);
            return collection.find(entry => entry.pageKey === this._nextKey);
        }
    }
    EncyclopediaHistoricalInfoPageLinkages.Entry = Entry;
})(EncyclopediaHistoricalInfoPageLinkages || (EncyclopediaHistoricalInfoPageLinkages = {}));

var EncyclopediaIndexPages;
(function (EncyclopediaIndexPages) {
    EncyclopediaIndexPages.KEY = new CollectionKey("encyclopedia_index_pages");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.pageKey = values["page_key"];
            this._annotation = values["annotation"];
        }
        get annotation() {
            const collection = this.collectionCache.getCollection(EncyclopediaBlocks.KEY, EncyclopediaBlocks.Entry);
            return collection.find(entry => entry.blockKey === this._annotation);
        }
    }
    EncyclopediaIndexPages.Entry = Entry;
})(EncyclopediaIndexPages || (EncyclopediaIndexPages = {}));

var EncyclopediaMultiplayerPages;
(function (EncyclopediaMultiplayerPages) {
    EncyclopediaMultiplayerPages.KEY = new CollectionKey("encyclopedia_multiplayer_pages");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.pageKey = values["page_key"];
            this.title = values["title"];
            this.template = values["template"];
        }
    }
    EncyclopediaMultiplayerPages.Entry = Entry;
})(EncyclopediaMultiplayerPages || (EncyclopediaMultiplayerPages = {}));

var EncyclopediaMultiplayerBlocks;
(function (EncyclopediaMultiplayerBlocks) {
    EncyclopediaMultiplayerBlocks.KEY = new CollectionKey("encyclopedia_multiplayer_blocks");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.blockKey = values["block_key"];
            this._pageKey = values["page_key"];
            this.order = values["order"];
            this.heading = values["heading"];
            this.class = values["class"];
            this.content = values["content"];
            this.image = values["image"];
            this.imageClass = values["image_class"];
            this.video = values["video"];
        }
        get pageKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaMultiplayerPages.KEY, EncyclopediaMultiplayerPages.Entry);
            return collection.find(entry => entry.pageKey === this._pageKey);
        }
    }
    EncyclopediaMultiplayerBlocks.Entry = Entry;
})(EncyclopediaMultiplayerBlocks || (EncyclopediaMultiplayerBlocks = {}));

var EncyclopediaMultiplayerPageLinkages;
(function (EncyclopediaMultiplayerPageLinkages) {
    EncyclopediaMultiplayerPageLinkages.KEY = new CollectionKey("encyclopedia_multiplayer_page_linkages");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._pageKey = values["page_key"];
            this._parentKey = values["parent_key"];
            this._nextKey = values["next_key"];
        }
        get pageKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaMultiplayerPages.KEY, EncyclopediaMultiplayerPages.Entry);
            return collection.find(entry => entry.pageKey === this._pageKey);
        }
        get parentKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaMultiplayerPages.KEY, EncyclopediaMultiplayerPages.Entry);
            return collection.find(entry => entry.pageKey === this._parentKey);
        }
        get nextKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaMultiplayerPages.KEY, EncyclopediaMultiplayerPages.Entry);
            return collection.find(entry => entry.pageKey === this._nextKey);
        }
    }
    EncyclopediaMultiplayerPageLinkages.Entry = Entry;
})(EncyclopediaMultiplayerPageLinkages || (EncyclopediaMultiplayerPageLinkages = {}));

var EncyclopediaPageLinkages;
(function (EncyclopediaPageLinkages) {
    EncyclopediaPageLinkages.KEY = new CollectionKey("encyclopedia_page_linkages");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._pageKey = values["page_key"];
            this._parentKey = values["parent_key"];
            this._nextKey = values["next_key"];
        }
        get pageKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaPages.KEY, EncyclopediaPages.Entry);
            return collection.find(entry => entry.pageKey === this._pageKey);
        }
        get parentKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaPages.KEY, EncyclopediaPages.Entry);
            return collection.find(entry => entry.pageKey === this._parentKey);
        }
        get nextKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaPages.KEY, EncyclopediaPages.Entry);
            return collection.find(entry => entry.pageKey === this._nextKey);
        }
    }
    EncyclopediaPageLinkages.Entry = Entry;
})(EncyclopediaPageLinkages || (EncyclopediaPageLinkages = {}));

var EncyclopediaPageRelatedLinks;
(function (EncyclopediaPageRelatedLinks) {
    EncyclopediaPageRelatedLinks.KEY = new CollectionKey("encyclopedia_page_related_links");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._pageKey = values["page_key"];
            this._target = values["target"];
        }
        get pageKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaPages.KEY, EncyclopediaPages.Entry);
            return collection.find(entry => entry.pageKey === this._pageKey);
        }
        get target() {
            const collection = this.collectionCache.getCollection(EncyclopediaPages.KEY, EncyclopediaPages.Entry);
            return collection.find(entry => entry.pageKey === this._target);
        }
    }
    EncyclopediaPageRelatedLinks.Entry = Entry;
})(EncyclopediaPageRelatedLinks || (EncyclopediaPageRelatedLinks = {}));

var EncyclopediaPatchTexts;
(function (EncyclopediaPatchTexts) {
    EncyclopediaPatchTexts.KEY = new CollectionKey("encyclopedia_patch_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.text = values["text"];
        }
    }
    EncyclopediaPatchTexts.Entry = Entry;
})(EncyclopediaPatchTexts || (EncyclopediaPatchTexts = {}));

var EncyclopediaProjectileShotTypeLinks;
(function (EncyclopediaProjectileShotTypeLinks) {
    EncyclopediaProjectileShotTypeLinks.KEY = new CollectionKey("encyclopedia_projectile_shot_type_links");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._shotType = values["shot_type"];
            this._manualPage = values["manual_page"];
            this._manualBlock = values["manual_block"];
        }
        get shotType() {
            const collection = this.collectionCache.getCollection(ProjectileShotTypeEnum.KEY, ProjectileShotTypeEnum.Entry);
            return collection.find(entry => entry.key === this._shotType);
        }
        get manualPage() {
            const collection = this.collectionCache.getCollection(EncyclopediaPages.KEY, EncyclopediaPages.Entry);
            return collection.find(entry => entry.pageKey === this._manualPage);
        }
        get manualBlock() {
            const collection = this.collectionCache.getCollection(EncyclopediaBlocks.KEY, EncyclopediaBlocks.Entry);
            return collection.find(entry => entry.blockKey === this._manualBlock);
        }
    }
    EncyclopediaProjectileShotTypeLinks.Entry = Entry;
})(EncyclopediaProjectileShotTypeLinks || (EncyclopediaProjectileShotTypeLinks = {}));

var EncyclopediaSettings;
(function (EncyclopediaSettings) {
    EncyclopediaSettings.KEY = new CollectionKey("encyclopedia_settings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.value = values["value"];
        }
    }
    EncyclopediaSettings.Entry = Entry;
})(EncyclopediaSettings || (EncyclopediaSettings = {}));

var EncyclopediaTemplateStrings;
(function (EncyclopediaTemplateStrings) {
    EncyclopediaTemplateStrings.KEY = new CollectionKey("encyclopedia_template_strings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.stringKey = values["string_key"];
            this.text = values["text"];
        }
    }
    EncyclopediaTemplateStrings.Entry = Entry;
})(EncyclopediaTemplateStrings || (EncyclopediaTemplateStrings = {}));

var EncyclopediaTriggers;
(function (EncyclopediaTriggers) {
    EncyclopediaTriggers.KEY = new CollectionKey("encyclopedia_triggers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.componentKey = values["component_key"];
            this.url = values["url"];
        }
    }
    EncyclopediaTriggers.Entry = Entry;
})(EncyclopediaTriggers || (EncyclopediaTriggers = {}));

var EncyclopediaTutorialSections;
(function (EncyclopediaTutorialSections) {
    EncyclopediaTutorialSections.KEY = new CollectionKey("encyclopedia_tutorial_sections");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.section = values["section"];
            this.name = values["name"];
        }
    }
    EncyclopediaTutorialSections.Entry = Entry;
})(EncyclopediaTutorialSections || (EncyclopediaTutorialSections = {}));

var EncyclopediaTutorialVideos;
(function (EncyclopediaTutorialVideos) {
    EncyclopediaTutorialVideos.KEY = new CollectionKey("encyclopedia_tutorial_videos");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.title = values["title"];
            this._section = values["section"];
            this.file = values["file"];
            this.description = values["description"];
        }
        get section() {
            const collection = this.collectionCache.getCollection(EncyclopediaTutorialSections.KEY, EncyclopediaTutorialSections.Entry);
            return collection.find(entry => entry.section === this._section);
        }
    }
    EncyclopediaTutorialVideos.Entry = Entry;
})(EncyclopediaTutorialVideos || (EncyclopediaTutorialVideos = {}));

var Languages;
(function (Languages) {
    Languages.KEY = new CollectionKey("languages");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.fullName = values["full_name"];
        }
    }
    Languages.Entry = Entry;
})(Languages || (Languages = {}));

var EncyclopediaTutorialVideosDefaultSubtitles;
(function (EncyclopediaTutorialVideosDefaultSubtitles) {
    EncyclopediaTutorialVideosDefaultSubtitles.KEY = new CollectionKey("encyclopedia_tutorial_videos_default_subtitles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._video = values["video"];
            this._language = values["language"];
        }
        get video() {
            const collection = this.collectionCache.getCollection(EncyclopediaTutorialVideos.KEY, EncyclopediaTutorialVideos.Entry);
            return collection.find(entry => entry.key === this._video);
        }
        get language() {
            const collection = this.collectionCache.getCollection(Languages.KEY, Languages.Entry);
            return collection.find(entry => entry.key === this._language);
        }
    }
    EncyclopediaTutorialVideosDefaultSubtitles.Entry = Entry;
})(EncyclopediaTutorialVideosDefaultSubtitles || (EncyclopediaTutorialVideosDefaultSubtitles = {}));

var EncyclopediaTutorialVideoSubtitles;
(function (EncyclopediaTutorialVideoSubtitles) {
    EncyclopediaTutorialVideoSubtitles.KEY = new CollectionKey("encyclopedia_tutorial_video_subtitles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this.subtitleNumber = values["subtitle_number"];
            this.timecodeIn = values["timecode_in"];
            this.timecodeOut = values["timecode_out"];
            this.text = values["text"];
            this.line = values["line"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(EncyclopediaTutorialVideos.KEY, EncyclopediaTutorialVideos.Entry);
            return collection.find(entry => entry.key === this._key);
        }
    }
    EncyclopediaTutorialVideoSubtitles.Entry = Entry;
})(EncyclopediaTutorialVideoSubtitles || (EncyclopediaTutorialVideoSubtitles = {}));

var EncyclopediaUnitAbilitiesLinks;
(function (EncyclopediaUnitAbilitiesLinks) {
    EncyclopediaUnitAbilitiesLinks.KEY = new CollectionKey("encyclopedia_unit_abilities_links");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unitAbility = values["unit_ability"];
            this._manualPage = values["manual_page"];
            this._manualBlock = values["manual_block"];
        }
        get unitAbility() {
            const collection = this.collectionCache.getCollection(UnitAbilities.KEY, UnitAbilities.Entry);
            return collection.find(entry => entry.key === this._unitAbility);
        }
        get manualPage() {
            const collection = this.collectionCache.getCollection(EncyclopediaPages.KEY, EncyclopediaPages.Entry);
            return collection.find(entry => entry.pageKey === this._manualPage);
        }
        get manualBlock() {
            const collection = this.collectionCache.getCollection(EncyclopediaBlocks.KEY, EncyclopediaBlocks.Entry);
            return collection.find(entry => entry.blockKey === this._manualBlock);
        }
    }
    EncyclopediaUnitAbilitiesLinks.Entry = Entry;
})(EncyclopediaUnitAbilitiesLinks || (EncyclopediaUnitAbilitiesLinks = {}));

var UnitAttributes;
(function (UnitAttributes) {
    UnitAttributes.KEY = new CollectionKey("unit_attributes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.bulletText = values["bullet_text"];
        }
    }
    UnitAttributes.Entry = Entry;
})(UnitAttributes || (UnitAttributes = {}));

var EncyclopediaUnitAttributesLinks;
(function (EncyclopediaUnitAttributesLinks) {
    EncyclopediaUnitAttributesLinks.KEY = new CollectionKey("encyclopedia_unit_attributes_links");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unitAttribute = values["unit_attribute"];
            this._manualPage = values["manual_page"];
            this._manualBlock = values["manual_block"];
        }
        get unitAttribute() {
            const collection = this.collectionCache.getCollection(UnitAttributes.KEY, UnitAttributes.Entry);
            return collection.find(entry => entry.key === this._unitAttribute);
        }
        get manualPage() {
            const collection = this.collectionCache.getCollection(EncyclopediaPages.KEY, EncyclopediaPages.Entry);
            return collection.find(entry => entry.pageKey === this._manualPage);
        }
        get manualBlock() {
            const collection = this.collectionCache.getCollection(EncyclopediaBlocks.KEY, EncyclopediaBlocks.Entry);
            return collection.find(entry => entry.blockKey === this._manualBlock);
        }
    }
    EncyclopediaUnitAttributesLinks.Entry = Entry;
})(EncyclopediaUnitAttributesLinks || (EncyclopediaUnitAttributesLinks = {}));

var EncyclopediaUnitPatchTexts;
(function (EncyclopediaUnitPatchTexts) {
    EncyclopediaUnitPatchTexts.KEY = new CollectionKey("encyclopedia_unit_patch_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unit = values["unit"];
            this._patchText = values["patch_text"];
        }
        get unit() {
            const collection = this.collectionCache.getCollection(MainUnits.KEY, MainUnits.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
        get patchText() {
            const collection = this.collectionCache.getCollection(EncyclopediaPatchTexts.KEY, EncyclopediaPatchTexts.Entry);
            return collection.find(entry => entry.key === this._patchText);
        }
    }
    EncyclopediaUnitPatchTexts.Entry = Entry;
})(EncyclopediaUnitPatchTexts || (EncyclopediaUnitPatchTexts = {}));

var EncyclopediaUnitRedirects;
(function (EncyclopediaUnitRedirects) {
    EncyclopediaUnitRedirects.KEY = new CollectionKey("encyclopedia_unit_redirects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unit = values["unit"];
            this._redirectUnit = values["redirect_unit"];
        }
        get unit() {
            const collection = this.collectionCache.getCollection(MainUnits.KEY, MainUnits.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
        get redirectUnit() {
            const collection = this.collectionCache.getCollection(MainUnits.KEY, MainUnits.Entry);
            return collection.find(entry => entry.unit === this._redirectUnit);
        }
    }
    EncyclopediaUnitRedirects.Entry = Entry;
})(EncyclopediaUnitRedirects || (EncyclopediaUnitRedirects = {}));

var EncyclopediaUrls;
(function (EncyclopediaUrls) {
    EncyclopediaUrls.KEY = new CollectionKey("encyclopedia_urls");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.type = values["type"];
            this.url = values["url"];
        }
    }
    EncyclopediaUrls.Entry = Entry;
})(EncyclopediaUrls || (EncyclopediaUrls = {}));

var EntityTrainingLevels;
(function (EntityTrainingLevels) {
    EntityTrainingLevels.KEY = new CollectionKey("entity_training_levels");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.trainingLevel = values["training_level"];
            this.maxOffsetDistance = values["max_offset_distance"];
        }
    }
    EntityTrainingLevels.Entry = Entry;
})(EntityTrainingLevels || (EntityTrainingLevels = {}));

var Events;
(function (Events) {
    Events.KEY = new CollectionKey("events");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.pictureCategory = values["picture_category"];
            this.dynamic = !!values["dynamic"];
            this.onscreenName = values["onscreen_name"];
            this.eventText = values["event_text"];
            this.historicalDate = values["historical_date"];
            this._season = values["season"];
            this.conditions = values["conditions"];
            this.picture = values["picture"];
            this.turnInYear = values["turn_in_year"];
        }
        get season() {
            const collection = this.collectionCache.getCollection(Seasons.KEY, Seasons.Entry);
            return collection.find(entry => entry.season === this._season);
        }
    }
    Events.Entry = Entry;
})(Events || (Events = {}));

var EventsEffectsJunct;
(function (EventsEffectsJunct) {
    EventsEffectsJunct.KEY = new CollectionKey("events_effects_junct");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._event = values["event"];
            this._effect = values["effect"];
            this.value = values["value"];
        }
        get event() {
            const collection = this.collectionCache.getCollection(Events.KEY, Events.Entry);
            return collection.find(entry => entry.key === this._event);
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
    }
    EventsEffectsJunct.Entry = Entry;
})(EventsEffectsJunct || (EventsEffectsJunct = {}));

var EventLogDescriptions;
(function (EventLogDescriptions) {
    EventLogDescriptions.KEY = new CollectionKey("event_log_descriptions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.eventKey = values["event_key"];
            this.eventTitle = values["event_title"];
            this.eventContent = values["event_content"];
            this.icon = values["icon"];
            this.hasPosition = !!values["has_position"];
            this.isRegionPosition = !!values["is_region_position"];
            this.notes = values["notes"];
            this._optionalCampaignKey = values["optional_campaign_key"];
            this.movieId = values["movie_id"];
        }
        get optionalCampaignKey() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._optionalCampaignKey);
        }
    }
    EventLogDescriptions.Entry = Entry;
})(EventLogDescriptions || (EventLogDescriptions = {}));

var ExperienceTriggersTargets;
(function (ExperienceTriggersTargets) {
    ExperienceTriggersTargets.KEY = new CollectionKey("experience_triggers_targets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    ExperienceTriggersTargets.Entry = Entry;
})(ExperienceTriggersTargets || (ExperienceTriggersTargets = {}));

var ExperienceTriggers;
(function (ExperienceTriggers) {
    ExperienceTriggers.KEY = new CollectionKey("experience_triggers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.triggerKey = values["trigger_key"];
            this._event = values["event"];
            this.experiencePoints = values["experience_points"];
            this.condition = values["condition"];
            this.localisedDescription = values["localised_description"];
            this._target = values["target"];
        }
        get event() {
            const collection = this.collectionCache.getCollection(TriggerEvents.KEY, TriggerEvents.Entry);
            return collection.find(entry => entry.event === this._event);
        }
        get target() {
            const collection = this.collectionCache.getCollection(ExperienceTriggersTargets.KEY, ExperienceTriggersTargets.Entry);
            return collection.find(entry => entry.key === this._target);
        }
    }
    ExperienceTriggers.Entry = Entry;
})(ExperienceTriggers || (ExperienceTriggers = {}));

var FactionsParents;
(function (FactionsParents) {
    FactionsParents.KEY = new CollectionKey("factions_parents");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._faction = values["faction"];
            this._parentFaction = values["parent_faction"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    FactionsParents.Entry = Entry;
})(FactionsParents || (FactionsParents = {}));

var FactionBanners;
(function (FactionBanners) {
    FactionBanners.KEY = new CollectionKey("faction_banners");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this.symbol = values["symbol"];
            this.primaryRed = values["primary_red"];
            this.primaryGreen = values["primary_green"];
            this.primaryBlue = values["primary_blue"];
            this.secondaryRed = values["secondary_red"];
            this.secondaryGreen = values["secondary_green"];
            this.secondaryBlue = values["secondary_blue"];
            this.tertiaryRed = values["tertiary_red"];
            this.tertiaryGreen = values["tertiary_green"];
            this.tertiaryBlue = values["tertiary_blue"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._key);
        }
    }
    FactionBanners.Entry = Entry;
})(FactionBanners || (FactionBanners = {}));

var FactionCivilWarSetups;
(function (FactionCivilWarSetups) {
    FactionCivilWarSetups.KEY = new CollectionKey("faction_civil_war_setups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._primaryFaction = values["primary_faction"];
            this._secondaryFaction = values["secondary_faction"];
            this.factionNameOverridePrimaryHigh = values["faction_name_override_primary_high"];
            this.factionNameOverridePrimaryLow = values["faction_name_override_primary_low"];
            this.factionNameOverrideSecondaryHigh = values["faction_name_override_secondary_high"];
            this.factionNameOverrideSecondaryLow = values["faction_name_override_secondary_low"];
            this.factionNameOverrideVictory = values["faction_name_override_victory"];
            this.factionLeaderTitleOverrideVictory = values["faction_leader_title_override_victory"];
            this._secessionistFaction = values["secessionist_faction"];
        }
        get primaryFaction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._primaryFaction);
        }
        get secondaryFaction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._secondaryFaction);
        }
        get secessionistFaction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._secessionistFaction);
        }
    }
    FactionCivilWarSetups.Entry = Entry;
})(FactionCivilWarSetups || (FactionCivilWarSetups = {}));

var FactionGroups;
(function (FactionGroups) {
    FactionGroups.KEY = new CollectionKey("faction_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.nameLocalised = values["name_localised"];
            this.uiIcon = values["ui_icon"];
            this._effectBundle = values["effect_bundle"];
            this.descriptionLocalised = values["description_localised"];
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles.KEY, EffectBundles.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    FactionGroups.Entry = Entry;
})(FactionGroups || (FactionGroups = {}));

var PoliticalTraits;
(function (PoliticalTraits) {
    PoliticalTraits.KEY = new CollectionKey("political_traits");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreenName = values["onscreen_name"];
            this.description = values["description"];
        }
    }
    PoliticalTraits.Entry = Entry;
})(PoliticalTraits || (PoliticalTraits = {}));

var PoliticalParties;
(function (PoliticalParties) {
    PoliticalParties.KEY = new CollectionKey("political_parties");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.nameLocalised = values["name_localised"];
            this.playable = !!values["playable"];
            this.associatedSurname = values["associated_surname"];
            this.uiIcon = values["ui_icon"];
            this._effectBundle = values["effect_bundle"];
            this.descriptionLocalised = values["description_localised"];
            this.initialPower = values["initial_power"];
            this.r = values["r"];
            this.g = values["g"];
            this.b = values["b"];
            this._trait1 = values["trait1"];
            this._trait2 = values["trait2"];
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles.KEY, EffectBundles.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
        get trait1() {
            const collection = this.collectionCache.getCollection(PoliticalTraits.KEY, PoliticalTraits.Entry);
            return collection.find(entry => entry.key === this._trait1);
        }
        get trait2() {
            const collection = this.collectionCache.getCollection(PoliticalTraits.KEY, PoliticalTraits.Entry);
            return collection.find(entry => entry.key === this._trait2);
        }
    }
    PoliticalParties.Entry = Entry;
})(PoliticalParties || (PoliticalParties = {}));

var FactionPoliticalPartiesJunctions;
(function (FactionPoliticalPartiesJunctions) {
    FactionPoliticalPartiesJunctions.KEY = new CollectionKey("faction_political_parties_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._factionKey = values["faction_key"];
            this._politicalPartyKey = values["political_party_key"];
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get politicalPartyKey() {
            const collection = this.collectionCache.getCollection(PoliticalParties.KEY, PoliticalParties.Entry);
            return collection.find(entry => entry.key === this._politicalPartyKey);
        }
    }
    FactionPoliticalPartiesJunctions.Entry = Entry;
})(FactionPoliticalPartiesJunctions || (FactionPoliticalPartiesJunctions = {}));

var PoliticsGovernmentActions;
(function (PoliticsGovernmentActions) {
    PoliticsGovernmentActions.KEY = new CollectionKey("politics_government_actions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    PoliticsGovernmentActions.Entry = Entry;
})(PoliticsGovernmentActions || (PoliticsGovernmentActions = {}));

var FactionPoliticsGovernmentActionsJunctions;
(function (FactionPoliticsGovernmentActionsJunctions) {
    FactionPoliticsGovernmentActionsJunctions.KEY = new CollectionKey("faction_politics_government_actions_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._faction = values["faction"];
            this._type = values["type"];
            this.imagePath = values["image_path"];
            this.title = values["title"];
            this.description = values["description"];
            this.cost = values["cost"];
            this.costPerRegion = values["cost_per_region"];
            this.cooldown = values["cooldown"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get type() {
            const collection = this.collectionCache.getCollection(PoliticsGovernmentActions.KEY, PoliticsGovernmentActions.Entry);
            return collection.find(entry => entry.key === this._type);
        }
    }
    FactionPoliticsGovernmentActionsJunctions.Entry = Entry;
})(FactionPoliticsGovernmentActionsJunctions || (FactionPoliticsGovernmentActionsJunctions = {}));

var FactionRebellionUnitsJunctions;
(function (FactionRebellionUnitsJunctions) {
    FactionRebellionUnitsJunctions.KEY = new CollectionKey("faction_rebellion_units_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._factionKey = values["faction_key"];
            this._unitKey = values["unit_key"];
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get unitKey() {
            const collection = this.collectionCache.getCollection(MainUnits.KEY, MainUnits.Entry);
            return collection.find(entry => entry.unit === this._unitKey);
        }
    }
    FactionRebellionUnitsJunctions.Entry = Entry;
})(FactionRebellionUnitsJunctions || (FactionRebellionUnitsJunctions = {}));

var FactionResourceConsumptions;
(function (FactionResourceConsumptions) {
    FactionResourceConsumptions.KEY = new CollectionKey("faction_resource_consumptions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.numberOfRegions = values["number_of_regions"];
            this.resourceConsumption = values["resource_consumption"];
        }
    }
    FactionResourceConsumptions.Entry = Entry;
})(FactionResourceConsumptions || (FactionResourceConsumptions = {}));

var FactionToCampaignJunctions;
(function (FactionToCampaignJunctions) {
    FactionToCampaignJunctions.KEY = new CollectionKey("faction_to_campaign_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._faction = values["faction"];
            this._campaign = values["campaign"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
    }
    FactionToCampaignJunctions.Entry = Entry;
})(FactionToCampaignJunctions || (FactionToCampaignJunctions = {}));

var FactionToFactionGroupsJunctions;
(function (FactionToFactionGroupsJunctions) {
    FactionToFactionGroupsJunctions.KEY = new CollectionKey("faction_to_faction_groups_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._factionKey = values["faction_key"];
            this._factionGroupKey = values["faction_group_key"];
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get factionGroupKey() {
            const collection = this.collectionCache.getCollection(FactionGroups.KEY, FactionGroups.Entry);
            return collection.find(entry => entry.key === this._factionGroupKey);
        }
    }
    FactionToFactionGroupsJunctions.Entry = Entry;
})(FactionToFactionGroupsJunctions || (FactionToFactionGroupsJunctions = {}));

var MercenaryPools;
(function (MercenaryPools) {
    MercenaryPools.KEY = new CollectionKey("mercenary_pools");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    MercenaryPools.Entry = Entry;
})(MercenaryPools || (MercenaryPools = {}));

var FactionToMercenarySetJunctions;
(function (FactionToMercenarySetJunctions) {
    FactionToMercenarySetJunctions.KEY = new CollectionKey("faction_to_mercenary_set_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._faction = values["faction"];
            this._mercenarySet = values["mercenary_set"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get mercenarySet() {
            const collection = this.collectionCache.getCollection(MercenaryPools.KEY, MercenaryPools.Entry);
            return collection.find(entry => entry.key === this._mercenarySet);
        }
    }
    FactionToMercenarySetJunctions.Entry = Entry;
})(FactionToMercenarySetJunctions || (FactionToMercenarySetJunctions = {}));

var FactionUniformColours;
(function (FactionUniformColours) {
    FactionUniformColours.KEY = new CollectionKey("faction_uniform_colours");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._factionName = values["faction_name"];
            this.primaryColourR = values["primary_colour_r"];
            this.primaryColourG = values["primary_colour_g"];
            this.primaryColourB = values["primary_colour_b"];
            this.secondaryColourR = values["secondary_colour_r"];
            this.secondaryColourG = values["secondary_colour_g"];
            this.secondaryColourB = values["secondary_colour_b"];
            this.tertiaryColourR = values["tertiary_colour_r"];
            this.tertiaryColourG = values["tertiary_colour_g"];
            this.tertiaryColourB = values["tertiary_colour_b"];
        }
    }
    FactionUniformColours.Entry = Entry;
})(FactionUniformColours || (FactionUniformColours = {}));

var FactionVariables;
(function (FactionVariables) {
    FactionVariables.KEY = new CollectionKey("faction_variables");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.factionVariableKey = values["faction_variable_key"];
            this.value = values["value"];
            this.description = values["description"];
        }
    }
    FactionVariables.Entry = Entry;
})(FactionVariables || (FactionVariables = {}));

var FactionVariablesOptionalOverrides;
(function (FactionVariablesOptionalOverrides) {
    FactionVariablesOptionalOverrides.KEY = new CollectionKey("faction_variables_optional_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._factionVariableKey = values["faction_variable_key"];
            this._factionKey = values["faction_key"];
            this._campaignKey = values["campaign_key"];
            this.difficultyLevel = values["difficulty_level"];
            this.campaignType = values["campaign_type"];
            this.value = values["value"];
        }
        get factionVariableKey() {
            const collection = this.collectionCache.getCollection(FactionVariables.KEY, FactionVariables.Entry);
            return collection.find(entry => entry.factionVariableKey === this._factionVariableKey);
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get campaignKey() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaignKey);
        }
    }
    FactionVariablesOptionalOverrides.Entry = Entry;
})(FactionVariablesOptionalOverrides || (FactionVariablesOptionalOverrides = {}));

var FameLevels;
(function (FameLevels) {
    FameLevels.KEY = new CollectionKey("fame_levels");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.level = values["level"];
            this.playerPrestige = values["player_prestige"];
            this.aiPrestige = values["ai_prestige"];
            this.armyCap = values["army_cap"];
            this.navyCap = values["navy_cap"];
            this.championCap = values["champion_cap"];
            this.dignitaryCap = values["dignitary_cap"];
            this.spyCap = values["spy_cap"];
            this.provinceInitiativeCap = values["province_initiative_cap"];
            this._campaign = values["campaign"];
            this._descriptionLookup = values["description_lookup"];
            this._effectBundle = values["effect_bundle"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
        get descriptionLookup() {
            const collection = this.collectionCache.getCollection(CampaignLocalisedStrings.KEY, CampaignLocalisedStrings.Entry);
            return collection.find(entry => entry.key === this._descriptionLookup);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles.KEY, EffectBundles.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    FameLevels.Entry = Entry;
})(FameLevels || (FameLevels = {}));

var FamilyRelationshipTypes;
(function (FamilyRelationshipTypes) {
    FamilyRelationshipTypes.KEY = new CollectionKey("family_relationship_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.relationshipType = values["relationship_type"];
        }
    }
    FamilyRelationshipTypes.Entry = Entry;
})(FamilyRelationshipTypes || (FamilyRelationshipTypes = {}));

var FamousBattlePools;
(function (FamousBattlePools) {
    FamousBattlePools.KEY = new CollectionKey("famous_battle_pools");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.poolId = values["pool_id"];
            this.poolPosX = values["pool_posX"];
            this.poolPosY = values["pool_posY"];
            this.poolRadius = values["pool_radius"];
            this.battleName = values["battle_name"];
        }
    }
    FamousBattlePools.Entry = Entry;
})(FamousBattlePools || (FamousBattlePools = {}));

var FemaleCharacterCultureDetails;
(function (FemaleCharacterCultureDetails) {
    FemaleCharacterCultureDetails.KEY = new CollectionKey("female_character_culture_details");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._culture = values["culture"];
            this.general = values["general"];
            this.publicOffice = values["public_office"];
            this.missions = values["missions"];
            this.chanceToSpawn = values["chance_to_spawn"];
            this._trait = values["trait"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get trait() {
            const collection = this.collectionCache.getCollection(TraitInfo.KEY, TraitInfo.Entry);
            return collection.find(entry => entry.trait === this._trait);
        }
    }
    FemaleCharacterCultureDetails.Entry = Entry;
})(FemaleCharacterCultureDetails || (FemaleCharacterCultureDetails = {}));

var FemaleCharacterFactionDetails;
(function (FemaleCharacterFactionDetails) {
    FemaleCharacterFactionDetails.KEY = new CollectionKey("female_character_faction_details");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._faction = values["faction"];
            this.general = values["general"];
            this.publicOffice = values["public_office"];
            this.missions = values["missions"];
            this.chanceToSpawn = values["chance_to_spawn"];
            this._trait = values["trait"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get trait() {
            const collection = this.collectionCache.getCollection(TraitInfo.KEY, TraitInfo.Entry);
            return collection.find(entry => entry.trait === this._trait);
        }
    }
    FemaleCharacterFactionDetails.Entry = Entry;
})(FemaleCharacterFactionDetails || (FemaleCharacterFactionDetails = {}));

var FemaleCharacterSubcultureDetails;
(function (FemaleCharacterSubcultureDetails) {
    FemaleCharacterSubcultureDetails.KEY = new CollectionKey("female_character_subculture_details");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._subculture = values["subculture"];
            this.general = values["general"];
            this.publicOffice = values["public_office"];
            this.missions = values["missions"];
            this.chanceToSpawn = values["chance_to_spawn"];
            this._trait = values["trait"];
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
        get trait() {
            const collection = this.collectionCache.getCollection(TraitInfo.KEY, TraitInfo.Entry);
            return collection.find(entry => entry.trait === this._trait);
        }
    }
    FemaleCharacterSubcultureDetails.Entry = Entry;
})(FemaleCharacterSubcultureDetails || (FemaleCharacterSubcultureDetails = {}));

var FirstPersonEngines;
(function (FirstPersonEngines) {
    FirstPersonEngines.KEY = new CollectionKey("first_person_engines");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this.reloadTime = values["reload_time"];
            this.autoTarget = !!values["auto_target"];
            this.cameraOffsetX = values["camera_offset_x"];
            this.cameraOffsetY = values["camera_offset_y"];
            this.cameraOffsetZ = values["camera_offset_z"];
            this.nearClippingPlane = values["near_clipping_plane"];
            this.trackProjectileDistance = values["track_projectile_distance"];
            this.halfAccuracyArc = values["half_accuracy_arc"];
            this.halfHorizontalFireArc = values["half_horizontal_fire_arc"];
            this.halfVerticalFireArcElevation = values["half_vertical_fire_arc_elevation"];
            this.turnDelay = values["turn_delay"];
            this.halfVerticalFireArcDeclination = values["half_vertical_fire_arc_declination"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(GunTypesEnum.KEY, GunTypesEnum.Entry);
            return collection.find(entry => entry.key === this._key);
        }
    }
    FirstPersonEngines.Entry = Entry;
})(FirstPersonEngines || (FirstPersonEngines = {}));

var FontNames;
(function (FontNames) {
    FontNames.KEY = new CollectionKey("font_names");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.fontName = values["font_name"];
        }
    }
    FontNames.Entry = Entry;
})(FontNames || (FontNames = {}));

var Fonts;
(function (Fonts) {
    Fonts.KEY = new CollectionKey("fonts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this.size = values["size"];
            this.bold = !!values["bold"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(FontNames.KEY, FontNames.Entry);
            return collection.find(entry => entry.fontName === this._key);
        }
    }
    Fonts.Entry = Entry;
})(Fonts || (Fonts = {}));

var Formations;
(function (Formations) {
    Formations.KEY = new CollectionKey("formations");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.formation = values["formation"];
            this.isNaval = !!values["is_naval"];
            this.isArmy = !!values["is_army"];
            this.name = values["name"];
            this.tooltip = values["tooltip"];
            this.description = values["description"];
            this.iconName = values["icon_name"];
            this.order = values["order"];
        }
    }
    Formations.Entry = Entry;
})(Formations || (Formations = {}));

var FormationsToSubcultures;
(function (FormationsToSubcultures) {
    FormationsToSubcultures.KEY = new CollectionKey("formations_to_subcultures");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._formation = values["formation"];
            this._subCulture = values["sub_culture"];
        }
        get formation() {
            const collection = this.collectionCache.getCollection(Formations.KEY, Formations.Entry);
            return collection.find(entry => entry.formation === this._formation);
        }
        get subCulture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._subCulture);
        }
    }
    FormationsToSubcultures.Entry = Entry;
})(FormationsToSubcultures || (FormationsToSubcultures = {}));

var GunTypes;
(function (GunTypes) {
    GunTypes.KEY = new CollectionKey("gun_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.gunType = values["gun_type"];
            this._battleEntity = values["battle_entity"];
            this._model = values["model"];
            this._gunAnimationsTable = values["gun_animations_table"];
            this.equipmentTable = values["equipment_table"];
            this._destroyedModel = values["destroyed_model"];
            this._destructionAnimation = values["destruction_animation"];
            this._engineType = values["engine_type"];
            this._gunMountEntity = values["gun_mount_entity"];
        }
        get model() {
            const collection = this.collectionCache.getCollection(WarscapeAnimated.KEY, WarscapeAnimated.Entry);
            return collection.find(entry => entry.key === this._model);
        }
        get gunAnimationsTable() {
            const collection = this.collectionCache.getCollection(BattleAnimationsTable.KEY, BattleAnimationsTable.Entry);
            return collection.find(entry => entry.key === this._gunAnimationsTable);
        }
        get destroyedModel() {
            const collection = this.collectionCache.getCollection(WarscapeRigid.KEY, WarscapeRigid.Entry);
            return collection.find(entry => entry.key === this._destroyedModel);
        }
        get gunMountEntity() {
            const collection = this.collectionCache.getCollection(BattleEntities.KEY, BattleEntities.Entry);
            return collection.find(entry => entry.key === this._gunMountEntity);
        }
    }
    GunTypes.Entry = Entry;
})(GunTypes || (GunTypes = {}));

var FortsToGunTypes;
(function (FortsToGunTypes) {
    FortsToGunTypes.KEY = new CollectionKey("forts_to_gun_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this._gunType = values["gun_type"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._key);
        }
        get gunType() {
            const collection = this.collectionCache.getCollection(GunTypes.KEY, GunTypes.Entry);
            return collection.find(entry => entry.gunType === this._gunType);
        }
    }
    FortsToGunTypes.Entry = Entry;
})(FortsToGunTypes || (FortsToGunTypes = {}));

var FortUnderlayClimateJcts;
(function (FortUnderlayClimateJcts) {
    FortUnderlayClimateJcts.KEY = new CollectionKey("fort_underlay_climate_jcts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._fortName = values["fort_name"];
            this._climate = values["climate"];
            this.snowUnderlay = !!values["snow_underlay"];
            this._underlay = values["underlay"];
        }
        get fortName() {
            const collection = this.collectionCache.getCollection(BattlefieldBuildings.KEY, BattlefieldBuildings.Entry);
            return collection.find(entry => entry.key === this._fortName);
        }
        get climate() {
            const collection = this.collectionCache.getCollection(Climates.KEY, Climates.Entry);
            return collection.find(entry => entry.climateType === this._climate);
        }
        get underlay() {
            const collection = this.collectionCache.getCollection(BattleTerrainFarms.KEY, BattleTerrainFarms.Entry);
            return collection.find(entry => entry.farm === this._underlay);
        }
    }
    FortUnderlayClimateJcts.Entry = Entry;
})(FortUnderlayClimateJcts || (FortUnderlayClimateJcts = {}));

var FrontendFactionLeaders;
(function (FrontendFactionLeaders) {
    FrontendFactionLeaders.KEY = new CollectionKey("frontend_faction_leaders");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.uniform = values["uniform"];
            this.animation = values["animation"];
            this.xOffset = values["x_offset"];
            this.yOffset = values["y_offset"];
            this._party = values["party"];
        }
        get party() {
            const collection = this.collectionCache.getCollection(PoliticalParties.KEY, PoliticalParties.Entry);
            return collection.find(entry => entry.key === this._party);
        }
    }
    FrontendFactionLeaders.Entry = Entry;
})(FrontendFactionLeaders || (FrontendFactionLeaders = {}));

var GameAreaEnums;
(function (GameAreaEnums) {
    GameAreaEnums.KEY = new CollectionKey("game_area_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    GameAreaEnums.Entry = Entry;
})(GameAreaEnums || (GameAreaEnums = {}));

var GeneralCommandStarLevelEffects;
(function (GeneralCommandStarLevelEffects) {
    GeneralCommandStarLevelEffects.KEY = new CollectionKey("general_command_star_level_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.commandStarLevel = values["command_star_level"];
            this.aliveMoraleBonus = values["alive_morale_bonus"];
            this.nearbyMoraleBonus = values["nearby_morale_bonus"];
            this.meleeAttackBonus = values["melee_attack_bonus"];
            this.meleeDefenceBonus = values["melee_defence_bonus"];
        }
    }
    GeneralCommandStarLevelEffects.Entry = Entry;
})(GeneralCommandStarLevelEffects || (GeneralCommandStarLevelEffects = {}));

var GovernmentTypesToEffects;
(function (GovernmentTypesToEffects) {
    GovernmentTypesToEffects.KEY = new CollectionKey("government_types_to_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._govType = values["gov_type"];
            this._effect = values["effect"];
            this.value = values["value"];
            this._effectScope = values["effect_scope"];
        }
        get govType() {
            const collection = this.collectionCache.getCollection(GovernmentTypes.KEY, GovernmentTypes.Entry);
            return collection.find(entry => entry.governmentType === this._govType);
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get effectScope() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes.KEY, CampaignEffectScopes.Entry);
            return collection.find(entry => entry.key === this._effectScope);
        }
    }
    GovernmentTypesToEffects.Entry = Entry;
})(GovernmentTypesToEffects || (GovernmentTypesToEffects = {}));

var Governorships;
(function (Governorships) {
    Governorships.KEY = new CollectionKey("governorships");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.governorship = values["governorship"];
            this.onscreen = values["onscreen"];
        }
    }
    Governorships.Entry = Entry;
})(Governorships || (Governorships = {}));

var GroundConditionTypes;
(function (GroundConditionTypes) {
    GroundConditionTypes.KEY = new CollectionKey("ground_condition_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.type = values["type"];
        }
    }
    GroundConditionTypes.Entry = Entry;
})(GroundConditionTypes || (GroundConditionTypes = {}));

var GroundTypes;
(function (GroundTypes) {
    GroundTypes.KEY = new CollectionKey("ground_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.type = values["type"];
            this.enumValue = values["enum_value"];
            this.tooltip = values["tooltip"];
            this._standardCursor = values["standard_cursor"];
            this._selectionCursor = values["selection_cursor"];
            this._penaltyImmuneAttribute = values["penalty_immune_attribute"];
        }
        get standardCursor() {
            const collection = this.collectionCache.getCollection(Cursors.KEY, Cursors.Entry);
            return collection.find(entry => entry.key === this._standardCursor);
        }
        get selectionCursor() {
            const collection = this.collectionCache.getCollection(Cursors.KEY, Cursors.Entry);
            return collection.find(entry => entry.key === this._selectionCursor);
        }
        get penaltyImmuneAttribute() {
            const collection = this.collectionCache.getCollection(UnitAttributes.KEY, UnitAttributes.Entry);
            return collection.find(entry => entry.key === this._penaltyImmuneAttribute);
        }
    }
    GroundTypes.Entry = Entry;
})(GroundTypes || (GroundTypes = {}));

var GroundTypeToStatEffects;
(function (GroundTypeToStatEffects) {
    GroundTypeToStatEffects.KEY = new CollectionKey("ground_type_to_stat_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._groundType = values["ground_type"];
            this._affectedStat = values["affected_stat"];
            this.multiplier = values["multiplier"];
        }
        get groundType() {
            const collection = this.collectionCache.getCollection(GroundTypes.KEY, GroundTypes.Entry);
            return collection.find(entry => entry.type === this._groundType);
        }
        get affectedStat() {
            const collection = this.collectionCache.getCollection(UiUnitStats.KEY, UiUnitStats.Entry);
            return collection.find(entry => entry.key === this._affectedStat);
        }
    }
    GroundTypeToStatEffects.Entry = Entry;
})(GroundTypeToStatEffects || (GroundTypeToStatEffects = {}));

var GunTypeMuzzleFlashEnum;
(function (GunTypeMuzzleFlashEnum) {
    GunTypeMuzzleFlashEnum.KEY = new CollectionKey("gun_type_muzzle_flash_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    GunTypeMuzzleFlashEnum.Entry = Entry;
})(GunTypeMuzzleFlashEnum || (GunTypeMuzzleFlashEnum = {}));

var GunTypeToProjectiles;
(function (GunTypeToProjectiles) {
    GunTypeToProjectiles.KEY = new CollectionKey("gun_type_to_projectiles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._gunType = values["gun_type"];
            this._shotType = values["shot_type"];
            this._muzzleFlash = values["muzzle_flash"];
        }
        get gunType() {
            const collection = this.collectionCache.getCollection(GunTypes.KEY, GunTypes.Entry);
            return collection.find(entry => entry.gunType === this._gunType);
        }
        get shotType() {
            const collection = this.collectionCache.getCollection(Projectiles.KEY, Projectiles.Entry);
            return collection.find(entry => entry.key === this._shotType);
        }
        get muzzleFlash() {
            const collection = this.collectionCache.getCollection(GunTypeMuzzleFlashEnum.KEY, GunTypeMuzzleFlashEnum.Entry);
            return collection.find(entry => entry.key === this._muzzleFlash);
        }
    }
    GunTypeToProjectiles.Entry = Entry;
})(GunTypeToProjectiles || (GunTypeToProjectiles = {}));

var HistoricalBattlesUiLocations;
(function (HistoricalBattlesUiLocations) {
    HistoricalBattlesUiLocations.KEY = new CollectionKey("historical_battles_ui_locations");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this.x = values["x"];
            this.y = values["y"];
            this.heightPercent = values["height_percent"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(Battles.KEY, Battles.Entry);
            return collection.find(entry => entry.key === this._key);
        }
    }
    HistoricalBattlesUiLocations.Entry = Entry;
})(HistoricalBattlesUiLocations || (HistoricalBattlesUiLocations = {}));

var NameTypes;
(function (NameTypes) {
    NameTypes.KEY = new CollectionKey("name_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    NameTypes.Entry = Entry;
})(NameTypes || (NameTypes = {}));

var Names;
(function (Names) {
    Names.KEY = new CollectionKey("names");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._namesGroup = values["names_group"];
            this.name = values["name"];
            this._type = values["type"];
            this._gender = values["gender"];
            this.frequency = values["frequency"];
            this.nobility = !!values["nobility"];
            this.id = values["id"];
        }
        get namesGroup() {
            const collection = this.collectionCache.getCollection(NamesGroups.KEY, NamesGroups.Entry);
            return collection.find(entry => entry.key === this._namesGroup);
        }
        get type() {
            const collection = this.collectionCache.getCollection(NameTypes.KEY, NameTypes.Entry);
            return collection.find(entry => entry.key === this._type);
        }
        get gender() {
            const collection = this.collectionCache.getCollection(Genders.KEY, Genders.Entry);
            return collection.find(entry => entry.gender === this._gender);
        }
    }
    Names.Entry = Entry;
})(Names || (Names = {}));

var HistoricalCharacters;
(function (HistoricalCharacters) {
    HistoricalCharacters.KEY = new CollectionKey("historical_characters");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onScreenName = values["on_screen_name"];
            this.nobility = !!values["nobility"];
            this._gender = values["gender"];
            this._agentType = values["agent_type"];
            this._faction = values["faction"];
            this.spawningWindowStart = values["spawning_window_start"];
            this.spawningWindowEnd = values["spawning_window_end"];
            this.spawnConditions = values["spawn_conditions"];
            this._nameKey = values["name_key"];
            this._surnameKey = values["surname_key"];
            this._artSetId = values["art_set_id"];
            this._clanNameKey = values["clan_name_key"];
            this._otherNameKey = values["other_name_key"];
            this._politicalParty = values["political_party"];
            this.ageStart = values["age_start"];
        }
        get gender() {
            const collection = this.collectionCache.getCollection(Genders.KEY, Genders.Entry);
            return collection.find(entry => entry.gender === this._gender);
        }
        get agentType() {
            const collection = this.collectionCache.getCollection(Agents.KEY, Agents.Entry);
            return collection.find(entry => entry.key === this._agentType);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get nameKey() {
            const collection = this.collectionCache.getCollection(Names.KEY, Names.Entry);
            return collection.find(entry => entry.id === this._nameKey);
        }
        get surnameKey() {
            const collection = this.collectionCache.getCollection(Names.KEY, Names.Entry);
            return collection.find(entry => entry.id === this._surnameKey);
        }
        get artSetId() {
            const collection = this.collectionCache.getCollection(CampaignCharacterArtSets.KEY, CampaignCharacterArtSets.Entry);
            return collection.find(entry => entry.artSetId === this._artSetId);
        }
        get clanNameKey() {
            const collection = this.collectionCache.getCollection(Names.KEY, Names.Entry);
            return collection.find(entry => entry.id === this._clanNameKey);
        }
        get otherNameKey() {
            const collection = this.collectionCache.getCollection(Names.KEY, Names.Entry);
            return collection.find(entry => entry.id === this._otherNameKey);
        }
        get politicalParty() {
            const collection = this.collectionCache.getCollection(PoliticalParties.KEY, PoliticalParties.Entry);
            return collection.find(entry => entry.key === this._politicalParty);
        }
    }
    HistoricalCharacters.Entry = Entry;
})(HistoricalCharacters || (HistoricalCharacters = {}));

var HistoricalCharacterTraits;
(function (HistoricalCharacterTraits) {
    HistoricalCharacterTraits.KEY = new CollectionKey("historical_character_traits");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._character = values["character"];
            this._trait = values["trait"];
        }
        get character() {
            const collection = this.collectionCache.getCollection(HistoricalCharacters.KEY, HistoricalCharacters.Entry);
            return collection.find(entry => entry.key === this._character);
        }
        get trait() {
            const collection = this.collectionCache.getCollection(CharacterTraitLevels.KEY, CharacterTraitLevels.Entry);
            return collection.find(entry => entry.key === this._trait);
        }
    }
    HistoricalCharacterTraits.Entry = Entry;
})(HistoricalCharacterTraits || (HistoricalCharacterTraits = {}));

var HonourFactors;
(function (HonourFactors) {
    HonourFactors.KEY = new CollectionKey("honour_factors");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.minimumValue = values["minimum_value"];
            this.maximumValue = values["maximum_value"];
            this.localisedNegativeName = values["localised_negative_name"];
            this.localisedPositiveName = values["localised_positive_name"];
        }
    }
    HonourFactors.Entry = Entry;
})(HonourFactors || (HonourFactors = {}));

var HonourEffects;
(function (HonourEffects) {
    HonourEffects.KEY = new CollectionKey("honour_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._factor = values["factor"];
            this.value = values["value"];
            this.appliesToAi = !!values["applies_to_ai"];
        }
        get factor() {
            const collection = this.collectionCache.getCollection(HonourFactors.KEY, HonourFactors.Entry);
            return collection.find(entry => entry.key === this._factor);
        }
    }
    HonourEffects.Entry = Entry;
})(HonourEffects || (HonourEffects = {}));

var ImposterSharingEnums;
(function (ImposterSharingEnums) {
    ImposterSharingEnums.KEY = new CollectionKey("imposter_sharing_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    ImposterSharingEnums.Entry = Entry;
})(ImposterSharingEnums || (ImposterSharingEnums = {}));

var IncidentHeadingTexts;
(function (IncidentHeadingTexts) {
    IncidentHeadingTexts.KEY = new CollectionKey("incident_heading_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.localisedHeadingText = values["localised_heading_text"];
        }
    }
    IncidentHeadingTexts.Entry = Entry;
})(IncidentHeadingTexts || (IncidentHeadingTexts = {}));

var LandUnitsToUnitAbilitesJunctions;
(function (LandUnitsToUnitAbilitesJunctions) {
    LandUnitsToUnitAbilitesJunctions.KEY = new CollectionKey("land_units_to_unit_abilites_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._landUnit = values["land_unit"];
            this._ability = values["ability"];
        }
        get landUnit() {
            const collection = this.collectionCache.getCollection(LandUnits.KEY, LandUnits.Entry);
            return collection.find(entry => entry.key === this._landUnit);
        }
        get ability() {
            const collection = this.collectionCache.getCollection(UnitAbilities.KEY, UnitAbilities.Entry);
            return collection.find(entry => entry.key === this._ability);
        }
    }
    LandUnitsToUnitAbilitesJunctions.Entry = Entry;
})(LandUnitsToUnitAbilitesJunctions || (LandUnitsToUnitAbilitesJunctions = {}));

var LightingSetups;
(function (LightingSetups) {
    LightingSetups.KEY = new CollectionKey("lighting_setups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
            this.depthBias = values["depth_bias"];
            this.dirx = values["dirx"];
            this.diry = values["diry"];
            this.dirz = values["dirz"];
            this.colourScale = values["colour_scale"];
            this.colourR = values["colour_r"];
            this.colourG = values["colour_g"];
            this.colourB = values["colour_b"];
            this.colourTopR = values["colour_top_r"];
            this.colourTopG = values["colour_top_g"];
            this.colourTopB = values["colour_top_b"];
            this.colourBottomR = values["colour_bottom_r"];
            this.colourBottomG = values["colour_bottom_g"];
            this.colourBottomB = values["colour_bottom_b"];
            this.gamma = values["gamma"];
            this.bloomMultiplier = values["bloom_multiplier"];
            this.bloomAngle1 = values["bloom_angle_1"];
            this.bloomAngle2 = values["bloom_angle_2"];
            this.bloomScale1 = values["bloom_scale_1"];
            this.bloomScale2 = values["bloom_scale_2"];
            this.mainBloomScalex = values["main_bloom_scalex"];
            this.mainBloomScaley = values["main_bloom_scaley"];
            this.mainBloomDistribution = values["main_bloom_distribution"];
            this.highPass = values["high_pass"];
            this.colourFogR = values["colour_fog_r"];
            this.colourFogG = values["colour_fog_g"];
            this.colourFogB = values["colour_fog_b"];
            this.fogNear = values["fog_near"];
            this.fogFar = values["fog_far"];
            this.fogDensity = values["fog_density"];
        }
    }
    LightingSetups.Entry = Entry;
})(LightingSetups || (LightingSetups = {}));

var LoyaltyFactors;
(function (LoyaltyFactors) {
    LoyaltyFactors.KEY = new CollectionKey("loyalty_factors");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.minimumValue = values["minimum_value"];
            this.maximumValue = values["maximum_value"];
            this.localisedNegativeName = values["localised_negative_name"];
            this.localisedPositiveName = values["localised_positive_name"];
        }
    }
    LoyaltyFactors.Entry = Entry;
})(LoyaltyFactors || (LoyaltyFactors = {}));

var LoyaltyEffects;
(function (LoyaltyEffects) {
    LoyaltyEffects.KEY = new CollectionKey("loyalty_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._factor = values["factor"];
            this.value = values["value"];
            this.appliesToAi = !!values["applies_to_ai"];
        }
        get factor() {
            const collection = this.collectionCache.getCollection(LoyaltyFactors.KEY, LoyaltyFactors.Entry);
            return collection.find(entry => entry.key === this._factor);
        }
    }
    LoyaltyEffects.Entry = Entry;
})(LoyaltyEffects || (LoyaltyEffects = {}));

var MercenaryPoolTypeEnums;
(function (MercenaryPoolTypeEnums) {
    MercenaryPoolTypeEnums.KEY = new CollectionKey("mercenary_pool_type_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.poolType = values["pool_type"];
        }
    }
    MercenaryPoolTypeEnums.Entry = Entry;
})(MercenaryPoolTypeEnums || (MercenaryPoolTypeEnums = {}));

var MercenaryPoolModifiers;
(function (MercenaryPoolModifiers) {
    MercenaryPoolModifiers.KEY = new CollectionKey("mercenary_pool_modifiers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._poolType = values["pool_type"];
            this.cultureOriginMatch = !!values["culture_origin_match"];
            this.minPoolCulturePercentage = values["min_pool_culture_percentage"];
            this.replenishmentModifier = values["replenishment_modifier"];
            this.costModifier = values["cost_modifier"];
            this.key = values["key"];
        }
        get poolType() {
            const collection = this.collectionCache.getCollection(MercenaryPoolTypeEnums.KEY, MercenaryPoolTypeEnums.Entry);
            return collection.find(entry => entry.poolType === this._poolType);
        }
    }
    MercenaryPoolModifiers.Entry = Entry;
})(MercenaryPoolModifiers || (MercenaryPoolModifiers = {}));

var MercenaryUnitGroups;
(function (MercenaryUnitGroups) {
    MercenaryUnitGroups.KEY = new CollectionKey("mercenary_unit_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._unitRecord = values["unit_record"];
            this.maxCount = values["max_count"];
            this.maxReplenishPerTurn = values["max_replenish_per_turn"];
            this.chanceToReplenish = values["chance_to_replenish"];
        }
        get unitRecord() {
            const collection = this.collectionCache.getCollection(MainUnits.KEY, MainUnits.Entry);
            return collection.find(entry => entry.unit === this._unitRecord);
        }
    }
    MercenaryUnitGroups.Entry = Entry;
})(MercenaryUnitGroups || (MercenaryUnitGroups = {}));

var MercenaryPoolToGroupsJunctions;
(function (MercenaryPoolToGroupsJunctions) {
    MercenaryPoolToGroupsJunctions.KEY = new CollectionKey("mercenary_pool_to_groups_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._pool = values["pool"];
            this._group = values["group"];
            this.initialUnitCount = values["initial_unit_count"];
            this._factionRequirement = values["faction_requirement"];
            this._subcultureRequirement = values["subculture_requirement"];
            this._techRequirement = values["tech_requirement"];
        }
        get pool() {
            const collection = this.collectionCache.getCollection(MercenaryPools.KEY, MercenaryPools.Entry);
            return collection.find(entry => entry.key === this._pool);
        }
        get group() {
            const collection = this.collectionCache.getCollection(MercenaryUnitGroups.KEY, MercenaryUnitGroups.Entry);
            return collection.find(entry => entry.key === this._group);
        }
        get factionRequirement() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._factionRequirement);
        }
        get subcultureRequirement() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._subcultureRequirement);
        }
        get techRequirement() {
            const collection = this.collectionCache.getCollection(Technologies.KEY, Technologies.Entry);
            return collection.find(entry => entry.key === this._techRequirement);
        }
    }
    MercenaryPoolToGroupsJunctions.Entry = Entry;
})(MercenaryPoolToGroupsJunctions || (MercenaryPoolToGroupsJunctions = {}));

var MessageEventText;
(function (MessageEventText) {
    MessageEventText.KEY = new CollectionKey("message_event_text");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.text = values["text"];
        }
    }
    MessageEventText.Entry = Entry;
})(MessageEventText || (MessageEventText = {}));

var MessageEventStrings;
(function (MessageEventStrings) {
    MessageEventStrings.KEY = new CollectionKey("message_event_strings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._event = values["event"];
            this._culture = values["culture"];
            this.title = values["title"];
            this._text = values["text"];
            this.image = values["image"];
            this.icon = values["icon"];
            this.soundEvent = values["sound_event"];
            this._optionalCampaignKey = values["optional_campaign_key"];
            this._optionalSubculture = values["optional_subculture"];
        }
        get event() {
            const collection = this.collectionCache.getCollection(MessageEvents.KEY, MessageEvents.Entry);
            return collection.find(entry => entry.event === this._event);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get text() {
            const collection = this.collectionCache.getCollection(MessageEventText.KEY, MessageEventText.Entry);
            return collection.find(entry => entry.key === this._text);
        }
        get optionalCampaignKey() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._optionalCampaignKey);
        }
        get optionalSubculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._optionalSubculture);
        }
    }
    MessageEventStrings.Entry = Entry;
})(MessageEventStrings || (MessageEventStrings = {}));

var MilitaryForceLegacyEmblems;
(function (MilitaryForceLegacyEmblems) {
    MilitaryForceLegacyEmblems.KEY = new CollectionKey("military_force_legacy_emblems");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.isArmy = !!values["is_army"];
            this._factionKey = values["faction_key"];
            this._culureKey = values["culure_key"];
            this._subcultureKey = values["subculture_key"];
            this.icon = values["icon"];
            this.bannerDecorator = values["banner_decorator"];
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get culureKey() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culureKey);
        }
        get subcultureKey() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._subcultureKey);
        }
    }
    MilitaryForceLegacyEmblems.Entry = Entry;
})(MilitaryForceLegacyEmblems || (MilitaryForceLegacyEmblems = {}));

var MilitaryForceLegacyNames;
(function (MilitaryForceLegacyNames) {
    MilitaryForceLegacyNames.KEY = new CollectionKey("military_force_legacy_names");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._subculture = values["subculture"];
            this.localisedName = values["localised_name"];
            this.forArmy = !!values["for_army"];
            this._campaign = values["campaign"];
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
    }
    MilitaryForceLegacyNames.Entry = Entry;
})(MilitaryForceLegacyNames || (MilitaryForceLegacyNames = {}));

var MinisterialEffectivenessModifiers;
(function (MinisterialEffectivenessModifiers) {
    MinisterialEffectivenessModifiers.KEY = new CollectionKey("ministerial_effectiveness_modifiers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.leaderMinisterLevel = values["leader_minister_level"];
            this._governmentType = values["government_type"];
            this.effectivenessBonus = values["effectiveness_bonus"];
        }
        get governmentType() {
            const collection = this.collectionCache.getCollection(GovernmentTypes.KEY, GovernmentTypes.Entry);
            return collection.find(entry => entry.governmentType === this._governmentType);
        }
    }
    MinisterialEffectivenessModifiers.Entry = Entry;
})(MinisterialEffectivenessModifiers || (MinisterialEffectivenessModifiers = {}));

var MinisterialPositions;
(function (MinisterialPositions) {
    MinisterialPositions.KEY = new CollectionKey("ministerial_positions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.ministerKey = values["minister_key"];
            this.rank = values["rank"];
        }
    }
    MinisterialPositions.Entry = Entry;
})(MinisterialPositions || (MinisterialPositions = {}));

var MinisterialPositionsByGovTypes;
(function (MinisterialPositionsByGovTypes) {
    MinisterialPositionsByGovTypes.KEY = new CollectionKey("ministerial_positions_by_gov_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._faction = values["faction"];
            this._ministerKey = values["minister_key"];
            this._governmentType = values["government_type"];
            this._gender = values["gender"];
            this._string = values["string"];
            this.loyaltyGained = values["loyalty_gained"];
            this.loyaltyOnLoss = values["loyalty_on_loss"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get ministerKey() {
            const collection = this.collectionCache.getCollection(MinisterialPositions.KEY, MinisterialPositions.Entry);
            return collection.find(entry => entry.ministerKey === this._ministerKey);
        }
        get governmentType() {
            const collection = this.collectionCache.getCollection(GovernmentTypes.KEY, GovernmentTypes.Entry);
            return collection.find(entry => entry.governmentType === this._governmentType);
        }
        get gender() {
            const collection = this.collectionCache.getCollection(Genders.KEY, Genders.Entry);
            return collection.find(entry => entry.gender === this._gender);
        }
    }
    MinisterialPositionsByGovTypes.Entry = Entry;
})(MinisterialPositionsByGovTypes || (MinisterialPositionsByGovTypes = {}));

var MinisterialPositionsStrings;
(function (MinisterialPositionsStrings) {
    MinisterialPositionsStrings.KEY = new CollectionKey("ministerial_positions_strings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onScreen = values["on_screen"];
        }
    }
    MinisterialPositionsStrings.Entry = Entry;
})(MinisterialPositionsStrings || (MinisterialPositionsStrings = {}));

var MinisterialPositionsSwitchingLoyaltyEffects;
(function (MinisterialPositionsSwitchingLoyaltyEffects) {
    MinisterialPositionsSwitchingLoyaltyEffects.KEY = new CollectionKey("ministerial_positions_switching_loyalty_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._positionFrom = values["position_from"];
            this._positionTo = values["position_to"];
            this.loyaltyGained = values["loyalty_gained"];
        }
        get positionFrom() {
            const collection = this.collectionCache.getCollection(MinisterialPositions.KEY, MinisterialPositions.Entry);
            return collection.find(entry => entry.ministerKey === this._positionFrom);
        }
        get positionTo() {
            const collection = this.collectionCache.getCollection(MinisterialPositions.KEY, MinisterialPositions.Entry);
            return collection.find(entry => entry.ministerKey === this._positionTo);
        }
    }
    MinisterialPositionsSwitchingLoyaltyEffects.Entry = Entry;
})(MinisterialPositionsSwitchingLoyaltyEffects || (MinisterialPositionsSwitchingLoyaltyEffects = {}));

var MinisterialPositionsToCharacterEffects;
(function (MinisterialPositionsToCharacterEffects) {
    MinisterialPositionsToCharacterEffects.KEY = new CollectionKey("ministerial_positions_to_character_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._position = values["position"];
            this.ministerLevel = values["minister_level"];
            this._effect = values["effect"];
            this.value = values["value"];
            this.uiId = values["ui_id"];
            this._effectScope = values["effect_scope"];
        }
        get position() {
            const collection = this.collectionCache.getCollection(MinisterialPositions.KEY, MinisterialPositions.Entry);
            return collection.find(entry => entry.ministerKey === this._position);
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get effectScope() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes.KEY, CampaignEffectScopes.Entry);
            return collection.find(entry => entry.key === this._effectScope);
        }
    }
    MinisterialPositionsToCharacterEffects.Entry = Entry;
})(MinisterialPositionsToCharacterEffects || (MinisterialPositionsToCharacterEffects = {}));

var MinisterialPositionsToEffects;
(function (MinisterialPositionsToEffects) {
    MinisterialPositionsToEffects.KEY = new CollectionKey("ministerial_positions_to_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._position = values["position"];
            this.ministerLevel = values["minister_level"];
            this._effect = values["effect"];
            this.value = values["value"];
            this.uiId = values["ui_id"];
            this._effectScope = values["effect_scope"];
        }
        get position() {
            const collection = this.collectionCache.getCollection(MinisterialPositions.KEY, MinisterialPositions.Entry);
            return collection.find(entry => entry.ministerKey === this._position);
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get effectScope() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes.KEY, CampaignEffectScopes.Entry);
            return collection.find(entry => entry.key === this._effectScope);
        }
    }
    MinisterialPositionsToEffects.Entry = Entry;
})(MinisterialPositionsToEffects || (MinisterialPositionsToEffects = {}));

var MinisterialPositionsToGovernorships;
(function (MinisterialPositionsToGovernorships) {
    MinisterialPositionsToGovernorships.KEY = new CollectionKey("ministerial_positions_to_governorships");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._ministerialPosition = values["ministerial_position"];
            this._governorship = values["governorship"];
        }
        get ministerialPosition() {
            const collection = this.collectionCache.getCollection(MinisterialPositions.KEY, MinisterialPositions.Entry);
            return collection.find(entry => entry.ministerKey === this._ministerialPosition);
        }
        get governorship() {
            const collection = this.collectionCache.getCollection(Governorships.KEY, Governorships.Entry);
            return collection.find(entry => entry.governorship === this._governorship);
        }
    }
    MinisterialPositionsToGovernorships.Entry = Entry;
})(MinisterialPositionsToGovernorships || (MinisterialPositionsToGovernorships = {}));

var MinisterialPositionDefaultNames;
(function (MinisterialPositionDefaultNames) {
    MinisterialPositionDefaultNames.KEY = new CollectionKey("ministerial_position_default_names");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._ministerialPosition = values["ministerial_position"];
            this._govType = values["gov_type"];
            this.defaultName = values["default_name"];
        }
        get ministerialPosition() {
            const collection = this.collectionCache.getCollection(MinisterialPositions.KEY, MinisterialPositions.Entry);
            return collection.find(entry => entry.ministerKey === this._ministerialPosition);
        }
        get govType() {
            const collection = this.collectionCache.getCollection(GovernmentTypes.KEY, GovernmentTypes.Entry);
            return collection.find(entry => entry.governmentType === this._govType);
        }
    }
    MinisterialPositionDefaultNames.Entry = Entry;
})(MinisterialPositionDefaultNames || (MinisterialPositionDefaultNames = {}));

var MissileWeaponsToProjectiles;
(function (MissileWeaponsToProjectiles) {
    MissileWeaponsToProjectiles.KEY = new CollectionKey("missile_weapons_to_projectiles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._missileWeapon = values["missile_weapon"];
            this._projectile = values["projectile"];
        }
        get missileWeapon() {
            const collection = this.collectionCache.getCollection(MissileWeapons.KEY, MissileWeapons.Entry);
            return collection.find(entry => entry.key === this._missileWeapon);
        }
        get projectile() {
            const collection = this.collectionCache.getCollection(Projectiles.KEY, Projectiles.Entry);
            return collection.find(entry => entry.key === this._projectile);
        }
    }
    MissileWeaponsToProjectiles.Entry = Entry;
})(MissileWeaponsToProjectiles || (MissileWeaponsToProjectiles = {}));

var MissionText;
(function (MissionText) {
    MissionText.KEY = new CollectionKey("mission_text");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.text = values["text"];
        }
    }
    MissionText.Entry = Entry;
})(MissionText || (MissionText = {}));

var ModelsArtillery;
(function (ModelsArtillery) {
    ModelsArtillery.KEY = new CollectionKey("models_artillery");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.modelFile = values["model_file"];
            this.logicFile = values["logic_file"];
        }
    }
    ModelsArtillery.Entry = Entry;
})(ModelsArtillery || (ModelsArtillery = {}));

var ModelsFoot;
(function (ModelsFoot) {
    ModelsFoot.KEY = new CollectionKey("models_foot");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    ModelsFoot.Entry = Entry;
})(ModelsFoot || (ModelsFoot = {}));

var ModelsMount;
(function (ModelsMount) {
    ModelsMount.KEY = new CollectionKey("models_mount");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    ModelsMount.Entry = Entry;
})(ModelsMount || (ModelsMount = {}));

var MountableArtilleryUnits;
(function (MountableArtilleryUnits) {
    MountableArtilleryUnits.KEY = new CollectionKey("mountable_artillery_units");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unitKey = values["unit_key"];
        }
        get unitKey() {
            const collection = this.collectionCache.getCollection(MainUnits.KEY, MainUnits.Entry);
            return collection.find(entry => entry.unit === this._unitKey);
        }
    }
    MountableArtilleryUnits.Entry = Entry;
})(MountableArtilleryUnits || (MountableArtilleryUnits = {}));

var MountableArtilleryUnitsCustomBattles;
(function (MountableArtilleryUnitsCustomBattles) {
    MountableArtilleryUnitsCustomBattles.KEY = new CollectionKey("mountable_artillery_units_custom_battles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._mountableArtillery = values["mountable_artillery"];
            this.cap = values["cap"];
            this.probability = values["probability"];
            this._faction = values["faction"];
        }
        get mountableArtillery() {
            const collection = this.collectionCache.getCollection(MountableArtilleryUnits.KEY, MountableArtilleryUnits.Entry);
            return collection.find(entry => entry._unitKey === this._mountableArtillery);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    MountableArtilleryUnitsCustomBattles.Entry = Entry;
})(MountableArtilleryUnitsCustomBattles || (MountableArtilleryUnitsCustomBattles = {}));

var MountVariants;
(function (MountVariants) {
    MountVariants.KEY = new CollectionKey("mount_variants");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._mountKey = values["mount_key"];
            this.displayKey = values["display_key"];
            this.weight = values["weight"];
        }
        get mountKey() {
            const collection = this.collectionCache.getCollection(Mounts.KEY, Mounts.Entry);
            return collection.find(entry => entry.key === this._mountKey);
        }
    }
    MountVariants.Entry = Entry;
})(MountVariants || (MountVariants = {}));

var MovementTypes;
(function (MovementTypes) {
    MovementTypes.KEY = new CollectionKey("movement_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.type = values["type"];
        }
    }
    MovementTypes.Entry = Entry;
})(MovementTypes || (MovementTypes = {}));

var MpBudgetSizes;
(function (MpBudgetSizes) {
    MpBudgetSizes.KEY = new CollectionKey("mp_budget_sizes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    MpBudgetSizes.Entry = Entry;
})(MpBudgetSizes || (MpBudgetSizes = {}));

var MpBudgets;
(function (MpBudgets) {
    MpBudgets.KEY = new CollectionKey("mp_budgets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._budgetSizeKey = values["budget_size_key"];
            this.land = !!values["land"];
            this.siegeDefender = !!values["siege_defender"];
            this.budget = values["budget"];
        }
        get budgetSizeKey() {
            const collection = this.collectionCache.getCollection(MpBudgetSizes.KEY, MpBudgetSizes.Entry);
            return collection.find(entry => entry.key === this._budgetSizeKey);
        }
    }
    MpBudgets.Entry = Entry;
})(MpBudgets || (MpBudgets = {}));

var MpForceGenTemplates;
(function (MpForceGenTemplates) {
    MpForceGenTemplates.KEY = new CollectionKey("mp_force_gen_templates");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    MpForceGenTemplates.Entry = Entry;
})(MpForceGenTemplates || (MpForceGenTemplates = {}));

var MpForceGenTemplateJunctions;
(function (MpForceGenTemplateJunctions) {
    MpForceGenTemplateJunctions.KEY = new CollectionKey("mp_force_gen_template_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._templateKey = values["template_key"];
            this._budgetKey = values["budget_key"];
            this.priority = values["priority"];
            this.generalPct = values["general_pct"];
            this.unitsPct = values["units_pct"];
            this.upgradePct = values["upgrade_pct"];
            this._configKey = values["config_key"];
            this.isDefender = !!values["is_defender"];
        }
        get templateKey() {
            const collection = this.collectionCache.getCollection(MpForceGenTemplates.KEY, MpForceGenTemplates.Entry);
            return collection.find(entry => entry.key === this._templateKey);
        }
        get budgetKey() {
            const collection = this.collectionCache.getCollection(MpBudgets.KEY, MpBudgets.Entry);
            return collection.find(entry => entry.key === this._budgetKey);
        }
        get configKey() {
            const collection = this.collectionCache.getCollection(CdirMilitaryGeneratorConfigs.KEY, CdirMilitaryGeneratorConfigs.Entry);
            return collection.find(entry => entry.key === this._configKey);
        }
    }
    MpForceGenTemplateJunctions.Entry = Entry;
})(MpForceGenTemplateJunctions || (MpForceGenTemplateJunctions = {}));

var MultiplayerMininumLengthFunds;
(function (MultiplayerMininumLengthFunds) {
    MultiplayerMininumLengthFunds.KEY = new CollectionKey("multiplayer_mininum_length_funds");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.value = values["value"];
            this.description = values["description"];
        }
    }
    MultiplayerMininumLengthFunds.Entry = Entry;
})(MultiplayerMininumLengthFunds || (MultiplayerMininumLengthFunds = {}));

var NamesTitles;
(function (NamesTitles) {
    NamesTitles.KEY = new CollectionKey("names_titles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._nameGroup = values["name_group"];
            this.title = values["title"];
            this._gender = values["gender"];
            this.rank = values["rank"];
        }
        get nameGroup() {
            const collection = this.collectionCache.getCollection(NamesGroups.KEY, NamesGroups.Entry);
            return collection.find(entry => entry.key === this._nameGroup);
        }
        get gender() {
            const collection = this.collectionCache.getCollection(Genders.KEY, Genders.Entry);
            return collection.find(entry => entry.gender === this._gender);
        }
    }
    NamesTitles.Entry = Entry;
})(NamesTitles || (NamesTitles = {}));

var NamesTitlesByAgent;
(function (NamesTitlesByAgent) {
    NamesTitlesByAgent.KEY = new CollectionKey("names_titles_by_agent");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._agentType = values["agent_type"];
            this.highestTitle = values["highest_title"];
        }
        get agentType() {
            const collection = this.collectionCache.getCollection(Agents.KEY, Agents.Entry);
            return collection.find(entry => entry.key === this._agentType);
        }
    }
    NamesTitlesByAgent.Entry = Entry;
})(NamesTitlesByAgent || (NamesTitlesByAgent = {}));

var NameOrders;
(function (NameOrders) {
    NameOrders.KEY = new CollectionKey("name_orders");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._type = values["type"];
            this.order = values["order"];
            this._nameGroup = values["name_group"];
        }
        get type() {
            const collection = this.collectionCache.getCollection(NameTypes.KEY, NameTypes.Entry);
            return collection.find(entry => entry.key === this._type);
        }
        get nameGroup() {
            const collection = this.collectionCache.getCollection(NamesGroups.KEY, NamesGroups.Entry);
            return collection.find(entry => entry.key === this._nameGroup);
        }
    }
    NameOrders.Entry = Entry;
})(NameOrders || (NameOrders = {}));

var NameOrderOverrides;
(function (NameOrderOverrides) {
    NameOrderOverrides.KEY = new CollectionKey("name_order_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._type = values["type"];
            this.order = values["order"];
            this._faction = values["faction"];
        }
        get type() {
            const collection = this.collectionCache.getCollection(NameTypes.KEY, NameTypes.Entry);
            return collection.find(entry => entry.key === this._type);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    NameOrderOverrides.Entry = Entry;
})(NameOrderOverrides || (NameOrderOverrides = {}));

var NavalEffects;
(function (NavalEffects) {
    NavalEffects.KEY = new CollectionKey("naval_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._effectName = values["effect_name"];
        }
        get effectName() {
            const collection = this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry);
            return collection.find(entry => entry.key === this._effectName);
        }
    }
    NavalEffects.Entry = Entry;
})(NavalEffects || (NavalEffects = {}));

var ProjectileIncendiaryEnum;
(function (ProjectileIncendiaryEnum) {
    ProjectileIncendiaryEnum.KEY = new CollectionKey("projectile_incendiary_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    ProjectileIncendiaryEnum.Entry = Entry;
})(ProjectileIncendiaryEnum || (ProjectileIncendiaryEnum = {}));

var NavalFireJunctions;
(function (NavalFireJunctions) {
    NavalFireJunctions.KEY = new CollectionKey("naval_fire_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._incendiaryLevel = values["incendiary_level"];
            this._unitCategory = values["unit_category"];
            this.chanceOfFire = values["chance_of_fire"];
        }
        get incendiaryLevel() {
            const collection = this.collectionCache.getCollection(ProjectileIncendiaryEnum.KEY, ProjectileIncendiaryEnum.Entry);
            return collection.find(entry => entry.key === this._incendiaryLevel);
        }
        get unitCategory() {
            const collection = this.collectionCache.getCollection(UnitCategory.KEY, UnitCategory.Entry);
            return collection.find(entry => entry.key === this._unitCategory);
        }
    }
    NavalFireJunctions.Entry = Entry;
})(NavalFireJunctions || (NavalFireJunctions = {}));

var NavalOarEnums;
(function (NavalOarEnums) {
    NavalOarEnums.KEY = new CollectionKey("naval_oar_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    NavalOarEnums.Entry = Entry;
})(NavalOarEnums || (NavalOarEnums = {}));

var NavalRammingEvents;
(function (NavalRammingEvents) {
    NavalRammingEvents.KEY = new CollectionKey("naval_ramming_events");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._rammingShip = values["ramming_ship"];
            this._rammedShip = values["rammed_ship"];
            this.baseDamage = values["base_damage"];
        }
        get rammingShip() {
            const collection = this.collectionCache.getCollection(UnitCategory.KEY, UnitCategory.Entry);
            return collection.find(entry => entry.key === this._rammingShip);
        }
        get rammedShip() {
            const collection = this.collectionCache.getCollection(UnitCategory.KEY, UnitCategory.Entry);
            return collection.find(entry => entry.key === this._rammedShip);
        }
    }
    NavalRammingEvents.Entry = Entry;
})(NavalRammingEvents || (NavalRammingEvents = {}));

var NavalUnitsToUnitAbilitesJunctions;
(function (NavalUnitsToUnitAbilitesJunctions) {
    NavalUnitsToUnitAbilitesJunctions.KEY = new CollectionKey("naval_units_to_unit_abilites_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._navalUnit = values["naval_unit"];
            this._ability = values["ability"];
        }
        get navalUnit() {
            const collection = this.collectionCache.getCollection(NavalUnits.KEY, NavalUnits.Entry);
            return collection.find(entry => entry.key === this._navalUnit);
        }
        get ability() {
            const collection = this.collectionCache.getCollection(UnitAbilities.KEY, UnitAbilities.Entry);
            return collection.find(entry => entry.key === this._ability);
        }
    }
    NavalUnitsToUnitAbilitesJunctions.Entry = Entry;
})(NavalUnitsToUnitAbilitesJunctions || (NavalUnitsToUnitAbilitesJunctions = {}));

var Plagues;
(function (Plagues) {
    Plagues.KEY = new CollectionKey("plagues");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
            this.grade = values["grade"];
            this.minimumSqualor = values["minimum_squalor"];
            this.infectivity = values["infectivity"];
            this.lifetime = values["lifetime"];
            this._regionEffectBundle = values["region_effect_bundle"];
            this._militaryForceEffectBundle = values["military_force_effect_bundle"];
        }
        get regionEffectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles.KEY, EffectBundles.Entry);
            return collection.find(entry => entry.key === this._regionEffectBundle);
        }
        get militaryForceEffectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles.KEY, EffectBundles.Entry);
            return collection.find(entry => entry.key === this._militaryForceEffectBundle);
        }
    }
    Plagues.Entry = Entry;
})(Plagues || (Plagues = {}));

var PlaguesPermittedCampaigns;
(function (PlaguesPermittedCampaigns) {
    PlaguesPermittedCampaigns.KEY = new CollectionKey("plagues_permitted_campaigns");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._plague = values["plague"];
            this._campaign = values["campaign"];
        }
        get plague() {
            const collection = this.collectionCache.getCollection(Plagues.KEY, Plagues.Entry);
            return collection.find(entry => entry.name === this._plague);
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
    }
    PlaguesPermittedCampaigns.Entry = Entry;
})(PlaguesPermittedCampaigns || (PlaguesPermittedCampaigns = {}));

var PoliticalActions;
(function (PoliticalActions) {
    PoliticalActions.KEY = new CollectionKey("political_actions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.politicalActionKey = values["political_action_key"];
            this.onscreenName = values["onscreen_name"];
            this.iconFilePath = values["icon_file_path"];
            this.usageCostMultiplier = values["usage_cost_multiplier"];
        }
    }
    PoliticalActions.Entry = Entry;
})(PoliticalActions || (PoliticalActions = {}));

var PoliticalActionsDilemmaJunctions;
(function (PoliticalActionsDilemmaJunctions) {
    PoliticalActionsDilemmaJunctions.KEY = new CollectionKey("political_actions_dilemma_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._politiicalAction = values["politiical_action"];
            this._dilemma = values["dilemma"];
            this.weighting = values["weighting"];
        }
        get politiicalAction() {
            const collection = this.collectionCache.getCollection(PoliticalActions.KEY, PoliticalActions.Entry);
            return collection.find(entry => entry.politicalActionKey === this._politiicalAction);
        }
        get dilemma() {
            const collection = this.collectionCache.getCollection(Dilemmas.KEY, Dilemmas.Entry);
            return collection.find(entry => entry.key === this._dilemma);
        }
    }
    PoliticalActionsDilemmaJunctions.Entry = Entry;
})(PoliticalActionsDilemmaJunctions || (PoliticalActionsDilemmaJunctions = {}));

var PoliticalActionsEffectBundles;
(function (PoliticalActionsEffectBundles) {
    PoliticalActionsEffectBundles.KEY = new CollectionKey("political_actions_effect_bundles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.action = values["action"];
            this._effectBundle = values["effect_bundle"];
            this.duration = values["duration"];
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles.KEY, EffectBundles.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    PoliticalActionsEffectBundles.Entry = Entry;
})(PoliticalActionsEffectBundles || (PoliticalActionsEffectBundles = {}));

var PoliticalActionsIncidentsJunctions;
(function (PoliticalActionsIncidentsJunctions) {
    PoliticalActionsIncidentsJunctions.KEY = new CollectionKey("political_actions_incidents_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._politicalAction = values["political_action"];
            this._incident = values["incident"];
            this.weighting = values["weighting"];
        }
        get politicalAction() {
            const collection = this.collectionCache.getCollection(PoliticalActions.KEY, PoliticalActions.Entry);
            return collection.find(entry => entry.politicalActionKey === this._politicalAction);
        }
        get incident() {
            const collection = this.collectionCache.getCollection(Incidents.KEY, Incidents.Entry);
            return collection.find(entry => entry.key === this._incident);
        }
    }
    PoliticalActionsIncidentsJunctions.Entry = Entry;
})(PoliticalActionsIncidentsJunctions || (PoliticalActionsIncidentsJunctions = {}));

var PoliticalActionsMissionJunctions;
(function (PoliticalActionsMissionJunctions) {
    PoliticalActionsMissionJunctions.KEY = new CollectionKey("political_actions_mission_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._politicalAction = values["political_action"];
            this._mission = values["mission"];
            this.weighting = values["weighting"];
        }
        get politicalAction() {
            const collection = this.collectionCache.getCollection(PoliticalActions.KEY, PoliticalActions.Entry);
            return collection.find(entry => entry.politicalActionKey === this._politicalAction);
        }
        get mission() {
            const collection = this.collectionCache.getCollection(Missions.KEY, Missions.Entry);
            return collection.find(entry => entry.key === this._mission);
        }
    }
    PoliticalActionsMissionJunctions.Entry = Entry;
})(PoliticalActionsMissionJunctions || (PoliticalActionsMissionJunctions = {}));

var PoliticalPartiesLoyaltyEffectBundles;
(function (PoliticalPartiesLoyaltyEffectBundles) {
    PoliticalPartiesLoyaltyEffectBundles.KEY = new CollectionKey("political_parties_loyalty_effect_bundles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.loyalty = values["loyalty"];
            this._bundleKey = values["bundle_key"];
        }
        get bundleKey() {
            const collection = this.collectionCache.getCollection(EffectBundles.KEY, EffectBundles.Entry);
            return collection.find(entry => entry.key === this._bundleKey);
        }
    }
    PoliticalPartiesLoyaltyEffectBundles.Entry = Entry;
})(PoliticalPartiesLoyaltyEffectBundles || (PoliticalPartiesLoyaltyEffectBundles = {}));

var PoliticalPartiesPowerEffectBundles;
(function (PoliticalPartiesPowerEffectBundles) {
    PoliticalPartiesPowerEffectBundles.KEY = new CollectionKey("political_parties_power_effect_bundles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._politicalPartyKey = values["political_party_key"];
            this._effectBundle = values["effect_bundle"];
            this.powerLevel = values["power_level"];
        }
        get politicalPartyKey() {
            const collection = this.collectionCache.getCollection(PoliticalParties.KEY, PoliticalParties.Entry);
            return collection.find(entry => entry.key === this._politicalPartyKey);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles.KEY, EffectBundles.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    PoliticalPartiesPowerEffectBundles.Entry = Entry;
})(PoliticalPartiesPowerEffectBundles || (PoliticalPartiesPowerEffectBundles = {}));

var PoliticalTriggers;
(function (PoliticalTriggers) {
    PoliticalTriggers.KEY = new CollectionKey("political_triggers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.trigger = values["trigger"];
            this._event = values["event"];
            this.conditions = values["conditions"];
        }
        get event() {
            const collection = this.collectionCache.getCollection(TriggerEvents.KEY, TriggerEvents.Entry);
            return collection.find(entry => entry.event === this._event);
        }
    }
    PoliticalTriggers.Entry = Entry;
})(PoliticalTriggers || (PoliticalTriggers = {}));

var PoliticsGovernmentTypePoliticalActionJunctions;
(function (PoliticsGovernmentTypePoliticalActionJunctions) {
    PoliticsGovernmentTypePoliticalActionJunctions.KEY = new CollectionKey("politics_government_type_political_action_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._governmentType = values["government_type"];
            this._politicalAction = values["political_action"];
            this.isAvailableForFactionLeader = !!values["is_available_for_faction_leader"];
            this.isAvailableForNonRulingPartyLeaders = !!values["is_available_for_non_ruling_party_leaders"];
            this.isAvailableForRulingPartyMembers = !!values["is_available_for_ruling_party_members"];
            this.isAvailableForNonRulingPartyMembers = !!values["is_available_for_non_ruling_party_members"];
        }
        get governmentType() {
            const collection = this.collectionCache.getCollection(PoliticsGovernmentTypes.KEY, PoliticsGovernmentTypes.Entry);
            return collection.find(entry => entry.governmentType === this._governmentType);
        }
        get politicalAction() {
            const collection = this.collectionCache.getCollection(PoliticalActions.KEY, PoliticalActions.Entry);
            return collection.find(entry => entry.politicalActionKey === this._politicalAction);
        }
    }
    PoliticsGovernmentTypePoliticalActionJunctions.Entry = Entry;
})(PoliticsGovernmentTypePoliticalActionJunctions || (PoliticsGovernmentTypePoliticalActionJunctions = {}));

var PresetColours;
(function (PresetColours) {
    PresetColours.KEY = new CollectionKey("preset_colours");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["Key"];
            this.red = values["red"];
            this.green = values["green"];
            this.blue = values["blue"];
        }
    }
    PresetColours.Entry = Entry;
})(PresetColours || (PresetColours = {}));

var PreBattleSpeechTypesEnum;
(function (PreBattleSpeechTypesEnum) {
    PreBattleSpeechTypesEnum.KEY = new CollectionKey("pre_battle_speech_types_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.index = values["index"];
            this.description = values["description"];
        }
    }
    PreBattleSpeechTypesEnum.Entry = Entry;
})(PreBattleSpeechTypesEnum || (PreBattleSpeechTypesEnum = {}));

var PreBattleSpeeches;
(function (PreBattleSpeeches) {
    PreBattleSpeeches.KEY = new CollectionKey("pre_battle_speeches");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.text = values["text"];
            this._type = values["type"];
            this._parameter = values["parameter"];
        }
        get type() {
            const collection = this.collectionCache.getCollection(PreBattleSpeechTypesEnum.KEY, PreBattleSpeechTypesEnum.Entry);
            return collection.find(entry => entry.index === this._type);
        }
        get parameter() {
            const collection = this.collectionCache.getCollection(PreBattleSpeechParametersEnum.KEY, PreBattleSpeechParametersEnum.Entry);
            return collection.find(entry => entry.key === this._parameter);
        }
    }
    PreBattleSpeeches.Entry = Entry;
})(PreBattleSpeeches || (PreBattleSpeeches = {}));

var ProjectilesSpinTypeEnum;
(function (ProjectilesSpinTypeEnum) {
    ProjectilesSpinTypeEnum.KEY = new CollectionKey("projectiles_spin_type_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    ProjectilesSpinTypeEnum.Entry = Entry;
})(ProjectilesSpinTypeEnum || (ProjectilesSpinTypeEnum = {}));

var ProjectileCategoryEnum;
(function (ProjectileCategoryEnum) {
    ProjectileCategoryEnum.KEY = new CollectionKey("projectile_category_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    ProjectileCategoryEnum.Entry = Entry;
})(ProjectileCategoryEnum || (ProjectileCategoryEnum = {}));

var ProjectileGunTypesEnum;
(function (ProjectileGunTypesEnum) {
    ProjectileGunTypesEnum.KEY = new CollectionKey("projectile_gun_types_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.gunType = values["gun_type"];
        }
    }
    ProjectileGunTypesEnum.Entry = Entry;
})(ProjectileGunTypesEnum || (ProjectileGunTypesEnum = {}));

var ProjectilePenetrationEnum;
(function (ProjectilePenetrationEnum) {
    ProjectilePenetrationEnum.KEY = new CollectionKey("projectile_penetration_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    ProjectilePenetrationEnum.Entry = Entry;
})(ProjectilePenetrationEnum || (ProjectilePenetrationEnum = {}));

var ProjectileTrajectorySightEnum;
(function (ProjectileTrajectorySightEnum) {
    ProjectileTrajectorySightEnum.KEY = new CollectionKey("projectile_trajectory_sight_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    ProjectileTrajectorySightEnum.Entry = Entry;
})(ProjectileTrajectorySightEnum || (ProjectileTrajectorySightEnum = {}));

var PrologueChapters;
(function (PrologueChapters) {
    PrologueChapters.KEY = new CollectionKey("prologue_chapters");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.number = values["number"];
            this.title = values["title"];
            this.description = values["description"];
            this.isBattle = !!values["is_battle"];
            this._battleKey = values["battle_key"];
            this._campaignKey = values["campaign_key"];
            this.subtitle = values["subtitle"];
            this.banner = values["banner"];
        }
        get battleKey() {
            const collection = this.collectionCache.getCollection(Battles.KEY, Battles.Entry);
            return collection.find(entry => entry.key === this._battleKey);
        }
        get campaignKey() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaignKey);
        }
    }
    PrologueChapters.Entry = Entry;
})(PrologueChapters || (PrologueChapters = {}));

var PrologueLoadingScreens;
(function (PrologueLoadingScreens) {
    PrologueLoadingScreens.KEY = new CollectionKey("prologue_loading_screens");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.index = values["index"];
            this.title = values["title"];
            this.mainText = values["main_text"];
            this.insetImage = values["inset_image"];
            this.backgroundImage = values["background_image"];
            this.paneOnLeft = !!values["pane_on_left"];
            this._campaign = values["campaign"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
    }
    PrologueLoadingScreens.Entry = Entry;
})(PrologueLoadingScreens || (PrologueLoadingScreens = {}));

var Provinces;
(function (Provinces) {
    Provinces.KEY = new CollectionKey("provinces");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreen = values["onscreen"];
        }
    }
    Provinces.Entry = Entry;
})(Provinces || (Provinces = {}));

var ProvinceToMercenarySetJunctions;
(function (ProvinceToMercenarySetJunctions) {
    ProvinceToMercenarySetJunctions.KEY = new CollectionKey("province_to_mercenary_set_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._province = values["province"];
            this._mercenarySet = values["mercenary_set"];
            this._optionalCampaignKey = values["optional_campaign_key"];
        }
        get province() {
            const collection = this.collectionCache.getCollection(Provinces.KEY, Provinces.Entry);
            return collection.find(entry => entry.key === this._province);
        }
        get mercenarySet() {
            const collection = this.collectionCache.getCollection(MercenaryPools.KEY, MercenaryPools.Entry);
            return collection.find(entry => entry.key === this._mercenarySet);
        }
        get optionalCampaignKey() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._optionalCampaignKey);
        }
    }
    ProvinceToMercenarySetJunctions.Entry = Entry;
})(ProvinceToMercenarySetJunctions || (ProvinceToMercenarySetJunctions = {}));

var ProvincialInitiativeRecords;
(function (ProvincialInitiativeRecords) {
    ProvincialInitiativeRecords.KEY = new CollectionKey("provincial_initiative_records");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.localisedName = values["localised_name"];
            this._effectBundle = values["effect_bundle"];
            this.order = values["order"];
            this.iconPath = values["icon_path"];
            this._campaignVfxId = values["campaign_vfx_id"];
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles.KEY, EffectBundles.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
        get campaignVfxId() {
            const collection = this.collectionCache.getCollection(CampaignVfxCampaignVfxEventIds.KEY, CampaignVfxCampaignVfxEventIds.Entry);
            return collection.find(entry => entry.campaignVfxEvent === this._campaignVfxId);
        }
    }
    ProvincialInitiativeRecords.Entry = Entry;
})(ProvincialInitiativeRecords || (ProvincialInitiativeRecords = {}));

var ProvincialInitiativesToSubcultureJunctions;
(function (ProvincialInitiativesToSubcultureJunctions) {
    ProvincialInitiativesToSubcultureJunctions.KEY = new CollectionKey("provincial_initiatives_to_subculture_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._provincialInitiativeKey = values["provincial_initiative_key"];
            this._subculture = values["subculture"];
        }
        get provincialInitiativeKey() {
            const collection = this.collectionCache.getCollection(ProvincialInitiativeRecords.KEY, ProvincialInitiativeRecords.Entry);
            return collection.find(entry => entry.key === this._provincialInitiativeKey);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
    }
    ProvincialInitiativesToSubcultureJunctions.Entry = Entry;
})(ProvincialInitiativesToSubcultureJunctions || (ProvincialInitiativesToSubcultureJunctions = {}));

var PublicOrderFactors;
(function (PublicOrderFactors) {
    PublicOrderFactors.KEY = new CollectionKey("public_order_factors");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.factor = values["factor"];
            this.positivePipPath = values["positive_pip_path"];
            this.positiveTooltip = values["positive_tooltip"];
            this.negativePipPath = values["negative_pip_path"];
            this.negativeTooltip = values["negative_tooltip"];
            this._optionalCampaignKey = values["optional_campaign_key"];
        }
        get optionalCampaignKey() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._optionalCampaignKey);
        }
    }
    PublicOrderFactors.Entry = Entry;
})(PublicOrderFactors || (PublicOrderFactors = {}));

var QuotesPeople;
(function (QuotesPeople) {
    QuotesPeople.KEY = new CollectionKey("quotes_people");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.quotePersonKey = values["quote_person_key"];
            this.quotePersonOnscreen = values["quote_person_onscreen"];
        }
    }
    QuotesPeople.Entry = Entry;
})(QuotesPeople || (QuotesPeople = {}));

var Quotes;
(function (Quotes) {
    Quotes.KEY = new CollectionKey("quotes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.quoteOnscreen = values["quote_onscreen"];
            this._quotePerson = values["quote_person"];
            this.key = values["key"];
        }
        get quotePerson() {
            const collection = this.collectionCache.getCollection(QuotesPeople.KEY, QuotesPeople.Entry);
            return collection.find(entry => entry.quotePersonKey === this._quotePerson);
        }
    }
    Quotes.Entry = Entry;
})(Quotes || (Quotes = {}));

var RandomLocalisationStrings;
(function (RandomLocalisationStrings) {
    RandomLocalisationStrings.KEY = new CollectionKey("random_localisation_strings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.string = values["string"];
        }
    }
    RandomLocalisationStrings.Entry = Entry;
})(RandomLocalisationStrings || (RandomLocalisationStrings = {}));

var RegionsContinents;
(function (RegionsContinents) {
    RegionsContinents.KEY = new CollectionKey("regions_continents");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.continent = values["continent"];
        }
    }
    RegionsContinents.Entry = Entry;
})(RegionsContinents || (RegionsContinents = {}));

var RegionsSea;
(function (RegionsSea) {
    RegionsSea.KEY = new CollectionKey("regions_sea");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.seaRegionKey = values["sea_region_key"];
            this.onscreenName = values["onscreen_name"];
        }
    }
    RegionsSea.Entry = Entry;
})(RegionsSea || (RegionsSea = {}));

var RegionsTitles;
(function (RegionsTitles) {
    RegionsTitles.KEY = new CollectionKey("regions_titles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._region = values["region"];
            this._government = values["government"];
            this._gender = values["gender"];
            this.title = values["title"];
        }
        get region() {
            const collection = this.collectionCache.getCollection(Regions.KEY, Regions.Entry);
            return collection.find(entry => entry.key === this._region);
        }
        get government() {
            const collection = this.collectionCache.getCollection(GovernmentTypes.KEY, GovernmentTypes.Entry);
            return collection.find(entry => entry.governmentType === this._government);
        }
        get gender() {
            const collection = this.collectionCache.getCollection(Genders.KEY, Genders.Entry);
            return collection.find(entry => entry.gender === this._gender);
        }
    }
    RegionsTitles.Entry = Entry;
})(RegionsTitles || (RegionsTitles = {}));

var RegionGroups;
(function (RegionGroups) {
    RegionGroups.KEY = new CollectionKey("region_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.groupKey = values["group_key"];
            this.localisedName = values["localised_name"];
            this.cameraPositionX = values["camera_position_x"];
            this.cameraPositionY = values["camera_position_y"];
            this.cameraZoom = values["camera_zoom"];
            this.cameraHeading = values["camera_heading"];
            this.round = values["round"];
        }
    }
    RegionGroups.Entry = Entry;
})(RegionGroups || (RegionGroups = {}));

var RegionsToRegionGroupsJunctions;
(function (RegionsToRegionGroupsJunctions) {
    RegionsToRegionGroupsJunctions.KEY = new CollectionKey("regions_to_region_groups_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._regionGroup = values["region_group"];
            this._region = values["region"];
        }
        get regionGroup() {
            const collection = this.collectionCache.getCollection(RegionGroups.KEY, RegionGroups.Entry);
            return collection.find(entry => entry.groupKey === this._regionGroup);
        }
        get region() {
            const collection = this.collectionCache.getCollection(Regions.KEY, Regions.Entry);
            return collection.find(entry => entry.key === this._region);
        }
    }
    RegionsToRegionGroupsJunctions.Entry = Entry;
})(RegionsToRegionGroupsJunctions || (RegionsToRegionGroupsJunctions = {}));

var RegionCampaignOverrides;
(function (RegionCampaignOverrides) {
    RegionCampaignOverrides.KEY = new CollectionKey("region_campaign_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._region = values["region"];
            this._campaign = values["campaign"];
            this._religion = values["religion"];
            this.religionZeal = values["religion_zeal"];
        }
        get region() {
            const collection = this.collectionCache.getCollection(Regions.KEY, Regions.Entry);
            return collection.find(entry => entry.key === this._region);
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
        get religion() {
            const collection = this.collectionCache.getCollection(Religions.KEY, Religions.Entry);
            return collection.find(entry => entry.religionKey === this._religion);
        }
    }
    RegionCampaignOverrides.Entry = Entry;
})(RegionCampaignOverrides || (RegionCampaignOverrides = {}));

var RegionEconomicsFactors;
(function (RegionEconomicsFactors) {
    RegionEconomicsFactors.KEY = new CollectionKey("region_economics_factors");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.factor = values["factor"];
            this.positivePipPath = values["positive_pip_path"];
            this.positiveTooltip = values["positive_tooltip"];
        }
    }
    RegionEconomicsFactors.Entry = Entry;
})(RegionEconomicsFactors || (RegionEconomicsFactors = {}));

var RegionReligions;
(function (RegionReligions) {
    RegionReligions.KEY = new CollectionKey("region_religions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._region = values["region"];
            this._religion = values["religion"];
            this.religionZeal = values["religion_zeal"];
        }
        get region() {
            const collection = this.collectionCache.getCollection(Regions.KEY, Regions.Entry);
            return collection.find(entry => entry.key === this._region);
        }
        get religion() {
            const collection = this.collectionCache.getCollection(Religions.KEY, Religions.Entry);
            return collection.find(entry => entry.religionKey === this._religion);
        }
    }
    RegionReligions.Entry = Entry;
})(RegionReligions || (RegionReligions = {}));

var RegionToProvinceJunctions;
(function (RegionToProvinceJunctions) {
    RegionToProvinceJunctions.KEY = new CollectionKey("region_to_province_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._region = values["region"];
            this._province = values["province"];
        }
        get region() {
            const collection = this.collectionCache.getCollection(Regions.KEY, Regions.Entry);
            return collection.find(entry => entry.key === this._region);
        }
        get province() {
            const collection = this.collectionCache.getCollection(Provinces.KEY, Provinces.Entry);
            return collection.find(entry => entry.key === this._province);
        }
    }
    RegionToProvinceJunctions.Entry = Entry;
})(RegionToProvinceJunctions || (RegionToProvinceJunctions = {}));

var ReligionConversionMods;
(function (ReligionConversionMods) {
    ReligionConversionMods.KEY = new CollectionKey("religion_conversion_mods");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._relFrom = values["rel_from"];
            this._relTo = values["rel_to"];
            this.modifier = values["modifier"];
        }
        get relFrom() {
            const collection = this.collectionCache.getCollection(Religions.KEY, Religions.Entry);
            return collection.find(entry => entry.religionKey === this._relFrom);
        }
    }
    ReligionConversionMods.Entry = Entry;
})(ReligionConversionMods || (ReligionConversionMods = {}));

var ResourceEffects;
(function (ResourceEffects) {
    ResourceEffects.KEY = new CollectionKey("resource_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._resourceKey = values["resource_key"];
            this._effectKey = values["effect_key"];
            this.value = values["value"];
        }
        get resourceKey() {
            const collection = this.collectionCache.getCollection(Resources.KEY, Resources.Entry);
            return collection.find(entry => entry.key === this._resourceKey);
        }
    }
    ResourceEffects.Entry = Entry;
})(ResourceEffects || (ResourceEffects = {}));

var ScriptedObjectives;
(function (ScriptedObjectives) {
    ScriptedObjectives.KEY = new CollectionKey("scripted_objectives");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.localisedText = values["localised_text"];
        }
    }
    ScriptedObjectives.Entry = Entry;
})(ScriptedObjectives || (ScriptedObjectives = {}));

var ScriptedSubtitles;
(function (ScriptedSubtitles) {
    ScriptedSubtitles.KEY = new CollectionKey("scripted_subtitles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.localisedText = values["localised_text"];
            this.characterForVo = values["character_for_vo"];
        }
    }
    ScriptedSubtitles.Entry = Entry;
})(ScriptedSubtitles || (ScriptedSubtitles = {}));

var SeasonAttritions;
(function (SeasonAttritions) {
    SeasonAttritions.KEY = new CollectionKey("season_attritions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._season = values["season"];
            this._attritionType = values["attrition_type"];
            this.enable = !!values["enable"];
            this._campaign = values["campaign"];
        }
        get season() {
            const collection = this.collectionCache.getCollection(Seasons.KEY, Seasons.Entry);
            return collection.find(entry => entry.season === this._season);
        }
        get attritionType() {
            const collection = this.collectionCache.getCollection(CampaignMapAttritions.KEY, CampaignMapAttritions.Entry);
            return collection.find(entry => entry.key === this._attritionType);
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
    }
    SeasonAttritions.Entry = Entry;
})(SeasonAttritions || (SeasonAttritions = {}));

var SeasonProvinceEffectBundles;
(function (SeasonProvinceEffectBundles) {
    SeasonProvinceEffectBundles.KEY = new CollectionKey("season_province_effect_bundles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._season = values["season"];
            this._province = values["province"];
            this._effectBundle = values["effect_bundle"];
            this.weighting = values["weighting"];
            this.default = !!values["default"];
        }
        get season() {
            const collection = this.collectionCache.getCollection(Seasons.KEY, Seasons.Entry);
            return collection.find(entry => entry.season === this._season);
        }
        get province() {
            const collection = this.collectionCache.getCollection(Provinces.KEY, Provinces.Entry);
            return collection.find(entry => entry.key === this._province);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles.KEY, EffectBundles.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    SeasonProvinceEffectBundles.Entry = Entry;
})(SeasonProvinceEffectBundles || (SeasonProvinceEffectBundles = {}));

var SeaClimateDetails;
(function (SeaClimateDetails) {
    SeaClimateDetails.KEY = new CollectionKey("sea_climate_details");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this.seaDeepColour = values["sea_deep_colour"];
            this.seaShallowColour = values["sea_shallow_colour"];
            this.sunColour = values["sun_colour"];
            this.skyColour = values["sky_colour"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(Climates.KEY, Climates.Entry);
            return collection.find(entry => entry.climateType === this._key);
        }
    }
    SeaClimateDetails.Entry = Entry;
})(SeaClimateDetails || (SeaClimateDetails = {}));

var SeaSurfaces;
(function (SeaSurfaces) {
    SeaSurfaces.KEY = new CollectionKey("sea_surfaces");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.seaWindSpeed = values["sea_wind_speed"];
            this.seaPhillipsConstant = values["sea_phillips_constant"];
            this.seaChoppiness = values["sea_choppiness"];
            this.swellWindSpeed = values["swell_wind_speed"];
            this.swellPhillipsConstant = values["swell_phillips_constant"];
            this.foamEnabled = !!values["foam_enabled"];
            this.foamDecayRate = values["foam_decay_rate"];
            this.foamFadeInTime = values["foam_fade_in_time"];
            this.foamCutOffValue = values["foam_cut_off_value"];
            this.frothValue = values["froth_value"];
            this.frothDistortionSpeed = values["froth_distortion_speed"];
            this.frothDistortionAmount = values["froth_distortion_amount"];
            this.sprayCutOffValue = values["spray_cut_off_value"];
            this.spraySpeed = values["spray_speed"];
            this.sprayDuration = values["spray_duration"];
            this.seaShininess = values["sea_shininess"];
            this.seaDecay = values["sea_decay"];
            this.reflectionFlatteningFactor = values["reflection_flattening_factor"];
            this.waveTroughYValue = values["wave_trough_y_value"];
            this.detailNormalUvScale1 = values["detail_normal_uv_scale1"];
            this.detailNormalUvSpeed1 = values["detail_normal_uv_speed1"];
            this.detailNormalUvScale2 = values["detail_normal_uv_scale2"];
            this.detailNormalUvSpeed2 = values["detail_normal_uv_speed2"];
        }
    }
    SeaSurfaces.Entry = Entry;
})(SeaSurfaces || (SeaSurfaces = {}));

var SendDiplomatOutcomes;
(function (SendDiplomatOutcomes) {
    SendDiplomatOutcomes.KEY = new CollectionKey("send_diplomat_outcomes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    SendDiplomatOutcomes.Entry = Entry;
})(SendDiplomatOutcomes || (SendDiplomatOutcomes = {}));

var SendDiplomatIncidents;
(function (SendDiplomatIncidents) {
    SendDiplomatIncidents.KEY = new CollectionKey("send_diplomat_incidents");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._outcome = values["outcome"];
            this._culture = values["culture"];
            this._incident = values["incident"];
            this.weight = values["weight"];
        }
        get outcome() {
            const collection = this.collectionCache.getCollection(SendDiplomatOutcomes.KEY, SendDiplomatOutcomes.Entry);
            return collection.find(entry => entry.key === this._outcome);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get incident() {
            const collection = this.collectionCache.getCollection(Incidents.KEY, Incidents.Entry);
            return collection.find(entry => entry.key === this._incident);
        }
    }
    SendDiplomatIncidents.Entry = Entry;
})(SendDiplomatIncidents || (SendDiplomatIncidents = {}));

var ShipNames;
(function (ShipNames) {
    ShipNames.KEY = new CollectionKey("ship_names");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this._nameGroup = values["name_group"];
            this.shipName = values["Ship_Name"];
            this._exclusiveToFaction = values["exclusive_to_faction"];
        }
        get nameGroup() {
            const collection = this.collectionCache.getCollection(NamesGroups.KEY, NamesGroups.Entry);
            return collection.find(entry => entry.key === this._nameGroup);
        }
        get exclusiveToFaction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._exclusiveToFaction);
        }
    }
    ShipNames.Entry = Entry;
})(ShipNames || (ShipNames = {}));

var ShortcutLocalisation;
(function (ShortcutLocalisation) {
    ShortcutLocalisation.KEY = new CollectionKey("shortcut_localisation");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreen = values["onscreen"];
            this.toolitp = values["toolitp"];
        }
    }
    ShortcutLocalisation.Entry = Entry;
})(ShortcutLocalisation || (ShortcutLocalisation = {}));

var Skeletons;
(function (Skeletons) {
    Skeletons.KEY = new CollectionKey("skeletons");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    Skeletons.Entry = Entry;
})(Skeletons || (Skeletons = {}));

var SlotsTemplatesModels;
(function (SlotsTemplatesModels) {
    SlotsTemplatesModels.KEY = new CollectionKey("slots_templates_models");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.templateName = values["template_name"];
            this.modelFilename = values["model_filename"];
            this.modelFilepath = values["model_filepath"];
        }
    }
    SlotsTemplatesModels.Entry = Entry;
})(SlotsTemplatesModels || (SlotsTemplatesModels = {}));

var SlotsArt;
(function (SlotsArt) {
    SlotsArt.KEY = new CollectionKey("slots_art");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._slot = values["slot"];
            this._culture = values["culture"];
            this._underlayTerrainTexture = values["underlay_terrain_texture"];
            this.underlayRotation = values["underlay_rotation"];
            this.underlayScale = values["underlay_scale"];
            this.underlayDiffersWithBuilding = !!values["underlay_differs_with_building"];
            this._templateModel = values["template_model"];
            this.templateDiffersAtQualityZero = !!values["template_differs_at_quality_zero"];
            this._templateModelArtQualityZero = values["template_model_art_quality_zero"];
            this.useMinibuildings = !!values["use_minibuildings"];
            this.minibuildingsDifferAtQuality = !!values["minibuildings_differ_at_quality"];
            this.useMinibuildingsFromQuality = values["use_minibuildings_from_quality"];
            this._emptyBuildingModel = values["empty_building_model"];
            this._emptyBuildingModelAnimated = values["empty_building_model_animated"];
            this.displayEmptyBldgFromQuality = values["display_empty_bldg_from_quality"];
        }
        get slot() {
            const collection = this.collectionCache.getCollection(Slots.KEY, Slots.Entry);
            return collection.find(entry => entry.slot === this._slot);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get underlayTerrainTexture() {
            const collection = this.collectionCache.getCollection(WarscapeUnderlayTextures.KEY, WarscapeUnderlayTextures.Entry);
            return collection.find(entry => entry.underlayKey === this._underlayTerrainTexture);
        }
        get templateModel() {
            const collection = this.collectionCache.getCollection(SlotsTemplatesModels.KEY, SlotsTemplatesModels.Entry);
            return collection.find(entry => entry.templateName === this._templateModel);
        }
        get emptyBuildingModel() {
            const collection = this.collectionCache.getCollection(WarscapeRigid.KEY, WarscapeRigid.Entry);
            return collection.find(entry => entry.key === this._emptyBuildingModel);
        }
        get emptyBuildingModelAnimated() {
            const collection = this.collectionCache.getCollection(WarscapeAnimated.KEY, WarscapeAnimated.Entry);
            return collection.find(entry => entry.key === this._emptyBuildingModelAnimated);
        }
    }
    SlotsArt.Entry = Entry;
})(SlotsArt || (SlotsArt = {}));

var SlotsGdpValues;
(function (SlotsGdpValues) {
    SlotsGdpValues.KEY = new CollectionKey("slots_gdp_values");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._slot = values["slot"];
            this.level = values["level"];
            this.gdpValue = values["gdp_value"];
            this.buildingGdpModifier = values["building_gdp_modifier"];
            this.onscreenName = values["onscreen_name"];
        }
        get slot() {
            const collection = this.collectionCache.getCollection(Slots.KEY, Slots.Entry);
            return collection.find(entry => entry.slot === this._slot);
        }
    }
    SlotsGdpValues.Entry = Entry;
})(SlotsGdpValues || (SlotsGdpValues = {}));

var SlotTemplates;
(function (SlotTemplates) {
    SlotTemplates.KEY = new CollectionKey("slot_templates");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    SlotTemplates.Entry = Entry;
})(SlotTemplates || (SlotTemplates = {}));

var SlotTemplateToBuildingSuperchainJunctions;
(function (SlotTemplateToBuildingSuperchainJunctions) {
    SlotTemplateToBuildingSuperchainJunctions.KEY = new CollectionKey("slot_template_to_building_superchain_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._slotTemplate = values["slot_template"];
            this._buildingSuperchain = values["building_superchain"];
        }
        get slotTemplate() {
            const collection = this.collectionCache.getCollection(SlotTemplates.KEY, SlotTemplates.Entry);
            return collection.find(entry => entry.key === this._slotTemplate);
        }
        get buildingSuperchain() {
            const collection = this.collectionCache.getCollection(BuildingSuperchains.KEY, BuildingSuperchains.Entry);
            return collection.find(entry => entry.key === this._buildingSuperchain);
        }
    }
    SlotTemplateToBuildingSuperchainJunctions.Entry = Entry;
})(SlotTemplateToBuildingSuperchainJunctions || (SlotTemplateToBuildingSuperchainJunctions = {}));

var SlotTypes;
(function (SlotTypes) {
    SlotTypes.KEY = new CollectionKey("slot_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.canDestroy = !!values["can_destroy"];
            this.canConvert = !!values["can_convert"];
        }
    }
    SlotTypes.Entry = Entry;
})(SlotTypes || (SlotTypes = {}));

var SmallVegetationClimatesJct;
(function (SmallVegetationClimatesJct) {
    SmallVegetationClimatesJct.KEY = new CollectionKey("small_vegetation_climates_jct");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._climate = values["climate"];
            this._rigidName = values["rigid_name"];
        }
        get climate() {
            const collection = this.collectionCache.getCollection(Climates.KEY, Climates.Entry);
            return collection.find(entry => entry.climateType === this._climate);
        }
        get rigidName() {
            const collection = this.collectionCache.getCollection(WarscapeRigid.KEY, WarscapeRigid.Entry);
            return collection.find(entry => entry.key === this._rigidName);
        }
    }
    SmallVegetationClimatesJct.Entry = Entry;
})(SmallVegetationClimatesJct || (SmallVegetationClimatesJct = {}));

var Sounds;
(function (Sounds) {
    Sounds.KEY = new CollectionKey("sounds");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.sampleName = values["sample_name"];
            this.looped = !!values["looped"];
            this.ignorePause = !!values["ignore_pause"];
            this.prefType = values["pref_type"];
            this.priority = values["priority"];
            this.volume = values["volume"];
            this.probability = values["probability"];
            this.minPitch = values["min_pitch"];
            this.maxPitch = values["max_pitch"];
            this.fadeIn = values["fade_in"];
            this.fadeOut = values["fade_out"];
            this.startDelay = values["start_delay"];
            this.triggerDelay = values["trigger_delay"];
            this.randVolume = values["rand_volume"];
            this.is3D = !!values["is_3d"];
            this.minDist = values["min_dist"];
            this.maxDist = values["max_dist"];
            this.distancePriority = values["distance_priority"];
            this.probabilityRadius = values["probability_radius"];
            this.effectLevel = values["effect_level"];
            this.streamed = !!values["streamed"];
            this.pan = values["pan"];
            this.dryLevel = values["dry_level"];
            this.wetLevel = values["wet_level"];
        }
    }
    Sounds.Entry = Entry;
})(Sounds || (Sounds = {}));

var SoundEvents;
(function (SoundEvents) {
    SoundEvents.KEY = new CollectionKey("sound_events");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
        }
    }
    SoundEvents.Entry = Entry;
})(SoundEvents || (SoundEvents = {}));

var SoundEventNames;
(function (SoundEventNames) {
    SoundEventNames.KEY = new CollectionKey("sound_event_names");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["Name"];
        }
    }
    SoundEventNames.Entry = Entry;
})(SoundEventNames || (SoundEventNames = {}));

var SoundTypes;
(function (SoundTypes) {
    SoundTypes.KEY = new CollectionKey("sound_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.description = values["description"];
        }
    }
    SoundTypes.Entry = Entry;
})(SoundTypes || (SoundTypes = {}));

var SpecialAbilitiesSpecificBehaviourTypes;
(function (SpecialAbilitiesSpecificBehaviourTypes) {
    SpecialAbilitiesSpecificBehaviourTypes.KEY = new CollectionKey("special_abilities_specific_behaviour_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    SpecialAbilitiesSpecificBehaviourTypes.Entry = Entry;
})(SpecialAbilitiesSpecificBehaviourTypes || (SpecialAbilitiesSpecificBehaviourTypes = {}));

var SpecialAbilityGroups;
(function (SpecialAbilityGroups) {
    SpecialAbilityGroups.KEY = new CollectionKey("special_ability_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.abilityGroup = values["ability_group"];
            this.tooltip = values["tooltip"];
            this.iconPath = values["icon_path"];
            this.name = values["name"];
            this.specialEditionMask = values["special_edition_mask"];
        }
    }
    SpecialAbilityGroups.Entry = Entry;
})(SpecialAbilityGroups || (SpecialAbilityGroups = {}));

var SpecialAbilityGroupsToFactionsJunctions;
(function (SpecialAbilityGroupsToFactionsJunctions) {
    SpecialAbilityGroupsToFactionsJunctions.KEY = new CollectionKey("special_ability_groups_to_factions_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._abilityGroup = values["ability_group"];
            this._faction = values["faction"];
        }
        get abilityGroup() {
            const collection = this.collectionCache.getCollection(SpecialAbilityGroups.KEY, SpecialAbilityGroups.Entry);
            return collection.find(entry => entry.abilityGroup === this._abilityGroup);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    SpecialAbilityGroupsToFactionsJunctions.Entry = Entry;
})(SpecialAbilityGroupsToFactionsJunctions || (SpecialAbilityGroupsToFactionsJunctions = {}));

var UnitSpecialAbilities;
(function (UnitSpecialAbilities) {
    UnitSpecialAbilities.KEY = new CollectionKey("unit_special_abilities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this.numUses = values["num_uses"];
            this.activeTime = values["active_time"];
            this.rechargeTime = values["recharge_time"];
            this.initialRecharge = values["initial_recharge"];
            this.windUpTime = values["wind_up_time"];
            this.passive = !!values["passive"];
            this.effectRange = values["effect_range"];
            this.affectSelf = !!values["affect_self"];
            this.numEffectedFriendlyUnits = values["num_effected_friendly_units"];
            this.numEffectedEnemyUnits = values["num_effected_enemy_units"];
            this.updateTargetsEveryFrame = !!values["update_targets_every_frame"];
            this._activatedProjectile = values["activated_projectile"];
            this.canAutotrigger = !!values["can_autotrigger"];
            this.targetFriends = !!values["target_friends"];
            this.targetEnemies = !!values["target_enemies"];
            this.targetGround = !!values["target_ground"];
            this.targetInterceptRange = values["target_intercept_range"];
            this._assumeSpecificBehaviour = values["assume_specific_behaviour"];
            this.clearCurrentOrder = !!values["clear_current_order"];
            this.uniqueId = values["unique_id"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(UnitAbilities.KEY, UnitAbilities.Entry);
            return collection.find(entry => entry.key === this._key);
        }
        get activatedProjectile() {
            const collection = this.collectionCache.getCollection(Projectiles.KEY, Projectiles.Entry);
            return collection.find(entry => entry.key === this._activatedProjectile);
        }
        get assumeSpecificBehaviour() {
            const collection = this.collectionCache.getCollection(SpecialAbilitiesSpecificBehaviourTypes.KEY, SpecialAbilitiesSpecificBehaviourTypes.Entry);
            return collection.find(entry => entry.key === this._assumeSpecificBehaviour);
        }
    }
    UnitSpecialAbilities.Entry = Entry;
})(UnitSpecialAbilities || (UnitSpecialAbilities = {}));

var SpecialAbilityGroupsToUnitAbilitiesJunctions;
(function (SpecialAbilityGroupsToUnitAbilitiesJunctions) {
    SpecialAbilityGroupsToUnitAbilitiesJunctions.KEY = new CollectionKey("special_ability_groups_to_unit_abilities_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._specialAbilityGroups = values["special_ability_groups"];
            this._unitSpecialAbilities = values["unit_special_abilities"];
        }
        get specialAbilityGroups() {
            const collection = this.collectionCache.getCollection(SpecialAbilityGroups.KEY, SpecialAbilityGroups.Entry);
            return collection.find(entry => entry.abilityGroup === this._specialAbilityGroups);
        }
        get unitSpecialAbilities() {
            const collection = this.collectionCache.getCollection(UnitSpecialAbilities.KEY, UnitSpecialAbilities.Entry);
            return collection.find(entry => entry._key === this._unitSpecialAbilities);
        }
    }
    SpecialAbilityGroupsToUnitAbilitiesJunctions.Entry = Entry;
})(SpecialAbilityGroupsToUnitAbilitiesJunctions || (SpecialAbilityGroupsToUnitAbilitiesJunctions = {}));

var SpecialAbilityInvalidUsageFlags;
(function (SpecialAbilityInvalidUsageFlags) {
    SpecialAbilityInvalidUsageFlags.KEY = new CollectionKey("special_ability_invalid_usage_flags");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.flagKey = values["flag_key"];
        }
    }
    SpecialAbilityInvalidUsageFlags.Entry = Entry;
})(SpecialAbilityInvalidUsageFlags || (SpecialAbilityInvalidUsageFlags = {}));

var SpecialAbilityPhaseAttributeEffects;
(function (SpecialAbilityPhaseAttributeEffects) {
    SpecialAbilityPhaseAttributeEffects.KEY = new CollectionKey("special_ability_phase_attribute_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._phase = values["phase"];
            this._attribute = values["attribute"];
        }
        get phase() {
            const collection = this.collectionCache.getCollection(SpecialAbilityPhases.KEY, SpecialAbilityPhases.Entry);
            return collection.find(entry => entry.id === this._phase);
        }
        get attribute() {
            const collection = this.collectionCache.getCollection(UnitAttributes.KEY, UnitAttributes.Entry);
            return collection.find(entry => entry.key === this._attribute);
        }
    }
    SpecialAbilityPhaseAttributeEffects.Entry = Entry;
})(SpecialAbilityPhaseAttributeEffects || (SpecialAbilityPhaseAttributeEffects = {}));

var SpecialAbilityPhaseStatEffects;
(function (SpecialAbilityPhaseStatEffects) {
    SpecialAbilityPhaseStatEffects.KEY = new CollectionKey("special_ability_phase_stat_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._phase = values["phase"];
            this.value = values["value"];
            this._stat = values["stat"];
            this._how = values["how"];
        }
        get phase() {
            const collection = this.collectionCache.getCollection(SpecialAbilityPhases.KEY, SpecialAbilityPhases.Entry);
            return collection.find(entry => entry.id === this._phase);
        }
        get stat() {
            const collection = this.collectionCache.getCollection(UiUnitStats.KEY, UiUnitStats.Entry);
            return collection.find(entry => entry.key === this._stat);
        }
        get how() {
            const collection = this.collectionCache.getCollection(UnitStatModifiersHowEnums.KEY, UnitStatModifiersHowEnums.Entry);
            return collection.find(entry => entry.key === this._how);
        }
    }
    SpecialAbilityPhaseStatEffects.Entry = Entry;
})(SpecialAbilityPhaseStatEffects || (SpecialAbilityPhaseStatEffects = {}));

var SpecialAbilityPhaseToUnitSpecialAbilityEffectJunctions;
(function (SpecialAbilityPhaseToUnitSpecialAbilityEffectJunctions) {
    SpecialAbilityPhaseToUnitSpecialAbilityEffectJunctions.KEY = new CollectionKey("special_ability_phase_to_unit_special_ability_effect_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._phase = values["phase"];
            this._specialAbilityEffect = values["special_ability_effect"];
        }
    }
    SpecialAbilityPhaseToUnitSpecialAbilityEffectJunctions.Entry = Entry;
})(SpecialAbilityPhaseToUnitSpecialAbilityEffectJunctions || (SpecialAbilityPhaseToUnitSpecialAbilityEffectJunctions = {}));

var SpecialAbilityToAutoDeactivateFlags;
(function (SpecialAbilityToAutoDeactivateFlags) {
    SpecialAbilityToAutoDeactivateFlags.KEY = new CollectionKey("special_ability_to_auto_deactivate_flags");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._invalidUsageFlag = values["invalid_usage_flag"];
            this._specialAbilityKey = values["special_ability_key"];
        }
        get invalidUsageFlag() {
            const collection = this.collectionCache.getCollection(SpecialAbilityInvalidUsageFlags.KEY, SpecialAbilityInvalidUsageFlags.Entry);
            return collection.find(entry => entry.flagKey === this._invalidUsageFlag);
        }
        get specialAbilityKey() {
            const collection = this.collectionCache.getCollection(UnitSpecialAbilities.KEY, UnitSpecialAbilities.Entry);
            return collection.find(entry => entry._key === this._specialAbilityKey);
        }
    }
    SpecialAbilityToAutoDeactivateFlags.Entry = Entry;
})(SpecialAbilityToAutoDeactivateFlags || (SpecialAbilityToAutoDeactivateFlags = {}));

var SpecialAbilityToInvalidUsageFlags;
(function (SpecialAbilityToInvalidUsageFlags) {
    SpecialAbilityToInvalidUsageFlags.KEY = new CollectionKey("special_ability_to_invalid_usage_flags");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._specialAbility = values["special_ability"];
            this._invalidUsageFlag = values["invalid_usage_flag"];
        }
        get specialAbility() {
            const collection = this.collectionCache.getCollection(UnitSpecialAbilities.KEY, UnitSpecialAbilities.Entry);
            return collection.find(entry => entry._key === this._specialAbility);
        }
        get invalidUsageFlag() {
            const collection = this.collectionCache.getCollection(SpecialAbilityInvalidUsageFlags.KEY, SpecialAbilityInvalidUsageFlags.Entry);
            return collection.find(entry => entry.flagKey === this._invalidUsageFlag);
        }
    }
    SpecialAbilityToInvalidUsageFlags.Entry = Entry;
})(SpecialAbilityToInvalidUsageFlags || (SpecialAbilityToInvalidUsageFlags = {}));

var SpecialAbilityToSpecialAbilityPhaseJunctions;
(function (SpecialAbilityToSpecialAbilityPhaseJunctions) {
    SpecialAbilityToSpecialAbilityPhaseJunctions.KEY = new CollectionKey("special_ability_to_special_ability_phase_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._specialAbility = values["special_ability"];
            this._phase = values["phase"];
            this.order = values["order"];
        }
        get specialAbility() {
            const collection = this.collectionCache.getCollection(UnitSpecialAbilities.KEY, UnitSpecialAbilities.Entry);
            return collection.find(entry => entry._key === this._specialAbility);
        }
        get phase() {
            const collection = this.collectionCache.getCollection(SpecialAbilityPhases.KEY, SpecialAbilityPhases.Entry);
            return collection.find(entry => entry.id === this._phase);
        }
    }
    SpecialAbilityToSpecialAbilityPhaseJunctions.Entry = Entry;
})(SpecialAbilityToSpecialAbilityPhaseJunctions || (SpecialAbilityToSpecialAbilityPhaseJunctions = {}));

var Stances;
(function (Stances) {
    Stances.KEY = new CollectionKey("stances");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreen = values["onscreen"];
        }
    }
    Stances.Entry = Entry;
})(Stances || (Stances = {}));

var StartPosCalendars;
(function (StartPosCalendars) {
    StartPosCalendars.KEY = new CollectionKey("start_pos_calendars");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaign = values["campaign"];
            this.startYear = values["start_year"];
            this._startSeason = values["start_season"];
            this.turnsPerYear = values["turns_per_year"];
            this.startWeekOfYear = values["start_week_of_year"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
        get startSeason() {
            const collection = this.collectionCache.getCollection(Seasons.KEY, Seasons.Entry);
            return collection.find(entry => entry.season === this._startSeason);
        }
    }
    StartPosCalendars.Entry = Entry;
})(StartPosCalendars || (StartPosCalendars = {}));

var StartPosFactions;
(function (StartPosFactions) {
    StartPosFactions.KEY = new CollectionKey("start_pos_factions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["ID"];
            this._faction = values["faction"];
            this._campaign = values["campaign"];
            this.playable = !!values["playable"];
            this.treasury = values["treasury"];
            this.startingOrder = values["starting_order"];
            this._governmentType = values["government_type"];
            this._stateReligion = values["state_religion"];
            this.isMajor = !!values["is_major"];
            this.description = values["description"];
            this.difficulty = values["difficulty"];
            this._aiManager = values["ai_manager"];
            this._aiPersonality = values["ai_personality"];
            this.longVictoryRegionCount = values["long_victory_region_count"];
            this.shortVictoryRegionCount = values["short_victory_region_count"];
            this.prestigeVictoryRegionCount = values["prestige_victory_region_count"];
            this.worldDominationVictoryRegionCount = values["world_domination_victory_region_count"];
            this.shortVictoryYearEnd = values["short_victory_year_end"];
            this.longVictoryYearEnd = values["long_victory_year_end"];
            this.prestigeVictoryYearEnd = values["prestige_victory_year_end"];
            this.worldDominationVictoryYearEnd = values["world_domination_victory_year_end"];
            this.prestigeArmy = values["prestige_army"];
            this.prestigeNavy = values["prestige_navy"];
            this.prestigeEconomy = values["prestige_economy"];
            this.prestigeEnlightenment = values["prestige_enlightenment"];
            this.shortVictoryWeekInYearEnd = values["short_victory_week_in_year_end"];
            this.longVictoryWeekInYearEnd = values["long_victory_week_in_year_end"];
            this.prestigeVictoryWeekInYearEnd = values["prestige_victory_week_in_year_end"];
            this.worldDominationVictoryWeekInYearEnd = values["world_domination_victory_week_in_year_end"];
            this.honour = values["honour"];
            this._aiTechnologyManager = values["ai_technology_manager"];
            this._aiCharacterSkillTreeManager = values["ai_character_skill_tree_manager"];
            this._caiAgentDistributionProfile = values["cai_agent_distribution_profile"];
            this._caiAgentRecruitmentProfile = values["cai_agent_recruitment_profile"];
            this._caiStartingPersonality = values["cai_starting_personality"];
            this.mpOneVsOneRegionCount = values["mp_one_vs_one_region_count"];
            this.mp2PCoOpRegionCount = values["mp_2p_co_op_region_count"];
            this.mp2PCoOpRegionCountLong = values["mp_2p_co_op_region_count_long"];
            this.longDescription = values["long_description"];
            this.canEverConvertReligion = !!values["can_ever_convert_religion"];
            this._cdirMilitaryGeneratorConfig = values["cdir_military_generator_config"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(StartPosCalendars.KEY, StartPosCalendars.Entry);
            return collection.find(entry => entry._campaign === this._campaign);
        }
        get governmentType() {
            const collection = this.collectionCache.getCollection(GovernmentTypes.KEY, GovernmentTypes.Entry);
            return collection.find(entry => entry.governmentType === this._governmentType);
        }
        get stateReligion() {
            const collection = this.collectionCache.getCollection(Religions.KEY, Religions.Entry);
            return collection.find(entry => entry.religionKey === this._stateReligion);
        }
        get aiManager() {
            const collection = this.collectionCache.getCollection(CampaignAiManagers.KEY, CampaignAiManagers.Entry);
            return collection.find(entry => entry.manager === this._aiManager);
        }
        get aiPersonality() {
            const collection = this.collectionCache.getCollection(CampaignAiPersonalities.KEY, CampaignAiPersonalities.Entry);
            return collection.find(entry => entry.personality === this._aiPersonality);
        }
        get aiCharacterSkillTreeManager() {
            const collection = this.collectionCache.getCollection(CampaignAiCharacterSkillTreeManagers.KEY, CampaignAiCharacterSkillTreeManagers.Entry);
            return collection.find(entry => entry.key === this._aiCharacterSkillTreeManager);
        }
        get caiAgentDistributionProfile() {
            const collection = this.collectionCache.getCollection(CaiAgentDistributionProfiles.KEY, CaiAgentDistributionProfiles.Entry);
            return collection.find(entry => entry.key === this._caiAgentDistributionProfile);
        }
        get caiAgentRecruitmentProfile() {
            const collection = this.collectionCache.getCollection(CaiAgentRecruitmentProfiles.KEY, CaiAgentRecruitmentProfiles.Entry);
            return collection.find(entry => entry.key === this._caiAgentRecruitmentProfile);
        }
        get cdirMilitaryGeneratorConfig() {
            const collection = this.collectionCache.getCollection(CdirMilitaryGeneratorConfigs.KEY, CdirMilitaryGeneratorConfigs.Entry);
            return collection.find(entry => entry.key === this._cdirMilitaryGeneratorConfig);
        }
    }
    StartPosFactions.Entry = Entry;
})(StartPosFactions || (StartPosFactions = {}));

var StartPosCharacters;
(function (StartPosCharacters) {
    StartPosCharacters.KEY = new CollectionKey("start_pos_characters");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["ID"];
            this._faction = values["faction"];
            this._name = values["Name"];
            this._surname = values["Surname"];
            this.age = values["Age"];
            this._type = values["Type"];
            this.startx = values["startx"];
            this.starty = values["starty"];
            this._ministerialPosition = values["ministerial_position"];
            this._portraitId = values["portrait_id"];
            this.model = values["model"];
            this.immortal = !!values["immortal"];
            this._overrideGeneralUnit = values["override_general_unit"];
            this.isInGeneralsPool = !!values["is_in_generals_pool"];
            this.isMale = !!values["is_male"];
            this.loyalty = values["loyalty"];
            this._clanName = values["clan_name"];
            this._otherName = values["other_name"];
            this.ambition = values["ambition"];
            this._politicalParty = values["political_party"];
            this._deathType = values["death_type"];
            this.turnsDiedBeforeStart = values["turns_died_before_start"];
            this.legacyOverride = values["legacy_override"];
            this.progenitor = !!values["progenitor"];
            this.xp = values["xp"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(StartPosFactions.KEY, StartPosFactions.Entry);
            return collection.find(entry => entry.id === this._faction);
        }
        get name() {
            const collection = this.collectionCache.getCollection(Names.KEY, Names.Entry);
            return collection.find(entry => entry.id === this._name);
        }
        get surname() {
            const collection = this.collectionCache.getCollection(Names.KEY, Names.Entry);
            return collection.find(entry => entry.id === this._surname);
        }
        get type() {
            const collection = this.collectionCache.getCollection(Agents.KEY, Agents.Entry);
            return collection.find(entry => entry.key === this._type);
        }
        get ministerialPosition() {
            const collection = this.collectionCache.getCollection(MinisterialPositions.KEY, MinisterialPositions.Entry);
            return collection.find(entry => entry.ministerKey === this._ministerialPosition);
        }
        get portraitId() {
            const collection = this.collectionCache.getCollection(CampaignCharacterArtSets.KEY, CampaignCharacterArtSets.Entry);
            return collection.find(entry => entry.artSetId === this._portraitId);
        }
        get overrideGeneralUnit() {
            const collection = this.collectionCache.getCollection(MainUnits.KEY, MainUnits.Entry);
            return collection.find(entry => entry.unit === this._overrideGeneralUnit);
        }
        get clanName() {
            const collection = this.collectionCache.getCollection(Names.KEY, Names.Entry);
            return collection.find(entry => entry.id === this._clanName);
        }
        get otherName() {
            const collection = this.collectionCache.getCollection(Names.KEY, Names.Entry);
            return collection.find(entry => entry.id === this._otherName);
        }
        get politicalParty() {
            const collection = this.collectionCache.getCollection(PoliticalParties.KEY, PoliticalParties.Entry);
            return collection.find(entry => entry.key === this._politicalParty);
        }
        get deathType() {
            const collection = this.collectionCache.getCollection(DeathTypes.KEY, DeathTypes.Entry);
            return collection.find(entry => entry.key === this._deathType);
        }
    }
    StartPosCharacters.Entry = Entry;
})(StartPosCharacters || (StartPosCharacters = {}));

var StartPosCharacterAncillaries;
(function (StartPosCharacterAncillaries) {
    StartPosCharacterAncillaries.KEY = new CollectionKey("start_pos_character_ancillaries");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._characterId = values["character_id"];
            this._ancillary = values["ancillary"];
        }
        get characterId() {
            const collection = this.collectionCache.getCollection(StartPosCharacters.KEY, StartPosCharacters.Entry);
            return collection.find(entry => entry.id === this._characterId);
        }
        get ancillary() {
            const collection = this.collectionCache.getCollection(AncillaryInfo.KEY, AncillaryInfo.Entry);
            return collection.find(entry => entry.ancillary === this._ancillary);
        }
    }
    StartPosCharacterAncillaries.Entry = Entry;
})(StartPosCharacterAncillaries || (StartPosCharacterAncillaries = {}));

var StartPosRegions;
(function (StartPosRegions) {
    StartPosRegions.KEY = new CollectionKey("start_pos_regions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._region = values["region"];
            this._campaign = values["campaign"];
            this._owningFaction = values["owning_faction"];
            this.factionCapital = !!values["faction_capital"];
            this.basePopulation = values["base_population"];
            this.baseMaxPopulation = values["base_max_population"];
            this.population = values["population"];
            this.baseGdp = values["base_gdp"];
            this.roadUpgrades = values["road_upgrades"];
            this.canals = !!values["canals"];
            this.railways = !!values["railways"];
            this.townWealth = values["town_wealth"];
            this._governorship = values["governorship"];
            this._culturalOriginator = values["cultural_originator"];
            this._rebelFaction = values["rebel_faction"];
            this.rebelFactionName = values["rebel_faction_name"];
            this._alternativeRebelFaction = values["alternative_rebel_faction"];
            this.settlerRebellionsEnabled = !!values["settler_rebellions_enabled"];
            this.capturePrestige = values["capture_prestige"];
            this.longDescription = values["long_description"];
            this.developmentPoints = values["development_points"];
        }
        get region() {
            const collection = this.collectionCache.getCollection(Regions.KEY, Regions.Entry);
            return collection.find(entry => entry.key === this._region);
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
        get owningFaction() {
            const collection = this.collectionCache.getCollection(StartPosFactions.KEY, StartPosFactions.Entry);
            return collection.find(entry => entry.id === this._owningFaction);
        }
        get governorship() {
            const collection = this.collectionCache.getCollection(Governorships.KEY, Governorships.Entry);
            return collection.find(entry => entry.governorship === this._governorship);
        }
        get culturalOriginator() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._culturalOriginator);
        }
    }
    StartPosRegions.Entry = Entry;
})(StartPosRegions || (StartPosRegions = {}));

var StartPosSettlements;
(function (StartPosSettlements) {
    StartPosSettlements.KEY = new CollectionKey("start_pos_settlements");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._settlementId = values["settlement_id"];
            this._region = values["region"];
            this._building1 = values["building1"];
            this._building2 = values["building2"];
            this._building3 = values["building3"];
            this._building4 = values["building4"];
            this._building5 = values["building5"];
            this.wealth = values["wealth"];
            this.fortification = values["fortification"];
            this.onscreenName = values["onscreen_name"];
            this.id = values["id"];
            this._roads = values["roads"];
            this._fortifications = values["fortifications"];
            this._primaryBuilding = values["primary_building"];
            this._portBuilding = values["port_building"];
            this.startposSlavePoints = values["startpos_slave_points"];
        }
        get settlementId() {
            const collection = this.collectionCache.getCollection(CampaignMapSettlements.KEY, CampaignMapSettlements.Entry);
            return collection.find(entry => entry.settlementId === this._settlementId);
        }
        get region() {
            const collection = this.collectionCache.getCollection(StartPosRegions.KEY, StartPosRegions.Entry);
            return collection.find(entry => entry.id === this._region);
        }
        get building1() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._building1);
        }
        get building2() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._building2);
        }
        get building3() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._building3);
        }
        get building4() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._building4);
        }
        get building5() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._building5);
        }
        get roads() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._roads);
        }
        get primaryBuilding() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._primaryBuilding);
        }
        get portBuilding() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._portBuilding);
        }
    }
    StartPosSettlements.Entry = Entry;
})(StartPosSettlements || (StartPosSettlements = {}));

var StartPosCharacterToSettlements;
(function (StartPosCharacterToSettlements) {
    StartPosCharacterToSettlements.KEY = new CollectionKey("start_pos_character_to_settlements");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._character = values["character"];
            this._settlement = values["settlement"];
        }
        get character() {
            const collection = this.collectionCache.getCollection(StartPosCharacters.KEY, StartPosCharacters.Entry);
            return collection.find(entry => entry.id === this._character);
        }
        get settlement() {
            const collection = this.collectionCache.getCollection(StartPosSettlements.KEY, StartPosSettlements.Entry);
            return collection.find(entry => entry.id === this._settlement);
        }
    }
    StartPosCharacterToSettlements.Entry = Entry;
})(StartPosCharacterToSettlements || (StartPosCharacterToSettlements = {}));

var StartPosCharacterTraits;
(function (StartPosCharacterTraits) {
    StartPosCharacterTraits.KEY = new CollectionKey("start_pos_character_traits");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._characterId = values["character_id"];
            this._traitLevel = values["trait_level"];
        }
        get characterId() {
            const collection = this.collectionCache.getCollection(StartPosCharacters.KEY, StartPosCharacters.Entry);
            return collection.find(entry => entry.id === this._characterId);
        }
        get traitLevel() {
            const collection = this.collectionCache.getCollection(CharacterTraitLevels.KEY, CharacterTraitLevels.Entry);
            return collection.find(entry => entry.key === this._traitLevel);
        }
    }
    StartPosCharacterTraits.Entry = Entry;
})(StartPosCharacterTraits || (StartPosCharacterTraits = {}));

var StartPosDiplomacy;
(function (StartPosDiplomacy) {
    StartPosDiplomacy.KEY = new CollectionKey("start_pos_diplomacy");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._faction1 = values["faction1"];
            this._faction2 = values["faction2"];
            this._stance = values["stance"];
            this.grantsMilitaryAccess = !!values["grants_military_access"];
            this.grantsTradeAgreement = !!values["grants_trade_agreement"];
            this.relationsModifier = values["relations_modifier"];
            this.nonAggressionPact = !!values["non_aggression_pact"];
        }
        get faction1() {
            const collection = this.collectionCache.getCollection(StartPosFactions.KEY, StartPosFactions.Entry);
            return collection.find(entry => entry.id === this._faction1);
        }
        get faction2() {
            const collection = this.collectionCache.getCollection(StartPosFactions.KEY, StartPosFactions.Entry);
            return collection.find(entry => entry.id === this._faction2);
        }
    }
    StartPosDiplomacy.Entry = Entry;
})(StartPosDiplomacy || (StartPosDiplomacy = {}));

var StartPosFactionEffects;
(function (StartPosFactionEffects) {
    StartPosFactionEffects.KEY = new CollectionKey("start_pos_faction_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._startPosFaction = values["start_pos_faction"];
            this._effect = values["effect"];
            this.effectValue = values["effect_value"];
            this._effectScope = values["effect_scope"];
        }
        get startPosFaction() {
            const collection = this.collectionCache.getCollection(StartPosFactions.KEY, StartPosFactions.Entry);
            return collection.find(entry => entry.id === this._startPosFaction);
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get effectScope() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes.KEY, CampaignEffectScopes.Entry);
            return collection.find(entry => entry.key === this._effectScope);
        }
    }
    StartPosFactionEffects.Entry = Entry;
})(StartPosFactionEffects || (StartPosFactionEffects = {}));

var StartPosFactionEffectBundles;
(function (StartPosFactionEffectBundles) {
    StartPosFactionEffectBundles.KEY = new CollectionKey("start_pos_faction_effect_bundles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._startPosFaction = values["start_pos_faction"];
            this._effectBundle = values["effect_bundle"];
            this.duration = values["duration"];
        }
        get startPosFaction() {
            const collection = this.collectionCache.getCollection(StartPosFactions.KEY, StartPosFactions.Entry);
            return collection.find(entry => entry.id === this._startPosFaction);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles.KEY, EffectBundles.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    StartPosFactionEffectBundles.Entry = Entry;
})(StartPosFactionEffectBundles || (StartPosFactionEffectBundles = {}));

var StartPosFamilyRelationships;
(function (StartPosFamilyRelationships) {
    StartPosFamilyRelationships.KEY = new CollectionKey("start_pos_family_relationships");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._character = values["character"];
            this._relatedTo = values["related_to"];
            this._relationship = values["relationship"];
            this.bastard = !!values["bastard"];
            this.adopted = !!values["adopted"];
        }
        get character() {
            const collection = this.collectionCache.getCollection(StartPosCharacters.KEY, StartPosCharacters.Entry);
            return collection.find(entry => entry.id === this._character);
        }
        get relatedTo() {
            const collection = this.collectionCache.getCollection(StartPosCharacters.KEY, StartPosCharacters.Entry);
            return collection.find(entry => entry.id === this._relatedTo);
        }
        get relationship() {
            const collection = this.collectionCache.getCollection(FamilyRelationshipTypes.KEY, FamilyRelationshipTypes.Entry);
            return collection.find(entry => entry.relationshipType === this._relationship);
        }
    }
    StartPosFamilyRelationships.Entry = Entry;
})(StartPosFamilyRelationships || (StartPosFamilyRelationships = {}));

var StartPosGovernorships;
(function (StartPosGovernorships) {
    StartPosGovernorships.KEY = new CollectionKey("start_pos_governorships");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._governorship = values["governorship"];
            this._campaign = values["campaign"];
            this.lowerClassTaxRate = values["lower_class_tax_rate"];
            this.upperClassTaxRate = values["upper_class_tax_rate"];
        }
        get governorship() {
            const collection = this.collectionCache.getCollection(Governorships.KEY, Governorships.Entry);
            return collection.find(entry => entry.governorship === this._governorship);
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
    }
    StartPosGovernorships.Entry = Entry;
})(StartPosGovernorships || (StartPosGovernorships = {}));

var StartPosLandUnits;
(function (StartPosLandUnits) {
    StartPosLandUnits.KEY = new CollectionKey("start_pos_land_units");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._unitType = values["unit_type"];
            this._general = values["general"];
            this.soldiers = values["soldiers"];
        }
        get unitType() {
            const collection = this.collectionCache.getCollection(MainUnits.KEY, MainUnits.Entry);
            return collection.find(entry => entry.unit === this._unitType);
        }
        get general() {
            const collection = this.collectionCache.getCollection(StartPosCharacters.KEY, StartPosCharacters.Entry);
            return collection.find(entry => entry.id === this._general);
        }
    }
    StartPosLandUnits.Entry = Entry;
})(StartPosLandUnits || (StartPosLandUnits = {}));

var StartPosNavalUnits;
(function (StartPosNavalUnits) {
    StartPosNavalUnits.KEY = new CollectionKey("start_pos_naval_units");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["ID"];
            this._unitType = values["unit_type"];
            this._admiral = values["admiral"];
        }
        get unitType() {
            const collection = this.collectionCache.getCollection(MainUnits.KEY, MainUnits.Entry);
            return collection.find(entry => entry.unit === this._unitType);
        }
        get admiral() {
            const collection = this.collectionCache.getCollection(StartPosCharacters.KEY, StartPosCharacters.Entry);
            return collection.find(entry => entry.id === this._admiral);
        }
    }
    StartPosNavalUnits.Entry = Entry;
})(StartPosNavalUnits || (StartPosNavalUnits = {}));

var StartPosPastEvents;
(function (StartPosPastEvents) {
    StartPosPastEvents.KEY = new CollectionKey("start_pos_past_events");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._source = values["source"];
            this._target = values["target"];
            this._event = values["event"];
            this.turnsAgo = values["turns_ago"];
        }
        get source() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._source);
        }
        get target() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._target);
        }
        get event() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDiplomaticEvents.KEY, CaiPersonalityDiplomaticEvents.Entry);
            return collection.find(entry => entry.id === this._event);
        }
    }
    StartPosPastEvents.Entry = Entry;
})(StartPosPastEvents || (StartPosPastEvents = {}));

var StartPosRegionsToUnitResources;
(function (StartPosRegionsToUnitResources) {
    StartPosRegionsToUnitResources.KEY = new CollectionKey("start_pos_regions_to_unit_resources");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this._resource = values["resource"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(StartPosRegions.KEY, StartPosRegions.Entry);
            return collection.find(entry => entry.id === this._key);
        }
        get resource() {
            const collection = this.collectionCache.getCollection(RegionUnitResources.KEY, RegionUnitResources.Entry);
            return collection.find(entry => entry.key === this._resource);
        }
    }
    StartPosRegionsToUnitResources.Entry = Entry;
})(StartPosRegionsToUnitResources || (StartPosRegionsToUnitResources = {}));

var StartPosRegionReligions;
(function (StartPosRegionReligions) {
    StartPosRegionReligions.KEY = new CollectionKey("start_pos_region_religions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._region = values["region"];
            this._religion = values["religion"];
            this.percentage = values["percentage"];
        }
        get region() {
            const collection = this.collectionCache.getCollection(StartPosRegions.KEY, StartPosRegions.Entry);
            return collection.find(entry => entry.id === this._region);
        }
        get religion() {
            const collection = this.collectionCache.getCollection(Religions.KEY, Religions.Entry);
            return collection.find(entry => entry.religionKey === this._religion);
        }
    }
    StartPosRegionReligions.Entry = Entry;
})(StartPosRegionReligions || (StartPosRegionReligions = {}));

var StartPosRegionSlotTemplates;
(function (StartPosRegionSlotTemplates) {
    StartPosRegionSlotTemplates.KEY = new CollectionKey("start_pos_region_slot_templates");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._campaign = values["campaign"];
            this._region = values["region"];
            this._slotType = values["slot_type"];
            this._slotTemplate = values["slot_template"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
        get region() {
            const collection = this.collectionCache.getCollection(Regions.KEY, Regions.Entry);
            return collection.find(entry => entry.key === this._region);
        }
        get slotType() {
            const collection = this.collectionCache.getCollection(SlotTypes.KEY, SlotTypes.Entry);
            return collection.find(entry => entry.key === this._slotType);
        }
        get slotTemplate() {
            const collection = this.collectionCache.getCollection(SlotTemplates.KEY, SlotTemplates.Entry);
            return collection.find(entry => entry.key === this._slotTemplate);
        }
    }
    StartPosRegionSlotTemplates.Entry = Entry;
})(StartPosRegionSlotTemplates || (StartPosRegionSlotTemplates = {}));

var StartPosSettlementGarrisons;
(function (StartPosSettlementGarrisons) {
    StartPosSettlementGarrisons.KEY = new CollectionKey("start_pos_settlement_garrisons");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._settlement = values["settlement"];
            this._unit = values["unit"];
            this.soldiers = values["soldiers"];
        }
        get settlement() {
            const collection = this.collectionCache.getCollection(StartPosSettlements.KEY, StartPosSettlements.Entry);
            return collection.find(entry => entry.id === this._settlement);
        }
        get unit() {
            const collection = this.collectionCache.getCollection(MainUnits.KEY, MainUnits.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
    }
    StartPosSettlementGarrisons.Entry = Entry;
})(StartPosSettlementGarrisons || (StartPosSettlementGarrisons = {}));

var StartPosTechnologies;
(function (StartPosTechnologies) {
    StartPosTechnologies.KEY = new CollectionKey("start_pos_technologies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._faction = values["faction"];
            this._technology = values["technology"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(StartPosFactions.KEY, StartPosFactions.Entry);
            return collection.find(entry => entry.id === this._faction);
        }
        get technology() {
            const collection = this.collectionCache.getCollection(Technologies.KEY, Technologies.Entry);
            return collection.find(entry => entry.key === this._technology);
        }
    }
    StartPosTechnologies.Entry = Entry;
})(StartPosTechnologies || (StartPosTechnologies = {}));

var VictoryTypes;
(function (VictoryTypes) {
    VictoryTypes.KEY = new CollectionKey("victory_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.victoryType = values["victory_type"];
        }
    }
    VictoryTypes.Entry = Entry;
})(VictoryTypes || (VictoryTypes = {}));

var StartPosVictoryConditions;
(function (StartPosVictoryConditions) {
    StartPosVictoryConditions.KEY = new CollectionKey("start_pos_victory_conditions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._startPosFaction = values["start_pos_faction"];
            this._region = values["region"];
            this._victoryType = values["victory_type"];
        }
        get startPosFaction() {
            const collection = this.collectionCache.getCollection(StartPosFactions.KEY, StartPosFactions.Entry);
            return collection.find(entry => entry.id === this._startPosFaction);
        }
        get region() {
            const collection = this.collectionCache.getCollection(Regions.KEY, Regions.Entry);
            return collection.find(entry => entry.key === this._region);
        }
        get victoryType() {
            const collection = this.collectionCache.getCollection(VictoryTypes.KEY, VictoryTypes.Entry);
            return collection.find(entry => entry.victoryType === this._victoryType);
        }
    }
    StartPosVictoryConditions.Entry = Entry;
})(StartPosVictoryConditions || (StartPosVictoryConditions = {}));

var StateGiftValues;
(function (StateGiftValues) {
    StateGiftValues.KEY = new CollectionKey("state_gift_values");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.value = values["value"];
        }
    }
    StateGiftValues.Entry = Entry;
})(StateGiftValues || (StateGiftValues = {}));

var Stats;
(function (Stats) {
    Stats.KEY = new CollectionKey("stats");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.public = !!values["public"];
            this._label = values["label"];
            this.ladder = !!values["ladder"];
        }
        get label() {
            const collection = this.collectionCache.getCollection(RandomLocalisationStrings.KEY, RandomLocalisationStrings.Entry);
            return collection.find(entry => entry.key === this._label);
        }
    }
    Stats.Entry = Entry;
})(Stats || (Stats = {}));

var StatsClans;
(function (StatsClans) {
    StatsClans.KEY = new CollectionKey("stats_clans");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.public = !!values["public"];
            this._label = values["label"];
            this.ladder = !!values["ladder"];
        }
        get label() {
            const collection = this.collectionCache.getCollection(RandomLocalisationStrings.KEY, RandomLocalisationStrings.Entry);
            return collection.find(entry => entry.key === this._label);
        }
    }
    StatsClans.Entry = Entry;
})(StatsClans || (StatsClans = {}));

var TExcLocalisableFields;
(function (TExcLocalisableFields) {
    TExcLocalisableFields.KEY = new CollectionKey("TExc_LocalisableFields");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._tableName = values["table_name"];
            this.field = values["field"];
            this.destinationFile = values["destination_file"];
            this.readyForExport = !!values["ready_for_export"];
            this.spreadsheet = values["spreadsheet"];
            this.fieldAsKey = values["field_as_key"];
            this.forVo = !!values["for_vo"];
        }
        get tableName() {
            const collection = this.collectionCache.getCollection(TExcImplementedTables.KEY, TExcImplementedTables.Entry);
            return collection.find(entry => entry.tableName === this._tableName);
        }
    }
    TExcLocalisableFields.Entry = Entry;
})(TExcLocalisableFields || (TExcLocalisableFields = {}));

var VoScripts;
(function (VoScripts) {
    VoScripts.KEY = new CollectionKey("vo_scripts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this.name = values["name"];
        }
    }
    VoScripts.Entry = Entry;
})(VoScripts || (VoScripts = {}));

var SubtitleTimings;
(function (SubtitleTimings) {
    SubtitleTimings.KEY = new CollectionKey("subtitle_timings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._subtitleField = values["subtitle_field"];
            this._language = values["language"];
            this.start = values["start"];
            this.end = values["end"];
            this._scriptId = values["script_id"];
            this.textSection = values["text_section"];
            this.foreignKey = values["foreign_key"];
            this.textId = values["text_id"];
        }
        get subtitleField() {
            const collection = this.collectionCache.getCollection(TExcLocalisableFields.KEY, TExcLocalisableFields.Entry);
            return collection.find(entry => entry.key === this._subtitleField);
        }
        get language() {
            const collection = this.collectionCache.getCollection(Languages.KEY, Languages.Entry);
            return collection.find(entry => entry.key === this._language);
        }
        get scriptId() {
            const collection = this.collectionCache.getCollection(VoScripts.KEY, VoScripts.Entry);
            return collection.find(entry => entry.id === this._scriptId);
        }
    }
    SubtitleTimings.Entry = Entry;
})(SubtitleTimings || (SubtitleTimings = {}));

var TaxesClasses;
(function (TaxesClasses) {
    TaxesClasses.KEY = new CollectionKey("taxes_classes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.tax = values["tax"];
        }
    }
    TaxesClasses.Entry = Entry;
})(TaxesClasses || (TaxesClasses = {}));

var TaxesKeys;
(function (TaxesKeys) {
    TaxesKeys.KEY = new CollectionKey("taxes_keys");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._taxClass = values["tax_class"];
            this._taxLevel = values["tax_level"];
            this.taxLookup = values["tax_lookup"];
        }
        get taxClass() {
            const collection = this.collectionCache.getCollection(TaxesClasses.KEY, TaxesClasses.Entry);
            return collection.find(entry => entry.tax === this._taxClass);
        }
        get taxLevel() {
            const collection = this.collectionCache.getCollection(TaxesLevels.KEY, TaxesLevels.Entry);
            return collection.find(entry => entry.taxLevel === this._taxLevel);
        }
    }
    TaxesKeys.Entry = Entry;
})(TaxesKeys || (TaxesKeys = {}));

var TaxesEffectsJct;
(function (TaxesEffectsJct) {
    TaxesEffectsJct.KEY = new CollectionKey("taxes_effects_jct");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._taxName = values["tax_name"];
            this._effect = values["effect"];
            this.value = values["value"];
            this._optionalCampaignKey = values["optional_campaign_key"];
            this.optionalDifficultyLevel = values["optional_difficulty_level"];
            this.aiOnly = !!values["ai_only"];
            this._effectScope = values["effect_scope"];
        }
        get taxName() {
            const collection = this.collectionCache.getCollection(TaxesKeys.KEY, TaxesKeys.Entry);
            return collection.find(entry => entry.taxLookup === this._taxName);
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get optionalCampaignKey() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._optionalCampaignKey);
        }
        get effectScope() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes.KEY, CampaignEffectScopes.Entry);
            return collection.find(entry => entry.key === this._effectScope);
        }
    }
    TaxesEffectsJct.Entry = Entry;
})(TaxesEffectsJct || (TaxesEffectsJct = {}));

var TeamColours;
(function (TeamColours) {
    TeamColours.KEY = new CollectionKey("team_colours");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.alliance = values["alliance"];
            this.r = values["r"];
            this.g = values["g"];
            this.b = values["b"];
            this.armyIndex = values["army_index"];
        }
    }
    TeamColours.Entry = Entry;
})(TeamColours || (TeamColours = {}));

var TechnologyNodeSets;
(function (TechnologyNodeSets) {
    TechnologyNodeSets.KEY = new CollectionKey("technology_node_sets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._factionKey = values["faction_key"];
            this._campaignKey = values["campaign_key"];
            this._technologyCategory = values["technology_category"];
            this._culture = values["culture"];
            this._subculture = values["subculture"];
            this.localisedName = values["localised_name"];
            this.tooltipString = values["tooltip_string"];
            this.encyclopaediaString = values["encyclopaedia_string"];
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get campaignKey() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaignKey);
        }
        get technologyCategory() {
            const collection = this.collectionCache.getCollection(TechnologyCategories.KEY, TechnologyCategories.Entry);
            return collection.find(entry => entry.key === this._technologyCategory);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
    }
    TechnologyNodeSets.Entry = Entry;
})(TechnologyNodeSets || (TechnologyNodeSets = {}));

var TechnologyCategoryModules;
(function (TechnologyCategoryModules) {
    TechnologyCategoryModules.KEY = new CollectionKey("technology_category_modules");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._technologyNodeSet = values["technology_node_set"];
            this.maxTier = values["max_tier"];
            this._effectBundle = values["effect_bundle"];
            this.minTier = values["min_tier"];
        }
        get technologyNodeSet() {
            const collection = this.collectionCache.getCollection(TechnologyNodeSets.KEY, TechnologyNodeSets.Entry);
            return collection.find(entry => entry.key === this._technologyNodeSet);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles.KEY, EffectBundles.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    TechnologyCategoryModules.Entry = Entry;
})(TechnologyCategoryModules || (TechnologyCategoryModules = {}));

var TechnologyCategoryParents;
(function (TechnologyCategoryParents) {
    TechnologyCategoryParents.KEY = new CollectionKey("technology_category_parents");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._parentCategory = values["parent_category"];
            this._childCategory = values["child_category"];
        }
        get parentCategory() {
            const collection = this.collectionCache.getCollection(TechnologyCategories.KEY, TechnologyCategories.Entry);
            return collection.find(entry => entry.key === this._parentCategory);
        }
        get childCategory() {
            const collection = this.collectionCache.getCollection(TechnologyCategories.KEY, TechnologyCategories.Entry);
            return collection.find(entry => entry.key === this._childCategory);
        }
    }
    TechnologyCategoryParents.Entry = Entry;
})(TechnologyCategoryParents || (TechnologyCategoryParents = {}));

var TechnologyEffectsJunction;
(function (TechnologyEffectsJunction) {
    TechnologyEffectsJunction.KEY = new CollectionKey("technology_effects_junction");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._technology = values["technology"];
            this._effect = values["effect"];
            this.value = values["value"];
            this._effectScope = values["effect_scope"];
        }
        get technology() {
            const collection = this.collectionCache.getCollection(Technologies.KEY, Technologies.Entry);
            return collection.find(entry => entry.key === this._technology);
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get effectScope() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes.KEY, CampaignEffectScopes.Entry);
            return collection.find(entry => entry.key === this._effectScope);
        }
    }
    TechnologyEffectsJunction.Entry = Entry;
})(TechnologyEffectsJunction || (TechnologyEffectsJunction = {}));

var TechnologyFactionJunctions;
(function (TechnologyFactionJunctions) {
    TechnologyFactionJunctions.KEY = new CollectionKey("technology_faction_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._technologyKey = values["technology_key"];
            this._factionKey = values["faction_key"];
        }
        get technologyKey() {
            const collection = this.collectionCache.getCollection(Technologies.KEY, Technologies.Entry);
            return collection.find(entry => entry.key === this._technologyKey);
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
    }
    TechnologyFactionJunctions.Entry = Entry;
})(TechnologyFactionJunctions || (TechnologyFactionJunctions = {}));

var TechnologyNodes;
(function (TechnologyNodes) {
    TechnologyNodes.KEY = new CollectionKey("technology_nodes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._technologyNodeSet = values["technology_node_set"];
            this._technologyKey = values["technology_key"];
            this._factionKey = values["faction_key"];
            this._campaignKey = values["campaign_key"];
            this.tier = values["tier"];
            this.indent = values["indent"];
        }
        get technologyNodeSet() {
            const collection = this.collectionCache.getCollection(TechnologyNodeSets.KEY, TechnologyNodeSets.Entry);
            return collection.find(entry => entry.key === this._technologyNodeSet);
        }
        get technologyKey() {
            const collection = this.collectionCache.getCollection(Technologies.KEY, Technologies.Entry);
            return collection.find(entry => entry.key === this._technologyKey);
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get campaignKey() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaignKey);
        }
    }
    TechnologyNodes.Entry = Entry;
})(TechnologyNodes || (TechnologyNodes = {}));

var TechnologyNodeLinks;
(function (TechnologyNodeLinks) {
    TechnologyNodeLinks.KEY = new CollectionKey("technology_node_links");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._parentKey = values["parent_key"];
            this._childKey = values["child_key"];
            this.initialDescentTiers = values["initial_descent_tiers"];
            this.parentLinkPosition = values["parent_link_position"];
            this.childLinkPosition = values["child_link_position"];
            this.encyclopediaParentLinkPosition = values["encyclopedia_parent_link_position"];
            this.encyclopediaChildLinkPosition = values["encyclopedia_child_link_position"];
        }
        get parentKey() {
            const collection = this.collectionCache.getCollection(TechnologyNodes.KEY, TechnologyNodes.Entry);
            return collection.find(entry => entry.key === this._parentKey);
        }
        get childKey() {
            const collection = this.collectionCache.getCollection(TechnologyNodes.KEY, TechnologyNodes.Entry);
            return collection.find(entry => entry.key === this._childKey);
        }
    }
    TechnologyNodeLinks.Entry = Entry;
})(TechnologyNodeLinks || (TechnologyNodeLinks = {}));

var TechnologyRequiredBuildingLevelsJunctions;
(function (TechnologyRequiredBuildingLevelsJunctions) {
    TechnologyRequiredBuildingLevelsJunctions.KEY = new CollectionKey("technology_required_building_levels_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._technology = values["technology"];
            this._requiredBuildingLevel = values["required_building_level"];
        }
        get technology() {
            const collection = this.collectionCache.getCollection(Technologies.KEY, Technologies.Entry);
            return collection.find(entry => entry.key === this._technology);
        }
        get requiredBuildingLevel() {
            const collection = this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry);
            return collection.find(entry => entry.levelName === this._requiredBuildingLevel);
        }
    }
    TechnologyRequiredBuildingLevelsJunctions.Entry = Entry;
})(TechnologyRequiredBuildingLevelsJunctions || (TechnologyRequiredBuildingLevelsJunctions = {}));

var TechnologyRequiredTechnologyJunctions;
(function (TechnologyRequiredTechnologyJunctions) {
    TechnologyRequiredTechnologyJunctions.KEY = new CollectionKey("technology_required_technology_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._technology = values["technology"];
            this._requiredTechnology = values["required_technology"];
        }
        get technology() {
            const collection = this.collectionCache.getCollection(Technologies.KEY, Technologies.Entry);
            return collection.find(entry => entry.key === this._technology);
        }
        get requiredTechnology() {
            const collection = this.collectionCache.getCollection(Technologies.KEY, Technologies.Entry);
            return collection.find(entry => entry.key === this._requiredTechnology);
        }
    }
    TechnologyRequiredTechnologyJunctions.Entry = Entry;
})(TechnologyRequiredTechnologyJunctions || (TechnologyRequiredTechnologyJunctions = {}));

var TechnologyUnitUpgrades;
(function (TechnologyUnitUpgrades) {
    TechnologyUnitUpgrades.KEY = new CollectionKey("technology_unit_upgrades");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._technology = values["technology"];
            this._unit = values["unit"];
            this._targetUnit = values["target_unit"];
            this.cost = values["cost"];
        }
        get technology() {
            const collection = this.collectionCache.getCollection(Technologies.KEY, Technologies.Entry);
            return collection.find(entry => entry.key === this._technology);
        }
        get unit() {
            const collection = this.collectionCache.getCollection(MainUnits.KEY, MainUnits.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
        get targetUnit() {
            const collection = this.collectionCache.getCollection(MainUnits.KEY, MainUnits.Entry);
            return collection.find(entry => entry.unit === this._targetUnit);
        }
    }
    TechnologyUnitUpgrades.Entry = Entry;
})(TechnologyUnitUpgrades || (TechnologyUnitUpgrades = {}));

var TerrainTilesets;
(function (TerrainTilesets) {
    TerrainTilesets.KEY = new CollectionKey("terrain_tilesets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.tilesetName = values["tileset_name"];
        }
    }
    TerrainTilesets.Entry = Entry;
})(TerrainTilesets || (TerrainTilesets = {}));

var TExcCampaignMapProcessingExports;
(function (TExcCampaignMapProcessingExports) {
    TExcCampaignMapProcessingExports.KEY = new CollectionKey("TExc_campaign_map_processing_exports");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.tableName = values["table_name"];
        }
    }
    TExcCampaignMapProcessingExports.Entry = Entry;
})(TExcCampaignMapProcessingExports || (TExcCampaignMapProcessingExports = {}));

var TExcDataFolders;
(function (TExcDataFolders) {
    TExcDataFolders.KEY = new CollectionKey("TExc_data_folders");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.directory = values["directory"];
            this.codeOwner = values["code_owner"];
            this.author = values["author"];
            this.exclude = !!values["exclude"];
            this.packingNotes = values["packing_notes"];
            this._packFile = values["pack_file"];
        }
    }
    TExcDataFolders.Entry = Entry;
})(TExcDataFolders || (TExcDataFolders = {}));

var TexcExpansions;
(function (TexcExpansions) {
    TexcExpansions.KEY = new CollectionKey("texc_expansions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.expansion = values["expansion"];
            this.description = values["description"];
            this.packFilenameExtension = values["pack_filename_extension"];
            this.released = !!values["released"];
        }
    }
    TexcExpansions.Entry = Entry;
})(TexcExpansions || (TexcExpansions = {}));

var TExcMissingConditions;
(function (TExcMissingConditions) {
    TExcMissingConditions.KEY = new CollectionKey("TExc_missing_conditions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["ID"];
            this.exportedScript = values["exported_script"];
            this.condition = values["condition"];
        }
    }
    TExcMissingConditions.Entry = Entry;
})(TExcMissingConditions || (TExcMissingConditions = {}));

var TExcPackFiles;
(function (TExcPackFiles) {
    TExcPackFiles.KEY = new CollectionKey("TExc_pack_files");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.packFile = values["pack_file"];
            this.notes = values["notes"];
        }
    }
    TExcPackFiles.Entry = Entry;
})(TExcPackFiles || (TExcPackFiles = {}));

var TExcScriptConditions;
(function (TExcScriptConditions) {
    TExcScriptConditions.KEY = new CollectionKey("TExc_script_conditions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.condition = values["Condition"];
        }
    }
    TExcScriptConditions.Entry = Entry;
})(TExcScriptConditions || (TExcScriptConditions = {}));

var TExcTableExportCategories;
(function (TExcTableExportCategories) {
    TExcTableExportCategories.KEY = new CollectionKey("TExc_TableExportCategories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.category = values["category"];
        }
    }
    TExcTableExportCategories.Entry = Entry;
})(TExcTableExportCategories || (TExcTableExportCategories = {}));

var TExcTableExportGroups;
(function (TExcTableExportGroups) {
    TExcTableExportGroups.KEY = new CollectionKey("TExc_TableExportGroups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["ID"];
            this._category = values["category"];
            this._table = values["table"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(TExcTableExportCategories.KEY, TExcTableExportCategories.Entry);
            return collection.find(entry => entry.category === this._category);
        }
        get table() {
            const collection = this.collectionCache.getCollection(TExcImplementedTables.KEY, TExcImplementedTables.Entry);
            return collection.find(entry => entry.tableName === this._table);
        }
    }
    TExcTableExportGroups.Entry = Entry;
})(TExcTableExportGroups || (TExcTableExportGroups = {}));

var TExcUnrestCauses;
(function (TExcUnrestCauses) {
    TExcUnrestCauses.KEY = new CollectionKey("TExc_unrest_causes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.cause = values["cause"];
        }
    }
    TExcUnrestCauses.Entry = Entry;
})(TExcUnrestCauses || (TExcUnrestCauses = {}));

var TExcUnrestDemands;
(function (TExcUnrestDemands) {
    TExcUnrestDemands.KEY = new CollectionKey("TExc_unrest_demands");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.demand = values["demand"];
        }
    }
    TExcUnrestDemands.Entry = Entry;
})(TExcUnrestDemands || (TExcUnrestDemands = {}));

var TownWealthGrowthFactors;
(function (TownWealthGrowthFactors) {
    TownWealthGrowthFactors.KEY = new CollectionKey("town_wealth_growth_factors");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.factor = values["factor"];
            this.positivePipPath = values["positive_pip_path"];
            this.positiveTooltip = values["positive_tooltip"];
            this.negativePipPath = values["negative_pip_path"];
            this.negativeTooltip = values["negative_tooltip"];
        }
    }
    TownWealthGrowthFactors.Entry = Entry;
})(TownWealthGrowthFactors || (TownWealthGrowthFactors = {}));

var TradeDetails;
(function (TradeDetails) {
    TradeDetails.KEY = new CollectionKey("trade_details");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreenText = values["onscreen_text"];
            this.iconFilepath = values["icon_filepath"];
        }
    }
    TradeDetails.Entry = Entry;
})(TradeDetails || (TradeDetails = {}));

var TradeDisplayTradeModels;
(function (TradeDisplayTradeModels) {
    TradeDisplayTradeModels.KEY = new CollectionKey("trade_display_trade_models");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._model = values["model"];
            this._optionalFollowingModel = values["optional_following_model"];
            this.isNaval = !!values["is_naval"];
            this.optionalFollowingModelDistance = values["optional_following_model_distance"];
        }
        get model() {
            const collection = this.collectionCache.getCollection(WarscapeAnimated.KEY, WarscapeAnimated.Entry);
            return collection.find(entry => entry.key === this._model);
        }
        get optionalFollowingModel() {
            const collection = this.collectionCache.getCollection(WarscapeAnimated.KEY, WarscapeAnimated.Entry);
            return collection.find(entry => entry.key === this._optionalFollowingModel);
        }
    }
    TradeDisplayTradeModels.Entry = Entry;
})(TradeDisplayTradeModels || (TradeDisplayTradeModels = {}));

var TradeDisplayCampaignOriginatingCultureProducedResourceTradeModelOptions;
(function (TradeDisplayCampaignOriginatingCultureProducedResourceTradeModelOptions) {
    TradeDisplayCampaignOriginatingCultureProducedResourceTradeModelOptions.KEY = new CollectionKey("trade_display_campaign_originating_culture_produced_resource_trade_model_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._campaign = values["campaign"];
            this._originatingCulture = values["originating_culture"];
            this._producedResource = values["produced_resource"];
            this._model = values["model"];
            this.priority = values["priority"];
            this.relativeFrequency = values["relative_frequency"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
        get originatingCulture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._originatingCulture);
        }
        get producedResource() {
            const collection = this.collectionCache.getCollection(Resources.KEY, Resources.Entry);
            return collection.find(entry => entry.key === this._producedResource);
        }
        get model() {
            const collection = this.collectionCache.getCollection(TradeDisplayTradeModels.KEY, TradeDisplayTradeModels.Entry);
            return collection.find(entry => entry.key === this._model);
        }
    }
    TradeDisplayCampaignOriginatingCultureProducedResourceTradeModelOptions.Entry = Entry;
})(TradeDisplayCampaignOriginatingCultureProducedResourceTradeModelOptions || (TradeDisplayCampaignOriginatingCultureProducedResourceTradeModelOptions = {}));

var TradeDisplayCampaignOriginatingCultureTradeModelOptions;
(function (TradeDisplayCampaignOriginatingCultureTradeModelOptions) {
    TradeDisplayCampaignOriginatingCultureTradeModelOptions.KEY = new CollectionKey("trade_display_campaign_originating_culture_trade_model_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._campaign = values["campaign"];
            this._originatingCulture = values["originating_culture"];
            this._model = values["model"];
            this.priority = values["priority"];
            this.relativeFrequency = values["relative_frequency"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
        get originatingCulture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._originatingCulture);
        }
        get model() {
            const collection = this.collectionCache.getCollection(TradeDisplayTradeModels.KEY, TradeDisplayTradeModels.Entry);
            return collection.find(entry => entry.key === this._model);
        }
    }
    TradeDisplayCampaignOriginatingCultureTradeModelOptions.Entry = Entry;
})(TradeDisplayCampaignOriginatingCultureTradeModelOptions || (TradeDisplayCampaignOriginatingCultureTradeModelOptions = {}));

var TradeDisplayCampaignOriginatingSubcultureProducedResourceTradeModelOptions;
(function (TradeDisplayCampaignOriginatingSubcultureProducedResourceTradeModelOptions) {
    TradeDisplayCampaignOriginatingSubcultureProducedResourceTradeModelOptions.KEY = new CollectionKey("trade_display_campaign_originating_subculture_produced_resource_trade_model_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._campaign = values["campaign"];
            this._originatingSubculture = values["originating_subculture"];
            this._producedResource = values["produced_resource"];
            this._model = values["model"];
            this.priority = values["priority"];
            this.relativeFrequency = values["relative_frequency"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
        get originatingSubculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._originatingSubculture);
        }
        get producedResource() {
            const collection = this.collectionCache.getCollection(Resources.KEY, Resources.Entry);
            return collection.find(entry => entry.key === this._producedResource);
        }
        get model() {
            const collection = this.collectionCache.getCollection(TradeDisplayTradeModels.KEY, TradeDisplayTradeModels.Entry);
            return collection.find(entry => entry.key === this._model);
        }
    }
    TradeDisplayCampaignOriginatingSubcultureProducedResourceTradeModelOptions.Entry = Entry;
})(TradeDisplayCampaignOriginatingSubcultureProducedResourceTradeModelOptions || (TradeDisplayCampaignOriginatingSubcultureProducedResourceTradeModelOptions = {}));

var TradeDisplayCampaignOriginatingSubcultureTradeModelOptions;
(function (TradeDisplayCampaignOriginatingSubcultureTradeModelOptions) {
    TradeDisplayCampaignOriginatingSubcultureTradeModelOptions.KEY = new CollectionKey("trade_display_campaign_originating_subculture_trade_model_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._campaign = values["campaign"];
            this._originatingSubculture = values["originating_subculture"];
            this._model = values["model"];
            this.priority = values["priority"];
            this.relativeFrequency = values["relative_frequency"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
        get originatingSubculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._originatingSubculture);
        }
        get model() {
            const collection = this.collectionCache.getCollection(TradeDisplayTradeModels.KEY, TradeDisplayTradeModels.Entry);
            return collection.find(entry => entry.key === this._model);
        }
    }
    TradeDisplayCampaignOriginatingSubcultureTradeModelOptions.Entry = Entry;
})(TradeDisplayCampaignOriginatingSubcultureTradeModelOptions || (TradeDisplayCampaignOriginatingSubcultureTradeModelOptions = {}));

var TradeDisplayCampaignOwningCultureProducedResourceTradeModelOptions;
(function (TradeDisplayCampaignOwningCultureProducedResourceTradeModelOptions) {
    TradeDisplayCampaignOwningCultureProducedResourceTradeModelOptions.KEY = new CollectionKey("trade_display_campaign_owning_culture_produced_resource_trade_model_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._campaign = values["campaign"];
            this._owningCulture = values["owning_culture"];
            this._producedResource = values["produced_resource"];
            this._model = values["model"];
            this.priority = values["priority"];
            this.relativeFrequency = values["relative_frequency"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
        get owningCulture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._owningCulture);
        }
        get producedResource() {
            const collection = this.collectionCache.getCollection(Resources.KEY, Resources.Entry);
            return collection.find(entry => entry.key === this._producedResource);
        }
        get model() {
            const collection = this.collectionCache.getCollection(TradeDisplayTradeModels.KEY, TradeDisplayTradeModels.Entry);
            return collection.find(entry => entry.key === this._model);
        }
    }
    TradeDisplayCampaignOwningCultureProducedResourceTradeModelOptions.Entry = Entry;
})(TradeDisplayCampaignOwningCultureProducedResourceTradeModelOptions || (TradeDisplayCampaignOwningCultureProducedResourceTradeModelOptions = {}));

var TradeDisplayCampaignOwningCultureTradeModelOptions;
(function (TradeDisplayCampaignOwningCultureTradeModelOptions) {
    TradeDisplayCampaignOwningCultureTradeModelOptions.KEY = new CollectionKey("trade_display_campaign_owning_culture_trade_model_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._campaign = values["campaign"];
            this._owningCulture = values["owning_culture"];
            this._model = values["model"];
            this.priority = values["priority"];
            this.relativeFrequency = values["relative_frequency"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
        get owningCulture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._owningCulture);
        }
        get model() {
            const collection = this.collectionCache.getCollection(TradeDisplayTradeModels.KEY, TradeDisplayTradeModels.Entry);
            return collection.find(entry => entry.key === this._model);
        }
    }
    TradeDisplayCampaignOwningCultureTradeModelOptions.Entry = Entry;
})(TradeDisplayCampaignOwningCultureTradeModelOptions || (TradeDisplayCampaignOwningCultureTradeModelOptions = {}));

var TradeDisplayCampaignOwningFactionProducedResourceTradeModelOptions;
(function (TradeDisplayCampaignOwningFactionProducedResourceTradeModelOptions) {
    TradeDisplayCampaignOwningFactionProducedResourceTradeModelOptions.KEY = new CollectionKey("trade_display_campaign_owning_faction_produced_resource_trade_model_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._campaign = values["campaign"];
            this._owningFaction = values["owning_faction"];
            this._producedResource = values["produced_resource"];
            this._model = values["model"];
            this.priority = values["priority"];
            this.relativeFrequency = values["relative_frequency"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
        get owningFaction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._owningFaction);
        }
        get producedResource() {
            const collection = this.collectionCache.getCollection(Resources.KEY, Resources.Entry);
            return collection.find(entry => entry.key === this._producedResource);
        }
        get model() {
            const collection = this.collectionCache.getCollection(TradeDisplayTradeModels.KEY, TradeDisplayTradeModels.Entry);
            return collection.find(entry => entry.key === this._model);
        }
    }
    TradeDisplayCampaignOwningFactionProducedResourceTradeModelOptions.Entry = Entry;
})(TradeDisplayCampaignOwningFactionProducedResourceTradeModelOptions || (TradeDisplayCampaignOwningFactionProducedResourceTradeModelOptions = {}));

var TradeDisplayCampaignOwningFactionTradeModelOptions;
(function (TradeDisplayCampaignOwningFactionTradeModelOptions) {
    TradeDisplayCampaignOwningFactionTradeModelOptions.KEY = new CollectionKey("trade_display_campaign_owning_faction_trade_model_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._campaign = values["campaign"];
            this._owningFaction = values["owning_faction"];
            this._model = values["model"];
            this.priority = values["priority"];
            this.relativeFrequency = values["relative_frequency"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
        get owningFaction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._owningFaction);
        }
        get model() {
            const collection = this.collectionCache.getCollection(TradeDisplayTradeModels.KEY, TradeDisplayTradeModels.Entry);
            return collection.find(entry => entry.key === this._model);
        }
    }
    TradeDisplayCampaignOwningFactionTradeModelOptions.Entry = Entry;
})(TradeDisplayCampaignOwningFactionTradeModelOptions || (TradeDisplayCampaignOwningFactionTradeModelOptions = {}));

var TradeDisplayCampaignOwningSubcultureProducedResourceTradeModelOptions;
(function (TradeDisplayCampaignOwningSubcultureProducedResourceTradeModelOptions) {
    TradeDisplayCampaignOwningSubcultureProducedResourceTradeModelOptions.KEY = new CollectionKey("trade_display_campaign_owning_subculture_produced_resource_trade_model_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._campaign = values["campaign"];
            this._owningSubculture = values["owning_subculture"];
            this._producedResource = values["produced_resource"];
            this._model = values["model"];
            this.priority = values["priority"];
            this.relativeFrequency = values["relative_frequency"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
        get owningSubculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._owningSubculture);
        }
        get producedResource() {
            const collection = this.collectionCache.getCollection(Resources.KEY, Resources.Entry);
            return collection.find(entry => entry.key === this._producedResource);
        }
        get model() {
            const collection = this.collectionCache.getCollection(TradeDisplayTradeModels.KEY, TradeDisplayTradeModels.Entry);
            return collection.find(entry => entry.key === this._model);
        }
    }
    TradeDisplayCampaignOwningSubcultureProducedResourceTradeModelOptions.Entry = Entry;
})(TradeDisplayCampaignOwningSubcultureProducedResourceTradeModelOptions || (TradeDisplayCampaignOwningSubcultureProducedResourceTradeModelOptions = {}));

var TradeDisplayCampaignOwningSubcultureTradeModelOptions;
(function (TradeDisplayCampaignOwningSubcultureTradeModelOptions) {
    TradeDisplayCampaignOwningSubcultureTradeModelOptions.KEY = new CollectionKey("trade_display_campaign_owning_subculture_trade_model_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._campaign = values["campaign"];
            this._owningSubculture = values["owning_subculture"];
            this._model = values["model"];
            this.priority = values["priority"];
            this.relativeFrequency = values["relative_frequency"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
        get owningSubculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._owningSubculture);
        }
        get model() {
            const collection = this.collectionCache.getCollection(TradeDisplayTradeModels.KEY, TradeDisplayTradeModels.Entry);
            return collection.find(entry => entry.key === this._model);
        }
    }
    TradeDisplayCampaignOwningSubcultureTradeModelOptions.Entry = Entry;
})(TradeDisplayCampaignOwningSubcultureTradeModelOptions || (TradeDisplayCampaignOwningSubcultureTradeModelOptions = {}));

var TradeDisplayCampaignProducedResourceTradeModelOptions;
(function (TradeDisplayCampaignProducedResourceTradeModelOptions) {
    TradeDisplayCampaignProducedResourceTradeModelOptions.KEY = new CollectionKey("trade_display_campaign_produced_resource_trade_model_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._campaign = values["campaign"];
            this._producedResource = values["produced_resource"];
            this._model = values["model"];
            this.priority = values["priority"];
            this.relativeFrequency = values["relative_frequency"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
        get producedResource() {
            const collection = this.collectionCache.getCollection(Resources.KEY, Resources.Entry);
            return collection.find(entry => entry.key === this._producedResource);
        }
        get model() {
            const collection = this.collectionCache.getCollection(TradeDisplayTradeModels.KEY, TradeDisplayTradeModels.Entry);
            return collection.find(entry => entry.key === this._model);
        }
    }
    TradeDisplayCampaignProducedResourceTradeModelOptions.Entry = Entry;
})(TradeDisplayCampaignProducedResourceTradeModelOptions || (TradeDisplayCampaignProducedResourceTradeModelOptions = {}));

var TradeDisplayCampaignTradeModelOptions;
(function (TradeDisplayCampaignTradeModelOptions) {
    TradeDisplayCampaignTradeModelOptions.KEY = new CollectionKey("trade_display_campaign_trade_model_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._campaign = values["campaign"];
            this._model = values["model"];
            this.priority = values["priority"];
            this.relativeFrequency = values["relative_frequency"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
        get model() {
            const collection = this.collectionCache.getCollection(TradeDisplayTradeModels.KEY, TradeDisplayTradeModels.Entry);
            return collection.find(entry => entry.key === this._model);
        }
    }
    TradeDisplayCampaignTradeModelOptions.Entry = Entry;
})(TradeDisplayCampaignTradeModelOptions || (TradeDisplayCampaignTradeModelOptions = {}));

var TradeDisplayGenericTradeModelOptions;
(function (TradeDisplayGenericTradeModelOptions) {
    TradeDisplayGenericTradeModelOptions.KEY = new CollectionKey("trade_display_generic_trade_model_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._model = values["model"];
            this.priority = values["priority"];
            this.relativeFrequency = values["relative_frequency"];
        }
        get model() {
            const collection = this.collectionCache.getCollection(TradeDisplayTradeModels.KEY, TradeDisplayTradeModels.Entry);
            return collection.find(entry => entry.key === this._model);
        }
    }
    TradeDisplayGenericTradeModelOptions.Entry = Entry;
})(TradeDisplayGenericTradeModelOptions || (TradeDisplayGenericTradeModelOptions = {}));

var TradeDisplayOriginatingCultureProducedResourceTradeModelOptions;
(function (TradeDisplayOriginatingCultureProducedResourceTradeModelOptions) {
    TradeDisplayOriginatingCultureProducedResourceTradeModelOptions.KEY = new CollectionKey("trade_display_originating_culture_produced_resource_trade_model_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._originatingCulture = values["originating_culture"];
            this._producedResource = values["produced_resource"];
            this._model = values["model"];
            this.priority = values["priority"];
            this.relativeFrequency = values["relative_frequency"];
        }
        get originatingCulture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._originatingCulture);
        }
        get producedResource() {
            const collection = this.collectionCache.getCollection(Resources.KEY, Resources.Entry);
            return collection.find(entry => entry.key === this._producedResource);
        }
        get model() {
            const collection = this.collectionCache.getCollection(TradeDisplayTradeModels.KEY, TradeDisplayTradeModels.Entry);
            return collection.find(entry => entry.key === this._model);
        }
    }
    TradeDisplayOriginatingCultureProducedResourceTradeModelOptions.Entry = Entry;
})(TradeDisplayOriginatingCultureProducedResourceTradeModelOptions || (TradeDisplayOriginatingCultureProducedResourceTradeModelOptions = {}));

var TradeDisplayOriginatingCultureTradeModelOptions;
(function (TradeDisplayOriginatingCultureTradeModelOptions) {
    TradeDisplayOriginatingCultureTradeModelOptions.KEY = new CollectionKey("trade_display_originating_culture_trade_model_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._originatingCulture = values["originating_culture"];
            this._model = values["model"];
            this.priority = values["priority"];
            this.relativeFrequency = values["relative_frequency"];
        }
        get originatingCulture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._originatingCulture);
        }
        get model() {
            const collection = this.collectionCache.getCollection(TradeDisplayTradeModels.KEY, TradeDisplayTradeModels.Entry);
            return collection.find(entry => entry.key === this._model);
        }
    }
    TradeDisplayOriginatingCultureTradeModelOptions.Entry = Entry;
})(TradeDisplayOriginatingCultureTradeModelOptions || (TradeDisplayOriginatingCultureTradeModelOptions = {}));

var TradeDisplayOriginatingSubcultureProducedResourceTradeModelOptions;
(function (TradeDisplayOriginatingSubcultureProducedResourceTradeModelOptions) {
    TradeDisplayOriginatingSubcultureProducedResourceTradeModelOptions.KEY = new CollectionKey("trade_display_originating_subculture_produced_resource_trade_model_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._originatingSubculture = values["originating_subculture"];
            this._producedResource = values["produced_resource"];
            this._model = values["model"];
            this.priority = values["priority"];
            this.relativeFrequency = values["relative_frequency"];
        }
        get originatingSubculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._originatingSubculture);
        }
        get producedResource() {
            const collection = this.collectionCache.getCollection(Resources.KEY, Resources.Entry);
            return collection.find(entry => entry.key === this._producedResource);
        }
        get model() {
            const collection = this.collectionCache.getCollection(TradeDisplayTradeModels.KEY, TradeDisplayTradeModels.Entry);
            return collection.find(entry => entry.key === this._model);
        }
    }
    TradeDisplayOriginatingSubcultureProducedResourceTradeModelOptions.Entry = Entry;
})(TradeDisplayOriginatingSubcultureProducedResourceTradeModelOptions || (TradeDisplayOriginatingSubcultureProducedResourceTradeModelOptions = {}));

var TradeDisplayOriginatingSubcultureTradeModelOptions;
(function (TradeDisplayOriginatingSubcultureTradeModelOptions) {
    TradeDisplayOriginatingSubcultureTradeModelOptions.KEY = new CollectionKey("trade_display_originating_subculture_trade_model_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._originatingSubculture = values["originating_subculture"];
            this._model = values["model"];
            this.priority = values["priority"];
            this.relativeFrequency = values["relative_frequency"];
        }
        get originatingSubculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._originatingSubculture);
        }
        get model() {
            const collection = this.collectionCache.getCollection(TradeDisplayTradeModels.KEY, TradeDisplayTradeModels.Entry);
            return collection.find(entry => entry.key === this._model);
        }
    }
    TradeDisplayOriginatingSubcultureTradeModelOptions.Entry = Entry;
})(TradeDisplayOriginatingSubcultureTradeModelOptions || (TradeDisplayOriginatingSubcultureTradeModelOptions = {}));

var TradeDisplayOwningCultureProducedResourceTradeModelOptions;
(function (TradeDisplayOwningCultureProducedResourceTradeModelOptions) {
    TradeDisplayOwningCultureProducedResourceTradeModelOptions.KEY = new CollectionKey("trade_display_owning_culture_produced_resource_trade_model_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._owningCulture = values["owning_culture"];
            this._producedResource = values["produced_resource"];
            this._model = values["model"];
            this.priority = values["priority"];
            this.relativeFrequency = values["relative_frequency"];
        }
        get owningCulture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._owningCulture);
        }
        get producedResource() {
            const collection = this.collectionCache.getCollection(Resources.KEY, Resources.Entry);
            return collection.find(entry => entry.key === this._producedResource);
        }
        get model() {
            const collection = this.collectionCache.getCollection(TradeDisplayTradeModels.KEY, TradeDisplayTradeModels.Entry);
            return collection.find(entry => entry.key === this._model);
        }
    }
    TradeDisplayOwningCultureProducedResourceTradeModelOptions.Entry = Entry;
})(TradeDisplayOwningCultureProducedResourceTradeModelOptions || (TradeDisplayOwningCultureProducedResourceTradeModelOptions = {}));

var TradeDisplayOwningCultureTradeModelOptions;
(function (TradeDisplayOwningCultureTradeModelOptions) {
    TradeDisplayOwningCultureTradeModelOptions.KEY = new CollectionKey("trade_display_owning_culture_trade_model_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._owningCulture = values["owning_culture"];
            this._model = values["model"];
            this.priority = values["priority"];
            this.relativeFrequency = values["relative_frequency"];
        }
        get owningCulture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._owningCulture);
        }
        get model() {
            const collection = this.collectionCache.getCollection(TradeDisplayTradeModels.KEY, TradeDisplayTradeModels.Entry);
            return collection.find(entry => entry.key === this._model);
        }
    }
    TradeDisplayOwningCultureTradeModelOptions.Entry = Entry;
})(TradeDisplayOwningCultureTradeModelOptions || (TradeDisplayOwningCultureTradeModelOptions = {}));

var TradeDisplayOwningFactionProducedResourceTradeModelOptions;
(function (TradeDisplayOwningFactionProducedResourceTradeModelOptions) {
    TradeDisplayOwningFactionProducedResourceTradeModelOptions.KEY = new CollectionKey("trade_display_owning_faction_produced_resource_trade_model_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._owningFaction = values["owning_faction"];
            this._producedResource = values["produced_resource"];
            this._model = values["model"];
            this.priority = values["priority"];
            this.relativeFrequency = values["relative_frequency"];
        }
        get owningFaction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._owningFaction);
        }
        get producedResource() {
            const collection = this.collectionCache.getCollection(Resources.KEY, Resources.Entry);
            return collection.find(entry => entry.key === this._producedResource);
        }
        get model() {
            const collection = this.collectionCache.getCollection(TradeDisplayTradeModels.KEY, TradeDisplayTradeModels.Entry);
            return collection.find(entry => entry.key === this._model);
        }
    }
    TradeDisplayOwningFactionProducedResourceTradeModelOptions.Entry = Entry;
})(TradeDisplayOwningFactionProducedResourceTradeModelOptions || (TradeDisplayOwningFactionProducedResourceTradeModelOptions = {}));

var TradeDisplayOwningFactionTradeModelOptions;
(function (TradeDisplayOwningFactionTradeModelOptions) {
    TradeDisplayOwningFactionTradeModelOptions.KEY = new CollectionKey("trade_display_owning_faction_trade_model_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._owningFaction = values["owning_faction"];
            this._model = values["model"];
            this.priority = values["priority"];
            this.relativeFrequency = values["relative_frequency"];
        }
        get owningFaction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._owningFaction);
        }
        get model() {
            const collection = this.collectionCache.getCollection(TradeDisplayTradeModels.KEY, TradeDisplayTradeModels.Entry);
            return collection.find(entry => entry.key === this._model);
        }
    }
    TradeDisplayOwningFactionTradeModelOptions.Entry = Entry;
})(TradeDisplayOwningFactionTradeModelOptions || (TradeDisplayOwningFactionTradeModelOptions = {}));

var TradeDisplayOwningSubcultureProducedResourceTradeModelOptions;
(function (TradeDisplayOwningSubcultureProducedResourceTradeModelOptions) {
    TradeDisplayOwningSubcultureProducedResourceTradeModelOptions.KEY = new CollectionKey("trade_display_owning_subculture_produced_resource_trade_model_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._owningSubculture = values["owning_subculture"];
            this._producedResource = values["produced_resource"];
            this._model = values["model"];
            this.priority = values["priority"];
            this.relativeFrequency = values["relative_frequency"];
        }
        get owningSubculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._owningSubculture);
        }
        get producedResource() {
            const collection = this.collectionCache.getCollection(Resources.KEY, Resources.Entry);
            return collection.find(entry => entry.key === this._producedResource);
        }
        get model() {
            const collection = this.collectionCache.getCollection(TradeDisplayTradeModels.KEY, TradeDisplayTradeModels.Entry);
            return collection.find(entry => entry.key === this._model);
        }
    }
    TradeDisplayOwningSubcultureProducedResourceTradeModelOptions.Entry = Entry;
})(TradeDisplayOwningSubcultureProducedResourceTradeModelOptions || (TradeDisplayOwningSubcultureProducedResourceTradeModelOptions = {}));

var TradeDisplayOwningSubcultureTradeModelOptions;
(function (TradeDisplayOwningSubcultureTradeModelOptions) {
    TradeDisplayOwningSubcultureTradeModelOptions.KEY = new CollectionKey("trade_display_owning_subculture_trade_model_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._owningSubculture = values["owning_subculture"];
            this._model = values["model"];
            this.priority = values["priority"];
            this.relativeFrequency = values["relative_frequency"];
        }
        get owningSubculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._owningSubculture);
        }
        get model() {
            const collection = this.collectionCache.getCollection(TradeDisplayTradeModels.KEY, TradeDisplayTradeModels.Entry);
            return collection.find(entry => entry.key === this._model);
        }
    }
    TradeDisplayOwningSubcultureTradeModelOptions.Entry = Entry;
})(TradeDisplayOwningSubcultureTradeModelOptions || (TradeDisplayOwningSubcultureTradeModelOptions = {}));

var TradeDisplayProducedResourceTradeModelOptions;
(function (TradeDisplayProducedResourceTradeModelOptions) {
    TradeDisplayProducedResourceTradeModelOptions.KEY = new CollectionKey("trade_display_produced_resource_trade_model_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._producedResource = values["produced_resource"];
            this._model = values["model"];
            this.priority = values["priority"];
            this.relativeFrequency = values["relative_frequency"];
        }
        get producedResource() {
            const collection = this.collectionCache.getCollection(Resources.KEY, Resources.Entry);
            return collection.find(entry => entry.key === this._producedResource);
        }
        get model() {
            const collection = this.collectionCache.getCollection(TradeDisplayTradeModels.KEY, TradeDisplayTradeModels.Entry);
            return collection.find(entry => entry.key === this._model);
        }
    }
    TradeDisplayProducedResourceTradeModelOptions.Entry = Entry;
})(TradeDisplayProducedResourceTradeModelOptions || (TradeDisplayProducedResourceTradeModelOptions = {}));

var TradeNodeGroups;
(function (TradeNodeGroups) {
    TradeNodeGroups.KEY = new CollectionKey("trade_node_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.displayName = values["display_name"];
        }
    }
    TradeNodeGroups.Entry = Entry;
})(TradeNodeGroups || (TradeNodeGroups = {}));

var TradeNodes;
(function (TradeNodes) {
    TradeNodes.KEY = new CollectionKey("trade_nodes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["ID"];
            this._commodity = values["commodity"];
            this.baseQuantity = values["base_quantity"];
            this.percentageIncreasePerAgent = values["percentage_increase_per_agent"];
            this.maximumPercentageIncrease = values["maximum_percentage_increase"];
            this.displayName = values["display_name"];
            this._group = values["group"];
        }
        get commodity() {
            const collection = this.collectionCache.getCollection(Commodities.KEY, Commodities.Entry);
            return collection.find(entry => entry._key === this._commodity);
        }
        get group() {
            const collection = this.collectionCache.getCollection(TradeNodeGroups.KEY, TradeNodeGroups.Entry);
            return collection.find(entry => entry.key === this._group);
        }
    }
    TradeNodes.Entry = Entry;
})(TradeNodes || (TradeNodes = {}));

var TraitLevelEffects;
(function (TraitLevelEffects) {
    TraitLevelEffects.KEY = new CollectionKey("trait_level_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._traitLevel = values["trait_level"];
            this._effect = values["effect"];
            this.value = values["value"];
            this._effectScope = values["effect_scope"];
        }
        get traitLevel() {
            const collection = this.collectionCache.getCollection(CharacterTraitLevels.KEY, CharacterTraitLevels.Entry);
            return collection.find(entry => entry.key === this._traitLevel);
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects.KEY, Effects.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get effectScope() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes.KEY, CampaignEffectScopes.Entry);
            return collection.find(entry => entry.key === this._effectScope);
        }
    }
    TraitLevelEffects.Entry = Entry;
})(TraitLevelEffects || (TraitLevelEffects = {}));

var TraitToAntitraits;
(function (TraitToAntitraits) {
    TraitToAntitraits.KEY = new CollectionKey("trait_to_antitraits");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._trait = values["trait"];
            this._antitrait = values["antitrait"];
        }
        get trait() {
            const collection = this.collectionCache.getCollection(TraitInfo.KEY, TraitInfo.Entry);
            return collection.find(entry => entry.trait === this._trait);
        }
        get antitrait() {
            const collection = this.collectionCache.getCollection(TraitInfo.KEY, TraitInfo.Entry);
            return collection.find(entry => entry.trait === this._antitrait);
        }
    }
    TraitToAntitraits.Entry = Entry;
})(TraitToAntitraits || (TraitToAntitraits = {}));

var TraitToIncludedAgents;
(function (TraitToIncludedAgents) {
    TraitToIncludedAgents.KEY = new CollectionKey("trait_to_included_agents");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._trait = values["trait"];
            this._agent = values["agent"];
        }
        get trait() {
            const collection = this.collectionCache.getCollection(TraitInfo.KEY, TraitInfo.Entry);
            return collection.find(entry => entry.trait === this._trait);
        }
        get agent() {
            const collection = this.collectionCache.getCollection(Agents.KEY, Agents.Entry);
            return collection.find(entry => entry.key === this._agent);
        }
    }
    TraitToIncludedAgents.Entry = Entry;
})(TraitToIncludedAgents || (TraitToIncludedAgents = {}));

var TraitTriggers;
(function (TraitTriggers) {
    TraitTriggers.KEY = new CollectionKey("trait_triggers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.trigger = values["trigger"];
            this._event = values["event"];
            this.conditions = values["conditions"];
        }
        get event() {
            const collection = this.collectionCache.getCollection(TriggerEvents.KEY, TriggerEvents.Entry);
            return collection.find(entry => entry.event === this._event);
        }
    }
    TraitTriggers.Entry = Entry;
})(TraitTriggers || (TraitTriggers = {}));

var TranslatedTexts;
(function (TranslatedTexts) {
    TranslatedTexts.KEY = new CollectionKey("translated_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._language = values["language"];
            this.lastEnglishText = values["last_english_text"];
            this.translatedText = values["translated_text"];
            this.requiresTranslation = !!values["requires_translation"];
            this.requiresRecording = !!values["requires_recording"];
        }
        get language() {
            const collection = this.collectionCache.getCollection(Languages.KEY, Languages.Entry);
            return collection.find(entry => entry.key === this._language);
        }
    }
    TranslatedTexts.Entry = Entry;
})(TranslatedTexts || (TranslatedTexts = {}));

var TriggerEffects;
(function (TriggerEffects) {
    TriggerEffects.KEY = new CollectionKey("trigger_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._trigger = values["trigger"];
            this._trait = values["trait"];
            this.value = values["value"];
            this.chance = values["chance"];
        }
        get trigger() {
            const collection = this.collectionCache.getCollection(TraitTriggers.KEY, TraitTriggers.Entry);
            return collection.find(entry => entry.trigger === this._trigger);
        }
        get trait() {
            const collection = this.collectionCache.getCollection(TraitInfo.KEY, TraitInfo.Entry);
            return collection.find(entry => entry.trait === this._trait);
        }
    }
    TriggerEffects.Entry = Entry;
})(TriggerEffects || (TriggerEffects = {}));

var TriggerEventToExcludedAgentTypes;
(function (TriggerEventToExcludedAgentTypes) {
    TriggerEventToExcludedAgentTypes.KEY = new CollectionKey("trigger_event_to_excluded_agent_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._event = values["event"];
            this._agent = values["agent"];
        }
    }
    TriggerEventToExcludedAgentTypes.Entry = Entry;
})(TriggerEventToExcludedAgentTypes || (TriggerEventToExcludedAgentTypes = {}));

var UiedComponentTexts;
(function (UiedComponentTexts) {
    UiedComponentTexts.KEY = new CollectionKey("uied_component_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.componentLabel = values["component_label"];
            this.localisedString = values["localised_string"];
        }
    }
    UiedComponentTexts.Entry = Entry;
})(UiedComponentTexts || (UiedComponentTexts = {}));

var UiedTextLayouts;
(function (UiedTextLayouts) {
    UiedTextLayouts.KEY = new CollectionKey("uied_text_layouts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.layoutId = values["layout_id"];
            this.layoutLocation = values["layout_location"];
        }
    }
    UiedTextLayouts.Entry = Entry;
})(UiedTextLayouts || (UiedTextLayouts = {}));

var UiedComponentAddressesToTexts;
(function (UiedComponentAddressesToTexts) {
    UiedComponentAddressesToTexts.KEY = new CollectionKey("uied_component_addresses_to_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._componentLabel = values["component_label"];
            this.componentAddress = values["component_address"];
            this._componentLayout = values["component_layout"];
        }
        get componentLabel() {
            const collection = this.collectionCache.getCollection(UiedComponentTexts.KEY, UiedComponentTexts.Entry);
            return collection.find(entry => entry.componentLabel === this._componentLabel);
        }
        get componentLayout() {
            const collection = this.collectionCache.getCollection(UiedTextLayouts.KEY, UiedTextLayouts.Entry);
            return collection.find(entry => entry.layoutId === this._componentLayout);
        }
    }
    UiedComponentAddressesToTexts.Entry = Entry;
})(UiedComponentAddressesToTexts || (UiedComponentAddressesToTexts = {}));

var UiComponentLocalisation;
(function (UiComponentLocalisation) {
    UiComponentLocalisation.KEY = new CollectionKey("ui_component_localisation");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.componentLabel = values["component_label"];
            this.localisedString = values["localised_string"];
        }
    }
    UiComponentLocalisation.Entry = Entry;
})(UiComponentLocalisation || (UiComponentLocalisation = {}));

var UiComponentAddressesWithLocalisation;
(function (UiComponentAddressesWithLocalisation) {
    UiComponentAddressesWithLocalisation.KEY = new CollectionKey("ui_component_addresses_with_localisation");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._componentLabel = values["component_label"];
            this.componentAddress = values["component_address"];
        }
        get componentLabel() {
            const collection = this.collectionCache.getCollection(UiComponentLocalisation.KEY, UiComponentLocalisation.Entry);
            return collection.find(entry => entry.componentLabel === this._componentLabel);
        }
    }
    UiComponentAddressesWithLocalisation.Entry = Entry;
})(UiComponentAddressesWithLocalisation || (UiComponentAddressesWithLocalisation = {}));

var UiUnitStatsFilters;
(function (UiUnitStatsFilters) {
    UiUnitStatsFilters.KEY = new CollectionKey("ui_unit_stats_filters");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    UiUnitStatsFilters.Entry = Entry;
})(UiUnitStatsFilters || (UiUnitStatsFilters = {}));

var UiUnitStatToClasses;
(function (UiUnitStatToClasses) {
    UiUnitStatToClasses.KEY = new CollectionKey("ui_unit_stat_to_classes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._statKey = values["stat_key"];
            this._unitClass = values["unit_class"];
            this.listOrder = values["list_order"];
            this._filter = values["filter"];
        }
        get statKey() {
            const collection = this.collectionCache.getCollection(UiUnitStats.KEY, UiUnitStats.Entry);
            return collection.find(entry => entry.key === this._statKey);
        }
        get unitClass() {
            const collection = this.collectionCache.getCollection(UnitClass.KEY, UnitClass.Entry);
            return collection.find(entry => entry.key === this._unitClass);
        }
        get filter() {
            const collection = this.collectionCache.getCollection(UiUnitStatsFilters.KEY, UiUnitStatsFilters.Entry);
            return collection.find(entry => entry.key === this._filter);
        }
    }
    UiUnitStatToClasses.Entry = Entry;
})(UiUnitStatToClasses || (UiUnitStatToClasses = {}));

var UniformTypeEnums;
(function (UniformTypeEnums) {
    UniformTypeEnums.KEY = new CollectionKey("uniform_type_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    UniformTypeEnums.Entry = Entry;
})(UniformTypeEnums || (UniformTypeEnums = {}));

var UnitsCustomBattlePermissions;
(function (UnitsCustomBattlePermissions) {
    UnitsCustomBattlePermissions.KEY = new CollectionKey("units_custom_battle_permissions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unit = values["unit"];
            this._faction = values["faction"];
            this.generalUnit = !!values["general_unit"];
            this.siegeUnitAttacker = !!values["siege_unit_attacker"];
            this.siegeUnitDefender = !!values["siege_unit_defender"];
        }
        get unit() {
            const collection = this.collectionCache.getCollection(MainUnits.KEY, MainUnits.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    UnitsCustomBattlePermissions.Entry = Entry;
})(UnitsCustomBattlePermissions || (UnitsCustomBattlePermissions = {}));

var UnitsSpecialEdition;
(function (UnitsSpecialEdition) {
    UnitsSpecialEdition.KEY = new CollectionKey("units_special_edition");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
        }
    }
    UnitsSpecialEdition.Entry = Entry;
})(UnitsSpecialEdition || (UnitsSpecialEdition = {}));

var UnitsToExclusiveFactionPermissions;
(function (UnitsToExclusiveFactionPermissions) {
    UnitsToExclusiveFactionPermissions.KEY = new CollectionKey("units_to_exclusive_faction_permissions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this._faction = values["faction"];
            this.allowed = !!values["allowed"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(MainUnits.KEY, MainUnits.Entry);
            return collection.find(entry => entry.unit === this._key);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    UnitsToExclusiveFactionPermissions.Entry = Entry;
})(UnitsToExclusiveFactionPermissions || (UnitsToExclusiveFactionPermissions = {}));

var UnitsToGovTypeOutcomesEnum;
(function (UnitsToGovTypeOutcomesEnum) {
    UnitsToGovTypeOutcomesEnum.KEY = new CollectionKey("units_to_gov_type_outcomes_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    UnitsToGovTypeOutcomesEnum.Entry = Entry;
})(UnitsToGovTypeOutcomesEnum || (UnitsToGovTypeOutcomesEnum = {}));

var UnitsToGovTypePermissions;
(function (UnitsToGovTypePermissions) {
    UnitsToGovTypePermissions.KEY = new CollectionKey("units_to_gov_type_permissions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.uniqueNumber = values["unique_number"];
            this._key = values["key"];
            this._govType = values["gov_type"];
            this._outcome = values["outcome"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(MainUnits.KEY, MainUnits.Entry);
            return collection.find(entry => entry.unit === this._key);
        }
        get govType() {
            const collection = this.collectionCache.getCollection(GovernmentTypes.KEY, GovernmentTypes.Entry);
            return collection.find(entry => entry.governmentType === this._govType);
        }
        get outcome() {
            const collection = this.collectionCache.getCollection(UnitsToGovTypeOutcomesEnum.KEY, UnitsToGovTypeOutcomesEnum.Entry);
            return collection.find(entry => entry.key === this._outcome);
        }
    }
    UnitsToGovTypePermissions.Entry = Entry;
})(UnitsToGovTypePermissions || (UnitsToGovTypePermissions = {}));

var UnitsToGovTypesConversionJcts;
(function (UnitsToGovTypesConversionJcts) {
    UnitsToGovTypesConversionJcts.KEY = new CollectionKey("units_to_gov_types_conversion_jcts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this._unit = values["unit"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(UnitsToGovTypePermissions.KEY, UnitsToGovTypePermissions.Entry);
            return collection.find(entry => entry.uniqueNumber === this._key);
        }
        get unit() {
            const collection = this.collectionCache.getCollection(MainUnits.KEY, MainUnits.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
    }
    UnitsToGovTypesConversionJcts.Entry = Entry;
})(UnitsToGovTypesConversionJcts || (UnitsToGovTypesConversionJcts = {}));

var UnitsToGovTypeOutcomes;
(function (UnitsToGovTypeOutcomes) {
    UnitsToGovTypeOutcomes.KEY = new CollectionKey("units_to_gov_type_outcomes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this._govType = values["gov_type"];
            this._outcome = values["outcome"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(Units.KEY, Units.Entry);
            return collection.find(entry => entry.key === this._key);
        }
        get govType() {
            const collection = this.collectionCache.getCollection(GovernmentTypes.KEY, GovernmentTypes.Entry);
            return collection.find(entry => entry.governmentType === this._govType);
        }
        get outcome() {
            const collection = this.collectionCache.getCollection(UnitsToGovTypeOutcomesEnum.KEY, UnitsToGovTypeOutcomesEnum.Entry);
            return collection.find(entry => entry.key === this._outcome);
        }
    }
    UnitsToGovTypeOutcomes.Entry = Entry;
})(UnitsToGovTypeOutcomes || (UnitsToGovTypeOutcomes = {}));

var UnitsToGroupingsMilitaryPermissions;
(function (UnitsToGroupingsMilitaryPermissions) {
    UnitsToGroupingsMilitaryPermissions.KEY = new CollectionKey("units_to_groupings_military_permissions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unit = values["unit"];
            this._militaryGroup = values["military_group"];
        }
        get unit() {
            const collection = this.collectionCache.getCollection(MainUnits.KEY, MainUnits.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
        get militaryGroup() {
            const collection = this.collectionCache.getCollection(GroupingsMilitary.KEY, GroupingsMilitary.Entry);
            return collection.find(entry => entry.militaryGroup === this._militaryGroup);
        }
    }
    UnitsToGroupingsMilitaryPermissions.Entry = Entry;
})(UnitsToGroupingsMilitaryPermissions || (UnitsToGroupingsMilitaryPermissions = {}));

var UnitAttributesToGroupsJunctions;
(function (UnitAttributesToGroupsJunctions) {
    UnitAttributesToGroupsJunctions.KEY = new CollectionKey("unit_attributes_to_groups_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._attribute = values["attribute"];
            this._attributeGroup = values["attribute_group"];
        }
        get attribute() {
            const collection = this.collectionCache.getCollection(UnitAttributes.KEY, UnitAttributes.Entry);
            return collection.find(entry => entry.key === this._attribute);
        }
        get attributeGroup() {
            const collection = this.collectionCache.getCollection(UnitAttributesGroups.KEY, UnitAttributesGroups.Entry);
            return collection.find(entry => entry.groupName === this._attributeGroup);
        }
    }
    UnitAttributesToGroupsJunctions.Entry = Entry;
})(UnitAttributesToGroupsJunctions || (UnitAttributesToGroupsJunctions = {}));

var UnitClassToPopulationClassPriorities;
(function (UnitClassToPopulationClassPriorities) {
    UnitClassToPopulationClassPriorities.KEY = new CollectionKey("unit_class_to_population_class_priorities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unitClass = values["unit_class"];
            this.upperClassPriority = values["upper_class_priority"];
            this.middleClassPriority = values["middle_class_priority"];
            this.lowerClassPriority = values["lower_class_priority"];
        }
        get unitClass() {
            const collection = this.collectionCache.getCollection(UnitClass.KEY, UnitClass.Entry);
            return collection.find(entry => entry.key === this._unitClass);
        }
    }
    UnitClassToPopulationClassPriorities.Entry = Entry;
})(UnitClassToPopulationClassPriorities || (UnitClassToPopulationClassPriorities = {}));

var UnitDrillsEnum;
(function (UnitDrillsEnum) {
    UnitDrillsEnum.KEY = new CollectionKey("unit_drills_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    UnitDrillsEnum.Entry = Entry;
})(UnitDrillsEnum || (UnitDrillsEnum = {}));

var UnitDrillSetEnum;
(function (UnitDrillSetEnum) {
    UnitDrillSetEnum.KEY = new CollectionKey("unit_drill_set_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.unitDrillSet = values["unit_drill_set"];
        }
    }
    UnitDrillSetEnum.Entry = Entry;
})(UnitDrillSetEnum || (UnitDrillSetEnum = {}));

var UnitExperienceBonuses;
(function (UnitExperienceBonuses) {
    UnitExperienceBonuses.KEY = new CollectionKey("unit_experience_bonuses");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._stat = values["stat"];
            this.value = values["value"];
            this.growthRate = values["growth_rate"];
            this.growthScalar = values["growth_scalar"];
        }
        get stat() {
            const collection = this.collectionCache.getCollection(UiUnitStats.KEY, UiUnitStats.Entry);
            return collection.find(entry => entry.key === this._stat);
        }
    }
    UnitExperienceBonuses.Entry = Entry;
})(UnitExperienceBonuses || (UnitExperienceBonuses = {}));

var UnitExperienceThresholds;
(function (UnitExperienceThresholds) {
    UnitExperienceThresholds.KEY = new CollectionKey("unit_experience_thresholds");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.value = values["value"];
        }
    }
    UnitExperienceThresholds.Entry = Entry;
})(UnitExperienceThresholds || (UnitExperienceThresholds = {}));

var UnitExperienceThresholdModifiers;
(function (UnitExperienceThresholdModifiers) {
    UnitExperienceThresholdModifiers.KEY = new CollectionKey("unit_experience_threshold_modifiers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this.modifier = values["modifier"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(MainUnits.KEY, MainUnits.Entry);
            return collection.find(entry => entry.unit === this._key);
        }
    }
    UnitExperienceThresholdModifiers.Entry = Entry;
})(UnitExperienceThresholdModifiers || (UnitExperienceThresholdModifiers = {}));

var KvFatigue;
(function (KvFatigue) {
    KvFatigue.KEY = new CollectionKey("_kv_fatigue");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.value = values["value"];
            this.description = values["description"];
        }
    }
    KvFatigue.Entry = Entry;
})(KvFatigue || (KvFatigue = {}));

var UnitFatigueEffects;
(function (UnitFatigueEffects) {
    UnitFatigueEffects.KEY = new CollectionKey("unit_fatigue_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._fatigueLevel = values["fatigue_level"];
            this._stat = values["stat"];
            this.value = values["value"];
        }
        get fatigueLevel() {
            const collection = this.collectionCache.getCollection(KvFatigue.KEY, KvFatigue.Entry);
            return collection.find(entry => entry.key === this._fatigueLevel);
        }
        get stat() {
            const collection = this.collectionCache.getCollection(UiUnitStats.KEY, UiUnitStats.Entry);
            return collection.find(entry => entry.key === this._stat);
        }
    }
    UnitFatigueEffects.Entry = Entry;
})(UnitFatigueEffects || (UnitFatigueEffects = {}));

var UnitFormations;
(function (UnitFormations) {
    UnitFormations.KEY = new CollectionKey("unit_formations");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    UnitFormations.Entry = Entry;
})(UnitFormations || (UnitFormations = {}));

var UnitFormationTypes;
(function (UnitFormationTypes) {
    UnitFormationTypes.KEY = new CollectionKey("unit_formation_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    UnitFormationTypes.Entry = Entry;
})(UnitFormationTypes || (UnitFormationTypes = {}));

var UnitGroundTypeMovementModifiers;
(function (UnitGroundTypeMovementModifiers) {
    UnitGroundTypeMovementModifiers.KEY = new CollectionKey("unit_ground_type_movement_modifiers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._groundType = values["ground_type"];
            this._category = values["category"];
            this.speedModifier = values["speed_modifier"];
        }
        get groundType() {
            const collection = this.collectionCache.getCollection(GroundTypes.KEY, GroundTypes.Entry);
            return collection.find(entry => entry.type === this._groundType);
        }
        get category() {
            const collection = this.collectionCache.getCollection(UnitCategory.KEY, UnitCategory.Entry);
            return collection.find(entry => entry.key === this._category);
        }
    }
    UnitGroundTypeMovementModifiers.Entry = Entry;
})(UnitGroundTypeMovementModifiers || (UnitGroundTypeMovementModifiers = {}));

var UnitNavalArtilleryPositions;
(function (UnitNavalArtilleryPositions) {
    UnitNavalArtilleryPositions.KEY = new CollectionKey("unit_naval_artillery_positions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    UnitNavalArtilleryPositions.Entry = Entry;
})(UnitNavalArtilleryPositions || (UnitNavalArtilleryPositions = {}));

var UnitNavalDamageSites;
(function (UnitNavalDamageSites) {
    UnitNavalDamageSites.KEY = new CollectionKey("unit_naval_damage_sites");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    UnitNavalDamageSites.Entry = Entry;
})(UnitNavalDamageSites || (UnitNavalDamageSites = {}));

var UnitPopulationCaps;
(function (UnitPopulationCaps) {
    UnitPopulationCaps.KEY = new CollectionKey("unit_population_caps");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unit = values["unit"];
            this._faction = values["faction"];
            this.unitCap = values["unit_cap"];
        }
    }
    UnitPopulationCaps.Entry = Entry;
})(UnitPopulationCaps || (UnitPopulationCaps = {}));

var UnitRegimentNames;
(function (UnitRegimentNames) {
    UnitRegimentNames.KEY = new CollectionKey("unit_regiment_names");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._nameGroup = values["name_group"];
            this._unitCaste = values["unit_caste"];
            this._unitName = values["unit_name"];
            this.nameOrder = values["name_order"];
        }
        get nameGroup() {
            const collection = this.collectionCache.getCollection(NamesGroups.KEY, NamesGroups.Entry);
            return collection.find(entry => entry.key === this._nameGroup);
        }
        get unitCaste() {
            const collection = this.collectionCache.getCollection(UnitCastes.KEY, UnitCastes.Entry);
            return collection.find(entry => entry.caste === this._unitCaste);
        }
    }
    UnitRegimentNames.Entry = Entry;
})(UnitRegimentNames || (UnitRegimentNames = {}));

var UnitRegimentNamesLocalisationLookup;
(function (UnitRegimentNamesLocalisationLookup) {
    UnitRegimentNamesLocalisationLookup.KEY = new CollectionKey("unit_regiment_names_localisation_lookup");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.unitName = values["unit_name"];
        }
    }
    UnitRegimentNamesLocalisationLookup.Entry = Entry;
})(UnitRegimentNamesLocalisationLookup || (UnitRegimentNamesLocalisationLookup = {}));

var UnitRequiredTechnologyJunctions;
(function (UnitRequiredTechnologyJunctions) {
    UnitRequiredTechnologyJunctions.KEY = new CollectionKey("unit_required_technology_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unitKey = values["unit_key"];
            this._technologyKey = values["technology_key"];
        }
        get unitKey() {
            const collection = this.collectionCache.getCollection(MainUnits.KEY, MainUnits.Entry);
            return collection.find(entry => entry.unit === this._unitKey);
        }
        get technologyKey() {
            const collection = this.collectionCache.getCollection(Technologies.KEY, Technologies.Entry);
            return collection.find(entry => entry.key === this._technologyKey);
        }
    }
    UnitRequiredTechnologyJunctions.Entry = Entry;
})(UnitRequiredTechnologyJunctions || (UnitRequiredTechnologyJunctions = {}));

var UnitSetToUnitJunctions;
(function (UnitSetToUnitJunctions) {
    UnitSetToUnitJunctions.KEY = new CollectionKey("unit_set_to_unit_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unitSet = values["unit_set"];
            this._unitRecord = values["unit_record"];
            this._unitCaste = values["unit_caste"];
            this._unitCategory = values["unit_category"];
            this._unitClass = values["unit_class"];
            this.exclude = !!values["exclude"];
        }
        get unitSet() {
            const collection = this.collectionCache.getCollection(UnitSets.KEY, UnitSets.Entry);
            return collection.find(entry => entry.key === this._unitSet);
        }
        get unitRecord() {
            const collection = this.collectionCache.getCollection(MainUnits.KEY, MainUnits.Entry);
            return collection.find(entry => entry.unit === this._unitRecord);
        }
        get unitCaste() {
            const collection = this.collectionCache.getCollection(UnitCastes.KEY, UnitCastes.Entry);
            return collection.find(entry => entry.caste === this._unitCaste);
        }
        get unitCategory() {
            const collection = this.collectionCache.getCollection(UnitCategory.KEY, UnitCategory.Entry);
            return collection.find(entry => entry.key === this._unitCategory);
        }
        get unitClass() {
            const collection = this.collectionCache.getCollection(UnitClass.KEY, UnitClass.Entry);
            return collection.find(entry => entry.key === this._unitClass);
        }
    }
    UnitSetToUnitJunctions.Entry = Entry;
})(UnitSetToUnitJunctions || (UnitSetToUnitJunctions = {}));

var UnitSpecialAbilityEffects;
(function (UnitSpecialAbilityEffects) {
    UnitSpecialAbilityEffects.KEY = new CollectionKey("unit_special_ability_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._id = values["id"];
            this._unitStatModifier = values["unit_stat_modifier"];
            this.value = values["value"];
        }
    }
    UnitSpecialAbilityEffects.Entry = Entry;
})(UnitSpecialAbilityEffects || (UnitSpecialAbilityEffects = {}));

var UnitSpecialAbilityTypes;
(function (UnitSpecialAbilityTypes) {
    UnitSpecialAbilityTypes.KEY = new CollectionKey("unit_special_ability_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.specialAbilityType = values["special_ability_type"];
        }
    }
    UnitSpecialAbilityTypes.Entry = Entry;
})(UnitSpecialAbilityTypes || (UnitSpecialAbilityTypes = {}));

var UnitStatsFiringMechanismEnum;
(function (UnitStatsFiringMechanismEnum) {
    UnitStatsFiringMechanismEnum.KEY = new CollectionKey("unit_stats_firing_mechanism_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    UnitStatsFiringMechanismEnum.Entry = Entry;
})(UnitStatsFiringMechanismEnum || (UnitStatsFiringMechanismEnum = {}));

var UnitStatsLandExperienceBonuses;
(function (UnitStatsLandExperienceBonuses) {
    UnitStatsLandExperienceBonuses.KEY = new CollectionKey("unit_stats_land_experience_bonuses");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.xpLevel = values["xp_level"];
            this.meleeAttack = values["melee_attack"];
            this.meleeDefence = values["melee_defence"];
            this.coreReloadingSkill = values["core_reloading_skill"];
            this.morale = values["morale"];
            this.coreMarksmanship = values["core_marksmanship"];
            this.fatigue = values["fatigue"];
            this.mpFixedCost = values["mp_fixed_cost"];
            this.mpExperienceCostMultiplier = values["mp_experience_cost_multiplier"];
        }
    }
    UnitStatsLandExperienceBonuses.Entry = Entry;
})(UnitStatsLandExperienceBonuses || (UnitStatsLandExperienceBonuses = {}));

var UnitStatsNavalCrew;
(function (UnitStatsNavalCrew) {
    UnitStatsNavalCrew.KEY = new CollectionKey("unit_stats_naval_crew");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.unitType = values["unit_type"];
            this.coreLoadingSkill = values["core_loading_skill"];
            this.coreMarksmanship = values["core_marksmanship"];
            this.meleeAttack = values["melee_attack"];
            this.meleeDefence = values["melee_defence"];
            this.meleeWeaponType = values["melee_weapon_type"];
            this.pistols = !!values["pistols"];
            this.ammo = values["ammo"];
            this._battleEntity = values["battle_entity"];
            this._soldierModel = values["soldier_model"];
            this._manAnimationsTable = values["man_animations_table"];
            this.equipmentTheme = values["equipment_theme"];
            this.armourAudio = values["armour_audio"];
            this.armour = values["armour"];
            this.spacing = values["spacing"];
            this.discipline = values["discipline"];
            this._missileType = values["missile_type"];
        }
        get battleEntity() {
            const collection = this.collectionCache.getCollection(BattleEntities.KEY, BattleEntities.Entry);
            return collection.find(entry => entry.key === this._battleEntity);
        }
        get soldierModel() {
            const collection = this.collectionCache.getCollection(WarscapeAnimated.KEY, WarscapeAnimated.Entry);
            return collection.find(entry => entry.key === this._soldierModel);
        }
        get manAnimationsTable() {
            const collection = this.collectionCache.getCollection(BattleAnimationsTable.KEY, BattleAnimationsTable.Entry);
            return collection.find(entry => entry.key === this._manAnimationsTable);
        }
        get missileType() {
            const collection = this.collectionCache.getCollection(Projectiles.KEY, Projectiles.Entry);
            return collection.find(entry => entry.key === this._missileType);
        }
    }
    UnitStatsNavalCrew.Entry = Entry;
})(UnitStatsNavalCrew || (UnitStatsNavalCrew = {}));

var UnitStatsNavalExperienceBonuses;
(function (UnitStatsNavalExperienceBonuses) {
    UnitStatsNavalExperienceBonuses.KEY = new CollectionKey("unit_stats_naval_experience_bonuses");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.xpLevel = values["xp_level"];
            this.meleeDefence = values["melee_defence"];
            this.meleeAttack = values["melee_attack"];
            this.coreGunnerLoadingSkill = values["core_gunner_loading_skill"];
            this.coreGunnerMarksmanship = values["core_gunner_marksmanship"];
            this.morale = values["morale"];
            this.mpFixedCost = values["mp_fixed_cost"];
            this.mpExperienceCostMultiplier = values["mp_experience_cost_multiplier"];
        }
    }
    UnitStatsNavalExperienceBonuses.Entry = Entry;
})(UnitStatsNavalExperienceBonuses || (UnitStatsNavalExperienceBonuses = {}));

var UnitStatsPrimaryMissileWeaponEnum;
(function (UnitStatsPrimaryMissileWeaponEnum) {
    UnitStatsPrimaryMissileWeaponEnum.KEY = new CollectionKey("unit_stats_primary_missile_weapon_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    UnitStatsPrimaryMissileWeaponEnum.Entry = Entry;
})(UnitStatsPrimaryMissileWeaponEnum || (UnitStatsPrimaryMissileWeaponEnum = {}));

var UnitStatsShipCategories;
(function (UnitStatsShipCategories) {
    UnitStatsShipCategories.KEY = new CollectionKey("unit_stats_ship_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    UnitStatsShipCategories.Entry = Entry;
})(UnitStatsShipCategories || (UnitStatsShipCategories = {}));

var UnitStatsSkeletonMeleeEnum;
(function (UnitStatsSkeletonMeleeEnum) {
    UnitStatsSkeletonMeleeEnum.KEY = new CollectionKey("unit_stats_skeleton_melee_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    UnitStatsSkeletonMeleeEnum.Entry = Entry;
})(UnitStatsSkeletonMeleeEnum || (UnitStatsSkeletonMeleeEnum = {}));

var UnitStatsSkeletonMissileEnum;
(function (UnitStatsSkeletonMissileEnum) {
    UnitStatsSkeletonMissileEnum.KEY = new CollectionKey("unit_stats_skeleton_missile_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    UnitStatsSkeletonMissileEnum.Entry = Entry;
})(UnitStatsSkeletonMissileEnum || (UnitStatsSkeletonMissileEnum = {}));

var UnitToUnitAbilitiesJunctions;
(function (UnitToUnitAbilitiesJunctions) {
    UnitToUnitAbilitiesJunctions.KEY = new CollectionKey("unit_to_unit_abilities_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unitName = values["unit_name"];
            this._ability = values["ability"];
        }
        get unitName() {
            const collection = this.collectionCache.getCollection(Units.KEY, Units.Entry);
            return collection.find(entry => entry.key === this._unitName);
        }
        get ability() {
            const collection = this.collectionCache.getCollection(UnitAbilities.KEY, UnitAbilities.Entry);
            return collection.find(entry => entry.key === this._ability);
        }
    }
    UnitToUnitAbilitiesJunctions.Entry = Entry;
})(UnitToUnitAbilitiesJunctions || (UnitToUnitAbilitiesJunctions = {}));

var UnitTypes;
(function (UnitTypes) {
    UnitTypes.KEY = new CollectionKey("unit_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.type = values["type"];
        }
    }
    UnitTypes.Entry = Entry;
})(UnitTypes || (UnitTypes = {}));

var UnitTypeEnums;
(function (UnitTypeEnums) {
    UnitTypeEnums.KEY = new CollectionKey("unit_type_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    UnitTypeEnums.Entry = Entry;
})(UnitTypeEnums || (UnitTypeEnums = {}));

var UnitVariants;
(function (UnitVariants) {
    UnitVariants.KEY = new CollectionKey("unit_variants");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
            this._faction = values["faction"];
            this._unit = values["unit"];
            this._variant = values["variant"];
            this.heightVariation = values["height_variation"];
            this.heightScale = values["height_scale"];
            this.unitCard = values["unit_card"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get unit() {
            const collection = this.collectionCache.getCollection(LandUnits.KEY, LandUnits.Entry);
            return collection.find(entry => entry.key === this._unit);
        }
        get variant() {
            const collection = this.collectionCache.getCollection(Variants.KEY, Variants.Entry);
            return collection.find(entry => entry.variantName === this._variant);
        }
    }
    UnitVariants.Entry = Entry;
})(UnitVariants || (UnitVariants = {}));

var UnitVariantsColours;
(function (UnitVariantsColours) {
    UnitVariantsColours.KEY = new CollectionKey("unit_variants_colours");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unitVariant = values["unit_variant"];
            this._faction = values["faction"];
            this.primaryColourR = values["primary_colour_r"];
            this.primaryColourG = values["primary_colour_g"];
            this.primaryColourB = values["primary_colour_b"];
            this.secondaryColourR = values["secondary_colour_r"];
            this.secondaryColourG = values["secondary_colour_g"];
            this.secondaryColourB = values["secondary_colour_b"];
            this.tertiaryColourR = values["tertiary_colour_r"];
            this.tertiaryColourG = values["tertiary_colour_g"];
            this.tertiaryColourB = values["tertiary_colour_b"];
            this._soldierType = values["soldier_type"];
        }
        get unitVariant() {
            const collection = this.collectionCache.getCollection(UnitVariants.KEY, UnitVariants.Entry);
            return collection.find(entry => entry.name === this._unitVariant);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get soldierType() {
            const collection = this.collectionCache.getCollection(UniformTypeEnums.KEY, UniformTypeEnums.Entry);
            return collection.find(entry => entry.key === this._soldierType);
        }
    }
    UnitVariantsColours.Entry = Entry;
})(UnitVariantsColours || (UnitVariantsColours = {}));

var UnitVoiceCategories;
(function (UnitVoiceCategories) {
    UnitVoiceCategories.KEY = new CollectionKey("unit_voice_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    UnitVoiceCategories.Entry = Entry;
})(UnitVoiceCategories || (UnitVoiceCategories = {}));

var UnitVoiceEventsJunctions;
(function (UnitVoiceEventsJunctions) {
    UnitVoiceEventsJunctions.KEY = new CollectionKey("unit_voice_events_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unitVoiceCategoryKey = values["unit_voice_category_key"];
            this._voiceTypeKey = values["voice_type_key"];
            this._voiceEventKey = values["voice_event_key"];
            this._soundEventKey = values["sound_event_key"];
        }
    }
    UnitVoiceEventsJunctions.Entry = Entry;
})(UnitVoiceEventsJunctions || (UnitVoiceEventsJunctions = {}));

var UnrestCauseToDemands;
(function (UnrestCauseToDemands) {
    UnrestCauseToDemands.KEY = new CollectionKey("unrest_cause_to_demands");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._cause = values["cause"];
            this.levelOfUnrest = values["level_of_unrest"];
            this._demand = values["demand"];
        }
        get cause() {
            const collection = this.collectionCache.getCollection(TExcUnrestCauses.KEY, TExcUnrestCauses.Entry);
            return collection.find(entry => entry.cause === this._cause);
        }
        get demand() {
            const collection = this.collectionCache.getCollection(TExcUnrestDemands.KEY, TExcUnrestDemands.Entry);
            return collection.find(entry => entry.demand === this._demand);
        }
    }
    UnrestCauseToDemands.Entry = Entry;
})(UnrestCauseToDemands || (UnrestCauseToDemands = {}));

var VideoTypes;
(function (VideoTypes) {
    VideoTypes.KEY = new CollectionKey("video_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.videoType = values["video_type"];
        }
    }
    VideoTypes.Entry = Entry;
})(VideoTypes || (VideoTypes = {}));

var Videos;
(function (Videos) {
    Videos.KEY = new CollectionKey("videos");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.videoName = values["video_name"];
            this._videoType = values["video_type"];
            this.audioTracks = values["audio_tracks"];
            this._scriptRef = values["script_ref"];
        }
        get videoType() {
            const collection = this.collectionCache.getCollection(VideoTypes.KEY, VideoTypes.Entry);
            return collection.find(entry => entry.videoType === this._videoType);
        }
        get scriptRef() {
            const collection = this.collectionCache.getCollection(VoScripts.KEY, VoScripts.Entry);
            return collection.find(entry => entry.id === this._scriptRef);
        }
    }
    Videos.Entry = Entry;
})(Videos || (Videos = {}));

var VoiceEvents;
(function (VoiceEvents) {
    VoiceEvents.KEY = new CollectionKey("voice_events");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
        }
    }
    VoiceEvents.Entry = Entry;
})(VoiceEvents || (VoiceEvents = {}));

var VoiceTypes;
(function (VoiceTypes) {
    VoiceTypes.KEY = new CollectionKey("voice_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    VoiceTypes.Entry = Entry;
})(VoiceTypes || (VoiceTypes = {}));

var VoCampaignAgentTexts;
(function (VoCampaignAgentTexts) {
    VoCampaignAgentTexts.KEY = new CollectionKey("vo_campaign_agent_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.character = values["character"];
            this.key = values["key"];
            this.text = values["text"];
            this._culture = values["culture"];
            this._subculture = values["subculture"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
    }
    VoCampaignAgentTexts.Entry = Entry;
})(VoCampaignAgentTexts || (VoCampaignAgentTexts = {}));

var VoCharacters;
(function (VoCharacters) {
    VoCharacters.KEY = new CollectionKey("vo_characters");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.name = values["name"];
        }
    }
    VoCharacters.Entry = Entry;
})(VoCharacters || (VoCharacters = {}));

var VoContextSensitiveTexts;
(function (VoContextSensitiveTexts) {
    VoContextSensitiveTexts.KEY = new CollectionKey("vo_context_sensitive_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._culture = values["culture"];
            this._faction = values["faction"];
            this.text = values["text"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    VoContextSensitiveTexts.Entry = Entry;
})(VoContextSensitiveTexts || (VoContextSensitiveTexts = {}));

var VoDiplomacyTexts;
(function (VoDiplomacyTexts) {
    VoDiplomacyTexts.KEY = new CollectionKey("vo_diplomacy_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._culture = values["culture"];
            this._faction = values["faction"];
            this.text = values["text"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    VoDiplomacyTexts.Entry = Entry;
})(VoDiplomacyTexts || (VoDiplomacyTexts = {}));

var VoFactionIntroTexts;
(function (VoFactionIntroTexts) {
    VoFactionIntroTexts.KEY = new CollectionKey("vo_faction_intro_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._culture = values["culture"];
            this._faction = values["faction"];
            this.text = values["text"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    VoFactionIntroTexts.Entry = Entry;
})(VoFactionIntroTexts || (VoFactionIntroTexts = {}));

var VoFmvTexts;
(function (VoFmvTexts) {
    VoFmvTexts.KEY = new CollectionKey("vo_fmv_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._culture = values["culture"];
            this._faction = values["faction"];
            this.text = values["text"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    VoFmvTexts.Entry = Entry;
})(VoFmvTexts || (VoFmvTexts = {}));

var VoHistoricalBattleTexts;
(function (VoHistoricalBattleTexts) {
    VoHistoricalBattleTexts.KEY = new CollectionKey("vo_historical_battle_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._culture = values["culture"];
            this._faction = values["faction"];
            this.text = values["text"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    VoHistoricalBattleTexts.Entry = Entry;
})(VoHistoricalBattleTexts || (VoHistoricalBattleTexts = {}));

var VoSpeechTexts;
(function (VoSpeechTexts) {
    VoSpeechTexts.KEY = new CollectionKey("vo_speech_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._culture = values["culture"];
            this._faction = values["faction"];
            this.text = values["text"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    VoSpeechTexts.Entry = Entry;
})(VoSpeechTexts || (VoSpeechTexts = {}));

var VoTexts;
(function (VoTexts) {
    VoTexts.KEY = new CollectionKey("vo_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.recordedFilename = values["recorded_filename"];
            this._scriptId = values["script_id"];
            this.order = values["order"];
            this.comment = values["comment"];
            this._tableField = values["table_field"];
            this.foreignKey = values["foreign_key"];
        }
        get scriptId() {
            const collection = this.collectionCache.getCollection(VoScripts.KEY, VoScripts.Entry);
            return collection.find(entry => entry.id === this._scriptId);
        }
        get tableField() {
            const collection = this.collectionCache.getCollection(TExcLocalisableFields.KEY, TExcLocalisableFields.Entry);
            return collection.find(entry => entry.key === this._tableField);
        }
    }
    VoTexts.Entry = Entry;
})(VoTexts || (VoTexts = {}));

var VoTextCharacters;
(function (VoTextCharacters) {
    VoTextCharacters.KEY = new CollectionKey("vo_text_characters");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._voText = values["vo_text"];
            this._voCharacter = values["vo_character"];
        }
        get voText() {
            const collection = this.collectionCache.getCollection(VoTexts.KEY, VoTexts.Entry);
            return collection.find(entry => entry.key === this._voText);
        }
        get voCharacter() {
            const collection = this.collectionCache.getCollection(VoCharacters.KEY, VoCharacters.Entry);
            return collection.find(entry => entry.key === this._voCharacter);
        }
    }
    VoTextCharacters.Entry = Entry;
})(VoTextCharacters || (VoTextCharacters = {}));

var VoTutorialFmvTexts;
(function (VoTutorialFmvTexts) {
    VoTutorialFmvTexts.KEY = new CollectionKey("vo_tutorial_fmv_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._culture = values["culture"];
            this._faction = values["faction"];
            this.text = values["text"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    VoTutorialFmvTexts.Entry = Entry;
})(VoTutorialFmvTexts || (VoTutorialFmvTexts = {}));

var VoUnitTexts;
(function (VoUnitTexts) {
    VoUnitTexts.KEY = new CollectionKey("vo_unit_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._culture = values["culture"];
            this._faction = values["faction"];
            this.text = values["text"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    VoUnitTexts.Entry = Entry;
})(VoUnitTexts || (VoUnitTexts = {}));

var WarscapeAnimatedLod;
(function (WarscapeAnimatedLod) {
    WarscapeAnimatedLod.KEY = new CollectionKey("warscape_animated_lod");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.filename = values["filename"];
            this.range = values["range"];
            this._animated = values["animated"];
        }
        get animated() {
            const collection = this.collectionCache.getCollection(WarscapeAnimated.KEY, WarscapeAnimated.Entry);
            return collection.find(entry => entry.key === this._animated);
        }
    }
    WarscapeAnimatedLod.Entry = Entry;
})(WarscapeAnimatedLod || (WarscapeAnimatedLod = {}));

var WarscapeEquipmentItems;
(function (WarscapeEquipmentItems) {
    WarscapeEquipmentItems.KEY = new CollectionKey("warscape_equipment_items");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.equipmentItem = values["equipment_item"];
            this.equipmentKey = values["equipment_key"];
        }
    }
    WarscapeEquipmentItems.Entry = Entry;
})(WarscapeEquipmentItems || (WarscapeEquipmentItems = {}));

var WarscapeRigidLod;
(function (WarscapeRigidLod) {
    WarscapeRigidLod.KEY = new CollectionKey("warscape_rigid_lod");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.filename = values["filename"];
            this.range = values["range"];
            this._rigid = values["rigid"];
        }
        get rigid() {
            const collection = this.collectionCache.getCollection(WarscapeRigid.KEY, WarscapeRigid.Entry);
            return collection.find(entry => entry.key === this._rigid);
        }
    }
    WarscapeRigidLod.Entry = Entry;
})(WarscapeRigidLod || (WarscapeRigidLod = {}));

var WarscapeRigidLodRange;
(function (WarscapeRigidLodRange) {
    WarscapeRigidLodRange.KEY = new CollectionKey("warscape_rigid_lod_range");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.lodId = values["LOD_id"];
            this.range = values["range"];
        }
    }
    WarscapeRigidLodRange.Entry = Entry;
})(WarscapeRigidLodRange || (WarscapeRigidLodRange = {}));

var WindLevels;
(function (WindLevels) {
    WindLevels.KEY = new CollectionKey("wind_levels");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._seaSurface = values["sea_surface"];
            this.onscreen = values["onscreen"];
            this.magnitudeX = values["magnitudeX"];
            this.magnitudeY = values["magnitudeY"];
            this.sortOrder = values["sort_order"];
        }
        get seaSurface() {
            const collection = this.collectionCache.getCollection(SeaSurfaces.KEY, SeaSurfaces.Entry);
            return collection.find(entry => entry.key === this._seaSurface);
        }
    }
    WindLevels.Entry = Entry;
})(WindLevels || (WindLevels = {}));

var KvExperienceBonuses;
(function (KvExperienceBonuses) {
    KvExperienceBonuses.KEY = new CollectionKey("_kv_experience_bonuses");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.value = values["value"];
            this.description = values["description"];
        }
    }
    KvExperienceBonuses.Entry = Entry;
})(KvExperienceBonuses || (KvExperienceBonuses = {}));

var KvKeyBuildings;
(function (KvKeyBuildings) {
    KvKeyBuildings.KEY = new CollectionKey("_kv_key_buildings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.value = values["value"];
            this.description = values["description"];
        }
    }
    KvKeyBuildings.Entry = Entry;
})(KvKeyBuildings || (KvKeyBuildings = {}));

var KvMorale;
(function (KvMorale) {
    KvMorale.KEY = new CollectionKey("_kv_morale");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.value = values["value"];
            this.description = values["description"];
        }
    }
    KvMorale.Entry = Entry;
})(KvMorale || (KvMorale = {}));

var KvNavalMorale;
(function (KvNavalMorale) {
    KvNavalMorale.KEY = new CollectionKey("_kv_naval_morale");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.value = values["value"];
            this.description = values["description"];
        }
    }
    KvNavalMorale.Entry = Entry;
})(KvNavalMorale || (KvNavalMorale = {}));

var KvRules;
(function (KvRules) {
    KvRules.KEY = new CollectionKey("_kv_rules");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.value = values["value"];
            this.description = values["description"];
        }
    }
    KvRules.Entry = Entry;
})(KvRules || (KvRules = {}));

class Database {
    constructor(pathToDb) {
        this.collectionCache = new CollectionCache(pathToDb);
    }
    get abilities() { return this.collectionCache.getCollection(Abilities.KEY, Abilities.Entry); }
    get achievements() { return this.collectionCache.getCollection(Achievements.KEY, Achievements.Entry); }
    get actionResults() { return this.collectionCache.getCollection(ActionResults.KEY, ActionResults.Entry); }
    get actionResultsAdditionalOutcomes() { return this.collectionCache.getCollection(ActionResultsAdditionalOutcomes.KEY, ActionResultsAdditionalOutcomes.Entry); }
    get actionResultsAdditionalOutcomesEnums() { return this.collectionCache.getCollection(ActionResultsAdditionalOutcomesEnums.KEY, ActionResultsAdditionalOutcomesEnums.Entry); }
    get adviceInfoTexts() { return this.collectionCache.getCollection(AdviceInfoTexts.KEY, AdviceInfoTexts.Entry); }
    get adviceLevels() { return this.collectionCache.getCollection(AdviceLevels.KEY, AdviceLevels.Entry); }
    get adviceThreads() { return this.collectionCache.getCollection(AdviceThreads.KEY, AdviceThreads.Entry); }
    get adviceTriggers() { return this.collectionCache.getCollection(AdviceTriggers.KEY, AdviceTriggers.Entry); }
    get adviceTriggerToAdviceThread() { return this.collectionCache.getCollection(AdviceTriggerToAdviceThread.KEY, AdviceTriggerToAdviceThread.Entry); }
    get advisors() { return this.collectionCache.getCollection(Advisors.KEY, Advisors.Entry); }
    get agents() { return this.collectionCache.getCollection(Agents.KEY, Agents.Entry); }
    get agentActions() { return this.collectionCache.getCollection(AgentActions.KEY, AgentActions.Entry); }
    get agentActionMessageEvents() { return this.collectionCache.getCollection(AgentActionMessageEvents.KEY, AgentActionMessageEvents.Entry); }
    get agentAttributes() { return this.collectionCache.getCollection(AgentAttributes.KEY, AgentAttributes.Entry); }
    get agentCultureDetails() { return this.collectionCache.getCollection(AgentCultureDetails.KEY, AgentCultureDetails.Entry); }
    get agentLocalisations() { return this.collectionCache.getCollection(AgentLocalisations.KEY, AgentLocalisations.Entry); }
    get agentStringFactionOverrides() { return this.collectionCache.getCollection(AgentStringFactionOverrides.KEY, AgentStringFactionOverrides.Entry); }
    get agentStringSubcultureOverrides() { return this.collectionCache.getCollection(AgentStringSubcultureOverrides.KEY, AgentStringSubcultureOverrides.Entry); }
    get agentSubcultureGenderOverrides() { return this.collectionCache.getCollection(AgentSubcultureGenderOverrides.KEY, AgentSubcultureGenderOverrides.Entry); }
    get agentToAgentAbilities() { return this.collectionCache.getCollection(AgentToAgentAbilities.KEY, AgentToAgentAbilities.Entry); }
    get agentToAgentAttributes() { return this.collectionCache.getCollection(AgentToAgentAttributes.KEY, AgentToAgentAttributes.Entry); }
    get agentUniforms() { return this.collectionCache.getCollection(AgentUniforms.KEY, AgentUniforms.Entry); }
    get agentVoiceEventsJunctions() { return this.collectionCache.getCollection(AgentVoiceEventsJunctions.KEY, AgentVoiceEventsJunctions.Entry); }
    get aideDeCampSpeeches() { return this.collectionCache.getCollection(AideDeCampSpeeches.KEY, AideDeCampSpeeches.Entry); }
    get ambientBattlefieldObjects() { return this.collectionCache.getCollection(AmbientBattlefieldObjects.KEY, AmbientBattlefieldObjects.Entry); }
    get ambientBattlefieldObjectsJunc() { return this.collectionCache.getCollection(AmbientBattlefieldObjectsJunc.KEY, AmbientBattlefieldObjectsJunc.Entry); }
    get ancillaries() { return this.collectionCache.getCollection(Ancillaries.KEY, Ancillaries.Entry); }
    get ancillariesCategories() { return this.collectionCache.getCollection(AncillariesCategories.KEY, AncillariesCategories.Entry); }
    get ancillaryIncludedSubcultures() { return this.collectionCache.getCollection(AncillaryIncludedSubcultures.KEY, AncillaryIncludedSubcultures.Entry); }
    get ancillaryInfo() { return this.collectionCache.getCollection(AncillaryInfo.KEY, AncillaryInfo.Entry); }
    get ancillaryToEffects() { return this.collectionCache.getCollection(AncillaryToEffects.KEY, AncillaryToEffects.Entry); }
    get ancillaryToExcludedAncillaries() { return this.collectionCache.getCollection(AncillaryToExcludedAncillaries.KEY, AncillaryToExcludedAncillaries.Entry); }
    get ancillaryToIncludedAgents() { return this.collectionCache.getCollection(AncillaryToIncludedAgents.KEY, AncillaryToIncludedAgents.Entry); }
    get ancillaryTriggers() { return this.collectionCache.getCollection(AncillaryTriggers.KEY, AncillaryTriggers.Entry); }
    get ancillaryTriggersToAncillaryRemovals() { return this.collectionCache.getCollection(AncillaryTriggersToAncillaryRemovals.KEY, AncillaryTriggersToAncillaryRemovals.Entry); }
    get ancillaryTriggerEffects() { return this.collectionCache.getCollection(AncillaryTriggerEffects.KEY, AncillaryTriggerEffects.Entry); }
    get ancillaryTypes() { return this.collectionCache.getCollection(AncillaryTypes.KEY, AncillaryTypes.Entry); }
    get animals() { return this.collectionCache.getCollection(Animals.KEY, Animals.Entry); }
    get animationCategories() { return this.collectionCache.getCollection(AnimationCategories.KEY, AnimationCategories.Entry); }
    get animationSlotCategories() { return this.collectionCache.getCollection(AnimationSlotCategories.KEY, AnimationSlotCategories.Entry); }
    get animReferencePoses() { return this.collectionCache.getCollection(AnimReferencePoses.KEY, AnimReferencePoses.Entry); }
    get armedCitizenryUnitsToUnitGroupsJunctions() { return this.collectionCache.getCollection(ArmedCitizenryUnitsToUnitGroupsJunctions.KEY, ArmedCitizenryUnitsToUnitGroupsJunctions.Entry); }
    get armedCitizenryUnitGroups() { return this.collectionCache.getCollection(ArmedCitizenryUnitGroups.KEY, ArmedCitizenryUnitGroups.Entry); }
    get audioCampaignBuildingEnums() { return this.collectionCache.getCollection(AudioCampaignBuildingEnums.KEY, AudioCampaignBuildingEnums.Entry); }
    get audioExplosionsEnums() { return this.collectionCache.getCollection(AudioExplosionsEnums.KEY, AudioExplosionsEnums.Entry); }
    get audioLanguages() { return this.collectionCache.getCollection(AudioLanguages.KEY, AudioLanguages.Entry); }
    get audioMaterialsEnums() { return this.collectionCache.getCollection(AudioMaterialsEnums.KEY, AudioMaterialsEnums.Entry); }
    get audioProjectiles() { return this.collectionCache.getCollection(AudioProjectiles.KEY, AudioProjectiles.Entry); }
    get audioProjectilesEnums() { return this.collectionCache.getCollection(AudioProjectilesEnums.KEY, AudioProjectilesEnums.Entry); }
    get audioVoActors() { return this.collectionCache.getCollection(AudioVoActors.KEY, AudioVoActors.Entry); }
    get audioVoActorGroups() { return this.collectionCache.getCollection(AudioVoActorGroups.KEY, AudioVoActorGroups.Entry); }
    get audioVoSelectedSwitches() { return this.collectionCache.getCollection(AudioVoSelectedSwitches.KEY, AudioVoSelectedSwitches.Entry); }
    get banditryEvents() { return this.collectionCache.getCollection(BanditryEvents.KEY, BanditryEvents.Entry); }
    get battlefieldBuildings() { return this.collectionCache.getCollection(BattlefieldBuildings.KEY, BattlefieldBuildings.Entry); }
    get battlefieldBuildingsNames() { return this.collectionCache.getCollection(BattlefieldBuildingsNames.KEY, BattlefieldBuildingsNames.Entry); }
    get battlefieldBuildingsWithProjectilesNames() { return this.collectionCache.getCollection(BattlefieldBuildingsWithProjectilesNames.KEY, BattlefieldBuildingsWithProjectilesNames.Entry); }
    get battlefieldBuildingCategories() { return this.collectionCache.getCollection(BattlefieldBuildingCategories.KEY, BattlefieldBuildingCategories.Entry); }
    get battlefieldBuildingTransformations() { return this.collectionCache.getCollection(BattlefieldBuildingTransformations.KEY, BattlefieldBuildingTransformations.Entry); }
    get battlefieldChariots() { return this.collectionCache.getCollection(BattlefieldChariots.KEY, BattlefieldChariots.Entry); }
    get battlefieldDeployableSiegeItems() { return this.collectionCache.getCollection(BattlefieldDeployableSiegeItems.KEY, BattlefieldDeployableSiegeItems.Entry); }
    get battlefieldEngines() { return this.collectionCache.getCollection(BattlefieldEngines.KEY, BattlefieldEngines.Entry); }
    get battlefieldEnginesAutonomous() { return this.collectionCache.getCollection(BattlefieldEnginesAutonomous.KEY, BattlefieldEnginesAutonomous.Entry); }
    get battlefieldSiegeVehicles() { return this.collectionCache.getCollection(BattlefieldSiegeVehicles.KEY, BattlefieldSiegeVehicles.Entry); }
    get battlefieldSiegeVehiclesCustomBattles() { return this.collectionCache.getCollection(BattlefieldSiegeVehiclesCustomBattles.KEY, BattlefieldSiegeVehiclesCustomBattles.Entry); }
    get battlefieldSiegeVehiclesToAutonomousEngines() { return this.collectionCache.getCollection(BattlefieldSiegeVehiclesToAutonomousEngines.KEY, BattlefieldSiegeVehiclesToAutonomousEngines.Entry); }
    get battlefieldSnowProps() { return this.collectionCache.getCollection(BattlefieldSnowProps.KEY, BattlefieldSnowProps.Entry); }
    get battlefieldTemperatures() { return this.collectionCache.getCollection(BattlefieldTemperatures.KEY, BattlefieldTemperatures.Entry); }
    get battles() { return this.collectionCache.getCollection(Battles.KEY, Battles.Entry); }
    get battlesToBattleSkyTypesJunctions() { return this.collectionCache.getCollection(BattlesToBattleSkyTypesJunctions.KEY, BattlesToBattleSkyTypesJunctions.Entry); }
    get battleAnimationsTable() { return this.collectionCache.getCollection(BattleAnimationsTable.KEY, BattleAnimationsTable.Entry); }
    get battleAutoresolverBalances() { return this.collectionCache.getCollection(BattleAutoresolverBalances.KEY, BattleAutoresolverBalances.Entry); }
    get battleBridgeSubcultureJcts() { return this.collectionCache.getCollection(BattleBridgeSubcultureJcts.KEY, BattleBridgeSubcultureJcts.Entry); }
    get battleCameras() { return this.collectionCache.getCollection(BattleCameras.KEY, BattleCameras.Entry); }
    get battleCinematicEvents() { return this.collectionCache.getCollection(BattleCinematicEvents.KEY, BattleCinematicEvents.Entry); }
    get battleCinematicEventCategories() { return this.collectionCache.getCollection(BattleCinematicEventCategories.KEY, BattleCinematicEventCategories.Entry); }
    get battleCities() { return this.collectionCache.getCollection(BattleCities.KEY, BattleCities.Entry); }
    get battleCityBuildings() { return this.collectionCache.getCollection(BattleCityBuildings.KEY, BattleCityBuildings.Entry); }
    get battleCitySubcultureJct() { return this.collectionCache.getCollection(BattleCitySubcultureJct.KEY, BattleCitySubcultureJct.Entry); }
    get battleClimateWeatherDescriptions() { return this.collectionCache.getCollection(BattleClimateWeatherDescriptions.KEY, BattleClimateWeatherDescriptions.Entry); }
    get battleDifficultyModifiers() { return this.collectionCache.getCollection(BattleDifficultyModifiers.KEY, BattleDifficultyModifiers.Entry); }
    get battleEntities() { return this.collectionCache.getCollection(BattleEntities.KEY, BattleEntities.Entry); }
    get battleEntitiesClassValidationEnum() { return this.collectionCache.getCollection(BattleEntitiesClassValidationEnum.KEY, BattleEntitiesClassValidationEnum.Entry); }
    get battleEntitiesShapeEnum() { return this.collectionCache.getCollection(BattleEntitiesShapeEnum.KEY, BattleEntitiesShapeEnum.Entry); }
    get battleEntitiesTypesEnum() { return this.collectionCache.getCollection(BattleEntitiesTypesEnum.KEY, BattleEntitiesTypesEnum.Entry); }
    get battleEntityEffects() { return this.collectionCache.getCollection(BattleEntityEffects.KEY, BattleEntityEffects.Entry); }
    get battleMiscEffects() { return this.collectionCache.getCollection(BattleMiscEffects.KEY, BattleMiscEffects.Entry); }
    get battlePersonalities() { return this.collectionCache.getCollection(BattlePersonalities.KEY, BattlePersonalities.Entry); }
    get battlePersonalityTypesEnum() { return this.collectionCache.getCollection(BattlePersonalityTypesEnum.KEY, BattlePersonalityTypesEnum.Entry); }
    get battleSequences() { return this.collectionCache.getCollection(BattleSequences.KEY, BattleSequences.Entry); }
    get battleSiegeVehiclePermissions() { return this.collectionCache.getCollection(BattleSiegeVehiclePermissions.KEY, BattleSiegeVehiclePermissions.Entry); }
    get battleSkeletons() { return this.collectionCache.getCollection(BattleSkeletons.KEY, BattleSkeletons.Entry); }
    get battleSkeletonCategoryEnums() { return this.collectionCache.getCollection(BattleSkeletonCategoryEnums.KEY, BattleSkeletonCategoryEnums.Entry); }
    get battleSkyTypes() { return this.collectionCache.getCollection(BattleSkyTypes.KEY, BattleSkyTypes.Entry); }
    get battleTerrainFarms() { return this.collectionCache.getCollection(BattleTerrainFarms.KEY, BattleTerrainFarms.Entry); }
    get battleTypes() { return this.collectionCache.getCollection(BattleTypes.KEY, BattleTypes.Entry); }
    get battleTypesToVictoryConditions() { return this.collectionCache.getCollection(BattleTypesToVictoryConditions.KEY, BattleTypesToVictoryConditions.Entry); }
    get battleTypeFactionPresets() { return this.collectionCache.getCollection(BattleTypeFactionPresets.KEY, BattleTypeFactionPresets.Entry); }
    get battleTypeSetupLimits() { return this.collectionCache.getCollection(BattleTypeSetupLimits.KEY, BattleTypeSetupLimits.Entry); }
    get battleUnitPermissionJunctions() { return this.collectionCache.getCollection(BattleUnitPermissionJunctions.KEY, BattleUnitPermissionJunctions.Entry); }
    get battleWeatherEffects() { return this.collectionCache.getCollection(BattleWeatherEffects.KEY, BattleWeatherEffects.Entry); }
    get battleWeatherTypes() { return this.collectionCache.getCollection(BattleWeatherTypes.KEY, BattleWeatherTypes.Entry); }
    get buildingCategories() { return this.collectionCache.getCollection(BuildingCategories.KEY, BuildingCategories.Entry); }
    get buildingChains() { return this.collectionCache.getCollection(BuildingChains.KEY, BuildingChains.Entry); }
    get buildingChainAvailabilities() { return this.collectionCache.getCollection(BuildingChainAvailabilities.KEY, BuildingChainAvailabilities.Entry); }
    get buildingChainAvailabilitySets() { return this.collectionCache.getCollection(BuildingChainAvailabilitySets.KEY, BuildingChainAvailabilitySets.Entry); }
    get buildingChainAvailabilitySetIds() { return this.collectionCache.getCollection(BuildingChainAvailabilitySetIds.KEY, BuildingChainAvailabilitySetIds.Entry); }
    get buildingChainToSlots() { return this.collectionCache.getCollection(BuildingChainToSlots.KEY, BuildingChainToSlots.Entry); }
    get buildingCultureGovTypeVariants() { return this.collectionCache.getCollection(BuildingCultureGovTypeVariants.KEY, BuildingCultureGovTypeVariants.Entry); }
    get buildingCultureVariants() { return this.collectionCache.getCollection(BuildingCultureVariants.KEY, BuildingCultureVariants.Entry); }
    get buildingDescriptionTexts() { return this.collectionCache.getCollection(BuildingDescriptionTexts.KEY, BuildingDescriptionTexts.Entry); }
    get buildingEffectsJunction() { return this.collectionCache.getCollection(BuildingEffectsJunction.KEY, BuildingEffectsJunction.Entry); }
    get buildingFactionwideEffectsJunctions() { return this.collectionCache.getCollection(BuildingFactionwideEffectsJunctions.KEY, BuildingFactionwideEffectsJunctions.Entry); }
    get buildingFactionVariants() { return this.collectionCache.getCollection(BuildingFactionVariants.KEY, BuildingFactionVariants.Entry); }
    get buildingFlavourTexts() { return this.collectionCache.getCollection(BuildingFlavourTexts.KEY, BuildingFlavourTexts.Entry); }
    get buildingInstances() { return this.collectionCache.getCollection(BuildingInstances.KEY, BuildingInstances.Entry); }
    get buildingLevels() { return this.collectionCache.getCollection(BuildingLevels.KEY, BuildingLevels.Entry); }
    get buildingLevelArmedCitizenryJunctions() { return this.collectionCache.getCollection(BuildingLevelArmedCitizenryJunctions.KEY, BuildingLevelArmedCitizenryJunctions.Entry); }
    get buildingLevelRequiredTechnologyJunctions() { return this.collectionCache.getCollection(BuildingLevelRequiredTechnologyJunctions.KEY, BuildingLevelRequiredTechnologyJunctions.Entry); }
    get buildingSets() { return this.collectionCache.getCollection(BuildingSets.KEY, BuildingSets.Entry); }
    get buildingSetToBuildingJunctions() { return this.collectionCache.getCollection(BuildingSetToBuildingJunctions.KEY, BuildingSetToBuildingJunctions.Entry); }
    get buildingShortDescriptionTexts() { return this.collectionCache.getCollection(BuildingShortDescriptionTexts.KEY, BuildingShortDescriptionTexts.Entry); }
    get buildingStates() { return this.collectionCache.getCollection(BuildingStates.KEY, BuildingStates.Entry); }
    get buildingSuperchains() { return this.collectionCache.getCollection(BuildingSuperchains.KEY, BuildingSuperchains.Entry); }
    get buildingToUnitAbilitiesJunctions() { return this.collectionCache.getCollection(BuildingToUnitAbilitiesJunctions.KEY, BuildingToUnitAbilitiesJunctions.Entry); }
    get buildingUnitsAllowed() { return this.collectionCache.getCollection(BuildingUnitsAllowed.KEY, BuildingUnitsAllowed.Entry); }
    get buildingUpgradesJunction() { return this.collectionCache.getCollection(BuildingUpgradesJunction.KEY, BuildingUpgradesJunction.Entry); }
    get caiAgentDistributionProfiles() { return this.collectionCache.getCollection(CaiAgentDistributionProfiles.KEY, CaiAgentDistributionProfiles.Entry); }
    get caiAgentDistributionTypes() { return this.collectionCache.getCollection(CaiAgentDistributionTypes.KEY, CaiAgentDistributionTypes.Entry); }
    get caiAgentRecordToCaiAgentTypeJunctions() { return this.collectionCache.getCollection(CaiAgentRecordToCaiAgentTypeJunctions.KEY, CaiAgentRecordToCaiAgentTypeJunctions.Entry); }
    get caiAgentRecruitmentProfiles() { return this.collectionCache.getCollection(CaiAgentRecruitmentProfiles.KEY, CaiAgentRecruitmentProfiles.Entry); }
    get caiAgentRecruitmentTypes() { return this.collectionCache.getCollection(CaiAgentRecruitmentTypes.KEY, CaiAgentRecruitmentTypes.Entry); }
    get caiAgentTypes() { return this.collectionCache.getCollection(CaiAgentTypes.KEY, CaiAgentTypes.Entry); }
    get caiAgentTypeDistributionProfileJunctions() { return this.collectionCache.getCollection(CaiAgentTypeDistributionProfileJunctions.KEY, CaiAgentTypeDistributionProfileJunctions.Entry); }
    get caiAgentTypeRecruitmentProfileJunctions() { return this.collectionCache.getCollection(CaiAgentTypeRecruitmentProfileJunctions.KEY, CaiAgentTypeRecruitmentProfileJunctions.Entry); }
    get caiBaseBuildingContextValues() { return this.collectionCache.getCollection(CaiBaseBuildingContextValues.KEY, CaiBaseBuildingContextValues.Entry); }
    get caiConstructionSystemBuildingValues() { return this.collectionCache.getCollection(CaiConstructionSystemBuildingValues.KEY, CaiConstructionSystemBuildingValues.Entry); }
    get caiConstructionSystemCategories() { return this.collectionCache.getCollection(CaiConstructionSystemCategories.KEY, CaiConstructionSystemCategories.Entry); }
    get caiConstructionSystemCategoryGroups() { return this.collectionCache.getCollection(CaiConstructionSystemCategoryGroups.KEY, CaiConstructionSystemCategoryGroups.Entry); }
    get caiConstructionSystemProvinceTemplateAssignmentPolicies() { return this.collectionCache.getCollection(CaiConstructionSystemProvinceTemplateAssignmentPolicies.KEY, CaiConstructionSystemProvinceTemplateAssignmentPolicies.Entry); }
    get caiConstructionSystemStrategicContextTemplatePolicies() { return this.collectionCache.getCollection(CaiConstructionSystemStrategicContextTemplatePolicies.KEY, CaiConstructionSystemStrategicContextTemplatePolicies.Entry); }
    get caiConstructionSystemStrategicContextTemplatePolicyJunctions() { return this.collectionCache.getCollection(CaiConstructionSystemStrategicContextTemplatePolicyJunctions.KEY, CaiConstructionSystemStrategicContextTemplatePolicyJunctions.Entry); }
    get caiConstructionSystemSuperchainHints() { return this.collectionCache.getCollection(CaiConstructionSystemSuperchainHints.KEY, CaiConstructionSystemSuperchainHints.Entry); }
    get caiConstructionSystemSynergies() { return this.collectionCache.getCollection(CaiConstructionSystemSynergies.KEY, CaiConstructionSystemSynergies.Entry); }
    get caiConstructionSystemSynergyLevels() { return this.collectionCache.getCollection(CaiConstructionSystemSynergyLevels.KEY, CaiConstructionSystemSynergyLevels.Entry); }
    get caiConstructionSystemSynergyPolicies() { return this.collectionCache.getCollection(CaiConstructionSystemSynergyPolicies.KEY, CaiConstructionSystemSynergyPolicies.Entry); }
    get caiConstructionSystemTemplates() { return this.collectionCache.getCollection(CaiConstructionSystemTemplates.KEY, CaiConstructionSystemTemplates.Entry); }
    get caiConstructionSystemTemplatesJunctions() { return this.collectionCache.getCollection(CaiConstructionSystemTemplatesJunctions.KEY, CaiConstructionSystemTemplatesJunctions.Entry); }
    get caiDiplomacyComplexTreacheries() { return this.collectionCache.getCollection(CaiDiplomacyComplexTreacheries.KEY, CaiDiplomacyComplexTreacheries.Entry); }
    get caiDiplomacySimpleTreacheries() { return this.collectionCache.getCollection(CaiDiplomacySimpleTreacheries.KEY, CaiDiplomacySimpleTreacheries.Entry); }
    get caiMilitaryAggressivenessPolicies() { return this.collectionCache.getCollection(CaiMilitaryAggressivenessPolicies.KEY, CaiMilitaryAggressivenessPolicies.Entry); }
    get caiMilitaryBehaviourPolicies() { return this.collectionCache.getCollection(CaiMilitaryBehaviourPolicies.KEY, CaiMilitaryBehaviourPolicies.Entry); }
    get caiPersonalities() { return this.collectionCache.getCollection(CaiPersonalities.KEY, CaiPersonalities.Entry); }
    get caiPersonalitiesBudgetAllocations() { return this.collectionCache.getCollection(CaiPersonalitiesBudgetAllocations.KEY, CaiPersonalitiesBudgetAllocations.Entry); }
    get caiPersonalitiesBudgetAllocationPolicyJunctions() { return this.collectionCache.getCollection(CaiPersonalitiesBudgetAllocationPolicyJunctions.KEY, CaiPersonalitiesBudgetAllocationPolicyJunctions.Entry); }
    get caiPersonalitiesBudgetPolicies() { return this.collectionCache.getCollection(CaiPersonalitiesBudgetPolicies.KEY, CaiPersonalitiesBudgetPolicies.Entry); }
    get caiPersonalitiesConstructionPreferencePolicies() { return this.collectionCache.getCollection(CaiPersonalitiesConstructionPreferencePolicies.KEY, CaiPersonalitiesConstructionPreferencePolicies.Entry); }
    get caiPersonalitiesConstructionPreferencePolicyBuildingJunctions() { return this.collectionCache.getCollection(CaiPersonalitiesConstructionPreferencePolicyBuildingJunctions.KEY, CaiPersonalitiesConstructionPreferencePolicyBuildingJunctions.Entry); }
    get caiPersonalitiesConstructionSystemPolicies() { return this.collectionCache.getCollection(CaiPersonalitiesConstructionSystemPolicies.KEY, CaiPersonalitiesConstructionSystemPolicies.Entry); }
    get caiPersonalitiesFactionJunctions() { return this.collectionCache.getCollection(CaiPersonalitiesFactionJunctions.KEY, CaiPersonalitiesFactionJunctions.Entry); }
    get caiPersonalitiesIncomeAllocationPolicies() { return this.collectionCache.getCollection(CaiPersonalitiesIncomeAllocationPolicies.KEY, CaiPersonalitiesIncomeAllocationPolicies.Entry); }
    get caiPersonalitiesIncomeAllocationPolicyStrategicContextJunctions() { return this.collectionCache.getCollection(CaiPersonalitiesIncomeAllocationPolicyStrategicContextJunctions.KEY, CaiPersonalitiesIncomeAllocationPolicyStrategicContextJunctions.Entry); }
    get caiPersonalitiesRandomisationPolicies() { return this.collectionCache.getCollection(CaiPersonalitiesRandomisationPolicies.KEY, CaiPersonalitiesRandomisationPolicies.Entry); }
    get caiPersonalitiesRandomGroups() { return this.collectionCache.getCollection(CaiPersonalitiesRandomGroups.KEY, CaiPersonalitiesRandomGroups.Entry); }
    get caiPersonalitiesRandomGroupJunctions() { return this.collectionCache.getCollection(CaiPersonalitiesRandomGroupJunctions.KEY, CaiPersonalitiesRandomGroupJunctions.Entry); }
    get caiPersonalitiesReliabilityPolicies() { return this.collectionCache.getCollection(CaiPersonalitiesReliabilityPolicies.KEY, CaiPersonalitiesReliabilityPolicies.Entry); }
    get caiPersonalitiesReligiousConversionPolicies() { return this.collectionCache.getCollection(CaiPersonalitiesReligiousConversionPolicies.KEY, CaiPersonalitiesReligiousConversionPolicies.Entry); }
    get caiPersonalitiesTaskManagementSystemTaskGeneratorProfiles() { return this.collectionCache.getCollection(CaiPersonalitiesTaskManagementSystemTaskGeneratorProfiles.KEY, CaiPersonalitiesTaskManagementSystemTaskGeneratorProfiles.Entry); }
    get caiPersonalitiesTmsTaskGeneratorProfilesStrategicContextsJunctions() { return this.collectionCache.getCollection(CaiPersonalitiesTmsTaskGeneratorProfilesStrategicContextsJunctions.KEY, CaiPersonalitiesTmsTaskGeneratorProfilesStrategicContextsJunctions.Entry); }
    get caiPersonalityCulturalComponents() { return this.collectionCache.getCollection(CaiPersonalityCulturalComponents.KEY, CaiPersonalityCulturalComponents.Entry); }
    get caiPersonalityCulturalMultipliers() { return this.collectionCache.getCollection(CaiPersonalityCulturalMultipliers.KEY, CaiPersonalityCulturalMultipliers.Entry); }
    get caiPersonalityDealEvaluationComponents() { return this.collectionCache.getCollection(CaiPersonalityDealEvaluationComponents.KEY, CaiPersonalityDealEvaluationComponents.Entry); }
    get caiPersonalityDealEvaluationComponentOverrides() { return this.collectionCache.getCollection(CaiPersonalityDealEvaluationComponentOverrides.KEY, CaiPersonalityDealEvaluationComponentOverrides.Entry); }
    get caiPersonalityDealEvaluationDealComponentNames() { return this.collectionCache.getCollection(CaiPersonalityDealEvaluationDealComponentNames.KEY, CaiPersonalityDealEvaluationDealComponentNames.Entry); }
    get caiPersonalityDealEvaluationDealComponentValues() { return this.collectionCache.getCollection(CaiPersonalityDealEvaluationDealComponentValues.KEY, CaiPersonalityDealEvaluationDealComponentValues.Entry); }
    get caiPersonalityDealGenerationComponents() { return this.collectionCache.getCollection(CaiPersonalityDealGenerationComponents.KEY, CaiPersonalityDealGenerationComponents.Entry); }
    get caiPersonalityDealGenerationGenerators() { return this.collectionCache.getCollection(CaiPersonalityDealGenerationGenerators.KEY, CaiPersonalityDealGenerationGenerators.Entry); }
    get caiPersonalityDealGenerationGeneratorPriorities() { return this.collectionCache.getCollection(CaiPersonalityDealGenerationGeneratorPriorities.KEY, CaiPersonalityDealGenerationGeneratorPriorities.Entry); }
    get caiPersonalityDiplomaticComponents() { return this.collectionCache.getCollection(CaiPersonalityDiplomaticComponents.KEY, CaiPersonalityDiplomaticComponents.Entry); }
    get caiPersonalityDiplomaticComponentOverrides() { return this.collectionCache.getCollection(CaiPersonalityDiplomaticComponentOverrides.KEY, CaiPersonalityDiplomaticComponentOverrides.Entry); }
    get caiPersonalityDiplomaticEvents() { return this.collectionCache.getCollection(CaiPersonalityDiplomaticEvents.KEY, CaiPersonalityDiplomaticEvents.Entry); }
    get caiPersonalityDiplomaticEventValues() { return this.collectionCache.getCollection(CaiPersonalityDiplomaticEventValues.KEY, CaiPersonalityDiplomaticEventValues.Entry); }
    get caiPersonalityDiplomaticTreatyValues() { return this.collectionCache.getCollection(CaiPersonalityDiplomaticTreatyValues.KEY, CaiPersonalityDiplomaticTreatyValues.Entry); }
    get caiPersonalityNegotiationComponents() { return this.collectionCache.getCollection(CaiPersonalityNegotiationComponents.KEY, CaiPersonalityNegotiationComponents.Entry); }
    get caiPersonalityOccupationDecisionComponents() { return this.collectionCache.getCollection(CaiPersonalityOccupationDecisionComponents.KEY, CaiPersonalityOccupationDecisionComponents.Entry); }
    get caiPersonalityOccupationDecisionPriorities() { return this.collectionCache.getCollection(CaiPersonalityOccupationDecisionPriorities.KEY, CaiPersonalityOccupationDecisionPriorities.Entry); }
    get caiPersonalityStrategicComponents() { return this.collectionCache.getCollection(CaiPersonalityStrategicComponents.KEY, CaiPersonalityStrategicComponents.Entry); }
    get caiPersonalityStrategicDesiredAttitudes() { return this.collectionCache.getCollection(CaiPersonalityStrategicDesiredAttitudes.KEY, CaiPersonalityStrategicDesiredAttitudes.Entry); }
    get caiPersonalityStrategicResourceValues() { return this.collectionCache.getCollection(CaiPersonalityStrategicResourceValues.KEY, CaiPersonalityStrategicResourceValues.Entry); }
    get caiSiegeStrengthModifiers() { return this.collectionCache.getCollection(CaiSiegeStrengthModifiers.KEY, CaiSiegeStrengthModifiers.Entry); }
    get caiStrategicContextTypes() { return this.collectionCache.getCollection(CaiStrategicContextTypes.KEY, CaiStrategicContextTypes.Entry); }
    get caiTaskManagementSystemTaskGenerators() { return this.collectionCache.getCollection(CaiTaskManagementSystemTaskGenerators.KEY, CaiTaskManagementSystemTaskGenerators.Entry); }
    get caiTaskManagementSystemTaskGeneratorGroups() { return this.collectionCache.getCollection(CaiTaskManagementSystemTaskGeneratorGroups.KEY, CaiTaskManagementSystemTaskGeneratorGroups.Entry); }
    get caiTaskManagementSystemTaskGeneratorGroupsGeneratorsJunctions() { return this.collectionCache.getCollection(CaiTaskManagementSystemTaskGeneratorGroupsGeneratorsJunctions.KEY, CaiTaskManagementSystemTaskGeneratorGroupsGeneratorsJunctions.Entry); }
    get caiVariables() { return this.collectionCache.getCollection(CaiVariables.KEY, CaiVariables.Entry); }
    get caiVariablesOverides() { return this.collectionCache.getCollection(CaiVariablesOverides.KEY, CaiVariablesOverides.Entry); }
    get campaigns() { return this.collectionCache.getCollection(Campaigns.KEY, Campaigns.Entry); }
    get campaignsCampaignVariablesJunctions() { return this.collectionCache.getCollection(CampaignsCampaignVariablesJunctions.KEY, CampaignsCampaignVariablesJunctions.Entry); }
    get campaignAiBehaviours() { return this.collectionCache.getCollection(CampaignAiBehaviours.KEY, CampaignAiBehaviours.Entry); }
    get campaignAiCharacterSkillTreeAgentManagers() { return this.collectionCache.getCollection(CampaignAiCharacterSkillTreeAgentManagers.KEY, CampaignAiCharacterSkillTreeAgentManagers.Entry); }
    get campaignAiCharacterSkillTreeDistributions() { return this.collectionCache.getCollection(CampaignAiCharacterSkillTreeDistributions.KEY, CampaignAiCharacterSkillTreeDistributions.Entry); }
    get campaignAiCharacterSkillTreeDistributionJunctions() { return this.collectionCache.getCollection(CampaignAiCharacterSkillTreeDistributionJunctions.KEY, CampaignAiCharacterSkillTreeDistributionJunctions.Entry); }
    get campaignAiCharacterSkillTreeJunctions() { return this.collectionCache.getCollection(CampaignAiCharacterSkillTreeJunctions.KEY, CampaignAiCharacterSkillTreeJunctions.Entry); }
    get campaignAiCharacterSkillTreeManagers() { return this.collectionCache.getCollection(CampaignAiCharacterSkillTreeManagers.KEY, CampaignAiCharacterSkillTreeManagers.Entry); }
    get campaignAiCharacterSkillTreeManagerAgentJunctions() { return this.collectionCache.getCollection(CampaignAiCharacterSkillTreeManagerAgentJunctions.KEY, CampaignAiCharacterSkillTreeManagerAgentJunctions.Entry); }
    get campaignAiManagers() { return this.collectionCache.getCollection(CampaignAiManagers.KEY, CampaignAiManagers.Entry); }
    get campaignAiManagerBehaviourJunctions() { return this.collectionCache.getCollection(CampaignAiManagerBehaviourJunctions.KEY, CampaignAiManagerBehaviourJunctions.Entry); }
    get campaignAiPersonalities() { return this.collectionCache.getCollection(CampaignAiPersonalities.KEY, CampaignAiPersonalities.Entry); }
    get campaignAiPersonalityJunctions() { return this.collectionCache.getCollection(CampaignAiPersonalityJunctions.KEY, CampaignAiPersonalityJunctions.Entry); }
    get campaignAiPersonalityProperties() { return this.collectionCache.getCollection(CampaignAiPersonalityProperties.KEY, CampaignAiPersonalityProperties.Entry); }
    get campaignAiTechnologyManagers() { return this.collectionCache.getCollection(CampaignAiTechnologyManagers.KEY, CampaignAiTechnologyManagers.Entry); }
    get campaignAiTechnologyManagerPathJunctions() { return this.collectionCache.getCollection(CampaignAiTechnologyManagerPathJunctions.KEY, CampaignAiTechnologyManagerPathJunctions.Entry); }
    get campaignAiTechnologyPaths() { return this.collectionCache.getCollection(CampaignAiTechnologyPaths.KEY, CampaignAiTechnologyPaths.Entry); }
    get campaignAiTechnologyPathJunctions() { return this.collectionCache.getCollection(CampaignAiTechnologyPathJunctions.KEY, CampaignAiTechnologyPathJunctions.Entry); }
    get campaignAmbushGroundTypes() { return this.collectionCache.getCollection(CampaignAmbushGroundTypes.KEY, CampaignAmbushGroundTypes.Entry); }
    get campaignAnimSetEnums() { return this.collectionCache.getCollection(CampaignAnimSetEnums.KEY, CampaignAnimSetEnums.Entry); }
    get campaignAutoresolverBattleSituations() { return this.collectionCache.getCollection(CampaignAutoresolverBattleSituations.KEY, CampaignAutoresolverBattleSituations.Entry); }
    get campaignAutoresolverModifiers() { return this.collectionCache.getCollection(CampaignAutoresolverModifiers.KEY, CampaignAutoresolverModifiers.Entry); }
    get campaignAutoresolverModGroups() { return this.collectionCache.getCollection(CampaignAutoresolverModGroups.KEY, CampaignAutoresolverModGroups.Entry); }
    get campaignAutoresolverModGroupModifierValues() { return this.collectionCache.getCollection(CampaignAutoresolverModGroupModifierValues.KEY, CampaignAutoresolverModGroupModifierValues.Entry); }
    get campaignAutoresolverModGroupTargets() { return this.collectionCache.getCollection(CampaignAutoresolverModGroupTargets.KEY, CampaignAutoresolverModGroupTargets.Entry); }
    get campaignAutoresolverSituationModGroups() { return this.collectionCache.getCollection(CampaignAutoresolverSituationModGroups.KEY, CampaignAutoresolverSituationModGroups.Entry); }
    get campaignAutoresolverStatVariables() { return this.collectionCache.getCollection(CampaignAutoresolverStatVariables.KEY, CampaignAutoresolverStatVariables.Entry); }
    get campaignBattlePresets() { return this.collectionCache.getCollection(CampaignBattlePresets.KEY, CampaignBattlePresets.Entry); }
    get campaignBattleTypeEnums() { return this.collectionCache.getCollection(CampaignBattleTypeEnums.KEY, CampaignBattleTypeEnums.Entry); }
    get campaignBonusValueBattleContextBattleTypeJunctions() { return this.collectionCache.getCollection(CampaignBonusValueBattleContextBattleTypeJunctions.KEY, CampaignBonusValueBattleContextBattleTypeJunctions.Entry); }
    get campaignBonusValueBattleContextCultureJunctions() { return this.collectionCache.getCollection(CampaignBonusValueBattleContextCultureJunctions.KEY, CampaignBonusValueBattleContextCultureJunctions.Entry); }
    get campaignBonusValueBattleContextFactionJunctions() { return this.collectionCache.getCollection(CampaignBonusValueBattleContextFactionJunctions.KEY, CampaignBonusValueBattleContextFactionJunctions.Entry); }
    get campaignBonusValueBattleContextForceStatus() { return this.collectionCache.getCollection(CampaignBonusValueBattleContextForceStatus.KEY, CampaignBonusValueBattleContextForceStatus.Entry); }
    get campaignBonusValueBattleContextForceStatusJunctions() { return this.collectionCache.getCollection(CampaignBonusValueBattleContextForceStatusJunctions.KEY, CampaignBonusValueBattleContextForceStatusJunctions.Entry); }
    get campaignBonusValueBattleContextGroundTypeJunctions() { return this.collectionCache.getCollection(CampaignBonusValueBattleContextGroundTypeJunctions.KEY, CampaignBonusValueBattleContextGroundTypeJunctions.Entry); }
    get campaignBonusValueBattleContextSpecifiers() { return this.collectionCache.getCollection(CampaignBonusValueBattleContextSpecifiers.KEY, CampaignBonusValueBattleContextSpecifiers.Entry); }
    get campaignBonusValueBattleContextTerritoryStatus() { return this.collectionCache.getCollection(CampaignBonusValueBattleContextTerritoryStatus.KEY, CampaignBonusValueBattleContextTerritoryStatus.Entry); }
    get campaignBonusValueBattleContextTerritoryStatusJunctions() { return this.collectionCache.getCollection(CampaignBonusValueBattleContextTerritoryStatusJunctions.KEY, CampaignBonusValueBattleContextTerritoryStatusJunctions.Entry); }
    get campaignBonusValueIdsActionResultsAdditionalOutcomes() { return this.collectionCache.getCollection(CampaignBonusValueIdsActionResultsAdditionalOutcomes.KEY, CampaignBonusValueIdsActionResultsAdditionalOutcomes.Entry); }
    get campaignBonusValueIdsAgent() { return this.collectionCache.getCollection(CampaignBonusValueIdsAgent.KEY, CampaignBonusValueIdsAgent.Entry); }
    get campaignBonusValueIdsBasic() { return this.collectionCache.getCollection(CampaignBonusValueIdsBasic.KEY, CampaignBonusValueIdsBasic.Entry); }
    get campaignBonusValueIdsBattlefieldDeployables() { return this.collectionCache.getCollection(CampaignBonusValueIdsBattlefieldDeployables.KEY, CampaignBonusValueIdsBattlefieldDeployables.Entry); }
    get campaignBonusValueIdsBattleContexts() { return this.collectionCache.getCollection(CampaignBonusValueIdsBattleContexts.KEY, CampaignBonusValueIdsBattleContexts.Entry); }
    get campaignBonusValueIdsBuildingChain() { return this.collectionCache.getCollection(CampaignBonusValueIdsBuildingChain.KEY, CampaignBonusValueIdsBuildingChain.Entry); }
    get campaignBonusValueIdsBuildingSets() { return this.collectionCache.getCollection(CampaignBonusValueIdsBuildingSets.KEY, CampaignBonusValueIdsBuildingSets.Entry); }
    get campaignBonusValueIdsCommodity() { return this.collectionCache.getCollection(CampaignBonusValueIdsCommodity.KEY, CampaignBonusValueIdsCommodity.Entry); }
    get campaignBonusValueIdsMeleeWeapon() { return this.collectionCache.getCollection(CampaignBonusValueIdsMeleeWeapon.KEY, CampaignBonusValueIdsMeleeWeapon.Entry); }
    get campaignBonusValueIdsMissileWeapon() { return this.collectionCache.getCollection(CampaignBonusValueIdsMissileWeapon.KEY, CampaignBonusValueIdsMissileWeapon.Entry); }
    get campaignBonusValueIdsPopulationClass() { return this.collectionCache.getCollection(CampaignBonusValueIdsPopulationClass.KEY, CampaignBonusValueIdsPopulationClass.Entry); }
    get campaignBonusValueIdsPopulationClassAndReligion() { return this.collectionCache.getCollection(CampaignBonusValueIdsPopulationClassAndReligion.KEY, CampaignBonusValueIdsPopulationClassAndReligion.Entry); }
    get campaignBonusValueIdsProjectile() { return this.collectionCache.getCollection(CampaignBonusValueIdsProjectile.KEY, CampaignBonusValueIdsProjectile.Entry); }
    get campaignBonusValueIdsProjectileShotTypeEnum() { return this.collectionCache.getCollection(CampaignBonusValueIdsProjectileShotTypeEnum.KEY, CampaignBonusValueIdsProjectileShotTypeEnum.Entry); }
    get campaignBonusValueIdsProjectileType() { return this.collectionCache.getCollection(CampaignBonusValueIdsProjectileType.KEY, CampaignBonusValueIdsProjectileType.Entry); }
    get campaignBonusValueIdsProvincialInitiativeEffectRecords() { return this.collectionCache.getCollection(CampaignBonusValueIdsProvincialInitiativeEffectRecords.KEY, CampaignBonusValueIdsProvincialInitiativeEffectRecords.Entry); }
    get campaignBonusValueIdsReligion() { return this.collectionCache.getCollection(CampaignBonusValueIdsReligion.KEY, CampaignBonusValueIdsReligion.Entry); }
    get campaignBonusValueIdsResource() { return this.collectionCache.getCollection(CampaignBonusValueIdsResource.KEY, CampaignBonusValueIdsResource.Entry); }
    get campaignBonusValueIdsSiegeItems() { return this.collectionCache.getCollection(CampaignBonusValueIdsSiegeItems.KEY, CampaignBonusValueIdsSiegeItems.Entry); }
    get campaignBonusValueIdsTechnologyCategories() { return this.collectionCache.getCollection(CampaignBonusValueIdsTechnologyCategories.KEY, CampaignBonusValueIdsTechnologyCategories.Entry); }
    get campaignBonusValueIdsUnitAbility() { return this.collectionCache.getCollection(CampaignBonusValueIdsUnitAbility.KEY, CampaignBonusValueIdsUnitAbility.Entry); }
    get campaignBonusValueIdsUnitCaste() { return this.collectionCache.getCollection(CampaignBonusValueIdsUnitCaste.KEY, CampaignBonusValueIdsUnitCaste.Entry); }
    get campaignBonusValueIdsUnitCategory() { return this.collectionCache.getCollection(CampaignBonusValueIdsUnitCategory.KEY, CampaignBonusValueIdsUnitCategory.Entry); }
    get campaignBonusValueIdsUnitClass() { return this.collectionCache.getCollection(CampaignBonusValueIdsUnitClass.KEY, CampaignBonusValueIdsUnitClass.Entry); }
    get campaignBonusValueIdsUnitRecords() { return this.collectionCache.getCollection(CampaignBonusValueIdsUnitRecords.KEY, CampaignBonusValueIdsUnitRecords.Entry); }
    get campaignBonusValueIdsUnitSets() { return this.collectionCache.getCollection(CampaignBonusValueIdsUnitSets.KEY, CampaignBonusValueIdsUnitSets.Entry); }
    get campaignCharacterAnimStatus() { return this.collectionCache.getCollection(CampaignCharacterAnimStatus.KEY, CampaignCharacterAnimStatus.Entry); }
    get campaignCharacterArts() { return this.collectionCache.getCollection(CampaignCharacterArts.KEY, CampaignCharacterArts.Entry); }
    get campaignCharacterArtSets() { return this.collectionCache.getCollection(CampaignCharacterArtSets.KEY, CampaignCharacterArtSets.Entry); }
    get campaignCharacterArtSetsCampaignGroups() { return this.collectionCache.getCollection(CampaignCharacterArtSetsCampaignGroups.KEY, CampaignCharacterArtSetsCampaignGroups.Entry); }
    get campaignCharacterArtSetsGroupJunctions() { return this.collectionCache.getCollection(CampaignCharacterArtSetsGroupJunctions.KEY, CampaignCharacterArtSetsGroupJunctions.Entry); }
    get campaignCharacterArtSetCampaignJunctions() { return this.collectionCache.getCollection(CampaignCharacterArtSetCampaignJunctions.KEY, CampaignCharacterArtSetCampaignJunctions.Entry); }
    get campaignCharacterAttributeEffects() { return this.collectionCache.getCollection(CampaignCharacterAttributeEffects.KEY, CampaignCharacterAttributeEffects.Entry); }
    get campaignClanLevelInfos() { return this.collectionCache.getCollection(CampaignClanLevelInfos.KEY, CampaignClanLevelInfos.Entry); }
    get campaignDifficultyHandicapEffects() { return this.collectionCache.getCollection(CampaignDifficultyHandicapEffects.KEY, CampaignDifficultyHandicapEffects.Entry); }
    get campaignEffectScopes() { return this.collectionCache.getCollection(CampaignEffectScopes.KEY, CampaignEffectScopes.Entry); }
    get campaignEffectScopeAgentJunctions() { return this.collectionCache.getCollection(CampaignEffectScopeAgentJunctions.KEY, CampaignEffectScopeAgentJunctions.Entry); }
    get campaignEffectScopeCharacterForceRelationships() { return this.collectionCache.getCollection(CampaignEffectScopeCharacterForceRelationships.KEY, CampaignEffectScopeCharacterForceRelationships.Entry); }
    get campaignEffectScopeCharacterForceRelationshipJunctions() { return this.collectionCache.getCollection(CampaignEffectScopeCharacterForceRelationshipJunctions.KEY, CampaignEffectScopeCharacterForceRelationshipJunctions.Entry); }
    get campaignEffectScopeCharacterUnitRelationships() { return this.collectionCache.getCollection(CampaignEffectScopeCharacterUnitRelationships.KEY, CampaignEffectScopeCharacterUnitRelationships.Entry); }
    get campaignEffectScopeCharacterUnitRelationshipJunctions() { return this.collectionCache.getCollection(CampaignEffectScopeCharacterUnitRelationshipJunctions.KEY, CampaignEffectScopeCharacterUnitRelationshipJunctions.Entry); }
    get campaignEffectScopeLocations() { return this.collectionCache.getCollection(CampaignEffectScopeLocations.KEY, CampaignEffectScopeLocations.Entry); }
    get campaignEffectScopeObjects() { return this.collectionCache.getCollection(CampaignEffectScopeObjects.KEY, CampaignEffectScopeObjects.Entry); }
    get campaignEffectScopeOwnerships() { return this.collectionCache.getCollection(CampaignEffectScopeOwnerships.KEY, CampaignEffectScopeOwnerships.Entry); }
    get campaignGroundTypes() { return this.collectionCache.getCollection(CampaignGroundTypes.KEY, CampaignGroundTypes.Entry); }
    get campaignLocalisedStrings() { return this.collectionCache.getCollection(CampaignLocalisedStrings.KEY, CampaignLocalisedStrings.Entry); }
    get campaignMaps() { return this.collectionCache.getCollection(CampaignMaps.KEY, CampaignMaps.Entry); }
    get campaignMapAttritions() { return this.collectionCache.getCollection(CampaignMapAttritions.KEY, CampaignMapAttritions.Entry); }
    get campaignMapAttritionDamages() { return this.collectionCache.getCollection(CampaignMapAttritionDamages.KEY, CampaignMapAttritionDamages.Entry); }
    get campaignMapAttritionFactionImmunities() { return this.collectionCache.getCollection(CampaignMapAttritionFactionImmunities.KEY, CampaignMapAttritionFactionImmunities.Entry); }
    get campaignMapAttritionTypes() { return this.collectionCache.getCollection(CampaignMapAttritionTypes.KEY, CampaignMapAttritionTypes.Entry); }
    get campaignMapAttritionUnitImmunities() { return this.collectionCache.getCollection(CampaignMapAttritionUnitImmunities.KEY, CampaignMapAttritionUnitImmunities.Entry); }
    get campaignMapPieces() { return this.collectionCache.getCollection(CampaignMapPieces.KEY, CampaignMapPieces.Entry); }
    get campaignMapPlayableAreas() { return this.collectionCache.getCollection(CampaignMapPlayableAreas.KEY, CampaignMapPlayableAreas.Entry); }
    get campaignMapRegions() { return this.collectionCache.getCollection(CampaignMapRegions.KEY, CampaignMapRegions.Entry); }
    get campaignMapRoads() { return this.collectionCache.getCollection(CampaignMapRoads.KEY, CampaignMapRoads.Entry); }
    get campaignMapSettlements() { return this.collectionCache.getCollection(CampaignMapSettlements.KEY, CampaignMapSettlements.Entry); }
    get campaignMapSettlementTemplates() { return this.collectionCache.getCollection(CampaignMapSettlementTemplates.KEY, CampaignMapSettlementTemplates.Entry); }
    get campaignMapSettlementTemplatesCultArtJct() { return this.collectionCache.getCollection(CampaignMapSettlementTemplatesCultArtJct.KEY, CampaignMapSettlementTemplatesCultArtJct.Entry); }
    get campaignMapSlots() { return this.collectionCache.getCollection(CampaignMapSlots.KEY, CampaignMapSlots.Entry); }
    get campaignMapSlotsTemplates() { return this.collectionCache.getCollection(CampaignMapSlotsTemplates.KEY, CampaignMapSlotsTemplates.Entry); }
    get campaignMapTooltips() { return this.collectionCache.getCollection(CampaignMapTooltips.KEY, CampaignMapTooltips.Entry); }
    get campaignMapTooltipOverContexts() { return this.collectionCache.getCollection(CampaignMapTooltipOverContexts.KEY, CampaignMapTooltipOverContexts.Entry); }
    get campaignMapTooltipSelectContexts() { return this.collectionCache.getCollection(CampaignMapTooltipSelectContexts.KEY, CampaignMapTooltipSelectContexts.Entry); }
    get campaignMapTooltipTexts() { return this.collectionCache.getCollection(CampaignMapTooltipTexts.KEY, CampaignMapTooltipTexts.Entry); }
    get campaignMapTownsAndPorts() { return this.collectionCache.getCollection(CampaignMapTownsAndPorts.KEY, CampaignMapTownsAndPorts.Entry); }
    get campaignMapTownTemplatesCultArtJct() { return this.collectionCache.getCollection(CampaignMapTownTemplatesCultArtJct.KEY, CampaignMapTownTemplatesCultArtJct.Entry); }
    get campaignMapTransitionAreas() { return this.collectionCache.getCollection(CampaignMapTransitionAreas.KEY, CampaignMapTransitionAreas.Entry); }
    get campaignMapTransitionLinks() { return this.collectionCache.getCollection(CampaignMapTransitionLinks.KEY, CampaignMapTransitionLinks.Entry); }
    get campaignMpCoopGroups() { return this.collectionCache.getCollection(CampaignMpCoopGroups.KEY, CampaignMpCoopGroups.Entry); }
    get campaignMpCoopGroupsToFactions() { return this.collectionCache.getCollection(CampaignMpCoopGroupsToFactions.KEY, CampaignMpCoopGroupsToFactions.Entry); }
    get campaignPoliticsStrings() { return this.collectionCache.getCollection(CampaignPoliticsStrings.KEY, CampaignPoliticsStrings.Entry); }
    get campaignPublicOrderPopulaceEffects() { return this.collectionCache.getCollection(CampaignPublicOrderPopulaceEffects.KEY, CampaignPublicOrderPopulaceEffects.Entry); }
    get campaignSettlementDisplayAqueducts() { return this.collectionCache.getCollection(CampaignSettlementDisplayAqueducts.KEY, CampaignSettlementDisplayAqueducts.Entry); }
    get campaignSettlementDisplayBuildings() { return this.collectionCache.getCollection(CampaignSettlementDisplayBuildings.KEY, CampaignSettlementDisplayBuildings.Entry); }
    get campaignSettlementDisplayBuildingsEnums() { return this.collectionCache.getCollection(CampaignSettlementDisplayBuildingsEnums.KEY, CampaignSettlementDisplayBuildingsEnums.Entry); }
    get campaignSettlementDisplayBuildingConstructions() { return this.collectionCache.getCollection(CampaignSettlementDisplayBuildingConstructions.KEY, CampaignSettlementDisplayBuildingConstructions.Entry); }
    get campaignSettlementDisplayBuildingConstructionEnums() { return this.collectionCache.getCollection(CampaignSettlementDisplayBuildingConstructionEnums.KEY, CampaignSettlementDisplayBuildingConstructionEnums.Entry); }
    get campaignSettlementDisplayBuildingIds() { return this.collectionCache.getCollection(CampaignSettlementDisplayBuildingIds.KEY, CampaignSettlementDisplayBuildingIds.Entry); }
    get campaignSettlementDisplayBuildingTrees() { return this.collectionCache.getCollection(CampaignSettlementDisplayBuildingTrees.KEY, CampaignSettlementDisplayBuildingTrees.Entry); }
    get campaignSettlementDisplaySiegeItemIds() { return this.collectionCache.getCollection(CampaignSettlementDisplaySiegeItemIds.KEY, CampaignSettlementDisplaySiegeItemIds.Entry); }
    get campaignSettlementDisplaySprawlPieces() { return this.collectionCache.getCollection(CampaignSettlementDisplaySprawlPieces.KEY, CampaignSettlementDisplaySprawlPieces.Entry); }
    get campaignStances() { return this.collectionCache.getCollection(CampaignStances.KEY, CampaignStances.Entry); }
    get campaignStanceEffectsJunctions() { return this.collectionCache.getCollection(CampaignStanceEffectsJunctions.KEY, CampaignStanceEffectsJunctions.Entry); }
    get campaignStatisticsCategories() { return this.collectionCache.getCollection(CampaignStatisticsCategories.KEY, CampaignStatisticsCategories.Entry); }
    get campaignStatisticsEnums() { return this.collectionCache.getCollection(CampaignStatisticsEnums.KEY, CampaignStatisticsEnums.Entry); }
    get campaignStatisticsStrings() { return this.collectionCache.getCollection(CampaignStatisticsStrings.KEY, CampaignStatisticsStrings.Entry); }
    get campaignSubjects() { return this.collectionCache.getCollection(CampaignSubjects.KEY, CampaignSubjects.Entry); }
    get campaignSubjectEvolutions() { return this.collectionCache.getCollection(CampaignSubjectEvolutions.KEY, CampaignSubjectEvolutions.Entry); }
    get campaignSubjectEvolutionLinks() { return this.collectionCache.getCollection(CampaignSubjectEvolutionLinks.KEY, CampaignSubjectEvolutionLinks.Entry); }
    get campaignSubjectFactionRestrictionJunctions() { return this.collectionCache.getCollection(CampaignSubjectFactionRestrictionJunctions.KEY, CampaignSubjectFactionRestrictionJunctions.Entry); }
    get campaignSubjectMessages() { return this.collectionCache.getCollection(CampaignSubjectMessages.KEY, CampaignSubjectMessages.Entry); }
    get campaignSubjectStrings() { return this.collectionCache.getCollection(CampaignSubjectStrings.KEY, CampaignSubjectStrings.Entry); }
    get campaignUnitStatBonuses() { return this.collectionCache.getCollection(CampaignUnitStatBonuses.KEY, CampaignUnitStatBonuses.Entry); }
    get campaignVariables() { return this.collectionCache.getCollection(CampaignVariables.KEY, CampaignVariables.Entry); }
    get campaignVfxCampaignVfxEventIds() { return this.collectionCache.getCollection(CampaignVfxCampaignVfxEventIds.KEY, CampaignVfxCampaignVfxEventIds.Entry); }
    get campaignVfxDescriptions() { return this.collectionCache.getCollection(CampaignVfxDescriptions.KEY, CampaignVfxDescriptions.Entry); }
    get campaignVfxLookups() { return this.collectionCache.getCollection(CampaignVfxLookups.KEY, CampaignVfxLookups.Entry); }
    get campaignWalkAnimSets() { return this.collectionCache.getCollection(CampaignWalkAnimSets.KEY, CampaignWalkAnimSets.Entry); }
    get capturePointTypes() { return this.collectionCache.getCollection(CapturePointTypes.KEY, CapturePointTypes.Entry); }
    get cdirCampaignJunctions() { return this.collectionCache.getCollection(CdirCampaignJunctions.KEY, CdirCampaignJunctions.Entry); }
    get cdirConfigs() { return this.collectionCache.getCollection(CdirConfigs.KEY, CdirConfigs.Entry); }
    get cdirConfigValues() { return this.collectionCache.getCollection(CdirConfigValues.KEY, CdirConfigValues.Entry); }
    get cdirDesires() { return this.collectionCache.getCollection(CdirDesires.KEY, CdirDesires.Entry); }
    get cdirDesirePriorities() { return this.collectionCache.getCollection(CdirDesirePriorities.KEY, CdirDesirePriorities.Entry); }
    get cdirEventsDilemmaChoices() { return this.collectionCache.getCollection(CdirEventsDilemmaChoices.KEY, CdirEventsDilemmaChoices.Entry); }
    get cdirEventsDilemmaChoiceDetails() { return this.collectionCache.getCollection(CdirEventsDilemmaChoiceDetails.KEY, CdirEventsDilemmaChoiceDetails.Entry); }
    get cdirEventsDilemmaFollowupDilemmas() { return this.collectionCache.getCollection(CdirEventsDilemmaFollowupDilemmas.KEY, CdirEventsDilemmaFollowupDilemmas.Entry); }
    get cdirEventsDilemmaFollowupMissions() { return this.collectionCache.getCollection(CdirEventsDilemmaFollowupMissions.KEY, CdirEventsDilemmaFollowupMissions.Entry); }
    get cdirEventsDilemmaIncidents() { return this.collectionCache.getCollection(CdirEventsDilemmaIncidents.KEY, CdirEventsDilemmaIncidents.Entry); }
    get cdirEventsDilemmaOptions() { return this.collectionCache.getCollection(CdirEventsDilemmaOptions.KEY, CdirEventsDilemmaOptions.Entry); }
    get cdirEventsDilemmaOptionJunctions() { return this.collectionCache.getCollection(CdirEventsDilemmaOptionJunctions.KEY, CdirEventsDilemmaOptionJunctions.Entry); }
    get cdirEventsDilemmaPayloads() { return this.collectionCache.getCollection(CdirEventsDilemmaPayloads.KEY, CdirEventsDilemmaPayloads.Entry); }
    get cdirEventsIncidentFollowupDilemmas() { return this.collectionCache.getCollection(CdirEventsIncidentFollowupDilemmas.KEY, CdirEventsIncidentFollowupDilemmas.Entry); }
    get cdirEventsIncidentFollowupIncidents() { return this.collectionCache.getCollection(CdirEventsIncidentFollowupIncidents.KEY, CdirEventsIncidentFollowupIncidents.Entry); }
    get cdirEventsIncidentFollowupMissions() { return this.collectionCache.getCollection(CdirEventsIncidentFollowupMissions.KEY, CdirEventsIncidentFollowupMissions.Entry); }
    get cdirEventsIncidentOptions() { return this.collectionCache.getCollection(CdirEventsIncidentOptions.KEY, CdirEventsIncidentOptions.Entry); }
    get cdirEventsIncidentOptionJunctions() { return this.collectionCache.getCollection(CdirEventsIncidentOptionJunctions.KEY, CdirEventsIncidentOptionJunctions.Entry); }
    get cdirEventsIncidentPayloads() { return this.collectionCache.getCollection(CdirEventsIncidentPayloads.KEY, CdirEventsIncidentPayloads.Entry); }
    get cdirEventsMissionFollowupDilemmas() { return this.collectionCache.getCollection(CdirEventsMissionFollowupDilemmas.KEY, CdirEventsMissionFollowupDilemmas.Entry); }
    get cdirEventsMissionFollowupMissions() { return this.collectionCache.getCollection(CdirEventsMissionFollowupMissions.KEY, CdirEventsMissionFollowupMissions.Entry); }
    get cdirEventsMissionIncidents() { return this.collectionCache.getCollection(CdirEventsMissionIncidents.KEY, CdirEventsMissionIncidents.Entry); }
    get cdirEventsMissionIssuerJunctions() { return this.collectionCache.getCollection(CdirEventsMissionIssuerJunctions.KEY, CdirEventsMissionIssuerJunctions.Entry); }
    get cdirEventsMissionOptions() { return this.collectionCache.getCollection(CdirEventsMissionOptions.KEY, CdirEventsMissionOptions.Entry); }
    get cdirEventsMissionOptionJunctions() { return this.collectionCache.getCollection(CdirEventsMissionOptionJunctions.KEY, CdirEventsMissionOptionJunctions.Entry); }
    get cdirEventsMissionPayloads() { return this.collectionCache.getCollection(CdirEventsMissionPayloads.KEY, CdirEventsMissionPayloads.Entry); }
    get cdirEventsMissionStatuses() { return this.collectionCache.getCollection(CdirEventsMissionStatuses.KEY, CdirEventsMissionStatuses.Entry); }
    get cdirEventsPayloads() { return this.collectionCache.getCollection(CdirEventsPayloads.KEY, CdirEventsPayloads.Entry); }
    get cdirFactionJunctions() { return this.collectionCache.getCollection(CdirFactionJunctions.KEY, CdirFactionJunctions.Entry); }
    get cdirMilitaryGeneratorConfigs() { return this.collectionCache.getCollection(CdirMilitaryGeneratorConfigs.KEY, CdirMilitaryGeneratorConfigs.Entry); }
    get cdirMilitaryGeneratorTemplates() { return this.collectionCache.getCollection(CdirMilitaryGeneratorTemplates.KEY, CdirMilitaryGeneratorTemplates.Entry); }
    get cdirMilitaryGeneratorTemplatePriorities() { return this.collectionCache.getCollection(CdirMilitaryGeneratorTemplatePriorities.KEY, CdirMilitaryGeneratorTemplatePriorities.Entry); }
    get cdirMilitaryGeneratorTemplateRatios() { return this.collectionCache.getCollection(CdirMilitaryGeneratorTemplateRatios.KEY, CdirMilitaryGeneratorTemplateRatios.Entry); }
    get cdirMilitaryGeneratorUnitGroups() { return this.collectionCache.getCollection(CdirMilitaryGeneratorUnitGroups.KEY, CdirMilitaryGeneratorUnitGroups.Entry); }
    get cdirMilitaryGeneratorUnitQualities() { return this.collectionCache.getCollection(CdirMilitaryGeneratorUnitQualities.KEY, CdirMilitaryGeneratorUnitQualities.Entry); }
    get centralisedUpgradeBuildingLevelJunctions() { return this.collectionCache.getCollection(CentralisedUpgradeBuildingLevelJunctions.KEY, CentralisedUpgradeBuildingLevelJunctions.Entry); }
    get characterExperienceSkillTiers() { return this.collectionCache.getCollection(CharacterExperienceSkillTiers.KEY, CharacterExperienceSkillTiers.Entry); }
    get characterSkills() { return this.collectionCache.getCollection(CharacterSkills.KEY, CharacterSkills.Entry); }
    get characterSkillLevelDetails() { return this.collectionCache.getCollection(CharacterSkillLevelDetails.KEY, CharacterSkillLevelDetails.Entry); }
    get characterSkillLevelToEffectsJunctions() { return this.collectionCache.getCollection(CharacterSkillLevelToEffectsJunctions.KEY, CharacterSkillLevelToEffectsJunctions.Entry); }
    get characterSkillNodes() { return this.collectionCache.getCollection(CharacterSkillNodes.KEY, CharacterSkillNodes.Entry); }
    get characterSkillNodeLinks() { return this.collectionCache.getCollection(CharacterSkillNodeLinks.KEY, CharacterSkillNodeLinks.Entry); }
    get characterSkillNodeSets() { return this.collectionCache.getCollection(CharacterSkillNodeSets.KEY, CharacterSkillNodeSets.Entry); }
    get characterTraits() { return this.collectionCache.getCollection(CharacterTraits.KEY, CharacterTraits.Entry); }
    get characterTraitLevels() { return this.collectionCache.getCollection(CharacterTraitLevels.KEY, CharacterTraitLevels.Entry); }
    get chariotTypesEnums() { return this.collectionCache.getCollection(ChariotTypesEnums.KEY, ChariotTypesEnums.Entry); }
    get chatShortcuts() { return this.collectionCache.getCollection(ChatShortcuts.KEY, ChatShortcuts.Entry); }
    get climates() { return this.collectionCache.getCollection(Climates.KEY, Climates.Entry); }
    get climateToWeatherLand() { return this.collectionCache.getCollection(ClimateToWeatherLand.KEY, ClimateToWeatherLand.Entry); }
    get commanderUnitPermissions() { return this.collectionCache.getCollection(CommanderUnitPermissions.KEY, CommanderUnitPermissions.Entry); }
    get commodities() { return this.collectionCache.getCollection(Commodities.KEY, Commodities.Entry); }
    get commodityUnitNames() { return this.collectionCache.getCollection(CommodityUnitNames.KEY, CommodityUnitNames.Entry); }
    get cskTestMilitaryForceLegacyNames() { return this.collectionCache.getCollection(CskTestMilitaryForceLegacyNames.KEY, CskTestMilitaryForceLegacyNames.Entry); }
    get cultures() { return this.collectionCache.getCollection(Cultures.KEY, Cultures.Entry); }
    get culturesSubcultures() { return this.collectionCache.getCollection(CulturesSubcultures.KEY, CulturesSubcultures.Entry); }
    get cultureSettlementOccupationOptions() { return this.collectionCache.getCollection(CultureSettlementOccupationOptions.KEY, CultureSettlementOccupationOptions.Entry); }
    get cultureSubcultureCharacterPortraits() { return this.collectionCache.getCollection(CultureSubcultureCharacterPortraits.KEY, CultureSubcultureCharacterPortraits.Entry); }
    get cultureSubculturePoliticsGovernmentTypes() { return this.collectionCache.getCollection(CultureSubculturePoliticsGovernmentTypes.KEY, CultureSubculturePoliticsGovernmentTypes.Entry); }
    get cursors() { return this.collectionCache.getCollection(Cursors.KEY, Cursors.Entry); }
    get cursorMouseEvents() { return this.collectionCache.getCollection(CursorMouseEvents.KEY, CursorMouseEvents.Entry); }
    get cursorTransitions() { return this.collectionCache.getCollection(CursorTransitions.KEY, CursorTransitions.Entry); }
    get cursusHonorumLevelRequirements() { return this.collectionCache.getCollection(CursusHonorumLevelRequirements.KEY, CursusHonorumLevelRequirements.Entry); }
    get cursusHonorumTraitJunctions() { return this.collectionCache.getCollection(CursusHonorumTraitJunctions.KEY, CursusHonorumTraitJunctions.Entry); }
    get davePermissions() { return this.collectionCache.getCollection(DavePermissions.KEY, DavePermissions.Entry); }
    get daveRestrictedTables() { return this.collectionCache.getCollection(DaveRestrictedTables.KEY, DaveRestrictedTables.Entry); }
    get daveUserTablePermissions() { return this.collectionCache.getCollection(DaveUserTablePermissions.KEY, DaveUserTablePermissions.Entry); }
    get deathTypes() { return this.collectionCache.getCollection(DeathTypes.KEY, DeathTypes.Entry); }
    get deployables() { return this.collectionCache.getCollection(Deployables.KEY, Deployables.Entry); }
    get deployablesCustomBattles() { return this.collectionCache.getCollection(DeployablesCustomBattles.KEY, DeployablesCustomBattles.Entry); }
    get dilemmas() { return this.collectionCache.getCollection(Dilemmas.KEY, Dilemmas.Entry); }
    get dilemmaToCampaignSubjectJunctions() { return this.collectionCache.getCollection(DilemmaToCampaignSubjectJunctions.KEY, DilemmaToCampaignSubjectJunctions.Entry); }
    get diplomacyCurrentTreatiesToDiplomaticOptions() { return this.collectionCache.getCollection(DiplomacyCurrentTreatiesToDiplomaticOptions.KEY, DiplomacyCurrentTreatiesToDiplomaticOptions.Entry); }
    get diplomacyKeys() { return this.collectionCache.getCollection(DiplomacyKeys.KEY, DiplomacyKeys.Entry); }
    get diplomacyNegotiationAttitudes() { return this.collectionCache.getCollection(DiplomacyNegotiationAttitudes.KEY, DiplomacyNegotiationAttitudes.Entry); }
    get diplomacyNegotiationAttitudeOverrideStrings() { return this.collectionCache.getCollection(DiplomacyNegotiationAttitudeOverrideStrings.KEY, DiplomacyNegotiationAttitudeOverrideStrings.Entry); }
    get diplomacyNegotiationFactionAttitudeOverrideStrings() { return this.collectionCache.getCollection(DiplomacyNegotiationFactionAttitudeOverrideStrings.KEY, DiplomacyNegotiationFactionAttitudeOverrideStrings.Entry); }
    get diplomacyNegotiationFactionOverrideStrings() { return this.collectionCache.getCollection(DiplomacyNegotiationFactionOverrideStrings.KEY, DiplomacyNegotiationFactionOverrideStrings.Entry); }
    get diplomacyNegotiationStrings() { return this.collectionCache.getCollection(DiplomacyNegotiationStrings.KEY, DiplomacyNegotiationStrings.Entry); }
    get diplomacyNegotiationStringOptions() { return this.collectionCache.getCollection(DiplomacyNegotiationStringOptions.KEY, DiplomacyNegotiationStringOptions.Entry); }
    get diplomacyStrings() { return this.collectionCache.getCollection(DiplomacyStrings.KEY, DiplomacyStrings.Entry); }
    get diplomaticActionFactionRestrictions() { return this.collectionCache.getCollection(DiplomaticActionFactionRestrictions.KEY, DiplomaticActionFactionRestrictions.Entry); }
    get diplomaticActionSubcultureRestrictions() { return this.collectionCache.getCollection(DiplomaticActionSubcultureRestrictions.KEY, DiplomaticActionSubcultureRestrictions.Entry); }
    get diplomaticRelationsAttitudes() { return this.collectionCache.getCollection(DiplomaticRelationsAttitudes.KEY, DiplomaticRelationsAttitudes.Entry); }
    get diplomaticRelationsReligion() { return this.collectionCache.getCollection(DiplomaticRelationsReligion.KEY, DiplomaticRelationsReligion.Entry); }
    get diseasesCultureDeaths() { return this.collectionCache.getCollection(DiseasesCultureDeaths.KEY, DiseasesCultureDeaths.Entry); }
    get diseasesGenerationChance() { return this.collectionCache.getCollection(DiseasesGenerationChance.KEY, DiseasesGenerationChance.Entry); }
    get effects() { return this.collectionCache.getCollection(Effects.KEY, Effects.Entry); }
    get effectBonusValueAgentJunction() { return this.collectionCache.getCollection(EffectBonusValueAgentJunction.KEY, EffectBonusValueAgentJunction.Entry); }
    get effectBonusValueBasicJunction() { return this.collectionCache.getCollection(EffectBonusValueBasicJunction.KEY, EffectBonusValueBasicJunction.Entry); }
    get effectBonusValueBattlefieldDeployablesJunctions() { return this.collectionCache.getCollection(EffectBonusValueBattlefieldDeployablesJunctions.KEY, EffectBonusValueBattlefieldDeployablesJunctions.Entry); }
    get effectBonusValueBattleContextJunctions() { return this.collectionCache.getCollection(EffectBonusValueBattleContextJunctions.KEY, EffectBonusValueBattleContextJunctions.Entry); }
    get effectBonusValueBuildingChainJunctions() { return this.collectionCache.getCollection(EffectBonusValueBuildingChainJunctions.KEY, EffectBonusValueBuildingChainJunctions.Entry); }
    get effectBonusValueBuildingSetJunctions() { return this.collectionCache.getCollection(EffectBonusValueBuildingSetJunctions.KEY, EffectBonusValueBuildingSetJunctions.Entry); }
    get effectBonusValueCommodityJunction() { return this.collectionCache.getCollection(EffectBonusValueCommodityJunction.KEY, EffectBonusValueCommodityJunction.Entry); }
    get effectBonusValueIdsUnitSets() { return this.collectionCache.getCollection(EffectBonusValueIdsUnitSets.KEY, EffectBonusValueIdsUnitSets.Entry); }
    get effectBonusValueIdActionResultsAdditionalOutcomesJunctions() { return this.collectionCache.getCollection(EffectBonusValueIdActionResultsAdditionalOutcomesJunctions.KEY, EffectBonusValueIdActionResultsAdditionalOutcomesJunctions.Entry); }
    get effectBonusValueMeleeWeaponJunction() { return this.collectionCache.getCollection(EffectBonusValueMeleeWeaponJunction.KEY, EffectBonusValueMeleeWeaponJunction.Entry); }
    get effectBonusValuePopulationClassAndReligionJunction() { return this.collectionCache.getCollection(EffectBonusValuePopulationClassAndReligionJunction.KEY, EffectBonusValuePopulationClassAndReligionJunction.Entry); }
    get effectBonusValuePopulationClassJunction() { return this.collectionCache.getCollection(EffectBonusValuePopulationClassJunction.KEY, EffectBonusValuePopulationClassJunction.Entry); }
    get effectBonusValueProjectileJunctions() { return this.collectionCache.getCollection(EffectBonusValueProjectileJunctions.KEY, EffectBonusValueProjectileJunctions.Entry); }
    get effectBonusValueProvincialInitiativeEffectRecordJunctions() { return this.collectionCache.getCollection(EffectBonusValueProvincialInitiativeEffectRecordJunctions.KEY, EffectBonusValueProvincialInitiativeEffectRecordJunctions.Entry); }
    get effectBonusValueReligionJunction() { return this.collectionCache.getCollection(EffectBonusValueReligionJunction.KEY, EffectBonusValueReligionJunction.Entry); }
    get effectBonusValueResourceJunction() { return this.collectionCache.getCollection(EffectBonusValueResourceJunction.KEY, EffectBonusValueResourceJunction.Entry); }
    get effectBonusValueShotTypeJunctions() { return this.collectionCache.getCollection(EffectBonusValueShotTypeJunctions.KEY, EffectBonusValueShotTypeJunctions.Entry); }
    get effectBonusValueSiegeItemJunctions() { return this.collectionCache.getCollection(EffectBonusValueSiegeItemJunctions.KEY, EffectBonusValueSiegeItemJunctions.Entry); }
    get effectBonusValueTechnologyCategoryJunctions() { return this.collectionCache.getCollection(EffectBonusValueTechnologyCategoryJunctions.KEY, EffectBonusValueTechnologyCategoryJunctions.Entry); }
    get effectBonusValueUnitAbilityJunctions() { return this.collectionCache.getCollection(EffectBonusValueUnitAbilityJunctions.KEY, EffectBonusValueUnitAbilityJunctions.Entry); }
    get effectBonusValueUnitCasteJunctions() { return this.collectionCache.getCollection(EffectBonusValueUnitCasteJunctions.KEY, EffectBonusValueUnitCasteJunctions.Entry); }
    get effectBonusValueUnitCasteStatModifiersJunctions() { return this.collectionCache.getCollection(EffectBonusValueUnitCasteStatModifiersJunctions.KEY, EffectBonusValueUnitCasteStatModifiersJunctions.Entry); }
    get effectBonusValueUnitCategoryJunction() { return this.collectionCache.getCollection(EffectBonusValueUnitCategoryJunction.KEY, EffectBonusValueUnitCategoryJunction.Entry); }
    get effectBonusValueUnitCategoryStatModifiersJunctions() { return this.collectionCache.getCollection(EffectBonusValueUnitCategoryStatModifiersJunctions.KEY, EffectBonusValueUnitCategoryStatModifiersJunctions.Entry); }
    get effectBonusValueUnitClassJunction() { return this.collectionCache.getCollection(EffectBonusValueUnitClassJunction.KEY, EffectBonusValueUnitClassJunction.Entry); }
    get effectBonusValueUnitClassStatModifiersJunctions() { return this.collectionCache.getCollection(EffectBonusValueUnitClassStatModifiersJunctions.KEY, EffectBonusValueUnitClassStatModifiersJunctions.Entry); }
    get effectBonusValueUnitRecordJunctions() { return this.collectionCache.getCollection(EffectBonusValueUnitRecordJunctions.KEY, EffectBonusValueUnitRecordJunctions.Entry); }
    get effectBonusValueUnitRecordStatModifiersJunctions() { return this.collectionCache.getCollection(EffectBonusValueUnitRecordStatModifiersJunctions.KEY, EffectBonusValueUnitRecordStatModifiersJunctions.Entry); }
    get effectBonusValueUnitStatModifiersJunctions() { return this.collectionCache.getCollection(EffectBonusValueUnitStatModifiersJunctions.KEY, EffectBonusValueUnitStatModifiersJunctions.Entry); }
    get effectBundles() { return this.collectionCache.getCollection(EffectBundles.KEY, EffectBundles.Entry); }
    get effectBundlesToEffectsJunctions() { return this.collectionCache.getCollection(EffectBundlesToEffectsJunctions.KEY, EffectBundlesToEffectsJunctions.Entry); }
    get effectBundleAdvancementStages() { return this.collectionCache.getCollection(EffectBundleAdvancementStages.KEY, EffectBundleAdvancementStages.Entry); }
    get effectBundleTargets() { return this.collectionCache.getCollection(EffectBundleTargets.KEY, EffectBundleTargets.Entry); }
    get encyclopediaAgentManualBlockLinks() { return this.collectionCache.getCollection(EncyclopediaAgentManualBlockLinks.KEY, EncyclopediaAgentManualBlockLinks.Entry); }
    get encyclopediaAgentManualPageLinks() { return this.collectionCache.getCollection(EncyclopediaAgentManualPageLinks.KEY, EncyclopediaAgentManualPageLinks.Entry); }
    get encyclopediaBlocks() { return this.collectionCache.getCollection(EncyclopediaBlocks.KEY, EncyclopediaBlocks.Entry); }
    get encyclopediaBuildingChainGroups() { return this.collectionCache.getCollection(EncyclopediaBuildingChainGroups.KEY, EncyclopediaBuildingChainGroups.Entry); }
    get encyclopediaBuildingRedirects() { return this.collectionCache.getCollection(EncyclopediaBuildingRedirects.KEY, EncyclopediaBuildingRedirects.Entry); }
    get encyclopediaFactionGroupings() { return this.collectionCache.getCollection(EncyclopediaFactionGroupings.KEY, EncyclopediaFactionGroupings.Entry); }
    get encyclopediaFactionGroups() { return this.collectionCache.getCollection(EncyclopediaFactionGroups.KEY, EncyclopediaFactionGroups.Entry); }
    get encyclopediaFactionIconicUnits() { return this.collectionCache.getCollection(EncyclopediaFactionIconicUnits.KEY, EncyclopediaFactionIconicUnits.Entry); }
    get encyclopediaGlossaryBlocks() { return this.collectionCache.getCollection(EncyclopediaGlossaryBlocks.KEY, EncyclopediaGlossaryBlocks.Entry); }
    get encyclopediaGlossaryPages() { return this.collectionCache.getCollection(EncyclopediaGlossaryPages.KEY, EncyclopediaGlossaryPages.Entry); }
    get encyclopediaGlossaryPageLinkages() { return this.collectionCache.getCollection(EncyclopediaGlossaryPageLinkages.KEY, EncyclopediaGlossaryPageLinkages.Entry); }
    get encyclopediaHistoricalInfoBlocks() { return this.collectionCache.getCollection(EncyclopediaHistoricalInfoBlocks.KEY, EncyclopediaHistoricalInfoBlocks.Entry); }
    get encyclopediaHistoricalInfoPages() { return this.collectionCache.getCollection(EncyclopediaHistoricalInfoPages.KEY, EncyclopediaHistoricalInfoPages.Entry); }
    get encyclopediaHistoricalInfoPageLinkages() { return this.collectionCache.getCollection(EncyclopediaHistoricalInfoPageLinkages.KEY, EncyclopediaHistoricalInfoPageLinkages.Entry); }
    get encyclopediaIndexPages() { return this.collectionCache.getCollection(EncyclopediaIndexPages.KEY, EncyclopediaIndexPages.Entry); }
    get encyclopediaMultiplayerBlocks() { return this.collectionCache.getCollection(EncyclopediaMultiplayerBlocks.KEY, EncyclopediaMultiplayerBlocks.Entry); }
    get encyclopediaMultiplayerPages() { return this.collectionCache.getCollection(EncyclopediaMultiplayerPages.KEY, EncyclopediaMultiplayerPages.Entry); }
    get encyclopediaMultiplayerPageLinkages() { return this.collectionCache.getCollection(EncyclopediaMultiplayerPageLinkages.KEY, EncyclopediaMultiplayerPageLinkages.Entry); }
    get encyclopediaPages() { return this.collectionCache.getCollection(EncyclopediaPages.KEY, EncyclopediaPages.Entry); }
    get encyclopediaPageLinkages() { return this.collectionCache.getCollection(EncyclopediaPageLinkages.KEY, EncyclopediaPageLinkages.Entry); }
    get encyclopediaPageRelatedLinks() { return this.collectionCache.getCollection(EncyclopediaPageRelatedLinks.KEY, EncyclopediaPageRelatedLinks.Entry); }
    get encyclopediaPatchTexts() { return this.collectionCache.getCollection(EncyclopediaPatchTexts.KEY, EncyclopediaPatchTexts.Entry); }
    get encyclopediaProjectileShotTypeLinks() { return this.collectionCache.getCollection(EncyclopediaProjectileShotTypeLinks.KEY, EncyclopediaProjectileShotTypeLinks.Entry); }
    get encyclopediaSettings() { return this.collectionCache.getCollection(EncyclopediaSettings.KEY, EncyclopediaSettings.Entry); }
    get encyclopediaTemplateStrings() { return this.collectionCache.getCollection(EncyclopediaTemplateStrings.KEY, EncyclopediaTemplateStrings.Entry); }
    get encyclopediaTriggers() { return this.collectionCache.getCollection(EncyclopediaTriggers.KEY, EncyclopediaTriggers.Entry); }
    get encyclopediaTutorialSections() { return this.collectionCache.getCollection(EncyclopediaTutorialSections.KEY, EncyclopediaTutorialSections.Entry); }
    get encyclopediaTutorialVideos() { return this.collectionCache.getCollection(EncyclopediaTutorialVideos.KEY, EncyclopediaTutorialVideos.Entry); }
    get encyclopediaTutorialVideosDefaultSubtitles() { return this.collectionCache.getCollection(EncyclopediaTutorialVideosDefaultSubtitles.KEY, EncyclopediaTutorialVideosDefaultSubtitles.Entry); }
    get encyclopediaTutorialVideoSubtitles() { return this.collectionCache.getCollection(EncyclopediaTutorialVideoSubtitles.KEY, EncyclopediaTutorialVideoSubtitles.Entry); }
    get encyclopediaUnitAbilitiesLinks() { return this.collectionCache.getCollection(EncyclopediaUnitAbilitiesLinks.KEY, EncyclopediaUnitAbilitiesLinks.Entry); }
    get encyclopediaUnitAttributesLinks() { return this.collectionCache.getCollection(EncyclopediaUnitAttributesLinks.KEY, EncyclopediaUnitAttributesLinks.Entry); }
    get encyclopediaUnitPatchTexts() { return this.collectionCache.getCollection(EncyclopediaUnitPatchTexts.KEY, EncyclopediaUnitPatchTexts.Entry); }
    get encyclopediaUnitRedirects() { return this.collectionCache.getCollection(EncyclopediaUnitRedirects.KEY, EncyclopediaUnitRedirects.Entry); }
    get encyclopediaUrls() { return this.collectionCache.getCollection(EncyclopediaUrls.KEY, EncyclopediaUrls.Entry); }
    get entityTrainingLevels() { return this.collectionCache.getCollection(EntityTrainingLevels.KEY, EntityTrainingLevels.Entry); }
    get events() { return this.collectionCache.getCollection(Events.KEY, Events.Entry); }
    get eventsEffectsJunct() { return this.collectionCache.getCollection(EventsEffectsJunct.KEY, EventsEffectsJunct.Entry); }
    get eventLogDescriptions() { return this.collectionCache.getCollection(EventLogDescriptions.KEY, EventLogDescriptions.Entry); }
    get experienceTriggers() { return this.collectionCache.getCollection(ExperienceTriggers.KEY, ExperienceTriggers.Entry); }
    get experienceTriggersTargets() { return this.collectionCache.getCollection(ExperienceTriggersTargets.KEY, ExperienceTriggersTargets.Entry); }
    get factions() { return this.collectionCache.getCollection(Factions.KEY, Factions.Entry); }
    get factionsParents() { return this.collectionCache.getCollection(FactionsParents.KEY, FactionsParents.Entry); }
    get factionBanners() { return this.collectionCache.getCollection(FactionBanners.KEY, FactionBanners.Entry); }
    get factionCivilWarSetups() { return this.collectionCache.getCollection(FactionCivilWarSetups.KEY, FactionCivilWarSetups.Entry); }
    get factionGroups() { return this.collectionCache.getCollection(FactionGroups.KEY, FactionGroups.Entry); }
    get factionPoliticalPartiesJunctions() { return this.collectionCache.getCollection(FactionPoliticalPartiesJunctions.KEY, FactionPoliticalPartiesJunctions.Entry); }
    get factionPoliticsGovernmentActionsJunctions() { return this.collectionCache.getCollection(FactionPoliticsGovernmentActionsJunctions.KEY, FactionPoliticsGovernmentActionsJunctions.Entry); }
    get factionRebellionUnitsJunctions() { return this.collectionCache.getCollection(FactionRebellionUnitsJunctions.KEY, FactionRebellionUnitsJunctions.Entry); }
    get factionResourceConsumptions() { return this.collectionCache.getCollection(FactionResourceConsumptions.KEY, FactionResourceConsumptions.Entry); }
    get factionToCampaignJunctions() { return this.collectionCache.getCollection(FactionToCampaignJunctions.KEY, FactionToCampaignJunctions.Entry); }
    get factionToFactionGroupsJunctions() { return this.collectionCache.getCollection(FactionToFactionGroupsJunctions.KEY, FactionToFactionGroupsJunctions.Entry); }
    get factionToMercenarySetJunctions() { return this.collectionCache.getCollection(FactionToMercenarySetJunctions.KEY, FactionToMercenarySetJunctions.Entry); }
    get factionUniformColours() { return this.collectionCache.getCollection(FactionUniformColours.KEY, FactionUniformColours.Entry); }
    get factionVariables() { return this.collectionCache.getCollection(FactionVariables.KEY, FactionVariables.Entry); }
    get factionVariablesOptionalOverrides() { return this.collectionCache.getCollection(FactionVariablesOptionalOverrides.KEY, FactionVariablesOptionalOverrides.Entry); }
    get fameLevels() { return this.collectionCache.getCollection(FameLevels.KEY, FameLevels.Entry); }
    get familyRelationshipTypes() { return this.collectionCache.getCollection(FamilyRelationshipTypes.KEY, FamilyRelationshipTypes.Entry); }
    get famousBattlePools() { return this.collectionCache.getCollection(FamousBattlePools.KEY, FamousBattlePools.Entry); }
    get femaleCharacterCultureDetails() { return this.collectionCache.getCollection(FemaleCharacterCultureDetails.KEY, FemaleCharacterCultureDetails.Entry); }
    get femaleCharacterFactionDetails() { return this.collectionCache.getCollection(FemaleCharacterFactionDetails.KEY, FemaleCharacterFactionDetails.Entry); }
    get femaleCharacterSubcultureDetails() { return this.collectionCache.getCollection(FemaleCharacterSubcultureDetails.KEY, FemaleCharacterSubcultureDetails.Entry); }
    get firstPersonEngines() { return this.collectionCache.getCollection(FirstPersonEngines.KEY, FirstPersonEngines.Entry); }
    get fonts() { return this.collectionCache.getCollection(Fonts.KEY, Fonts.Entry); }
    get fontNames() { return this.collectionCache.getCollection(FontNames.KEY, FontNames.Entry); }
    get formations() { return this.collectionCache.getCollection(Formations.KEY, Formations.Entry); }
    get formationsToSubcultures() { return this.collectionCache.getCollection(FormationsToSubcultures.KEY, FormationsToSubcultures.Entry); }
    get fortsToGunTypes() { return this.collectionCache.getCollection(FortsToGunTypes.KEY, FortsToGunTypes.Entry); }
    get fortUnderlayClimateJcts() { return this.collectionCache.getCollection(FortUnderlayClimateJcts.KEY, FortUnderlayClimateJcts.Entry); }
    get frontendFactionLeaders() { return this.collectionCache.getCollection(FrontendFactionLeaders.KEY, FrontendFactionLeaders.Entry); }
    get gameAreaEnums() { return this.collectionCache.getCollection(GameAreaEnums.KEY, GameAreaEnums.Entry); }
    get genders() { return this.collectionCache.getCollection(Genders.KEY, Genders.Entry); }
    get generalCommandStarLevelEffects() { return this.collectionCache.getCollection(GeneralCommandStarLevelEffects.KEY, GeneralCommandStarLevelEffects.Entry); }
    get governmentTypes() { return this.collectionCache.getCollection(GovernmentTypes.KEY, GovernmentTypes.Entry); }
    get governmentTypesToEffects() { return this.collectionCache.getCollection(GovernmentTypesToEffects.KEY, GovernmentTypesToEffects.Entry); }
    get governorships() { return this.collectionCache.getCollection(Governorships.KEY, Governorships.Entry); }
    get groundConditionTypes() { return this.collectionCache.getCollection(GroundConditionTypes.KEY, GroundConditionTypes.Entry); }
    get groundTypes() { return this.collectionCache.getCollection(GroundTypes.KEY, GroundTypes.Entry); }
    get groundTypeToStatEffects() { return this.collectionCache.getCollection(GroundTypeToStatEffects.KEY, GroundTypeToStatEffects.Entry); }
    get groupingsMilitary() { return this.collectionCache.getCollection(GroupingsMilitary.KEY, GroupingsMilitary.Entry); }
    get gunTypes() { return this.collectionCache.getCollection(GunTypes.KEY, GunTypes.Entry); }
    get gunTypesEnum() { return this.collectionCache.getCollection(GunTypesEnum.KEY, GunTypesEnum.Entry); }
    get gunTypeMuzzleFlashEnum() { return this.collectionCache.getCollection(GunTypeMuzzleFlashEnum.KEY, GunTypeMuzzleFlashEnum.Entry); }
    get gunTypeToProjectiles() { return this.collectionCache.getCollection(GunTypeToProjectiles.KEY, GunTypeToProjectiles.Entry); }
    get historicalBattlesUiLocations() { return this.collectionCache.getCollection(HistoricalBattlesUiLocations.KEY, HistoricalBattlesUiLocations.Entry); }
    get historicalCharacters() { return this.collectionCache.getCollection(HistoricalCharacters.KEY, HistoricalCharacters.Entry); }
    get historicalCharacterTraits() { return this.collectionCache.getCollection(HistoricalCharacterTraits.KEY, HistoricalCharacterTraits.Entry); }
    get honourEffects() { return this.collectionCache.getCollection(HonourEffects.KEY, HonourEffects.Entry); }
    get honourFactors() { return this.collectionCache.getCollection(HonourFactors.KEY, HonourFactors.Entry); }
    get imposterSharingEnums() { return this.collectionCache.getCollection(ImposterSharingEnums.KEY, ImposterSharingEnums.Entry); }
    get incidents() { return this.collectionCache.getCollection(Incidents.KEY, Incidents.Entry); }
    get incidentHeadingTexts() { return this.collectionCache.getCollection(IncidentHeadingTexts.KEY, IncidentHeadingTexts.Entry); }
    get landUnits() { return this.collectionCache.getCollection(LandUnits.KEY, LandUnits.Entry); }
    get landUnitsOfficers() { return this.collectionCache.getCollection(LandUnitsOfficers.KEY, LandUnitsOfficers.Entry); }
    get landUnitsToUnitAbilitesJunctions() { return this.collectionCache.getCollection(LandUnitsToUnitAbilitesJunctions.KEY, LandUnitsToUnitAbilitesJunctions.Entry); }
    get landUnitArticulatedVehicles() { return this.collectionCache.getCollection(LandUnitArticulatedVehicles.KEY, LandUnitArticulatedVehicles.Entry); }
    get languages() { return this.collectionCache.getCollection(Languages.KEY, Languages.Entry); }
    get lightingSetups() { return this.collectionCache.getCollection(LightingSetups.KEY, LightingSetups.Entry); }
    get loyaltyEffects() { return this.collectionCache.getCollection(LoyaltyEffects.KEY, LoyaltyEffects.Entry); }
    get loyaltyFactors() { return this.collectionCache.getCollection(LoyaltyFactors.KEY, LoyaltyFactors.Entry); }
    get mainUnits() { return this.collectionCache.getCollection(MainUnits.KEY, MainUnits.Entry); }
    get marriageTypes() { return this.collectionCache.getCollection(MarriageTypes.KEY, MarriageTypes.Entry); }
    get meleeWeapons() { return this.collectionCache.getCollection(MeleeWeapons.KEY, MeleeWeapons.Entry); }
    get mercenaryPools() { return this.collectionCache.getCollection(MercenaryPools.KEY, MercenaryPools.Entry); }
    get mercenaryPoolModifiers() { return this.collectionCache.getCollection(MercenaryPoolModifiers.KEY, MercenaryPoolModifiers.Entry); }
    get mercenaryPoolToGroupsJunctions() { return this.collectionCache.getCollection(MercenaryPoolToGroupsJunctions.KEY, MercenaryPoolToGroupsJunctions.Entry); }
    get mercenaryPoolTypeEnums() { return this.collectionCache.getCollection(MercenaryPoolTypeEnums.KEY, MercenaryPoolTypeEnums.Entry); }
    get mercenaryUnitGroups() { return this.collectionCache.getCollection(MercenaryUnitGroups.KEY, MercenaryUnitGroups.Entry); }
    get messageEvents() { return this.collectionCache.getCollection(MessageEvents.KEY, MessageEvents.Entry); }
    get messageEventLayoutTypes() { return this.collectionCache.getCollection(MessageEventLayoutTypes.KEY, MessageEventLayoutTypes.Entry); }
    get messageEventStrings() { return this.collectionCache.getCollection(MessageEventStrings.KEY, MessageEventStrings.Entry); }
    get messageEventText() { return this.collectionCache.getCollection(MessageEventText.KEY, MessageEventText.Entry); }
    get militaryForceLegacyEmblems() { return this.collectionCache.getCollection(MilitaryForceLegacyEmblems.KEY, MilitaryForceLegacyEmblems.Entry); }
    get militaryForceLegacyNames() { return this.collectionCache.getCollection(MilitaryForceLegacyNames.KEY, MilitaryForceLegacyNames.Entry); }
    get ministerialEffectivenessModifiers() { return this.collectionCache.getCollection(MinisterialEffectivenessModifiers.KEY, MinisterialEffectivenessModifiers.Entry); }
    get ministerialPositions() { return this.collectionCache.getCollection(MinisterialPositions.KEY, MinisterialPositions.Entry); }
    get ministerialPositionsByGovTypes() { return this.collectionCache.getCollection(MinisterialPositionsByGovTypes.KEY, MinisterialPositionsByGovTypes.Entry); }
    get ministerialPositionsStrings() { return this.collectionCache.getCollection(MinisterialPositionsStrings.KEY, MinisterialPositionsStrings.Entry); }
    get ministerialPositionsSwitchingLoyaltyEffects() { return this.collectionCache.getCollection(MinisterialPositionsSwitchingLoyaltyEffects.KEY, MinisterialPositionsSwitchingLoyaltyEffects.Entry); }
    get ministerialPositionsToCharacterEffects() { return this.collectionCache.getCollection(MinisterialPositionsToCharacterEffects.KEY, MinisterialPositionsToCharacterEffects.Entry); }
    get ministerialPositionsToEffects() { return this.collectionCache.getCollection(MinisterialPositionsToEffects.KEY, MinisterialPositionsToEffects.Entry); }
    get ministerialPositionsToGovernorships() { return this.collectionCache.getCollection(MinisterialPositionsToGovernorships.KEY, MinisterialPositionsToGovernorships.Entry); }
    get ministerialPositionDefaultNames() { return this.collectionCache.getCollection(MinisterialPositionDefaultNames.KEY, MinisterialPositionDefaultNames.Entry); }
    get missileWeapons() { return this.collectionCache.getCollection(MissileWeapons.KEY, MissileWeapons.Entry); }
    get missileWeaponsToProjectiles() { return this.collectionCache.getCollection(MissileWeaponsToProjectiles.KEY, MissileWeaponsToProjectiles.Entry); }
    get missions() { return this.collectionCache.getCollection(Missions.KEY, Missions.Entry); }
    get missionIssuers() { return this.collectionCache.getCollection(MissionIssuers.KEY, MissionIssuers.Entry); }
    get missionText() { return this.collectionCache.getCollection(MissionText.KEY, MissionText.Entry); }
    get missionTypes() { return this.collectionCache.getCollection(MissionTypes.KEY, MissionTypes.Entry); }
    get modelsArtillery() { return this.collectionCache.getCollection(ModelsArtillery.KEY, ModelsArtillery.Entry); }
    get modelsBuilding() { return this.collectionCache.getCollection(ModelsBuilding.KEY, ModelsBuilding.Entry); }
    get modelsDeployables() { return this.collectionCache.getCollection(ModelsDeployables.KEY, ModelsDeployables.Entry); }
    get modelsEntityWeapons() { return this.collectionCache.getCollection(ModelsEntityWeapons.KEY, ModelsEntityWeapons.Entry); }
    get modelsFoot() { return this.collectionCache.getCollection(ModelsFoot.KEY, ModelsFoot.Entry); }
    get modelsMount() { return this.collectionCache.getCollection(ModelsMount.KEY, ModelsMount.Entry); }
    get modelsNaval() { return this.collectionCache.getCollection(ModelsNaval.KEY, ModelsNaval.Entry); }
    get modelsOars() { return this.collectionCache.getCollection(ModelsOars.KEY, ModelsOars.Entry); }
    get modelsSieges() { return this.collectionCache.getCollection(ModelsSieges.KEY, ModelsSieges.Entry); }
    get mountableArtilleryUnits() { return this.collectionCache.getCollection(MountableArtilleryUnits.KEY, MountableArtilleryUnits.Entry); }
    get mountableArtilleryUnitsCustomBattles() { return this.collectionCache.getCollection(MountableArtilleryUnitsCustomBattles.KEY, MountableArtilleryUnitsCustomBattles.Entry); }
    get mounts() { return this.collectionCache.getCollection(Mounts.KEY, Mounts.Entry); }
    get mountVariants() { return this.collectionCache.getCollection(MountVariants.KEY, MountVariants.Entry); }
    get movementTypes() { return this.collectionCache.getCollection(MovementTypes.KEY, MovementTypes.Entry); }
    get movieEventStrings() { return this.collectionCache.getCollection(MovieEventStrings.KEY, MovieEventStrings.Entry); }
    get mpBudgets() { return this.collectionCache.getCollection(MpBudgets.KEY, MpBudgets.Entry); }
    get mpBudgetSizes() { return this.collectionCache.getCollection(MpBudgetSizes.KEY, MpBudgetSizes.Entry); }
    get mpForceGenTemplates() { return this.collectionCache.getCollection(MpForceGenTemplates.KEY, MpForceGenTemplates.Entry); }
    get mpForceGenTemplateJunctions() { return this.collectionCache.getCollection(MpForceGenTemplateJunctions.KEY, MpForceGenTemplateJunctions.Entry); }
    get multiplayerMininumLengthFunds() { return this.collectionCache.getCollection(MultiplayerMininumLengthFunds.KEY, MultiplayerMininumLengthFunds.Entry); }
    get names() { return this.collectionCache.getCollection(Names.KEY, Names.Entry); }
    get namesGroups() { return this.collectionCache.getCollection(NamesGroups.KEY, NamesGroups.Entry); }
    get namesTitles() { return this.collectionCache.getCollection(NamesTitles.KEY, NamesTitles.Entry); }
    get namesTitlesByAgent() { return this.collectionCache.getCollection(NamesTitlesByAgent.KEY, NamesTitlesByAgent.Entry); }
    get nameOrders() { return this.collectionCache.getCollection(NameOrders.KEY, NameOrders.Entry); }
    get nameOrderOverrides() { return this.collectionCache.getCollection(NameOrderOverrides.KEY, NameOrderOverrides.Entry); }
    get nameTypes() { return this.collectionCache.getCollection(NameTypes.KEY, NameTypes.Entry); }
    get navalEffects() { return this.collectionCache.getCollection(NavalEffects.KEY, NavalEffects.Entry); }
    get navalFireJunctions() { return this.collectionCache.getCollection(NavalFireJunctions.KEY, NavalFireJunctions.Entry); }
    get navalOarEnums() { return this.collectionCache.getCollection(NavalOarEnums.KEY, NavalOarEnums.Entry); }
    get navalRammingEvents() { return this.collectionCache.getCollection(NavalRammingEvents.KEY, NavalRammingEvents.Entry); }
    get navalUnits() { return this.collectionCache.getCollection(NavalUnits.KEY, NavalUnits.Entry); }
    get navalUnitsToUnitAbilitesJunctions() { return this.collectionCache.getCollection(NavalUnitsToUnitAbilitesJunctions.KEY, NavalUnitsToUnitAbilitesJunctions.Entry); }
    get navalWeapons() { return this.collectionCache.getCollection(NavalWeapons.KEY, NavalWeapons.Entry); }
    get navalWeaponsEnums() { return this.collectionCache.getCollection(NavalWeaponsEnums.KEY, NavalWeaponsEnums.Entry); }
    get particleEffects() { return this.collectionCache.getCollection(ParticleEffects.KEY, ParticleEffects.Entry); }
    get pdlc() { return this.collectionCache.getCollection(Pdlc.KEY, Pdlc.Entry); }
    get personalityLocationEnums() { return this.collectionCache.getCollection(PersonalityLocationEnums.KEY, PersonalityLocationEnums.Entry); }
    get plagues() { return this.collectionCache.getCollection(Plagues.KEY, Plagues.Entry); }
    get plaguesPermittedCampaigns() { return this.collectionCache.getCollection(PlaguesPermittedCampaigns.KEY, PlaguesPermittedCampaigns.Entry); }
    get politicalActions() { return this.collectionCache.getCollection(PoliticalActions.KEY, PoliticalActions.Entry); }
    get politicalActionsDilemmaJunctions() { return this.collectionCache.getCollection(PoliticalActionsDilemmaJunctions.KEY, PoliticalActionsDilemmaJunctions.Entry); }
    get politicalActionsEffectBundles() { return this.collectionCache.getCollection(PoliticalActionsEffectBundles.KEY, PoliticalActionsEffectBundles.Entry); }
    get politicalActionsIncidentsJunctions() { return this.collectionCache.getCollection(PoliticalActionsIncidentsJunctions.KEY, PoliticalActionsIncidentsJunctions.Entry); }
    get politicalActionsMissionJunctions() { return this.collectionCache.getCollection(PoliticalActionsMissionJunctions.KEY, PoliticalActionsMissionJunctions.Entry); }
    get politicalParties() { return this.collectionCache.getCollection(PoliticalParties.KEY, PoliticalParties.Entry); }
    get politicalPartiesLoyaltyEffectBundles() { return this.collectionCache.getCollection(PoliticalPartiesLoyaltyEffectBundles.KEY, PoliticalPartiesLoyaltyEffectBundles.Entry); }
    get politicalPartiesPowerEffectBundles() { return this.collectionCache.getCollection(PoliticalPartiesPowerEffectBundles.KEY, PoliticalPartiesPowerEffectBundles.Entry); }
    get politicalTraits() { return this.collectionCache.getCollection(PoliticalTraits.KEY, PoliticalTraits.Entry); }
    get politicalTriggers() { return this.collectionCache.getCollection(PoliticalTriggers.KEY, PoliticalTriggers.Entry); }
    get politicsGovernmentActions() { return this.collectionCache.getCollection(PoliticsGovernmentActions.KEY, PoliticsGovernmentActions.Entry); }
    get politicsGovernmentTypes() { return this.collectionCache.getCollection(PoliticsGovernmentTypes.KEY, PoliticsGovernmentTypes.Entry); }
    get politicsGovernmentTypePoliticalActionJunctions() { return this.collectionCache.getCollection(PoliticsGovernmentTypePoliticalActionJunctions.KEY, PoliticsGovernmentTypePoliticalActionJunctions.Entry); }
    get populationClasses() { return this.collectionCache.getCollection(PopulationClasses.KEY, PopulationClasses.Entry); }
    get portraitTypes() { return this.collectionCache.getCollection(PortraitTypes.KEY, PortraitTypes.Entry); }
    get presetColours() { return this.collectionCache.getCollection(PresetColours.KEY, PresetColours.Entry); }
    get preBattleSpeeches() { return this.collectionCache.getCollection(PreBattleSpeeches.KEY, PreBattleSpeeches.Entry); }
    get preBattleSpeechParametersEnum() { return this.collectionCache.getCollection(PreBattleSpeechParametersEnum.KEY, PreBattleSpeechParametersEnum.Entry); }
    get preBattleSpeechTypesEnum() { return this.collectionCache.getCollection(PreBattleSpeechTypesEnum.KEY, PreBattleSpeechTypesEnum.Entry); }
    get projectiles() { return this.collectionCache.getCollection(Projectiles.KEY, Projectiles.Entry); }
    get projectilesDetonationTypesEnum() { return this.collectionCache.getCollection(ProjectilesDetonationTypesEnum.KEY, ProjectilesDetonationTypesEnum.Entry); }
    get projectilesDetonatorTypesEnum() { return this.collectionCache.getCollection(ProjectilesDetonatorTypesEnum.KEY, ProjectilesDetonatorTypesEnum.Entry); }
    get projectilesExplosions() { return this.collectionCache.getCollection(ProjectilesExplosions.KEY, ProjectilesExplosions.Entry); }
    get projectilesSpinTypeEnum() { return this.collectionCache.getCollection(ProjectilesSpinTypeEnum.KEY, ProjectilesSpinTypeEnum.Entry); }
    get projectileCategoryEnum() { return this.collectionCache.getCollection(ProjectileCategoryEnum.KEY, ProjectileCategoryEnum.Entry); }
    get projectileDisplays() { return this.collectionCache.getCollection(ProjectileDisplays.KEY, ProjectileDisplays.Entry); }
    get projectileGunTypesEnum() { return this.collectionCache.getCollection(ProjectileGunTypesEnum.KEY, ProjectileGunTypesEnum.Entry); }
    get projectileImpacts() { return this.collectionCache.getCollection(ProjectileImpacts.KEY, ProjectileImpacts.Entry); }
    get projectileIncendiaryEnum() { return this.collectionCache.getCollection(ProjectileIncendiaryEnum.KEY, ProjectileIncendiaryEnum.Entry); }
    get projectilePenetrationEnum() { return this.collectionCache.getCollection(ProjectilePenetrationEnum.KEY, ProjectilePenetrationEnum.Entry); }
    get projectileShotTypeEnum() { return this.collectionCache.getCollection(ProjectileShotTypeEnum.KEY, ProjectileShotTypeEnum.Entry); }
    get projectileTrajectorySightEnum() { return this.collectionCache.getCollection(ProjectileTrajectorySightEnum.KEY, ProjectileTrajectorySightEnum.Entry); }
    get prologueChapters() { return this.collectionCache.getCollection(PrologueChapters.KEY, PrologueChapters.Entry); }
    get prologueLoadingScreens() { return this.collectionCache.getCollection(PrologueLoadingScreens.KEY, PrologueLoadingScreens.Entry); }
    get provinces() { return this.collectionCache.getCollection(Provinces.KEY, Provinces.Entry); }
    get provinceToMercenarySetJunctions() { return this.collectionCache.getCollection(ProvinceToMercenarySetJunctions.KEY, ProvinceToMercenarySetJunctions.Entry); }
    get provincialInitiativesToSubcultureJunctions() { return this.collectionCache.getCollection(ProvincialInitiativesToSubcultureJunctions.KEY, ProvincialInitiativesToSubcultureJunctions.Entry); }
    get provincialInitiativeRecords() { return this.collectionCache.getCollection(ProvincialInitiativeRecords.KEY, ProvincialInitiativeRecords.Entry); }
    get publicOrderFactors() { return this.collectionCache.getCollection(PublicOrderFactors.KEY, PublicOrderFactors.Entry); }
    get quotes() { return this.collectionCache.getCollection(Quotes.KEY, Quotes.Entry); }
    get quotesPeople() { return this.collectionCache.getCollection(QuotesPeople.KEY, QuotesPeople.Entry); }
    get randomLocalisationStrings() { return this.collectionCache.getCollection(RandomLocalisationStrings.KEY, RandomLocalisationStrings.Entry); }
    get regions() { return this.collectionCache.getCollection(Regions.KEY, Regions.Entry); }
    get regionsContinents() { return this.collectionCache.getCollection(RegionsContinents.KEY, RegionsContinents.Entry); }
    get regionsSea() { return this.collectionCache.getCollection(RegionsSea.KEY, RegionsSea.Entry); }
    get regionsTitles() { return this.collectionCache.getCollection(RegionsTitles.KEY, RegionsTitles.Entry); }
    get regionsToRegionGroupsJunctions() { return this.collectionCache.getCollection(RegionsToRegionGroupsJunctions.KEY, RegionsToRegionGroupsJunctions.Entry); }
    get regionCampaignOverrides() { return this.collectionCache.getCollection(RegionCampaignOverrides.KEY, RegionCampaignOverrides.Entry); }
    get regionEconomicsFactors() { return this.collectionCache.getCollection(RegionEconomicsFactors.KEY, RegionEconomicsFactors.Entry); }
    get regionGroups() { return this.collectionCache.getCollection(RegionGroups.KEY, RegionGroups.Entry); }
    get regionReligions() { return this.collectionCache.getCollection(RegionReligions.KEY, RegionReligions.Entry); }
    get regionToProvinceJunctions() { return this.collectionCache.getCollection(RegionToProvinceJunctions.KEY, RegionToProvinceJunctions.Entry); }
    get regionUnitResources() { return this.collectionCache.getCollection(RegionUnitResources.KEY, RegionUnitResources.Entry); }
    get religions() { return this.collectionCache.getCollection(Religions.KEY, Religions.Entry); }
    get religionConversionMods() { return this.collectionCache.getCollection(ReligionConversionMods.KEY, ReligionConversionMods.Entry); }
    get resources() { return this.collectionCache.getCollection(Resources.KEY, Resources.Entry); }
    get resourceEffects() { return this.collectionCache.getCollection(ResourceEffects.KEY, ResourceEffects.Entry); }
    get scriptedObjectives() { return this.collectionCache.getCollection(ScriptedObjectives.KEY, ScriptedObjectives.Entry); }
    get scriptedSubtitles() { return this.collectionCache.getCollection(ScriptedSubtitles.KEY, ScriptedSubtitles.Entry); }
    get seasons() { return this.collectionCache.getCollection(Seasons.KEY, Seasons.Entry); }
    get seasonAttritions() { return this.collectionCache.getCollection(SeasonAttritions.KEY, SeasonAttritions.Entry); }
    get seasonProvinceEffectBundles() { return this.collectionCache.getCollection(SeasonProvinceEffectBundles.KEY, SeasonProvinceEffectBundles.Entry); }
    get seaClimateDetails() { return this.collectionCache.getCollection(SeaClimateDetails.KEY, SeaClimateDetails.Entry); }
    get seaSurfaces() { return this.collectionCache.getCollection(SeaSurfaces.KEY, SeaSurfaces.Entry); }
    get sendDiplomatIncidents() { return this.collectionCache.getCollection(SendDiplomatIncidents.KEY, SendDiplomatIncidents.Entry); }
    get sendDiplomatOutcomes() { return this.collectionCache.getCollection(SendDiplomatOutcomes.KEY, SendDiplomatOutcomes.Entry); }
    get shipDbs() { return this.collectionCache.getCollection(ShipDbs.KEY, ShipDbs.Entry); }
    get shipNames() { return this.collectionCache.getCollection(ShipNames.KEY, ShipNames.Entry); }
    get shortcutLocalisation() { return this.collectionCache.getCollection(ShortcutLocalisation.KEY, ShortcutLocalisation.Entry); }
    get skeletons() { return this.collectionCache.getCollection(Skeletons.KEY, Skeletons.Entry); }
    get slots() { return this.collectionCache.getCollection(Slots.KEY, Slots.Entry); }
    get slotsArt() { return this.collectionCache.getCollection(SlotsArt.KEY, SlotsArt.Entry); }
    get slotsGdpValues() { return this.collectionCache.getCollection(SlotsGdpValues.KEY, SlotsGdpValues.Entry); }
    get slotsTemplatesModels() { return this.collectionCache.getCollection(SlotsTemplatesModels.KEY, SlotsTemplatesModels.Entry); }
    get slotTemplates() { return this.collectionCache.getCollection(SlotTemplates.KEY, SlotTemplates.Entry); }
    get slotTemplateToBuildingSuperchainJunctions() { return this.collectionCache.getCollection(SlotTemplateToBuildingSuperchainJunctions.KEY, SlotTemplateToBuildingSuperchainJunctions.Entry); }
    get slotTypes() { return this.collectionCache.getCollection(SlotTypes.KEY, SlotTypes.Entry); }
    get smallVegetationClimatesJct() { return this.collectionCache.getCollection(SmallVegetationClimatesJct.KEY, SmallVegetationClimatesJct.Entry); }
    get sounds() { return this.collectionCache.getCollection(Sounds.KEY, Sounds.Entry); }
    get soundEvents() { return this.collectionCache.getCollection(SoundEvents.KEY, SoundEvents.Entry); }
    get soundEventNames() { return this.collectionCache.getCollection(SoundEventNames.KEY, SoundEventNames.Entry); }
    get soundTypes() { return this.collectionCache.getCollection(SoundTypes.KEY, SoundTypes.Entry); }
    get specialAbilitiesSpecificBehaviourTypes() { return this.collectionCache.getCollection(SpecialAbilitiesSpecificBehaviourTypes.KEY, SpecialAbilitiesSpecificBehaviourTypes.Entry); }
    get specialAbilityGroups() { return this.collectionCache.getCollection(SpecialAbilityGroups.KEY, SpecialAbilityGroups.Entry); }
    get specialAbilityGroupsToFactionsJunctions() { return this.collectionCache.getCollection(SpecialAbilityGroupsToFactionsJunctions.KEY, SpecialAbilityGroupsToFactionsJunctions.Entry); }
    get specialAbilityGroupsToUnitAbilitiesJunctions() { return this.collectionCache.getCollection(SpecialAbilityGroupsToUnitAbilitiesJunctions.KEY, SpecialAbilityGroupsToUnitAbilitiesJunctions.Entry); }
    get specialAbilityInvalidUsageFlags() { return this.collectionCache.getCollection(SpecialAbilityInvalidUsageFlags.KEY, SpecialAbilityInvalidUsageFlags.Entry); }
    get specialAbilityPhases() { return this.collectionCache.getCollection(SpecialAbilityPhases.KEY, SpecialAbilityPhases.Entry); }
    get specialAbilityPhaseAttributeEffects() { return this.collectionCache.getCollection(SpecialAbilityPhaseAttributeEffects.KEY, SpecialAbilityPhaseAttributeEffects.Entry); }
    get specialAbilityPhaseEffectTypes() { return this.collectionCache.getCollection(SpecialAbilityPhaseEffectTypes.KEY, SpecialAbilityPhaseEffectTypes.Entry); }
    get specialAbilityPhaseStatEffects() { return this.collectionCache.getCollection(SpecialAbilityPhaseStatEffects.KEY, SpecialAbilityPhaseStatEffects.Entry); }
    get specialAbilityPhaseToUnitSpecialAbilityEffectJunctions() { return this.collectionCache.getCollection(SpecialAbilityPhaseToUnitSpecialAbilityEffectJunctions.KEY, SpecialAbilityPhaseToUnitSpecialAbilityEffectJunctions.Entry); }
    get specialAbilityStanceEnums() { return this.collectionCache.getCollection(SpecialAbilityStanceEnums.KEY, SpecialAbilityStanceEnums.Entry); }
    get specialAbilityToAutoDeactivateFlags() { return this.collectionCache.getCollection(SpecialAbilityToAutoDeactivateFlags.KEY, SpecialAbilityToAutoDeactivateFlags.Entry); }
    get specialAbilityToInvalidUsageFlags() { return this.collectionCache.getCollection(SpecialAbilityToInvalidUsageFlags.KEY, SpecialAbilityToInvalidUsageFlags.Entry); }
    get specialAbilityToSpecialAbilityPhaseJunctions() { return this.collectionCache.getCollection(SpecialAbilityToSpecialAbilityPhaseJunctions.KEY, SpecialAbilityToSpecialAbilityPhaseJunctions.Entry); }
    get spottingAndHidingValues() { return this.collectionCache.getCollection(SpottingAndHidingValues.KEY, SpottingAndHidingValues.Entry); }
    get stances() { return this.collectionCache.getCollection(Stances.KEY, Stances.Entry); }
    get startPosCalendars() { return this.collectionCache.getCollection(StartPosCalendars.KEY, StartPosCalendars.Entry); }
    get startPosCharacters() { return this.collectionCache.getCollection(StartPosCharacters.KEY, StartPosCharacters.Entry); }
    get startPosCharacterAncillaries() { return this.collectionCache.getCollection(StartPosCharacterAncillaries.KEY, StartPosCharacterAncillaries.Entry); }
    get startPosCharacterToSettlements() { return this.collectionCache.getCollection(StartPosCharacterToSettlements.KEY, StartPosCharacterToSettlements.Entry); }
    get startPosCharacterTraits() { return this.collectionCache.getCollection(StartPosCharacterTraits.KEY, StartPosCharacterTraits.Entry); }
    get startPosDiplomacy() { return this.collectionCache.getCollection(StartPosDiplomacy.KEY, StartPosDiplomacy.Entry); }
    get startPosFactions() { return this.collectionCache.getCollection(StartPosFactions.KEY, StartPosFactions.Entry); }
    get startPosFactionEffects() { return this.collectionCache.getCollection(StartPosFactionEffects.KEY, StartPosFactionEffects.Entry); }
    get startPosFactionEffectBundles() { return this.collectionCache.getCollection(StartPosFactionEffectBundles.KEY, StartPosFactionEffectBundles.Entry); }
    get startPosFamilyRelationships() { return this.collectionCache.getCollection(StartPosFamilyRelationships.KEY, StartPosFamilyRelationships.Entry); }
    get startPosGovernorships() { return this.collectionCache.getCollection(StartPosGovernorships.KEY, StartPosGovernorships.Entry); }
    get startPosLandUnits() { return this.collectionCache.getCollection(StartPosLandUnits.KEY, StartPosLandUnits.Entry); }
    get startPosNavalUnits() { return this.collectionCache.getCollection(StartPosNavalUnits.KEY, StartPosNavalUnits.Entry); }
    get startPosPastEvents() { return this.collectionCache.getCollection(StartPosPastEvents.KEY, StartPosPastEvents.Entry); }
    get startPosRegions() { return this.collectionCache.getCollection(StartPosRegions.KEY, StartPosRegions.Entry); }
    get startPosRegionsToUnitResources() { return this.collectionCache.getCollection(StartPosRegionsToUnitResources.KEY, StartPosRegionsToUnitResources.Entry); }
    get startPosRegionReligions() { return this.collectionCache.getCollection(StartPosRegionReligions.KEY, StartPosRegionReligions.Entry); }
    get startPosRegionSlotTemplates() { return this.collectionCache.getCollection(StartPosRegionSlotTemplates.KEY, StartPosRegionSlotTemplates.Entry); }
    get startPosSettlements() { return this.collectionCache.getCollection(StartPosSettlements.KEY, StartPosSettlements.Entry); }
    get startPosSettlementGarrisons() { return this.collectionCache.getCollection(StartPosSettlementGarrisons.KEY, StartPosSettlementGarrisons.Entry); }
    get startPosTechnologies() { return this.collectionCache.getCollection(StartPosTechnologies.KEY, StartPosTechnologies.Entry); }
    get startPosVictoryConditions() { return this.collectionCache.getCollection(StartPosVictoryConditions.KEY, StartPosVictoryConditions.Entry); }
    get stateGiftValues() { return this.collectionCache.getCollection(StateGiftValues.KEY, StateGiftValues.Entry); }
    get stats() { return this.collectionCache.getCollection(Stats.KEY, Stats.Entry); }
    get statsClans() { return this.collectionCache.getCollection(StatsClans.KEY, StatsClans.Entry); }
    get subtitleTimings() { return this.collectionCache.getCollection(SubtitleTimings.KEY, SubtitleTimings.Entry); }
    get taxesClasses() { return this.collectionCache.getCollection(TaxesClasses.KEY, TaxesClasses.Entry); }
    get taxesEffectsJct() { return this.collectionCache.getCollection(TaxesEffectsJct.KEY, TaxesEffectsJct.Entry); }
    get taxesKeys() { return this.collectionCache.getCollection(TaxesKeys.KEY, TaxesKeys.Entry); }
    get taxesLevels() { return this.collectionCache.getCollection(TaxesLevels.KEY, TaxesLevels.Entry); }
    get teamColours() { return this.collectionCache.getCollection(TeamColours.KEY, TeamColours.Entry); }
    get technologies() { return this.collectionCache.getCollection(Technologies.KEY, Technologies.Entry); }
    get technologyCategories() { return this.collectionCache.getCollection(TechnologyCategories.KEY, TechnologyCategories.Entry); }
    get technologyCategoryModules() { return this.collectionCache.getCollection(TechnologyCategoryModules.KEY, TechnologyCategoryModules.Entry); }
    get technologyCategoryParents() { return this.collectionCache.getCollection(TechnologyCategoryParents.KEY, TechnologyCategoryParents.Entry); }
    get technologyEffectsJunction() { return this.collectionCache.getCollection(TechnologyEffectsJunction.KEY, TechnologyEffectsJunction.Entry); }
    get technologyFactionJunctions() { return this.collectionCache.getCollection(TechnologyFactionJunctions.KEY, TechnologyFactionJunctions.Entry); }
    get technologyNodes() { return this.collectionCache.getCollection(TechnologyNodes.KEY, TechnologyNodes.Entry); }
    get technologyNodeLinks() { return this.collectionCache.getCollection(TechnologyNodeLinks.KEY, TechnologyNodeLinks.Entry); }
    get technologyNodeSets() { return this.collectionCache.getCollection(TechnologyNodeSets.KEY, TechnologyNodeSets.Entry); }
    get technologyRequiredBuildingLevelsJunctions() { return this.collectionCache.getCollection(TechnologyRequiredBuildingLevelsJunctions.KEY, TechnologyRequiredBuildingLevelsJunctions.Entry); }
    get technologyRequiredTechnologyJunctions() { return this.collectionCache.getCollection(TechnologyRequiredTechnologyJunctions.KEY, TechnologyRequiredTechnologyJunctions.Entry); }
    get technologyUnitUpgrades() { return this.collectionCache.getCollection(TechnologyUnitUpgrades.KEY, TechnologyUnitUpgrades.Entry); }
    get terrainTilesets() { return this.collectionCache.getCollection(TerrainTilesets.KEY, TerrainTilesets.Entry); }
    get tExcCampaignMapProcessingExports() { return this.collectionCache.getCollection(TExcCampaignMapProcessingExports.KEY, TExcCampaignMapProcessingExports.Entry); }
    get tExcDataFolders() { return this.collectionCache.getCollection(TExcDataFolders.KEY, TExcDataFolders.Entry); }
    get texcExpansions() { return this.collectionCache.getCollection(TexcExpansions.KEY, TexcExpansions.Entry); }
    get tExcImplementedTables() { return this.collectionCache.getCollection(TExcImplementedTables.KEY, TExcImplementedTables.Entry); }
    get tExcLocalisableFields() { return this.collectionCache.getCollection(TExcLocalisableFields.KEY, TExcLocalisableFields.Entry); }
    get tExcMissingConditions() { return this.collectionCache.getCollection(TExcMissingConditions.KEY, TExcMissingConditions.Entry); }
    get tExcPackCategories() { return this.collectionCache.getCollection(TExcPackCategories.KEY, TExcPackCategories.Entry); }
    get tExcPackFiles() { return this.collectionCache.getCollection(TExcPackFiles.KEY, TExcPackFiles.Entry); }
    get tExcScriptConditions() { return this.collectionCache.getCollection(TExcScriptConditions.KEY, TExcScriptConditions.Entry); }
    get tExcTableExportCategories() { return this.collectionCache.getCollection(TExcTableExportCategories.KEY, TExcTableExportCategories.Entry); }
    get tExcTableExportGroups() { return this.collectionCache.getCollection(TExcTableExportGroups.KEY, TExcTableExportGroups.Entry); }
    get tExcUnrestCauses() { return this.collectionCache.getCollection(TExcUnrestCauses.KEY, TExcUnrestCauses.Entry); }
    get tExcUnrestDemands() { return this.collectionCache.getCollection(TExcUnrestDemands.KEY, TExcUnrestDemands.Entry); }
    get townWealthGrowthFactors() { return this.collectionCache.getCollection(TownWealthGrowthFactors.KEY, TownWealthGrowthFactors.Entry); }
    get tradeDetails() { return this.collectionCache.getCollection(TradeDetails.KEY, TradeDetails.Entry); }
    get tradeDisplayCampaignOriginatingCultureProducedResourceTradeModelOptions() { return this.collectionCache.getCollection(TradeDisplayCampaignOriginatingCultureProducedResourceTradeModelOptions.KEY, TradeDisplayCampaignOriginatingCultureProducedResourceTradeModelOptions.Entry); }
    get tradeDisplayCampaignOriginatingCultureTradeModelOptions() { return this.collectionCache.getCollection(TradeDisplayCampaignOriginatingCultureTradeModelOptions.KEY, TradeDisplayCampaignOriginatingCultureTradeModelOptions.Entry); }
    get tradeDisplayCampaignOriginatingSubcultureProducedResourceTradeModelOptions() { return this.collectionCache.getCollection(TradeDisplayCampaignOriginatingSubcultureProducedResourceTradeModelOptions.KEY, TradeDisplayCampaignOriginatingSubcultureProducedResourceTradeModelOptions.Entry); }
    get tradeDisplayCampaignOriginatingSubcultureTradeModelOptions() { return this.collectionCache.getCollection(TradeDisplayCampaignOriginatingSubcultureTradeModelOptions.KEY, TradeDisplayCampaignOriginatingSubcultureTradeModelOptions.Entry); }
    get tradeDisplayCampaignOwningCultureProducedResourceTradeModelOptions() { return this.collectionCache.getCollection(TradeDisplayCampaignOwningCultureProducedResourceTradeModelOptions.KEY, TradeDisplayCampaignOwningCultureProducedResourceTradeModelOptions.Entry); }
    get tradeDisplayCampaignOwningCultureTradeModelOptions() { return this.collectionCache.getCollection(TradeDisplayCampaignOwningCultureTradeModelOptions.KEY, TradeDisplayCampaignOwningCultureTradeModelOptions.Entry); }
    get tradeDisplayCampaignOwningFactionProducedResourceTradeModelOptions() { return this.collectionCache.getCollection(TradeDisplayCampaignOwningFactionProducedResourceTradeModelOptions.KEY, TradeDisplayCampaignOwningFactionProducedResourceTradeModelOptions.Entry); }
    get tradeDisplayCampaignOwningFactionTradeModelOptions() { return this.collectionCache.getCollection(TradeDisplayCampaignOwningFactionTradeModelOptions.KEY, TradeDisplayCampaignOwningFactionTradeModelOptions.Entry); }
    get tradeDisplayCampaignOwningSubcultureProducedResourceTradeModelOptions() { return this.collectionCache.getCollection(TradeDisplayCampaignOwningSubcultureProducedResourceTradeModelOptions.KEY, TradeDisplayCampaignOwningSubcultureProducedResourceTradeModelOptions.Entry); }
    get tradeDisplayCampaignOwningSubcultureTradeModelOptions() { return this.collectionCache.getCollection(TradeDisplayCampaignOwningSubcultureTradeModelOptions.KEY, TradeDisplayCampaignOwningSubcultureTradeModelOptions.Entry); }
    get tradeDisplayCampaignProducedResourceTradeModelOptions() { return this.collectionCache.getCollection(TradeDisplayCampaignProducedResourceTradeModelOptions.KEY, TradeDisplayCampaignProducedResourceTradeModelOptions.Entry); }
    get tradeDisplayCampaignTradeModelOptions() { return this.collectionCache.getCollection(TradeDisplayCampaignTradeModelOptions.KEY, TradeDisplayCampaignTradeModelOptions.Entry); }
    get tradeDisplayGenericTradeModelOptions() { return this.collectionCache.getCollection(TradeDisplayGenericTradeModelOptions.KEY, TradeDisplayGenericTradeModelOptions.Entry); }
    get tradeDisplayOriginatingCultureProducedResourceTradeModelOptions() { return this.collectionCache.getCollection(TradeDisplayOriginatingCultureProducedResourceTradeModelOptions.KEY, TradeDisplayOriginatingCultureProducedResourceTradeModelOptions.Entry); }
    get tradeDisplayOriginatingCultureTradeModelOptions() { return this.collectionCache.getCollection(TradeDisplayOriginatingCultureTradeModelOptions.KEY, TradeDisplayOriginatingCultureTradeModelOptions.Entry); }
    get tradeDisplayOriginatingSubcultureProducedResourceTradeModelOptions() { return this.collectionCache.getCollection(TradeDisplayOriginatingSubcultureProducedResourceTradeModelOptions.KEY, TradeDisplayOriginatingSubcultureProducedResourceTradeModelOptions.Entry); }
    get tradeDisplayOriginatingSubcultureTradeModelOptions() { return this.collectionCache.getCollection(TradeDisplayOriginatingSubcultureTradeModelOptions.KEY, TradeDisplayOriginatingSubcultureTradeModelOptions.Entry); }
    get tradeDisplayOwningCultureProducedResourceTradeModelOptions() { return this.collectionCache.getCollection(TradeDisplayOwningCultureProducedResourceTradeModelOptions.KEY, TradeDisplayOwningCultureProducedResourceTradeModelOptions.Entry); }
    get tradeDisplayOwningCultureTradeModelOptions() { return this.collectionCache.getCollection(TradeDisplayOwningCultureTradeModelOptions.KEY, TradeDisplayOwningCultureTradeModelOptions.Entry); }
    get tradeDisplayOwningFactionProducedResourceTradeModelOptions() { return this.collectionCache.getCollection(TradeDisplayOwningFactionProducedResourceTradeModelOptions.KEY, TradeDisplayOwningFactionProducedResourceTradeModelOptions.Entry); }
    get tradeDisplayOwningFactionTradeModelOptions() { return this.collectionCache.getCollection(TradeDisplayOwningFactionTradeModelOptions.KEY, TradeDisplayOwningFactionTradeModelOptions.Entry); }
    get tradeDisplayOwningSubcultureProducedResourceTradeModelOptions() { return this.collectionCache.getCollection(TradeDisplayOwningSubcultureProducedResourceTradeModelOptions.KEY, TradeDisplayOwningSubcultureProducedResourceTradeModelOptions.Entry); }
    get tradeDisplayOwningSubcultureTradeModelOptions() { return this.collectionCache.getCollection(TradeDisplayOwningSubcultureTradeModelOptions.KEY, TradeDisplayOwningSubcultureTradeModelOptions.Entry); }
    get tradeDisplayProducedResourceTradeModelOptions() { return this.collectionCache.getCollection(TradeDisplayProducedResourceTradeModelOptions.KEY, TradeDisplayProducedResourceTradeModelOptions.Entry); }
    get tradeDisplayTradeModels() { return this.collectionCache.getCollection(TradeDisplayTradeModels.KEY, TradeDisplayTradeModels.Entry); }
    get tradeNodes() { return this.collectionCache.getCollection(TradeNodes.KEY, TradeNodes.Entry); }
    get tradeNodeGroups() { return this.collectionCache.getCollection(TradeNodeGroups.KEY, TradeNodeGroups.Entry); }
    get traitCategories() { return this.collectionCache.getCollection(TraitCategories.KEY, TraitCategories.Entry); }
    get traitInfo() { return this.collectionCache.getCollection(TraitInfo.KEY, TraitInfo.Entry); }
    get traitLevelEffects() { return this.collectionCache.getCollection(TraitLevelEffects.KEY, TraitLevelEffects.Entry); }
    get traitToAntitraits() { return this.collectionCache.getCollection(TraitToAntitraits.KEY, TraitToAntitraits.Entry); }
    get traitToIncludedAgents() { return this.collectionCache.getCollection(TraitToIncludedAgents.KEY, TraitToIncludedAgents.Entry); }
    get traitTriggers() { return this.collectionCache.getCollection(TraitTriggers.KEY, TraitTriggers.Entry); }
    get translatedTexts() { return this.collectionCache.getCollection(TranslatedTexts.KEY, TranslatedTexts.Entry); }
    get triggerEffects() { return this.collectionCache.getCollection(TriggerEffects.KEY, TriggerEffects.Entry); }
    get triggerEvents() { return this.collectionCache.getCollection(TriggerEvents.KEY, TriggerEvents.Entry); }
    get triggerEventToExcludedAgentTypes() { return this.collectionCache.getCollection(TriggerEventToExcludedAgentTypes.KEY, TriggerEventToExcludedAgentTypes.Entry); }
    get uiedComponentAddressesToTexts() { return this.collectionCache.getCollection(UiedComponentAddressesToTexts.KEY, UiedComponentAddressesToTexts.Entry); }
    get uiedComponentTexts() { return this.collectionCache.getCollection(UiedComponentTexts.KEY, UiedComponentTexts.Entry); }
    get uiedTextLayouts() { return this.collectionCache.getCollection(UiedTextLayouts.KEY, UiedTextLayouts.Entry); }
    get uiComponentAddressesWithLocalisation() { return this.collectionCache.getCollection(UiComponentAddressesWithLocalisation.KEY, UiComponentAddressesWithLocalisation.Entry); }
    get uiComponentLocalisation() { return this.collectionCache.getCollection(UiComponentLocalisation.KEY, UiComponentLocalisation.Entry); }
    get uiEffects() { return this.collectionCache.getCollection(UiEffects.KEY, UiEffects.Entry); }
    get uiUnitStats() { return this.collectionCache.getCollection(UiUnitStats.KEY, UiUnitStats.Entry); }
    get uiUnitStatsFilters() { return this.collectionCache.getCollection(UiUnitStatsFilters.KEY, UiUnitStatsFilters.Entry); }
    get uiUnitStatToClasses() { return this.collectionCache.getCollection(UiUnitStatToClasses.KEY, UiUnitStatToClasses.Entry); }
    get uniformTypeEnums() { return this.collectionCache.getCollection(UniformTypeEnums.KEY, UniformTypeEnums.Entry); }
    get units() { return this.collectionCache.getCollection(Units.KEY, Units.Entry); }
    get unitsCustomBattlePermissions() { return this.collectionCache.getCollection(UnitsCustomBattlePermissions.KEY, UnitsCustomBattlePermissions.Entry); }
    get unitsSpecialEdition() { return this.collectionCache.getCollection(UnitsSpecialEdition.KEY, UnitsSpecialEdition.Entry); }
    get unitsToExclusiveFactionPermissions() { return this.collectionCache.getCollection(UnitsToExclusiveFactionPermissions.KEY, UnitsToExclusiveFactionPermissions.Entry); }
    get unitsToGovTypesConversionJcts() { return this.collectionCache.getCollection(UnitsToGovTypesConversionJcts.KEY, UnitsToGovTypesConversionJcts.Entry); }
    get unitsToGovTypeOutcomes() { return this.collectionCache.getCollection(UnitsToGovTypeOutcomes.KEY, UnitsToGovTypeOutcomes.Entry); }
    get unitsToGovTypeOutcomesEnum() { return this.collectionCache.getCollection(UnitsToGovTypeOutcomesEnum.KEY, UnitsToGovTypeOutcomesEnum.Entry); }
    get unitsToGovTypePermissions() { return this.collectionCache.getCollection(UnitsToGovTypePermissions.KEY, UnitsToGovTypePermissions.Entry); }
    get unitsToGroupingsMilitaryPermissions() { return this.collectionCache.getCollection(UnitsToGroupingsMilitaryPermissions.KEY, UnitsToGroupingsMilitaryPermissions.Entry); }
    get unitAbilities() { return this.collectionCache.getCollection(UnitAbilities.KEY, UnitAbilities.Entry); }
    get unitArmourTypes() { return this.collectionCache.getCollection(UnitArmourTypes.KEY, UnitArmourTypes.Entry); }
    get unitAttributes() { return this.collectionCache.getCollection(UnitAttributes.KEY, UnitAttributes.Entry); }
    get unitAttributesGroups() { return this.collectionCache.getCollection(UnitAttributesGroups.KEY, UnitAttributesGroups.Entry); }
    get unitAttributesToGroupsJunctions() { return this.collectionCache.getCollection(UnitAttributesToGroupsJunctions.KEY, UnitAttributesToGroupsJunctions.Entry); }
    get unitCastes() { return this.collectionCache.getCollection(UnitCastes.KEY, UnitCastes.Entry); }
    get unitCategory() { return this.collectionCache.getCollection(UnitCategory.KEY, UnitCategory.Entry); }
    get unitClass() { return this.collectionCache.getCollection(UnitClass.KEY, UnitClass.Entry); }
    get unitClassToPopulationClassPriorities() { return this.collectionCache.getCollection(UnitClassToPopulationClassPriorities.KEY, UnitClassToPopulationClassPriorities.Entry); }
    get unitDescriptionHistoricalTexts() { return this.collectionCache.getCollection(UnitDescriptionHistoricalTexts.KEY, UnitDescriptionHistoricalTexts.Entry); }
    get unitDescriptionShortTexts() { return this.collectionCache.getCollection(UnitDescriptionShortTexts.KEY, UnitDescriptionShortTexts.Entry); }
    get unitDescriptionStrengthsWeaknessesTexts() { return this.collectionCache.getCollection(UnitDescriptionStrengthsWeaknessesTexts.KEY, UnitDescriptionStrengthsWeaknessesTexts.Entry); }
    get unitDescriptionTexts() { return this.collectionCache.getCollection(UnitDescriptionTexts.KEY, UnitDescriptionTexts.Entry); }
    get unitDrillsEnum() { return this.collectionCache.getCollection(UnitDrillsEnum.KEY, UnitDrillsEnum.Entry); }
    get unitDrillSetEnum() { return this.collectionCache.getCollection(UnitDrillSetEnum.KEY, UnitDrillSetEnum.Entry); }
    get unitExperienceBonuses() { return this.collectionCache.getCollection(UnitExperienceBonuses.KEY, UnitExperienceBonuses.Entry); }
    get unitExperienceThresholds() { return this.collectionCache.getCollection(UnitExperienceThresholds.KEY, UnitExperienceThresholds.Entry); }
    get unitExperienceThresholdModifiers() { return this.collectionCache.getCollection(UnitExperienceThresholdModifiers.KEY, UnitExperienceThresholdModifiers.Entry); }
    get unitFatigueEffects() { return this.collectionCache.getCollection(UnitFatigueEffects.KEY, UnitFatigueEffects.Entry); }
    get unitFormations() { return this.collectionCache.getCollection(UnitFormations.KEY, UnitFormations.Entry); }
    get unitFormationTypes() { return this.collectionCache.getCollection(UnitFormationTypes.KEY, UnitFormationTypes.Entry); }
    get unitGroundTypeMovementModifiers() { return this.collectionCache.getCollection(UnitGroundTypeMovementModifiers.KEY, UnitGroundTypeMovementModifiers.Entry); }
    get unitMeleeWeaponsEnum() { return this.collectionCache.getCollection(UnitMeleeWeaponsEnum.KEY, UnitMeleeWeaponsEnum.Entry); }
    get unitNavalArtilleryPositions() { return this.collectionCache.getCollection(UnitNavalArtilleryPositions.KEY, UnitNavalArtilleryPositions.Entry); }
    get unitNavalDamageSites() { return this.collectionCache.getCollection(UnitNavalDamageSites.KEY, UnitNavalDamageSites.Entry); }
    get unitPopulationCaps() { return this.collectionCache.getCollection(UnitPopulationCaps.KEY, UnitPopulationCaps.Entry); }
    get unitRegimentNames() { return this.collectionCache.getCollection(UnitRegimentNames.KEY, UnitRegimentNames.Entry); }
    get unitRegimentNamesLocalisationLookup() { return this.collectionCache.getCollection(UnitRegimentNamesLocalisationLookup.KEY, UnitRegimentNamesLocalisationLookup.Entry); }
    get unitRequiredTechnologyJunctions() { return this.collectionCache.getCollection(UnitRequiredTechnologyJunctions.KEY, UnitRequiredTechnologyJunctions.Entry); }
    get unitSets() { return this.collectionCache.getCollection(UnitSets.KEY, UnitSets.Entry); }
    get unitSetToUnitJunctions() { return this.collectionCache.getCollection(UnitSetToUnitJunctions.KEY, UnitSetToUnitJunctions.Entry); }
    get unitShieldTypes() { return this.collectionCache.getCollection(UnitShieldTypes.KEY, UnitShieldTypes.Entry); }
    get unitSpacings() { return this.collectionCache.getCollection(UnitSpacings.KEY, UnitSpacings.Entry); }
    get unitSpecialAbilities() { return this.collectionCache.getCollection(UnitSpecialAbilities.KEY, UnitSpecialAbilities.Entry); }
    get unitSpecialAbilityEffects() { return this.collectionCache.getCollection(UnitSpecialAbilityEffects.KEY, UnitSpecialAbilityEffects.Entry); }
    get unitSpecialAbilityTypes() { return this.collectionCache.getCollection(UnitSpecialAbilityTypes.KEY, UnitSpecialAbilityTypes.Entry); }
    get unitStatsFiringMechanismEnum() { return this.collectionCache.getCollection(UnitStatsFiringMechanismEnum.KEY, UnitStatsFiringMechanismEnum.Entry); }
    get unitStatsLandExperienceBonuses() { return this.collectionCache.getCollection(UnitStatsLandExperienceBonuses.KEY, UnitStatsLandExperienceBonuses.Entry); }
    get unitStatsNavalCrew() { return this.collectionCache.getCollection(UnitStatsNavalCrew.KEY, UnitStatsNavalCrew.Entry); }
    get unitStatsNavalExperienceBonuses() { return this.collectionCache.getCollection(UnitStatsNavalExperienceBonuses.KEY, UnitStatsNavalExperienceBonuses.Entry); }
    get unitStatsPrimaryMissileWeaponEnum() { return this.collectionCache.getCollection(UnitStatsPrimaryMissileWeaponEnum.KEY, UnitStatsPrimaryMissileWeaponEnum.Entry); }
    get unitStatsShipCategories() { return this.collectionCache.getCollection(UnitStatsShipCategories.KEY, UnitStatsShipCategories.Entry); }
    get unitStatsSkeletonMeleeEnum() { return this.collectionCache.getCollection(UnitStatsSkeletonMeleeEnum.KEY, UnitStatsSkeletonMeleeEnum.Entry); }
    get unitStatsSkeletonMissileEnum() { return this.collectionCache.getCollection(UnitStatsSkeletonMissileEnum.KEY, UnitStatsSkeletonMissileEnum.Entry); }
    get unitStatModifiers() { return this.collectionCache.getCollection(UnitStatModifiers.KEY, UnitStatModifiers.Entry); }
    get unitStatModifiersHowEnums() { return this.collectionCache.getCollection(UnitStatModifiersHowEnums.KEY, UnitStatModifiersHowEnums.Entry); }
    get unitToUnitAbilitiesJunctions() { return this.collectionCache.getCollection(UnitToUnitAbilitiesJunctions.KEY, UnitToUnitAbilitiesJunctions.Entry); }
    get unitTrainingLevelEnum() { return this.collectionCache.getCollection(UnitTrainingLevelEnum.KEY, UnitTrainingLevelEnum.Entry); }
    get unitTypes() { return this.collectionCache.getCollection(UnitTypes.KEY, UnitTypes.Entry); }
    get unitTypeEnums() { return this.collectionCache.getCollection(UnitTypeEnums.KEY, UnitTypeEnums.Entry); }
    get unitVariants() { return this.collectionCache.getCollection(UnitVariants.KEY, UnitVariants.Entry); }
    get unitVariantsColours() { return this.collectionCache.getCollection(UnitVariantsColours.KEY, UnitVariantsColours.Entry); }
    get unitVoiceCategories() { return this.collectionCache.getCollection(UnitVoiceCategories.KEY, UnitVoiceCategories.Entry); }
    get unitVoiceEventsJunctions() { return this.collectionCache.getCollection(UnitVoiceEventsJunctions.KEY, UnitVoiceEventsJunctions.Entry); }
    get unitWeights() { return this.collectionCache.getCollection(UnitWeights.KEY, UnitWeights.Entry); }
    get unrestCauseToDemands() { return this.collectionCache.getCollection(UnrestCauseToDemands.KEY, UnrestCauseToDemands.Entry); }
    get variants() { return this.collectionCache.getCollection(Variants.KEY, Variants.Entry); }
    get victoryConditions() { return this.collectionCache.getCollection(VictoryConditions.KEY, VictoryConditions.Entry); }
    get victoryTypes() { return this.collectionCache.getCollection(VictoryTypes.KEY, VictoryTypes.Entry); }
    get videos() { return this.collectionCache.getCollection(Videos.KEY, Videos.Entry); }
    get videoTypes() { return this.collectionCache.getCollection(VideoTypes.KEY, VideoTypes.Entry); }
    get voiceEvents() { return this.collectionCache.getCollection(VoiceEvents.KEY, VoiceEvents.Entry); }
    get voiceTypes() { return this.collectionCache.getCollection(VoiceTypes.KEY, VoiceTypes.Entry); }
    get voCampaignAgentTexts() { return this.collectionCache.getCollection(VoCampaignAgentTexts.KEY, VoCampaignAgentTexts.Entry); }
    get voCharacters() { return this.collectionCache.getCollection(VoCharacters.KEY, VoCharacters.Entry); }
    get voContextSensitiveTexts() { return this.collectionCache.getCollection(VoContextSensitiveTexts.KEY, VoContextSensitiveTexts.Entry); }
    get voDiplomacyTexts() { return this.collectionCache.getCollection(VoDiplomacyTexts.KEY, VoDiplomacyTexts.Entry); }
    get voFactionIntroTexts() { return this.collectionCache.getCollection(VoFactionIntroTexts.KEY, VoFactionIntroTexts.Entry); }
    get voFmvTexts() { return this.collectionCache.getCollection(VoFmvTexts.KEY, VoFmvTexts.Entry); }
    get voHistoricalBattleTexts() { return this.collectionCache.getCollection(VoHistoricalBattleTexts.KEY, VoHistoricalBattleTexts.Entry); }
    get voScripts() { return this.collectionCache.getCollection(VoScripts.KEY, VoScripts.Entry); }
    get voSpeechTexts() { return this.collectionCache.getCollection(VoSpeechTexts.KEY, VoSpeechTexts.Entry); }
    get voTexts() { return this.collectionCache.getCollection(VoTexts.KEY, VoTexts.Entry); }
    get voTextCharacters() { return this.collectionCache.getCollection(VoTextCharacters.KEY, VoTextCharacters.Entry); }
    get voTutorialFmvTexts() { return this.collectionCache.getCollection(VoTutorialFmvTexts.KEY, VoTutorialFmvTexts.Entry); }
    get voUnitTexts() { return this.collectionCache.getCollection(VoUnitTexts.KEY, VoUnitTexts.Entry); }
    get warscapeAnimated() { return this.collectionCache.getCollection(WarscapeAnimated.KEY, WarscapeAnimated.Entry); }
    get warscapeAnimatedLod() { return this.collectionCache.getCollection(WarscapeAnimatedLod.KEY, WarscapeAnimatedLod.Entry); }
    get warscapeCategories() { return this.collectionCache.getCollection(WarscapeCategories.KEY, WarscapeCategories.Entry); }
    get warscapeEquipmentItems() { return this.collectionCache.getCollection(WarscapeEquipmentItems.KEY, WarscapeEquipmentItems.Entry); }
    get warscapeRigid() { return this.collectionCache.getCollection(WarscapeRigid.KEY, WarscapeRigid.Entry); }
    get warscapeRigidLod() { return this.collectionCache.getCollection(WarscapeRigidLod.KEY, WarscapeRigidLod.Entry); }
    get warscapeRigidLodRange() { return this.collectionCache.getCollection(WarscapeRigidLodRange.KEY, WarscapeRigidLodRange.Entry); }
    get warscapeUnderlayTextures() { return this.collectionCache.getCollection(WarscapeUnderlayTextures.KEY, WarscapeUnderlayTextures.Entry); }
    get windLevels() { return this.collectionCache.getCollection(WindLevels.KEY, WindLevels.Entry); }
    get kvExperienceBonuses() { return this.collectionCache.getCollection(KvExperienceBonuses.KEY, KvExperienceBonuses.Entry); }
    get kvFatigue() { return this.collectionCache.getCollection(KvFatigue.KEY, KvFatigue.Entry); }
    get kvKeyBuildings() { return this.collectionCache.getCollection(KvKeyBuildings.KEY, KvKeyBuildings.Entry); }
    get kvMorale() { return this.collectionCache.getCollection(KvMorale.KEY, KvMorale.Entry); }
    get kvNavalMorale() { return this.collectionCache.getCollection(KvNavalMorale.KEY, KvNavalMorale.Entry); }
    get kvRules() { return this.collectionCache.getCollection(KvRules.KEY, KvRules.Entry); }
}

var AgentAbilityCategories;
(function (AgentAbilityCategories) {
    AgentAbilityCategories.KEY = new CollectionKey("agent_ability_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.category = values["category"];
            this.onScreenName = values["on_screen_name"];
        }
    }
    AgentAbilityCategories.Entry = Entry;
})(AgentAbilityCategories || (AgentAbilityCategories = {}));

var Abilities$1;
(function (Abilities) {
    Abilities.KEY = new CollectionKey("abilities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.ability = values["ability"];
            this.onScreenName = values["on_screen_name"];
            this.onScreenDescription = values["on_screen_description"];
            this._category = values["category"];
            this.onScreenTarget = values["on_screen_target"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(AgentAbilityCategories.KEY, AgentAbilityCategories.Entry);
            return collection.find(entry => entry.category === this._category);
        }
    }
    Abilities.Entry = Entry;
})(Abilities$1 || (Abilities$1 = {}));

var TexcExpansions$1;
(function (TexcExpansions) {
    TexcExpansions.KEY = new CollectionKey("texc_expansions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.expansion = values["expansion"];
            this.description = values["description"];
            this.packFilenameExtension = values["pack_filename_extension"];
            this.released = !!values["released"];
        }
    }
    TexcExpansions.Entry = Entry;
})(TexcExpansions$1 || (TexcExpansions$1 = {}));

var Achievements$1;
(function (Achievements) {
    Achievements.KEY = new CollectionKey("achievements");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.title = values["title"];
            this.description = values["description"];
            this.steamId = values["steam_id"];
            this._gameExpansionKey = values["game_expansion_key"];
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
    }
    Achievements.Entry = Entry;
})(Achievements$1 || (Achievements$1 = {}));

var EffectBundleTargets$1;
(function (EffectBundleTargets) {
    EffectBundleTargets.KEY = new CollectionKey("effect_bundle_targets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    EffectBundleTargets.Entry = Entry;
})(EffectBundleTargets$1 || (EffectBundleTargets$1 = {}));

var EffectBundles$1;
(function (EffectBundles) {
    EffectBundles.KEY = new CollectionKey("effect_bundles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.localisedTitle = values["localised_title"];
            this.localisedDescription = values["localised_description"];
            this.uiIcon = values["ui_icon"];
            this._bundleTarget = values["bundle_target"];
            this.priority = values["priority"];
        }
        get bundleTarget() {
            const collection = this.collectionCache.getCollection(EffectBundleTargets$1.KEY, EffectBundleTargets$1.Entry);
            return collection.find(entry => entry.key === this._bundleTarget);
        }
    }
    EffectBundles.Entry = Entry;
})(EffectBundles$1 || (EffectBundles$1 = {}));

var ActionResults$1;
(function (ActionResults) {
    ActionResults.KEY = new CollectionKey("action_results");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._actorEffectBundle = values["actor_effect_bundle"];
            this._targetEffectBundle = values["target_effect_bundle"];
            this.actorEffectBundleTurns = values["actor_effect_bundle_turns"];
            this.targetEffectBundleTurns = values["target_effect_bundle_turns"];
        }
        get actorEffectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._actorEffectBundle);
        }
        get targetEffectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._targetEffectBundle);
        }
    }
    ActionResults.Entry = Entry;
})(ActionResults$1 || (ActionResults$1 = {}));

var ActionResultsAdditionalOutcomesEnums$1;
(function (ActionResultsAdditionalOutcomesEnums) {
    ActionResultsAdditionalOutcomesEnums.KEY = new CollectionKey("action_results_additional_outcomes_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    ActionResultsAdditionalOutcomesEnums.Entry = Entry;
})(ActionResultsAdditionalOutcomesEnums$1 || (ActionResultsAdditionalOutcomesEnums$1 = {}));

var EffectCategories;
(function (EffectCategories) {
    EffectCategories.KEY = new CollectionKey("effect_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    EffectCategories.Entry = Entry;
})(EffectCategories || (EffectCategories = {}));

var Effects$1;
(function (Effects) {
    Effects.KEY = new CollectionKey("effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.effect = values["effect"];
            this.icon = values["icon"];
            this.description = values["description"];
            this.priority = values["priority"];
            this.iconNegative = values["icon_negative"];
            this._category = values["category"];
            this.isPositiveValueGood = !!values["is_positive_value_good"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(EffectCategories.KEY, EffectCategories.Entry);
            return collection.find(entry => entry.key === this._category);
        }
    }
    Effects.Entry = Entry;
})(Effects$1 || (Effects$1 = {}));

var CampaignEffectScopeObjects$1;
(function (CampaignEffectScopeObjects) {
    CampaignEffectScopeObjects.KEY = new CollectionKey("campaign_effect_scope_objects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignEffectScopeObjects.Entry = Entry;
})(CampaignEffectScopeObjects$1 || (CampaignEffectScopeObjects$1 = {}));

var CampaignEffectScopeOwnerships$1;
(function (CampaignEffectScopeOwnerships) {
    CampaignEffectScopeOwnerships.KEY = new CollectionKey("campaign_effect_scope_ownerships");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignEffectScopeOwnerships.Entry = Entry;
})(CampaignEffectScopeOwnerships$1 || (CampaignEffectScopeOwnerships$1 = {}));

var CampaignEffectScopeLocations$1;
(function (CampaignEffectScopeLocations) {
    CampaignEffectScopeLocations.KEY = new CollectionKey("campaign_effect_scope_locations");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignEffectScopeLocations.Entry = Entry;
})(CampaignEffectScopeLocations$1 || (CampaignEffectScopeLocations$1 = {}));

var CampaignEffectScopeTerritories;
(function (CampaignEffectScopeTerritories) {
    CampaignEffectScopeTerritories.KEY = new CollectionKey("campaign_effect_scope_territories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignEffectScopeTerritories.Entry = Entry;
})(CampaignEffectScopeTerritories || (CampaignEffectScopeTerritories = {}));

var CampaignEffectScopes$1;
(function (CampaignEffectScopes) {
    CampaignEffectScopes.KEY = new CollectionKey("campaign_effect_scopes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.localisedText = values["localised_text"];
            this._source = values["source"];
            this._target = values["target"];
            this._ownership = values["ownership"];
            this._location = values["location"];
            this._territory = values["territory"];
        }
        get source() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopeObjects$1.KEY, CampaignEffectScopeObjects$1.Entry);
            return collection.find(entry => entry.key === this._source);
        }
        get target() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopeObjects$1.KEY, CampaignEffectScopeObjects$1.Entry);
            return collection.find(entry => entry.key === this._target);
        }
        get ownership() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopeOwnerships$1.KEY, CampaignEffectScopeOwnerships$1.Entry);
            return collection.find(entry => entry.key === this._ownership);
        }
        get location() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopeLocations$1.KEY, CampaignEffectScopeLocations$1.Entry);
            return collection.find(entry => entry.key === this._location);
        }
        get territory() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopeTerritories.KEY, CampaignEffectScopeTerritories.Entry);
            return collection.find(entry => entry.key === this._territory);
        }
    }
    CampaignEffectScopes.Entry = Entry;
})(CampaignEffectScopes$1 || (CampaignEffectScopes$1 = {}));

var EffectBundleAdvancementStages$1;
(function (EffectBundleAdvancementStages) {
    EffectBundleAdvancementStages.KEY = new CollectionKey("effect_bundle_advancement_stages");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    EffectBundleAdvancementStages.Entry = Entry;
})(EffectBundleAdvancementStages$1 || (EffectBundleAdvancementStages$1 = {}));

var ActionResultsAdditionalOutcomes$1;
(function (ActionResultsAdditionalOutcomes) {
    ActionResultsAdditionalOutcomes.KEY = new CollectionKey("action_results_additional_outcomes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._actionResultKey = values["action_result_key"];
            this._outcome = values["outcome"];
            this.value = values["value"];
            this._effectRecord = values["effect_record"];
            this._effectScopeRecord = values["effect_scope_record"];
            this.key = values["key"];
            this.opportuneFailureWeighting = values["opportune_failure_weighting"];
            this.affectsTarget = !!values["affects_target"];
            this._advancementStage = values["advancement_stage"];
        }
        get actionResultKey() {
            const collection = this.collectionCache.getCollection(ActionResults$1.KEY, ActionResults$1.Entry);
            return collection.find(entry => entry.key === this._actionResultKey);
        }
        get outcome() {
            const collection = this.collectionCache.getCollection(ActionResultsAdditionalOutcomesEnums$1.KEY, ActionResultsAdditionalOutcomesEnums$1.Entry);
            return collection.find(entry => entry.key === this._outcome);
        }
        get effectRecord() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effectRecord);
        }
        get effectScopeRecord() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes$1.KEY, CampaignEffectScopes$1.Entry);
            return collection.find(entry => entry.key === this._effectScopeRecord);
        }
        get advancementStage() {
            const collection = this.collectionCache.getCollection(EffectBundleAdvancementStages$1.KEY, EffectBundleAdvancementStages$1.Entry);
            return collection.find(entry => entry.key === this._advancementStage);
        }
    }
    ActionResultsAdditionalOutcomes.Entry = Entry;
})(ActionResultsAdditionalOutcomes$1 || (ActionResultsAdditionalOutcomes$1 = {}));

var AdviceInfoTexts$1;
(function (AdviceInfoTexts) {
    AdviceInfoTexts.KEY = new CollectionKey("advice_info_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.localisedText = values["localised_text"];
            this.persistant = !!values["persistant"];
            this.showOnNavigate = !!values["show_on_navigate"];
            this.showInstant = !!values["show_instant"];
            this.isHeader = !!values["is_header"];
            this.navigationOrder = values["navigation_order"];
        }
    }
    AdviceInfoTexts.Entry = Entry;
})(AdviceInfoTexts$1 || (AdviceInfoTexts$1 = {}));

var AdviceThreads$1;
(function (AdviceThreads) {
    AdviceThreads.KEY = new CollectionKey("advice_threads");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.thread = values["thread"];
            this._gameExpansionKey = values["game_expansion_key"];
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
    }
    AdviceThreads.Entry = Entry;
})(AdviceThreads$1 || (AdviceThreads$1 = {}));

var Advisors$1;
(function (Advisors) {
    Advisors.KEY = new CollectionKey("advisors");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.advisorName = values["advisor_name"];
            this.advisorIconPath = values["advisor_icon_path"];
        }
    }
    Advisors.Entry = Entry;
})(Advisors$1 || (Advisors$1 = {}));

var AdviceLevels$1;
(function (AdviceLevels) {
    AdviceLevels.KEY = new CollectionKey("advice_levels");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._adviceThread = values["advice_thread"];
            this.adviceThreadLevel = values["advice_thread_level"];
            this.pointsNeeded = values["points_needed"];
            this.gameArea = values["game_area"];
            this.category = values["category"];
            this.subCategory = values["sub_category"];
            this.maxRepeatCount = values["max_repeat_count"];
            this.repeatInterval = values["repeat_interval"];
            this.pauseBattle = !!values["pause_battle"];
            this.adviceItemTitle = values["advice_item_title"];
            this.priorityLevel = values["priority_level"];
            this.highVerbosityOnly = !!values["high_verbosity_only"];
            this.locatable = !!values["locatable"];
            this.parameter = values["parameter"];
            this.onDisplayScript = values["on_display_script"];
            this.onClickScript = values["on_click_script"];
            this.suppressible = !!values["suppressible"];
            this.uninhibitable = !!values["uninhibitable"];
            this.audioClip = values["audio_clip"];
            this.onscreenText = values["onscreen_text"];
            this._advisorName = values["advisor_name"];
            this.forLoadingScreen = !!values["for_loading_screen"];
            this.movieLink = values["movie_link"];
        }
        get adviceThread() {
            const collection = this.collectionCache.getCollection(AdviceThreads$1.KEY, AdviceThreads$1.Entry);
            return collection.find(entry => entry.thread === this._adviceThread);
        }
        get advisorName() {
            const collection = this.collectionCache.getCollection(Advisors$1.KEY, Advisors$1.Entry);
            return collection.find(entry => entry.advisorName === this._advisorName);
        }
    }
    AdviceLevels.Entry = Entry;
})(AdviceLevels$1 || (AdviceLevels$1 = {}));

var AdviceLevelsInfoTextJuncs;
(function (AdviceLevelsInfoTextJuncs) {
    AdviceLevelsInfoTextJuncs.KEY = new CollectionKey("advice_levels_info_text_juncs");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._adviceLevel = values["advice_level"];
            this._adviceInfoText = values["advice_info_text"];
        }
        get adviceLevel() {
            const collection = this.collectionCache.getCollection(AdviceLevels$1.KEY, AdviceLevels$1.Entry);
            return collection.find(entry => entry.key === this._adviceLevel);
        }
        get adviceInfoText() {
            const collection = this.collectionCache.getCollection(AdviceInfoTexts$1.KEY, AdviceInfoTexts$1.Entry);
            return collection.find(entry => entry.key === this._adviceInfoText);
        }
    }
    AdviceLevelsInfoTextJuncs.Entry = Entry;
})(AdviceLevelsInfoTextJuncs || (AdviceLevelsInfoTextJuncs = {}));

var TriggerEvents$1;
(function (TriggerEvents) {
    TriggerEvents.KEY = new CollectionKey("trigger_events");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.event = values["event"];
            this.fromUi = !!values["from_ui"];
            this._gameExpansionKey = values["game_expansion_key"];
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
    }
    TriggerEvents.Entry = Entry;
})(TriggerEvents$1 || (TriggerEvents$1 = {}));

var AdviceTriggers$1;
(function (AdviceTriggers) {
    AdviceTriggers.KEY = new CollectionKey("advice_triggers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._testWhen = values["test_when"];
            this.conditionScript = values["condition_script"];
        }
        get testWhen() {
            const collection = this.collectionCache.getCollection(TriggerEvents$1.KEY, TriggerEvents$1.Entry);
            return collection.find(entry => entry.event === this._testWhen);
        }
    }
    AdviceTriggers.Entry = Entry;
})(AdviceTriggers$1 || (AdviceTriggers$1 = {}));

var AdviceTriggerToAdviceThread$1;
(function (AdviceTriggerToAdviceThread) {
    AdviceTriggerToAdviceThread.KEY = new CollectionKey("advice_trigger_to_advice_thread");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._trigger = values["trigger"];
            this._thread = values["thread"];
            this.amount = values["amount"];
        }
        get trigger() {
            const collection = this.collectionCache.getCollection(AdviceTriggers$1.KEY, AdviceTriggers$1.Entry);
            return collection.find(entry => entry.key === this._trigger);
        }
        get thread() {
            const collection = this.collectionCache.getCollection(AdviceThreads$1.KEY, AdviceThreads$1.Entry);
            return collection.find(entry => entry.thread === this._thread);
        }
    }
    AdviceTriggerToAdviceThread.Entry = Entry;
})(AdviceTriggerToAdviceThread$1 || (AdviceTriggerToAdviceThread$1 = {}));

var DestructionZoneMaskTypes;
(function (DestructionZoneMaskTypes) {
    DestructionZoneMaskTypes.KEY = new CollectionKey("destruction_zone_mask_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.layer0 = values["layer_0"];
            this.layer1 = values["layer_1"];
            this.layer2 = values["layer_2"];
            this.layer3 = values["layer_3"];
            this.battleDiffuse = values["battle_diffuse"];
            this.battleNormal = values["battle_normal"];
        }
    }
    DestructionZoneMaskTypes.Entry = Entry;
})(DestructionZoneMaskTypes || (DestructionZoneMaskTypes = {}));

var Religions$1;
(function (Religions) {
    Religions.KEY = new CollectionKey("religions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.religionKey = values["religion_key"];
            this.onscreen = values["onscreen"];
            this.uiIconPath = values["ui_icon_path"];
            this.colRed = values["col_red"];
            this.colGreen = values["col_green"];
            this.colBlue = values["col_blue"];
            this.sortOrder = values["sort_order"];
            this._destructionMaskType = values["destruction_mask_type"];
        }
        get destructionMaskType() {
            const collection = this.collectionCache.getCollection(DestructionZoneMaskTypes.KEY, DestructionZoneMaskTypes.Entry);
            return collection.find(entry => entry.key === this._destructionMaskType);
        }
    }
    Religions.Entry = Entry;
})(Religions$1 || (Religions$1 = {}));

var Agents$1;
(function (Agents) {
    Agents.KEY = new CollectionKey("agents");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.movePoints = values["move_points"];
            this.lineOfSight = values["line_of_sight"];
            this.playable = !!values["playable"];
            this.portraitOverride = values["portrait_override"];
            this._primaryAttribute = values["primary_attribute"];
            this._religion = values["religion"];
            this.factionTotalCap = values["faction_total_cap"];
            this.cost = values["cost"];
            this.inEncyclopedia = !!values["in_encyclopedia"];
            this.encyclopediaUrl = values["encyclopedia_url"];
        }
        get religion() {
            const collection = this.collectionCache.getCollection(Religions$1.KEY, Religions$1.Entry);
            return collection.find(entry => entry.religionKey === this._religion);
        }
    }
    Agents.Entry = Entry;
})(Agents$1 || (Agents$1 = {}));

var AgentAttributes$1;
(function (AgentAttributes) {
    AgentAttributes.KEY = new CollectionKey("agent_attributes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    AgentAttributes.Entry = Entry;
})(AgentAttributes$1 || (AgentAttributes$1 = {}));

var AudioVoCampaignSpecialAbilityStates;
(function (AudioVoCampaignSpecialAbilityStates) {
    AudioVoCampaignSpecialAbilityStates.KEY = new CollectionKey("audio_vo_campaign_special_ability_states");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
        }
    }
    AudioVoCampaignSpecialAbilityStates.Entry = Entry;
})(AudioVoCampaignSpecialAbilityStates || (AudioVoCampaignSpecialAbilityStates = {}));

var Cultures$1;
(function (Cultures) {
    Cultures.KEY = new CollectionKey("cultures");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.index = values["index"];
            this.fallbackUiCulture = values["fallback_ui_culture"];
            this.name = values["name"];
            this.uiBackgroundImage = values["ui_background_image"];
            this.audioState = values["audio_state"];
            this.uiGroupByCulture = !!values["ui_group_by_culture"];
            this.audioRtpc = values["audio_rtpc"];
        }
    }
    Cultures.Entry = Entry;
})(Cultures$1 || (Cultures$1 = {}));

var CulturesSubcultures$1;
(function (CulturesSubcultures) {
    CulturesSubcultures.KEY = new CollectionKey("cultures_subcultures");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.subculture = values["subculture"];
            this._culture = values["culture"];
            this.index = values["index"];
            this.name = values["name"];
            this.confederationScreenName = values["confederation_screen_name"];
            this.confederationSummaryName = values["confederation_summary_name"];
            this.audioStateOverride = values["audio_state_override"];
            this.audioRtpcOverride = values["audio_rtpc_override"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
    }
    CulturesSubcultures.Entry = Entry;
})(CulturesSubcultures$1 || (CulturesSubcultures$1 = {}));

var AgentActions$1;
(function (AgentActions) {
    AgentActions.KEY = new CollectionKey("agent_actions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._agent = values["agent"];
            this._ability = values["ability"];
            this._attribute = values["attribute"];
            this._criticalFailure = values["critical_failure"];
            this._failure = values["failure"];
            this._opportuneFailure = values["opportune_failure"];
            this._success = values["success"];
            this._criticalSuccess = values["critical_success"];
            this._cannotFail = values["cannot_fail"];
            this.localisedActionName = values["localised_action_name"];
            this.localisedActionDescription = values["localised_action_description"];
            this._targetAttribute = values["target_attribute"];
            this.criticalSuccessProportionModifier = values["critical_success_proportion_modifier"];
            this.opportuneFailureProportionModifier = values["opportune_failure_proportion_modifier"];
            this.criticalFailureProportionModifier = values["critical_failure_proportion_modifier"];
            this.uniqueId = values["unique_id"];
            this.chanceOfSuccess = values["chance_of_success"];
            this._voiceover = values["voiceover"];
            this.iconPath = values["icon_path"];
            this.showActionInfoInUi = !!values["show_action_info_in_ui"];
            this._subculture = values["subculture"];
            this.succeedAlwaysOverride = !!values["succeed_always_override"];
            this.order = values["order"];
        }
        get agent() {
            const collection = this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry);
            return collection.find(entry => entry.key === this._agent);
        }
        get ability() {
            const collection = this.collectionCache.getCollection(Abilities$1.KEY, Abilities$1.Entry);
            return collection.find(entry => entry.ability === this._ability);
        }
        get attribute() {
            const collection = this.collectionCache.getCollection(AgentAttributes$1.KEY, AgentAttributes$1.Entry);
            return collection.find(entry => entry.key === this._attribute);
        }
        get criticalFailure() {
            const collection = this.collectionCache.getCollection(ActionResults$1.KEY, ActionResults$1.Entry);
            return collection.find(entry => entry.key === this._criticalFailure);
        }
        get failure() {
            const collection = this.collectionCache.getCollection(ActionResults$1.KEY, ActionResults$1.Entry);
            return collection.find(entry => entry.key === this._failure);
        }
        get opportuneFailure() {
            const collection = this.collectionCache.getCollection(ActionResults$1.KEY, ActionResults$1.Entry);
            return collection.find(entry => entry.key === this._opportuneFailure);
        }
        get success() {
            const collection = this.collectionCache.getCollection(ActionResults$1.KEY, ActionResults$1.Entry);
            return collection.find(entry => entry.key === this._success);
        }
        get criticalSuccess() {
            const collection = this.collectionCache.getCollection(ActionResults$1.KEY, ActionResults$1.Entry);
            return collection.find(entry => entry.key === this._criticalSuccess);
        }
        get cannotFail() {
            const collection = this.collectionCache.getCollection(ActionResults$1.KEY, ActionResults$1.Entry);
            return collection.find(entry => entry.key === this._cannotFail);
        }
        get targetAttribute() {
            const collection = this.collectionCache.getCollection(AgentAttributes$1.KEY, AgentAttributes$1.Entry);
            return collection.find(entry => entry.key === this._targetAttribute);
        }
        get voiceover() {
            const collection = this.collectionCache.getCollection(AudioVoCampaignSpecialAbilityStates.KEY, AudioVoCampaignSpecialAbilityStates.Entry);
            return collection.find(entry => entry.name === this._voiceover);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
    }
    AgentActions.Entry = Entry;
})(AgentActions$1 || (AgentActions$1 = {}));

var UnitCategory$1;
(function (UnitCategory) {
    UnitCategory.KEY = new CollectionKey("unit_category");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.localisedName = values["localised_name"];
        }
    }
    UnitCategory.Entry = Entry;
})(UnitCategory$1 || (UnitCategory$1 = {}));

var UnitClass$1;
(function (UnitClass) {
    UnitClass.KEY = new CollectionKey("unit_class");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreen = values["onscreen"];
            this.tooltip = values["tooltip"];
            this.sortPriority = values["sort_priority"];
        }
    }
    UnitClass.Entry = Entry;
})(UnitClass$1 || (UnitClass$1 = {}));

var UnitDescriptionShortTexts$1;
(function (UnitDescriptionShortTexts) {
    UnitDescriptionShortTexts.KEY = new CollectionKey("unit_description_short_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.text = values["text"];
        }
    }
    UnitDescriptionShortTexts.Entry = Entry;
})(UnitDescriptionShortTexts$1 || (UnitDescriptionShortTexts$1 = {}));

var UnitDescriptionHistoricalTexts$1;
(function (UnitDescriptionHistoricalTexts) {
    UnitDescriptionHistoricalTexts.KEY = new CollectionKey("unit_description_historical_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.text = values["text"];
        }
    }
    UnitDescriptionHistoricalTexts.Entry = Entry;
})(UnitDescriptionHistoricalTexts$1 || (UnitDescriptionHistoricalTexts$1 = {}));

var UnitDescriptionStrengthsWeaknessesTexts$1;
(function (UnitDescriptionStrengthsWeaknessesTexts) {
    UnitDescriptionStrengthsWeaknessesTexts.KEY = new CollectionKey("unit_description_strengths_weaknesses_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.text = values["text"];
        }
    }
    UnitDescriptionStrengthsWeaknessesTexts.Entry = Entry;
})(UnitDescriptionStrengthsWeaknessesTexts$1 || (UnitDescriptionStrengthsWeaknessesTexts$1 = {}));

var BattleEntitiesTypesEnum$1;
(function (BattleEntitiesTypesEnum) {
    BattleEntitiesTypesEnum.KEY = new CollectionKey("battle_entities_types_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    BattleEntitiesTypesEnum.Entry = Entry;
})(BattleEntitiesTypesEnum$1 || (BattleEntitiesTypesEnum$1 = {}));

var BattleEntitiesSizeEnums;
(function (BattleEntitiesSizeEnums) {
    BattleEntitiesSizeEnums.KEY = new CollectionKey("battle_entities_size_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    BattleEntitiesSizeEnums.Entry = Entry;
})(BattleEntitiesSizeEnums || (BattleEntitiesSizeEnums = {}));

var BattleEntitiesGradientStrategyEnums;
(function (BattleEntitiesGradientStrategyEnums) {
    BattleEntitiesGradientStrategyEnums.KEY = new CollectionKey("battle_entities_gradient_strategy_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    BattleEntitiesGradientStrategyEnums.Entry = Entry;
})(BattleEntitiesGradientStrategyEnums || (BattleEntitiesGradientStrategyEnums = {}));

var AudioEntityRandomVocalisations;
(function (AudioEntityRandomVocalisations) {
    AudioEntityRandomVocalisations.KEY = new CollectionKey("audio_entity_random_vocalisations");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.event = values["event"];
            this.minTime = values["min_time"];
            this.maxTime = values["max_time"];
            this.useReverb = !!values["use_reverb"];
            this.useObstruction = !!values["use_obstruction"];
            this.limitationScale = values["limitation_scale"];
            this.minProbability = values["min_probability"];
            this.maxProbability = values["max_probability"];
        }
    }
    AudioEntityRandomVocalisations.Entry = Entry;
})(AudioEntityRandomVocalisations || (AudioEntityRandomVocalisations = {}));

var AudioMaterials;
(function (AudioMaterials) {
    AudioMaterials.KEY = new CollectionKey("audio_materials");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.switch = values["switch"];
            this.canBeSnow = !!values["can_be_snow"];
            this._fallback = values["fallback"];
        }
        get fallback() {
            const collection = this.collectionCache.getCollection(AudioMaterials.KEY, AudioMaterials.Entry);
            return collection.find(entry => entry.key === this._fallback);
        }
    }
    AudioMaterials.Entry = Entry;
})(AudioMaterials || (AudioMaterials = {}));

var AudioRtpcAssignments;
(function (AudioRtpcAssignments) {
    AudioRtpcAssignments.KEY = new CollectionKey("audio_rtpc_assignments");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
        }
    }
    AudioRtpcAssignments.Entry = Entry;
})(AudioRtpcAssignments || (AudioRtpcAssignments = {}));

var AudioGroupSoundGroupings;
(function (AudioGroupSoundGroupings) {
    AudioGroupSoundGroupings.KEY = new CollectionKey("audio_group_sound_groupings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.eventStart = values["event_start"];
            this.eventStop = values["event_stop"];
            this.rtpc1Name = values["rtpc_1_name"];
            this._rtpc1Assignment = values["rtpc_1_assignment"];
            this.groupingSize = values["grouping_size"];
            this.rtpc1MaxGroupingDifference = values["rtpc_1_max_grouping_difference"];
        }
        get rtpc1Assignment() {
            const collection = this.collectionCache.getCollection(AudioRtpcAssignments.KEY, AudioRtpcAssignments.Entry);
            return collection.find(entry => entry.name === this._rtpc1Assignment);
        }
    }
    AudioGroupSoundGroupings.Entry = Entry;
})(AudioGroupSoundGroupings || (AudioGroupSoundGroupings = {}));

var AudioGroupSounds;
(function (AudioGroupSounds) {
    AudioGroupSounds.KEY = new CollectionKey("audio_group_sounds");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
            this.eventStart = values["event_start"];
            this.eventStop = values["event_stop"];
            this.distanceScaled = !!values["distance_scaled"];
            this.densityScaled = !!values["density_scaled"];
            this.spotlight = !!values["spotlight"];
            this.useReverb = !!values["use_reverb"];
            this.maxDistance = values["max_distance"];
            this.split = !!values["split"];
            this.splitClose = values["split_close"];
            this.splitFar = values["split_far"];
            this.splitOffset = values["split_offset"];
            this.groupingSize = values["grouping_size"];
            this.maxStartDelayNear = values["max_start_delay_near"];
            this.minRefireTime = values["min_refire_time"];
            this.sizeGameParameter = values["size_game_parameter"];
            this.groupingSwitch = values["grouping_switch"];
            this._linkedGroupSound = values["linked_group_sound"];
            this.rtpc1Name = values["rtpc_1_name"];
            this._rtpc1Assignment = values["rtpc_1_assignment"];
            this.rtpc2Name = values["rtpc_2_name"];
            this._rtpc2Assignment = values["rtpc_2_assignment"];
            this._grouping = values["grouping"];
            this.rtpc1MaxGroupingDifference = values["rtpc_1_max_grouping_difference"];
            this.rtpc2MaxGroupingDifference = values["rtpc_2_max_grouping_difference"];
            this.maxStartDelayFar = values["max_start_delay_far"];
            this.stopDelay = values["stop_delay"];
            this.sizeScaler = values["size_scaler"];
            this.minDistance = values["min_distance"];
            this._dualGroupSound = values["dual_group_sound"];
            this.minSize = values["min_size"];
            this.oneShotInfluenceDuration = values["one_shot_influence_duration"];
            this.scaledAzimuthRtpc = values["scaled_azimuth_rtpc"];
            this.dopplerRtpcName = values["doppler_rtpc_name"];
            this.obstructionSize = values["obstruction_size"];
            this.triggerChargeTimeToTarget = values["trigger_charge_time_to_target"];
            this.disableGroupMerging = !!values["disable_group_merging"];
        }
        get linkedGroupSound() {
            const collection = this.collectionCache.getCollection(AudioGroupSounds.KEY, AudioGroupSounds.Entry);
            return collection.find(entry => entry.name === this._linkedGroupSound);
        }
        get rtpc1Assignment() {
            const collection = this.collectionCache.getCollection(AudioRtpcAssignments.KEY, AudioRtpcAssignments.Entry);
            return collection.find(entry => entry.name === this._rtpc1Assignment);
        }
        get rtpc2Assignment() {
            const collection = this.collectionCache.getCollection(AudioRtpcAssignments.KEY, AudioRtpcAssignments.Entry);
            return collection.find(entry => entry.name === this._rtpc2Assignment);
        }
        get grouping() {
            const collection = this.collectionCache.getCollection(AudioGroupSoundGroupings.KEY, AudioGroupSoundGroupings.Entry);
            return collection.find(entry => entry.key === this._grouping);
        }
        get dualGroupSound() {
            const collection = this.collectionCache.getCollection(AudioGroupSounds.KEY, AudioGroupSounds.Entry);
            return collection.find(entry => entry.name === this._dualGroupSound);
        }
    }
    AudioGroupSounds.Entry = Entry;
})(AudioGroupSounds || (AudioGroupSounds = {}));

var AudioEntityTypeLimitations;
(function (AudioEntityTypeLimitations) {
    AudioEntityTypeLimitations.KEY = new CollectionKey("audio_entity_type_limitations");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.nearInside = values["near_inside"];
            this.nearOutside = values["near_outside"];
            this.farInside = values["far_inside"];
            this.farOutside = values["far_outside"];
            this.maxDistanceAnimationDriven = values["max_distance_animation_driven"];
            this.animationUncapped = !!values["animation_uncapped"];
            this.maxDistanceCodeDriven = values["max_distance_code_driven"];
            this.canPlayAtBone = !!values["can_play_at_bone"];
            this.codeUncapped = !!values["code_uncapped"];
            this.containsUniqueEntitySwitches = !!values["contains_unique_entity_switches"];
            this.allowsFocus = !!values["allows_focus"];
        }
    }
    AudioEntityTypeLimitations.Entry = Entry;
})(AudioEntityTypeLimitations || (AudioEntityTypeLimitations = {}));

var AudioEntityLoopingSounds;
(function (AudioEntityLoopingSounds) {
    AudioEntityLoopingSounds.KEY = new CollectionKey("audio_entity_looping_sounds");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.eventStart = values["event_start"];
            this.eventStop = values["event_stop"];
            this.useReverb = !!values["use_reverb"];
            this.useObstruction = !!values["use_obstruction"];
            this.limitationScale = values["limitation_scale"];
            this.rtpc1Name = values["rtpc_1_name"];
            this._rtpc1Assignment = values["rtpc_1_assignment"];
            this.rtpc2Name = values["rtpc_2_name"];
            this._rtpc2Assignment = values["rtpc_2_assignment"];
            this.switch1 = values["switch_1"];
            this.dopplerRtpcName = values["doppler_rtpc_name"];
        }
        get rtpc1Assignment() {
            const collection = this.collectionCache.getCollection(AudioRtpcAssignments.KEY, AudioRtpcAssignments.Entry);
            return collection.find(entry => entry.name === this._rtpc1Assignment);
        }
        get rtpc2Assignment() {
            const collection = this.collectionCache.getCollection(AudioRtpcAssignments.KEY, AudioRtpcAssignments.Entry);
            return collection.find(entry => entry.name === this._rtpc2Assignment);
        }
    }
    AudioEntityLoopingSounds.Entry = Entry;
})(AudioEntityLoopingSounds || (AudioEntityLoopingSounds = {}));

var AudioEntityActors;
(function (AudioEntityActors) {
    AudioEntityActors.KEY = new CollectionKey("audio_entity_actors");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.actorSwitch = values["actor_switch"];
            this.numberOfActors = values["number_of_actors"];
        }
    }
    AudioEntityActors.Entry = Entry;
})(AudioEntityActors || (AudioEntityActors = {}));

var AudioSphereOfInfluenceGroups;
(function (AudioSphereOfInfluenceGroups) {
    AudioSphereOfInfluenceGroups.KEY = new CollectionKey("audio_sphere_of_influence_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    AudioSphereOfInfluenceGroups.Entry = Entry;
})(AudioSphereOfInfluenceGroups || (AudioSphereOfInfluenceGroups = {}));

var AudioSphereOfInfluences;
(function (AudioSphereOfInfluences) {
    AudioSphereOfInfluences.KEY = new CollectionKey("audio_sphere_of_influences");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._group = values["group"];
            this.minCameraDistance = values["min_camera_distance"];
            this.maxCameraDistance = values["max_camera_distance"];
            this.minInfluenceDistance = values["min_influence_distance"];
            this.maxInfluenceDistance = values["max_influence_distance"];
            this.maxInfluence = values["max_influence"];
            this.maxVisualAttenuation = values["max_visual_attenuation"];
            this.priority = values["priority"];
            this.isReversed = !!values["is_reversed"];
        }
        get group() {
            const collection = this.collectionCache.getCollection(AudioSphereOfInfluenceGroups.KEY, AudioSphereOfInfluenceGroups.Entry);
            return collection.find(entry => entry.key === this._group);
        }
    }
    AudioSphereOfInfluences.Entry = Entry;
})(AudioSphereOfInfluences || (AudioSphereOfInfluences = {}));

var AudioEntityFocusPools;
(function (AudioEntityFocusPools) {
    AudioEntityFocusPools.KEY = new CollectionKey("audio_entity_focus_pools");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.poolName = values["pool_name"];
            this.poolMinDistance = values["pool_min_distance"];
            this.poolMaxDistance = values["pool_max_distance"];
            this.poolId = values["pool_id"];
        }
    }
    AudioEntityFocusPools.Entry = Entry;
})(AudioEntityFocusPools || (AudioEntityFocusPools = {}));

var AudioEntityTypes;
(function (AudioEntityTypes) {
    AudioEntityTypes.KEY = new CollectionKey("audio_entity_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.switch = values["switch"];
            this._idleRandomVocalisation = values["idle_random_vocalisation"];
            this._runningRandomVocalisation = values["running_random_vocalisation"];
            this._combatRandomVocalisation = values["combat_random_vocalisation"];
            this._fatiguedMovingRandomVocalisation = values["fatigued_moving_random_vocalisation"];
            this._drowningRandomVocalisation = values["drowning_random_vocalisation"];
            this.musicianEvent = values["musician_event"];
            this._material = values["material"];
            this._walkingRandomVocalisation = values["walking_random_vocalisation"];
            this._groupMovement = values["group_movement"];
            this._limitation = values["limitation"];
            this._idleLoopingSound = values["idle_looping_sound"];
            this._movingLoopingSound = values["moving_looping_sound"];
            this._rotatingLoopingSound = values["rotating_looping_sound"];
            this._actorType = values["actor_type"];
            this._fatiguedIdleRandomVocalisation = values["fatigued_idle_random_vocalisation"];
            this._groupFlyingIdle = values["group_flying_idle"];
            this._groupFlyingMoving = values["group_flying_moving"];
            this.onlyUsesMaterial = !!values["only_uses_material"];
            this._groupMovementArmourOverride = values["group_movement_armour_override"];
            this._groupIdle = values["group_idle"];
            this.attenuationScale = values["attenuation_scale"];
            this._groupMeleeArmourOverride = values["group_melee_armour_override"];
            this.triggersCinematic = !!values["triggers_cinematic"];
            this._gameExpansionKey = values["game_expansion_key"];
            this._sphereOfInfluenceDefault = values["sphere_of_influence_default"];
            this._sphereOfInfluenceCombat = values["sphere_of_influence_combat"];
            this.shouldUseUniqueEntitySwitches = !!values["should_use_unique_entity_switches"];
            this.maxUniqueEntitySwitches = values["max_unique_entity_switches"];
            this.uniqueEntitySwitch = values["unique_entity_switch"];
            this.useFocusRtpc = !!values["use_focus_rtpc"];
            this.maxCameraDistanceForFocus = values["max_camera_distance_for_focus"];
            this.minCameraDistanceForFocus = values["min_camera_distance_for_focus"];
            this.focusRtpc = values["focus_rtpc"];
            this.considerMoving = !!values["consider_moving"];
            this._groupIdleShoot = values["group_idle_shoot"];
            this._groupIdleCombatReady = values["group_idle_combat_ready"];
            this.recordId = values["record_id"];
            this._focusPool = values["focus_pool"];
            this.minUnitFocusVelocity = values["min_unit_focus_velocity"];
        }
        get idleRandomVocalisation() {
            const collection = this.collectionCache.getCollection(AudioEntityRandomVocalisations.KEY, AudioEntityRandomVocalisations.Entry);
            return collection.find(entry => entry.key === this._idleRandomVocalisation);
        }
        get runningRandomVocalisation() {
            const collection = this.collectionCache.getCollection(AudioEntityRandomVocalisations.KEY, AudioEntityRandomVocalisations.Entry);
            return collection.find(entry => entry.key === this._runningRandomVocalisation);
        }
        get combatRandomVocalisation() {
            const collection = this.collectionCache.getCollection(AudioEntityRandomVocalisations.KEY, AudioEntityRandomVocalisations.Entry);
            return collection.find(entry => entry.key === this._combatRandomVocalisation);
        }
        get fatiguedMovingRandomVocalisation() {
            const collection = this.collectionCache.getCollection(AudioEntityRandomVocalisations.KEY, AudioEntityRandomVocalisations.Entry);
            return collection.find(entry => entry.key === this._fatiguedMovingRandomVocalisation);
        }
        get drowningRandomVocalisation() {
            const collection = this.collectionCache.getCollection(AudioEntityRandomVocalisations.KEY, AudioEntityRandomVocalisations.Entry);
            return collection.find(entry => entry.key === this._drowningRandomVocalisation);
        }
        get material() {
            const collection = this.collectionCache.getCollection(AudioMaterials.KEY, AudioMaterials.Entry);
            return collection.find(entry => entry.key === this._material);
        }
        get walkingRandomVocalisation() {
            const collection = this.collectionCache.getCollection(AudioEntityRandomVocalisations.KEY, AudioEntityRandomVocalisations.Entry);
            return collection.find(entry => entry.key === this._walkingRandomVocalisation);
        }
        get groupMovement() {
            const collection = this.collectionCache.getCollection(AudioGroupSounds.KEY, AudioGroupSounds.Entry);
            return collection.find(entry => entry.name === this._groupMovement);
        }
        get limitation() {
            const collection = this.collectionCache.getCollection(AudioEntityTypeLimitations.KEY, AudioEntityTypeLimitations.Entry);
            return collection.find(entry => entry.key === this._limitation);
        }
        get idleLoopingSound() {
            const collection = this.collectionCache.getCollection(AudioEntityLoopingSounds.KEY, AudioEntityLoopingSounds.Entry);
            return collection.find(entry => entry.key === this._idleLoopingSound);
        }
        get movingLoopingSound() {
            const collection = this.collectionCache.getCollection(AudioEntityLoopingSounds.KEY, AudioEntityLoopingSounds.Entry);
            return collection.find(entry => entry.key === this._movingLoopingSound);
        }
        get rotatingLoopingSound() {
            const collection = this.collectionCache.getCollection(AudioEntityLoopingSounds.KEY, AudioEntityLoopingSounds.Entry);
            return collection.find(entry => entry.key === this._rotatingLoopingSound);
        }
        get actorType() {
            const collection = this.collectionCache.getCollection(AudioEntityActors.KEY, AudioEntityActors.Entry);
            return collection.find(entry => entry.key === this._actorType);
        }
        get fatiguedIdleRandomVocalisation() {
            const collection = this.collectionCache.getCollection(AudioEntityRandomVocalisations.KEY, AudioEntityRandomVocalisations.Entry);
            return collection.find(entry => entry.key === this._fatiguedIdleRandomVocalisation);
        }
        get groupFlyingIdle() {
            const collection = this.collectionCache.getCollection(AudioGroupSounds.KEY, AudioGroupSounds.Entry);
            return collection.find(entry => entry.name === this._groupFlyingIdle);
        }
        get groupFlyingMoving() {
            const collection = this.collectionCache.getCollection(AudioGroupSounds.KEY, AudioGroupSounds.Entry);
            return collection.find(entry => entry.name === this._groupFlyingMoving);
        }
        get groupMovementArmourOverride() {
            const collection = this.collectionCache.getCollection(AudioGroupSounds.KEY, AudioGroupSounds.Entry);
            return collection.find(entry => entry.name === this._groupMovementArmourOverride);
        }
        get groupIdle() {
            const collection = this.collectionCache.getCollection(AudioGroupSounds.KEY, AudioGroupSounds.Entry);
            return collection.find(entry => entry.name === this._groupIdle);
        }
        get groupMeleeArmourOverride() {
            const collection = this.collectionCache.getCollection(AudioGroupSounds.KEY, AudioGroupSounds.Entry);
            return collection.find(entry => entry.name === this._groupMeleeArmourOverride);
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
        get sphereOfInfluenceDefault() {
            const collection = this.collectionCache.getCollection(AudioSphereOfInfluences.KEY, AudioSphereOfInfluences.Entry);
            return collection.find(entry => entry.key === this._sphereOfInfluenceDefault);
        }
        get sphereOfInfluenceCombat() {
            const collection = this.collectionCache.getCollection(AudioSphereOfInfluences.KEY, AudioSphereOfInfluences.Entry);
            return collection.find(entry => entry.key === this._sphereOfInfluenceCombat);
        }
        get groupIdleShoot() {
            const collection = this.collectionCache.getCollection(AudioGroupSounds.KEY, AudioGroupSounds.Entry);
            return collection.find(entry => entry.name === this._groupIdleShoot);
        }
        get groupIdleCombatReady() {
            const collection = this.collectionCache.getCollection(AudioGroupSounds.KEY, AudioGroupSounds.Entry);
            return collection.find(entry => entry.name === this._groupIdleCombatReady);
        }
        get focusPool() {
            const collection = this.collectionCache.getCollection(AudioEntityFocusPools.KEY, AudioEntityFocusPools.Entry);
            return collection.find(entry => entry.poolName === this._focusPool);
        }
    }
    AudioEntityTypes.Entry = Entry;
})(AudioEntityTypes || (AudioEntityTypes = {}));

var ParticleEffects$1;
(function (ParticleEffects) {
    ParticleEffects.KEY = new CollectionKey("particle_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    ParticleEffects.Entry = Entry;
})(ParticleEffects$1 || (ParticleEffects$1 = {}));

var BattleCameraShakeParameters;
(function (BattleCameraShakeParameters) {
    BattleCameraShakeParameters.KEY = new CollectionKey("battle_camera_shake_parameters");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.octaves = values["octaves"];
            this.octaveAmplitudeMultiplier = values["octave_amplitude_multiplier"];
            this.octaveFrequencyMultiplier = values["octave_frequency_multiplier"];
            this.horizontalAmplitude = values["horizontal_amplitude"];
            this.horizontalFrequency = values["horizontal_frequency"];
            this.verticalAmplitude = values["vertical_amplitude"];
            this.verticalFrequency = values["vertical_frequency"];
            this.rollAmplitude = values["roll_amplitude"];
            this.rollFrequency = values["roll_frequency"];
            this.pitchAmplitude = values["pitch_amplitude"];
            this.pitchFrequency = values["pitch_frequency"];
            this.yawAmplitude = values["yaw_amplitude"];
            this.yawFrequency = values["yaw_frequency"];
            this.attack = values["attack"];
            this.decay = values["decay"];
            this.sustain = values["sustain"];
            this.release = values["release"];
            this.sustainMultiplier = values["sustain_multiplier"];
            this.fallOffDistance = values["fall_off_distance"];
        }
    }
    BattleCameraShakeParameters.Entry = Entry;
})(BattleCameraShakeParameters || (BattleCameraShakeParameters = {}));

var BattleEntityEffects$1;
(function (BattleEntityEffects) {
    BattleEntityEffects.KEY = new CollectionKey("battle_entity_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
            this._forest = values["forest"];
            this._grass = values["grass"];
            this._mud = values["mud"];
            this._sand = values["sand"];
            this._scrub = values["scrub"];
            this._rock = values["rock"];
            this._deepWater = values["deep_water"];
            this._shallowWater = values["shallow_water"];
            this._road = values["road"];
            this._woodenFloor = values["wooden_floor"];
            this._snow = values["snow"];
            this.effectFrequency = values["effect_frequency"];
            this._footstepCameraShake = values["footstep_camera_shake"];
        }
        get forest() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._forest);
        }
        get grass() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._grass);
        }
        get mud() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._mud);
        }
        get sand() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._sand);
        }
        get scrub() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._scrub);
        }
        get rock() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._rock);
        }
        get deepWater() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._deepWater);
        }
        get shallowWater() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._shallowWater);
        }
        get road() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._road);
        }
        get woodenFloor() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._woodenFloor);
        }
        get snow() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._snow);
        }
        get footstepCameraShake() {
            const collection = this.collectionCache.getCollection(BattleCameraShakeParameters.KEY, BattleCameraShakeParameters.Entry);
            return collection.find(entry => entry.key === this._footstepCameraShake);
        }
    }
    BattleEntityEffects.Entry = Entry;
})(BattleEntityEffects$1 || (BattleEntityEffects$1 = {}));

var BattleEntityEffectsJunctions;
(function (BattleEntityEffectsJunctions) {
    BattleEntityEffectsJunctions.KEY = new CollectionKey("battle_entity_effects_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._walkDust = values["walk_dust"];
            this._runDust = values["run_dust"];
            this._impactDust = values["impact_dust"];
            this._meleeDust = values["melee_dust"];
            this._footsteps = values["footsteps"];
            this._bloodSpurtSmall = values["blood_spurt_small"];
            this._bloodSpurtMedium = values["blood_spurt_medium"];
            this._bloodSpurtLarge = values["blood_spurt_large"];
            this._bloodExplosion = values["blood_explosion"];
            this.bloodSpurtLargeDecal = values["blood_spurt_large_decal"];
            this._bloodExplosionDecal = values["blood_explosion_decal"];
        }
        get walkDust() {
            const collection = this.collectionCache.getCollection(BattleEntityEffects$1.KEY, BattleEntityEffects$1.Entry);
            return collection.find(entry => entry.name === this._walkDust);
        }
        get runDust() {
            const collection = this.collectionCache.getCollection(BattleEntityEffects$1.KEY, BattleEntityEffects$1.Entry);
            return collection.find(entry => entry.name === this._runDust);
        }
        get impactDust() {
            const collection = this.collectionCache.getCollection(BattleEntityEffects$1.KEY, BattleEntityEffects$1.Entry);
            return collection.find(entry => entry.name === this._impactDust);
        }
        get meleeDust() {
            const collection = this.collectionCache.getCollection(BattleEntityEffects$1.KEY, BattleEntityEffects$1.Entry);
            return collection.find(entry => entry.name === this._meleeDust);
        }
        get footsteps() {
            const collection = this.collectionCache.getCollection(BattleEntityEffects$1.KEY, BattleEntityEffects$1.Entry);
            return collection.find(entry => entry.name === this._footsteps);
        }
        get bloodSpurtSmall() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._bloodSpurtSmall);
        }
        get bloodSpurtMedium() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._bloodSpurtMedium);
        }
        get bloodSpurtLarge() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._bloodSpurtLarge);
        }
        get bloodExplosion() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._bloodExplosion);
        }
        get bloodExplosionDecal() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._bloodExplosionDecal);
        }
    }
    BattleEntityEffectsJunctions.Entry = Entry;
})(BattleEntityEffectsJunctions || (BattleEntityEffectsJunctions = {}));

var UnitPortholeCameraSettings;
(function (UnitPortholeCameraSettings) {
    UnitPortholeCameraSettings.KEY = new CollectionKey("unit_porthole_camera_settings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.distance = values["distance"];
            this.theta = values["theta"];
            this.phi = values["phi"];
            this.fov = values["fov"];
            this.targetX = values["target_x"];
            this.targetY = values["target_y"];
            this.targetZ = values["target_z"];
            this.environmentFile = values["environment_file"];
        }
    }
    UnitPortholeCameraSettings.Entry = Entry;
})(UnitPortholeCameraSettings || (UnitPortholeCameraSettings = {}));

var BattleEntities$1;
(function (BattleEntities) {
    BattleEntities.KEY = new CollectionKey("battle_entities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._type = values["type"];
            this.walkSpeed = values["walk_speed"];
            this.runSpeed = values["run_speed"];
            this.acceleration = values["acceleration"];
            this.deceleration = values["deceleration"];
            this.chargeSpeed = values["charge_speed"];
            this.strafeSpeed = values["strafe_speed"];
            this.chargeDistanceCommenceRun = values["charge_distance_commence_run"];
            this.chargeDistanceAdoptChargePose = values["charge_distance_adopt_charge_pose"];
            this.chargeDistancePickTarget = values["charge_distance_pick_target"];
            this.radius = values["radius"];
            this._shape = values["shape"];
            this.radiiRatio = values["radii_ratio"];
            this.mass = values["mass"];
            this.height = values["height"];
            this.fireArcClose = values["fire_arc_close"];
            this.turnSpeed = values["turn_speed"];
            this.hitPoints = values["hit_points"];
            this.allowTurnToMoveAnim = !!values["allow_turn_to_move_anim"];
            this.allowStaticTurnAnim = !!values["allow_static_turn_anim"];
            this.minTurningSpeed = values["min_turning_speed"];
            this.flySpeed = values["fly_speed"];
            this.flyingChargeSpeed = values["flying_charge_speed"];
            this._size = values["size"];
            this._gradientStrategy = values["gradient_strategy"];
            this._audioEntityType = values["audio_entity_type"];
            this.combatReactionRadius = values["combat_reaction_radius"];
            this._entityEffects = values["entity_effects"];
            this.hitReactionsIgnoreChance = values["hit_reactions_ignore_chance"];
            this.knockInterruptsIgnoreChance = values["knock_interrupts_ignore_chance"];
            this.softCollisionOffsetZ = values["soft_collision_offset_z"];
            this.canClimbLadderAndStairPipes = !!values["can_climb_ladder_and_stair_pipes"];
            this.projectileIntersectionRadiusRatio = values["projectile_intersection_radius_ratio"];
            this.projectilePenetrationResistance = values["projectile_penetration_resistance"];
            this.projectilePenetrationSpeedChange = values["projectile_penetration_speed_change"];
            this.auraVfx = values["aura_vfx"];
            this._portholeCamera = values["porthole_camera"];
            this.minTrackingRatio = values["min_tracking_ratio"];
            this.maxTrackingRatio = values["max_tracking_ratio"];
            this.vfxFilterId = values["vfx_filter_id"];
            this.canCastProjectile = !!values["can_cast_projectile"];
            this.portholeCompositeScene = values["porthole_composite_scene"];
            this._combatCameraShake = values["combat_camera_shake"];
            this.hasBlood = !!values["has_blood"];
            this.canDismember = !!values["can_dismember"];
            this.dismemberArmsAliveHpRatio = values["dismember_arms_alive_hp_ratio"];
            this.dismemberHeadAliveHpRatio = values["dismember_head_alive_hp_ratio"];
            this.jumpAttackChance = values["jump_attack_chance"];
        }
        get type() {
            const collection = this.collectionCache.getCollection(BattleEntitiesTypesEnum$1.KEY, BattleEntitiesTypesEnum$1.Entry);
            return collection.find(entry => entry.key === this._type);
        }
        get size() {
            const collection = this.collectionCache.getCollection(BattleEntitiesSizeEnums.KEY, BattleEntitiesSizeEnums.Entry);
            return collection.find(entry => entry.key === this._size);
        }
        get gradientStrategy() {
            const collection = this.collectionCache.getCollection(BattleEntitiesGradientStrategyEnums.KEY, BattleEntitiesGradientStrategyEnums.Entry);
            return collection.find(entry => entry.key === this._gradientStrategy);
        }
        get audioEntityType() {
            const collection = this.collectionCache.getCollection(AudioEntityTypes.KEY, AudioEntityTypes.Entry);
            return collection.find(entry => entry.key === this._audioEntityType);
        }
        get entityEffects() {
            const collection = this.collectionCache.getCollection(BattleEntityEffectsJunctions.KEY, BattleEntityEffectsJunctions.Entry);
            return collection.find(entry => entry.key === this._entityEffects);
        }
        get portholeCamera() {
            const collection = this.collectionCache.getCollection(UnitPortholeCameraSettings.KEY, UnitPortholeCameraSettings.Entry);
            return collection.find(entry => entry.key === this._portholeCamera);
        }
        get combatCameraShake() {
            const collection = this.collectionCache.getCollection(BattleCameraShakeParameters.KEY, BattleCameraShakeParameters.Entry);
            return collection.find(entry => entry.key === this._combatCameraShake);
        }
    }
    BattleEntities.Entry = Entry;
})(BattleEntities$1 || (BattleEntities$1 = {}));

var BattleSkeletonsLocomotionEnums;
(function (BattleSkeletonsLocomotionEnums) {
    BattleSkeletonsLocomotionEnums.KEY = new CollectionKey("battle_skeletons_locomotion_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    BattleSkeletonsLocomotionEnums.Entry = Entry;
})(BattleSkeletonsLocomotionEnums || (BattleSkeletonsLocomotionEnums = {}));

var BattleSkeletons$1;
(function (BattleSkeletons) {
    BattleSkeletons.KEY = new CollectionKey("battle_skeletons");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
            this.root = values["root"];
            this.scale = values["scale"];
            this.scaleDeviation = values["scale_deviation"];
            this.hipsNode = values["hips_node"];
            this.spineNode = values["spine_node"];
            this.weapon1Node = values["weapon1_node"];
            this.weapon2Node = values["weapon2_node"];
            this.weapon3Node = values["weapon3_node"];
            this.weapon4Node = values["weapon4_node"];
            this.weapon5Node = values["weapon5_node"];
            this.headNode = values["head_node"];
            this.neckNode = values["neck_node"];
            this.leftshoulderNode = values["leftshoulder_node"];
            this.rightshoulderNode = values["rightshoulder_node"];
            this.leftarmNode = values["leftarm_node"];
            this.rightarmNode = values["rightarm_node"];
            this.lefthandNode = values["lefthand_node"];
            this.righthandNode = values["righthand_node"];
            this.leftuplegNode = values["leftupleg_node"];
            this.rightuplegNode = values["rightupleg_node"];
            this.leftlegNode = values["leftleg_node"];
            this.rightlegNode = values["rightleg_node"];
            this.leftfootNode = values["leftfoot_node"];
            this.rightfootNode = values["rightfoot_node"];
            this.leftfingerNode = values["leftfinger_node"];
            this.rightfingerNode = values["rightfinger_node"];
            this.lefttoeNode = values["lefttoe_node"];
            this.righttoeNode = values["righttoe_node"];
            this.leftwheelNode = values["leftwheel_node"];
            this.rightwheelNode = values["rightwheel_node"];
            this.categoryMan = !!values["category_man"];
            this.categoryMount = !!values["category_mount"];
            this.categoryEngine = !!values["category_engine"];
            this.weapon6Node = values["weapon6_node"];
            this.categoryAnimal = !!values["category_animal"];
            this.categoryFauna = !!values["category_fauna"];
            this.cinematic = !!values["cinematic"];
            this._locomotion = values["locomotion"];
            this.leftwingbaseNode = values["leftwingbase_node"];
            this.rightwingbaseNode = values["rightwingbase_node"];
            this.filterProjectilesNode = values["filter_projectiles_node"];
            this.headTrackingAngle = values["head_tracking_angle"];
            this.backNode = values["back_node"];
            this.frontLeftUpperLegNode = values["front_left_upper_leg_node"];
            this.frontRightUpperLegNode = values["front_right_upper_leg_node"];
            this.frontLefttoeNode = values["front_lefttoe_node"];
            this.frontRighttoeNode = values["front_righttoe_node"];
            this.rearLeftUpperLegNode = values["rear_left_upper_leg_node"];
            this.rearRightUpperLegNode = values["rear_right_upper_leg_node"];
            this.rearLefttoeNode = values["rear_lefttoe_node"];
            this.rearRighttoeNode = values["rear_righttoe_node"];
            this.footstepNodes = values["footstep_nodes"];
            this.footstepDetectionHeight = values["footstep_detection_height"];
            this.articulationNode = values["articulation_node"];
            this.flyingPivotNode = values["flying_pivot_node"];
            this.torsoSpliceNode = values["torso_splice_node"];
            this._gameExpansionKey = values["game_expansion_key"];
        }
        get locomotion() {
            const collection = this.collectionCache.getCollection(BattleSkeletonsLocomotionEnums.KEY, BattleSkeletonsLocomotionEnums.Entry);
            return collection.find(entry => entry.key === this._locomotion);
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
    }
    BattleSkeletons.Entry = Entry;
})(BattleSkeletons$1 || (BattleSkeletons$1 = {}));

var BattleAnimationsTable$1;
(function (BattleAnimationsTable) {
    BattleAnimationsTable.KEY = new CollectionKey("battle_animations_table");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._skeleton = values["skeleton"];
            this._gameExpansionKey = values["game_expansion_key"];
        }
        get skeleton() {
            const collection = this.collectionCache.getCollection(BattleSkeletons$1.KEY, BattleSkeletons$1.Entry);
            return collection.find(entry => entry.name === this._skeleton);
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
    }
    BattleAnimationsTable.Entry = Entry;
})(BattleAnimationsTable$1 || (BattleAnimationsTable$1 = {}));

var AudioArmourTypes;
(function (AudioArmourTypes) {
    AudioArmourTypes.KEY = new CollectionKey("audio_armour_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.switch = values["switch"];
            this._groupMovement = values["group_movement"];
            this._groupCollision = values["group_collision"];
            this._groupImpact = values["group_impact"];
            this._groupMelee = values["group_melee"];
        }
        get groupMovement() {
            const collection = this.collectionCache.getCollection(AudioGroupSounds.KEY, AudioGroupSounds.Entry);
            return collection.find(entry => entry.name === this._groupMovement);
        }
        get groupCollision() {
            const collection = this.collectionCache.getCollection(AudioGroupSounds.KEY, AudioGroupSounds.Entry);
            return collection.find(entry => entry.name === this._groupCollision);
        }
        get groupImpact() {
            const collection = this.collectionCache.getCollection(AudioGroupSounds.KEY, AudioGroupSounds.Entry);
            return collection.find(entry => entry.name === this._groupImpact);
        }
        get groupMelee() {
            const collection = this.collectionCache.getCollection(AudioGroupSounds.KEY, AudioGroupSounds.Entry);
            return collection.find(entry => entry.name === this._groupMelee);
        }
    }
    AudioArmourTypes.Entry = Entry;
})(AudioArmourTypes || (AudioArmourTypes = {}));

var Variants$1;
(function (Variants) {
    Variants.KEY = new CollectionKey("variants");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.variantName = values["variant_name"];
            this.techFolder = values["tech_folder"];
            this.variantFilename = values["variant_filename"];
            this.scale = values["scale"];
            this.scaleVariation = values["scale_variation"];
            this.lowPolyFilename = values["low_poly_filename"];
            this.mountScale = values["mount_scale"];
            this.superLowPolyFilename = values["super_low_poly_filename"];
        }
    }
    Variants.Entry = Entry;
})(Variants$1 || (Variants$1 = {}));

var AudioVoiceoverCultures;
(function (AudioVoiceoverCultures) {
    AudioVoiceoverCultures.KEY = new CollectionKey("audio_voiceover_cultures");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
        }
    }
    AudioVoiceoverCultures.Entry = Entry;
})(AudioVoiceoverCultures || (AudioVoiceoverCultures = {}));

var Mounts$1;
(function (Mounts) {
    Mounts.KEY = new CollectionKey("mounts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._animation = values["animation"];
            this._entity = values["entity"];
            this._audioArmourType = values["audio_armour_type"];
            this._variant = values["variant"];
            this._voiceover = values["voiceover"];
        }
        get animation() {
            const collection = this.collectionCache.getCollection(BattleAnimationsTable$1.KEY, BattleAnimationsTable$1.Entry);
            return collection.find(entry => entry.key === this._animation);
        }
        get entity() {
            const collection = this.collectionCache.getCollection(BattleEntities$1.KEY, BattleEntities$1.Entry);
            return collection.find(entry => entry.key === this._entity);
        }
        get audioArmourType() {
            const collection = this.collectionCache.getCollection(AudioArmourTypes.KEY, AudioArmourTypes.Entry);
            return collection.find(entry => entry.key === this._audioArmourType);
        }
        get variant() {
            const collection = this.collectionCache.getCollection(Variants$1.KEY, Variants$1.Entry);
            return collection.find(entry => entry.variantName === this._variant);
        }
        get voiceover() {
            const collection = this.collectionCache.getCollection(AudioVoiceoverCultures.KEY, AudioVoiceoverCultures.Entry);
            return collection.find(entry => entry.name === this._voiceover);
        }
    }
    Mounts.Entry = Entry;
})(Mounts$1 || (Mounts$1 = {}));

var UnitArmourTypes$1;
(function (UnitArmourTypes) {
    UnitArmourTypes.KEY = new CollectionKey("unit_armour_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.armourValue = values["armour_value"];
            this._audioType = values["audio_type"];
        }
        get audioType() {
            const collection = this.collectionCache.getCollection(AudioArmourTypes.KEY, AudioArmourTypes.Entry);
            return collection.find(entry => entry.key === this._audioType);
        }
    }
    UnitArmourTypes.Entry = Entry;
})(UnitArmourTypes$1 || (UnitArmourTypes$1 = {}));

var Animals$1;
(function (Animals) {
    Animals.KEY = new CollectionKey("animals");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._animation = values["animation"];
            this._entity = values["entity"];
            this.meleeAttack = values["melee_attack"];
            this.meleeDefence = values["melee_defence"];
            this.chargeBonus = values["charge_bonus"];
            this._armour = values["armour"];
            this._variant = values["variant"];
        }
        get animation() {
            const collection = this.collectionCache.getCollection(BattleAnimationsTable$1.KEY, BattleAnimationsTable$1.Entry);
            return collection.find(entry => entry.key === this._animation);
        }
        get entity() {
            const collection = this.collectionCache.getCollection(BattleEntities$1.KEY, BattleEntities$1.Entry);
            return collection.find(entry => entry.key === this._entity);
        }
        get armour() {
            const collection = this.collectionCache.getCollection(UnitArmourTypes$1.KEY, UnitArmourTypes$1.Entry);
            return collection.find(entry => entry.key === this._armour);
        }
        get variant() {
            const collection = this.collectionCache.getCollection(Variants$1.KEY, Variants$1.Entry);
            return collection.find(entry => entry.variantName === this._variant);
        }
    }
    Animals.Entry = Entry;
})(Animals$1 || (Animals$1 = {}));

var UnitSpacings$1;
(function (UnitSpacings) {
    UnitSpacings.KEY = new CollectionKey("unit_spacings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.closeFormationSpacingHorizontal = values["close_formation_spacing_horizontal"];
            this.closeFormationSpacingVertical = values["close_formation_spacing_vertical"];
            this.closeFormationSpacingVariation = values["close_formation_spacing_variation"];
            this.looseFormationSpacingHorizontal = values["loose_formation_spacing_horizontal"];
            this.looseFormationSpacingVertical = values["loose_formation_spacing_vertical"];
            this.looseFormationSpacingVariation = values["loose_formation_spacing_variation"];
            this.dismountedCloseFormationSpacingHorizontal = values["dismounted_close_formation_spacing_horizontal"];
            this.dismountedCloseFormationSpacingVertical = values["dismounted_close_formation_spacing_vertical"];
            this.dismountedCloseFormationSpacingVariation = values["dismounted_close_formation_spacing_variation"];
            this.dismountedLooseFormationSpacingHorizontal = values["dismounted_loose_formation_spacing_horizontal"];
            this.dismountedLooseFormationSpacingVertical = values["dismounted_loose_formation_spacing_vertical"];
            this.dismountedLooseFormationSpacingVariation = values["dismounted_loose_formation_spacing_variation"];
            this.horde = !!values["horde"];
            this.routingSpaceVariation = values["routing_space_variation"];
            this.isChaoticFormation = !!values["is_chaotic_formation"];
        }
    }
    UnitSpacings.Entry = Entry;
})(UnitSpacings$1 || (UnitSpacings$1 = {}));

var UnitTrainingLevelEnum$1;
(function (UnitTrainingLevelEnum) {
    UnitTrainingLevelEnum.KEY = new CollectionKey("unit_training_level_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    UnitTrainingLevelEnum.Entry = Entry;
})(UnitTrainingLevelEnum$1 || (UnitTrainingLevelEnum$1 = {}));

var AudioMeleeHitTypes;
(function (AudioMeleeHitTypes) {
    AudioMeleeHitTypes.KEY = new CollectionKey("audio_melee_hit_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.switch = values["switch"];
            this.cannotHitWeapons = !!values["cannot_hit_weapons"];
            this.cannotHitShields = !!values["cannot_hit_shields"];
        }
    }
    AudioMeleeHitTypes.Entry = Entry;
})(AudioMeleeHitTypes || (AudioMeleeHitTypes = {}));

var AudioShieldTypes;
(function (AudioShieldTypes) {
    AudioShieldTypes.KEY = new CollectionKey("audio_shield_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.switch = values["switch"];
            this._meleeHitType = values["melee_hit_type"];
        }
        get meleeHitType() {
            const collection = this.collectionCache.getCollection(AudioMeleeHitTypes.KEY, AudioMeleeHitTypes.Entry);
            return collection.find(entry => entry.key === this._meleeHitType);
        }
    }
    AudioShieldTypes.Entry = Entry;
})(AudioShieldTypes || (AudioShieldTypes = {}));

var UnitShieldTypes$1;
(function (UnitShieldTypes) {
    UnitShieldTypes.KEY = new CollectionKey("unit_shield_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.shieldDefenceValue = values["shield_defence_value"];
            this.shieldArmourValue = values["shield_armour_value"];
            this.missileBlockChance = values["missile_block_chance"];
            this._audioType = values["audio_type"];
        }
        get audioType() {
            const collection = this.collectionCache.getCollection(AudioShieldTypes.KEY, AudioShieldTypes.Entry);
            return collection.find(entry => entry.key === this._audioType);
        }
    }
    UnitShieldTypes.Entry = Entry;
})(UnitShieldTypes$1 || (UnitShieldTypes$1 = {}));

var ProjectileShotTypeEnum$1;
(function (ProjectileShotTypeEnum) {
    ProjectileShotTypeEnum.KEY = new CollectionKey("projectile_shot_type_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.requiresEffectEnabling = !!values["requires_effect_enabling"];
            this.supersedesShotType = values["supersedes_shot_type"];
            this.tooltipText = values["tooltip_text"];
            this.onscreenName = values["onscreen_name"];
            this.iconName = values["icon_name"];
            this.uiSoundEvent = values["ui_sound_event"];
        }
    }
    ProjectileShotTypeEnum.Entry = Entry;
})(ProjectileShotTypeEnum$1 || (ProjectileShotTypeEnum$1 = {}));

var ProjectilesDetonatorTypesEnum$1;
(function (ProjectilesDetonatorTypesEnum) {
    ProjectilesDetonatorTypesEnum.KEY = new CollectionKey("projectiles_detonator_types_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.detonatorType = values["detonator_type"];
        }
    }
    ProjectilesDetonatorTypesEnum.Entry = Entry;
})(ProjectilesDetonatorTypesEnum$1 || (ProjectilesDetonatorTypesEnum$1 = {}));

var ProjectilesDetonationTypesEnum$1;
(function (ProjectilesDetonationTypesEnum) {
    ProjectilesDetonationTypesEnum.KEY = new CollectionKey("projectiles_detonation_types_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    ProjectilesDetonationTypesEnum.Entry = Entry;
})(ProjectilesDetonationTypesEnum$1 || (ProjectilesDetonationTypesEnum$1 = {}));

var ShrapnelLaunchTypeEnums;
(function (ShrapnelLaunchTypeEnums) {
    ShrapnelLaunchTypeEnums.KEY = new CollectionKey("shrapnel_launch_type_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    ShrapnelLaunchTypeEnums.Entry = Entry;
})(ShrapnelLaunchTypeEnums || (ShrapnelLaunchTypeEnums = {}));

var ProjectileShrapnels;
(function (ProjectileShrapnels) {
    ProjectileShrapnels.KEY = new CollectionKey("projectile_shrapnels");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._launchType = values["launch_type"];
            this.amount = values["amount"];
            this.sectorAngle = values["sector_angle"];
            this._projectile = values["projectile"];
        }
        get launchType() {
            const collection = this.collectionCache.getCollection(ShrapnelLaunchTypeEnums.KEY, ShrapnelLaunchTypeEnums.Entry);
            return collection.find(entry => entry.key === this._launchType);
        }
        get projectile() {
            const collection = this.collectionCache.getCollection(Projectiles$1.KEY, Projectiles$1.Entry);
            return collection.find(entry => entry.key === this._projectile);
        }
    }
    ProjectileShrapnels.Entry = Entry;
})(ProjectileShrapnels || (ProjectileShrapnels = {}));

var AudioSphereOfInfluenceOneShots;
(function (AudioSphereOfInfluenceOneShots) {
    AudioSphereOfInfluenceOneShots.KEY = new CollectionKey("audio_sphere_of_influence_one_shots");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._sphere = values["sphere"];
            this.duration = values["duration"];
            this.fadeIn = values["fade_in"];
            this.fadeOut = values["fade_out"];
        }
        get sphere() {
            const collection = this.collectionCache.getCollection(AudioSphereOfInfluences.KEY, AudioSphereOfInfluences.Entry);
            return collection.find(entry => entry.key === this._sphere);
        }
    }
    AudioSphereOfInfluenceOneShots.Entry = Entry;
})(AudioSphereOfInfluenceOneShots || (AudioSphereOfInfluenceOneShots = {}));

var AudioExplosions;
(function (AudioExplosions) {
    AudioExplosions.KEY = new CollectionKey("audio_explosions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.event = values["event"];
            this.maxAttenuation = values["max_attenuation"];
            this.obstructionSize = values["obstruction_size"];
            this.useReverb = !!values["use_reverb"];
            this._groupSound = values["group_sound"];
            this.onlyTriggerOncePerVolley = !!values["only_trigger_once_per_volley"];
            this._sphereOfInfluence = values["sphere_of_influence"];
        }
        get groupSound() {
            const collection = this.collectionCache.getCollection(AudioGroupSounds.KEY, AudioGroupSounds.Entry);
            return collection.find(entry => entry.name === this._groupSound);
        }
        get sphereOfInfluence() {
            const collection = this.collectionCache.getCollection(AudioSphereOfInfluenceOneShots.KEY, AudioSphereOfInfluenceOneShots.Entry);
            return collection.find(entry => entry.key === this._sphereOfInfluence);
        }
    }
    AudioExplosions.Entry = Entry;
})(AudioExplosions || (AudioExplosions = {}));

var SpecialAbilityPhaseEffectTypes$1;
(function (SpecialAbilityPhaseEffectTypes) {
    SpecialAbilityPhaseEffectTypes.KEY = new CollectionKey("special_ability_phase_effect_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.effectType = values["effect_type"];
        }
    }
    SpecialAbilityPhaseEffectTypes.Entry = Entry;
})(SpecialAbilityPhaseEffectTypes$1 || (SpecialAbilityPhaseEffectTypes$1 = {}));

var SpecialAbilityStanceEnums$1;
(function (SpecialAbilityStanceEnums) {
    SpecialAbilityStanceEnums.KEY = new CollectionKey("special_ability_stance_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    SpecialAbilityStanceEnums.Entry = Entry;
})(SpecialAbilityStanceEnums$1 || (SpecialAbilityStanceEnums$1 = {}));

var EntityVfxAttachTypes;
(function (EntityVfxAttachTypes) {
    EntityVfxAttachTypes.KEY = new CollectionKey("entity_vfx_attach_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.attachType = values["attach_type"];
        }
    }
    EntityVfxAttachTypes.Entry = Entry;
})(EntityVfxAttachTypes || (EntityVfxAttachTypes = {}));

var SpecialAbilityPhaseDisplays;
(function (SpecialAbilityPhaseDisplays) {
    SpecialAbilityPhaseDisplays.KEY = new CollectionKey("special_ability_phase_displays");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._bannerVfx = values["banner_vfx"];
            this._activeVfx = values["active_vfx"];
            this._entityVfx = values["entity_vfx"];
            this._entityVfxAttachType = values["entity_vfx_attach_type"];
        }
        get bannerVfx() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._bannerVfx);
        }
        get activeVfx() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._activeVfx);
        }
        get entityVfx() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._entityVfx);
        }
        get entityVfxAttachType() {
            const collection = this.collectionCache.getCollection(EntityVfxAttachTypes.KEY, EntityVfxAttachTypes.Entry);
            return collection.find(entry => entry.attachType === this._entityVfxAttachType);
        }
    }
    SpecialAbilityPhaseDisplays.Entry = Entry;
})(SpecialAbilityPhaseDisplays || (SpecialAbilityPhaseDisplays = {}));

var AudioAbilityPhases;
(function (AudioAbilityPhases) {
    AudioAbilityPhases.KEY = new CollectionKey("audio_ability_phases");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.startEvent = values["start_event"];
            this.stopEvent = values["stop_event"];
            this.maxDistance = values["max_distance"];
            this._groupSound = values["group_sound"];
            this.useReverb = !!values["use_reverb"];
            this.switch = values["switch"];
            this.loopingGroupSound = !!values["looping_group_sound"];
        }
        get groupSound() {
            const collection = this.collectionCache.getCollection(AudioGroupSounds.KEY, AudioGroupSounds.Entry);
            return collection.find(entry => entry.name === this._groupSound);
        }
    }
    AudioAbilityPhases.Entry = Entry;
})(AudioAbilityPhases || (AudioAbilityPhases = {}));

var BattleVortexCompositeSceneGroups;
(function (BattleVortexCompositeSceneGroups) {
    BattleVortexCompositeSceneGroups.KEY = new CollectionKey("battle_vortex_composite_scene_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.groupId = values["group_id"];
        }
    }
    BattleVortexCompositeSceneGroups.Entry = Entry;
})(BattleVortexCompositeSceneGroups || (BattleVortexCompositeSceneGroups = {}));

var SpecialAbilityPhases$1;
(function (SpecialAbilityPhases) {
    SpecialAbilityPhases.KEY = new CollectionKey("special_ability_phases");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this.duration = values["duration"];
            this._effectType = values["effect_type"];
            this._requestedStance = values["requested_stance"];
            this.unbreakable = !!values["unbreakable"];
            this.cantMove = !!values["cant_move"];
            this.freezeFatigue = !!values["freeze_fatigue"];
            this.fatigueChangeRatio = values["fatigue_change_ratio"];
            this.inspirationAuraRangeMod = values["inspiration_aura_range_mod"];
            this.abilityRechargeChange = values["ability_recharge_change"];
            this.onscreenName = values["onscreen_name"];
            this.resurrect = !!values["resurrect"];
            this.hpChangeFrequency = values["hp_change_frequency"];
            this.healAmount = values["heal_amount"];
            this.damageChance = values["damage_chance"];
            this.damageAmount = values["damage_amount"];
            this.maxDamagedEntities = values["max_damaged_entities"];
            this.manaRegenMod = values["mana_regen_mod"];
            this.manaMaxDepletionMod = values["mana_max_depletion_mod"];
            this.imbueMagical = !!values["imbue_magical"];
            this.imbueIgnition = values["imbue_ignition"];
            this._imbueContact = values["imbue_contact"];
            this._phaseDisplay = values["phase_display"];
            this._phaseAudio = values["phase_audio"];
            this.rechargeTime = values["recharge_time"];
            this.isHiddenInUi = !!values["is_hidden_in_ui"];
            this.affectsAllies = !!values["affects_allies"];
            this.affectsEnemies = !!values["affects_enemies"];
            this.replenishAmmo = values["replenish_ammo"];
            this._compositeSceneGroup = values["composite_scene_group"];
        }
        get effectType() {
            const collection = this.collectionCache.getCollection(SpecialAbilityPhaseEffectTypes$1.KEY, SpecialAbilityPhaseEffectTypes$1.Entry);
            return collection.find(entry => entry.effectType === this._effectType);
        }
        get requestedStance() {
            const collection = this.collectionCache.getCollection(SpecialAbilityStanceEnums$1.KEY, SpecialAbilityStanceEnums$1.Entry);
            return collection.find(entry => entry.key === this._requestedStance);
        }
        get imbueContact() {
            const collection = this.collectionCache.getCollection(SpecialAbilityPhases.KEY, SpecialAbilityPhases.Entry);
            return collection.find(entry => entry.id === this._imbueContact);
        }
        get phaseDisplay() {
            const collection = this.collectionCache.getCollection(SpecialAbilityPhaseDisplays.KEY, SpecialAbilityPhaseDisplays.Entry);
            return collection.find(entry => entry.key === this._phaseDisplay);
        }
        get phaseAudio() {
            const collection = this.collectionCache.getCollection(AudioAbilityPhases.KEY, AudioAbilityPhases.Entry);
            return collection.find(entry => entry.key === this._phaseAudio);
        }
        get compositeSceneGroup() {
            const collection = this.collectionCache.getCollection(BattleVortexCompositeSceneGroups.KEY, BattleVortexCompositeSceneGroups.Entry);
            return collection.find(entry => entry.groupId === this._compositeSceneGroup);
        }
    }
    SpecialAbilityPhases.Entry = Entry;
})(SpecialAbilityPhases$1 || (SpecialAbilityPhases$1 = {}));

var ProjectilesExplosions$1;
(function (ProjectilesExplosions) {
    ProjectilesExplosions.KEY = new CollectionKey("projectiles_explosions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._detonatorType = values["detonator_type"];
            this._detonationType = values["detonation_type"];
            this.detonationRadius = values["detonation_radius"];
            this.detonationDuration = values["detonation_duration"];
            this.detonationSpeed = values["detonation_speed"];
            this.detonationDamage = values["detonation_damage"];
            this._shrapnel = values["shrapnel"];
            this._explosionParticleEffect = values["explosion_particle_effect"];
            this.fuseDistanceFromTarget = values["fuse_distance_from_target"];
            this._explosionParticleEffectOnGround = values["explosion_particle_effect_on_ground"];
            this._explosionAudio = values["explosion_audio"];
            this._contactPhaseEffect = values["contact_phase_effect"];
            this.ignitionAmount = values["ignition_amount"];
            this.isMagical = !!values["is_magical"];
            this.detonationDamageAp = values["detonation_damage_ap"];
            this._cameraShake = values["camera_shake"];
            this.detonationForce = values["detonation_force"];
            this.fuseFixedTime = values["fuse_fixed_time"];
            this.affectsAllies = !!values["affects_allies"];
        }
        get detonatorType() {
            const collection = this.collectionCache.getCollection(ProjectilesDetonatorTypesEnum$1.KEY, ProjectilesDetonatorTypesEnum$1.Entry);
            return collection.find(entry => entry.detonatorType === this._detonatorType);
        }
        get detonationType() {
            const collection = this.collectionCache.getCollection(ProjectilesDetonationTypesEnum$1.KEY, ProjectilesDetonationTypesEnum$1.Entry);
            return collection.find(entry => entry.key === this._detonationType);
        }
        get shrapnel() {
            const collection = this.collectionCache.getCollection(ProjectileShrapnels.KEY, ProjectileShrapnels.Entry);
            return collection.find(entry => entry.key === this._shrapnel);
        }
        get explosionParticleEffect() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._explosionParticleEffect);
        }
        get explosionParticleEffectOnGround() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._explosionParticleEffectOnGround);
        }
        get explosionAudio() {
            const collection = this.collectionCache.getCollection(AudioExplosions.KEY, AudioExplosions.Entry);
            return collection.find(entry => entry.key === this._explosionAudio);
        }
        get contactPhaseEffect() {
            const collection = this.collectionCache.getCollection(SpecialAbilityPhases$1.KEY, SpecialAbilityPhases$1.Entry);
            return collection.find(entry => entry.id === this._contactPhaseEffect);
        }
        get cameraShake() {
            const collection = this.collectionCache.getCollection(BattleCameraShakeParameters.KEY, BattleCameraShakeParameters.Entry);
            return collection.find(entry => entry.key === this._cameraShake);
        }
    }
    ProjectilesExplosions.Entry = Entry;
})(ProjectilesExplosions$1 || (ProjectilesExplosions$1 = {}));

var ProjectilesSpinTypeEnum$1;
(function (ProjectilesSpinTypeEnum) {
    ProjectilesSpinTypeEnum.KEY = new CollectionKey("projectiles_spin_type_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    ProjectilesSpinTypeEnum.Entry = Entry;
})(ProjectilesSpinTypeEnum$1 || (ProjectilesSpinTypeEnum$1 = {}));

var ProjectileImpacts$1;
(function (ProjectileImpacts) {
    ProjectileImpacts.KEY = new CollectionKey("projectile_impacts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._water = values["water"];
            this._sails = values["sails"];
            this._mud = values["mud"];
            this._grass = values["grass"];
            this._road = values["road"];
            this._rock = values["rock"];
            this._sand = values["sand"];
            this._snow = values["snow"];
            this._leather = values["leather"];
            this._wood = values["wood"];
            this._blood = values["blood"];
            this._cameraShake = values["camera_shake"];
        }
        get water() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._water);
        }
        get sails() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._sails);
        }
        get mud() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._mud);
        }
        get grass() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._grass);
        }
        get road() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._road);
        }
        get rock() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._rock);
        }
        get sand() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._sand);
        }
        get snow() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._snow);
        }
        get leather() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._leather);
        }
        get wood() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._wood);
        }
        get blood() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._blood);
        }
        get cameraShake() {
            const collection = this.collectionCache.getCollection(BattleCameraShakeParameters.KEY, BattleCameraShakeParameters.Entry);
            return collection.find(entry => entry.key === this._cameraShake);
        }
    }
    ProjectileImpacts.Entry = Entry;
})(ProjectileImpacts$1 || (ProjectileImpacts$1 = {}));

var ProjectileDisplays$1;
(function (ProjectileDisplays) {
    ProjectileDisplays.KEY = new CollectionKey("projectile_displays");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.displayModel = values["display_model"];
            this._launchFx = values["launch_fx"];
            this._trailFx = values["trail_fx"];
            this._stationaryFx = values["stationary_fx"];
            this._impact = values["impact"];
            this.airborneAnim = values["airborne_anim"];
            this.landingAnim = values["landing_anim"];
            this.tipOffset = values["tip_offset"];
            this.trailSpin = !!values["trail_spin"];
            this._launchCameraShake = values["launch_camera_shake"];
            this._impactBounce = values["impact_bounce"];
            this._impactPenetrate = values["impact_penetrate"];
            this._impactBlood = values["impact_blood"];
            this._impactBounceBlood = values["impact_bounce_blood"];
            this._impactPenetrateBlood = values["impact_penetrate_blood"];
        }
        get launchFx() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._launchFx);
        }
        get trailFx() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._trailFx);
        }
        get stationaryFx() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._stationaryFx);
        }
        get impact() {
            const collection = this.collectionCache.getCollection(ProjectileImpacts$1.KEY, ProjectileImpacts$1.Entry);
            return collection.find(entry => entry.key === this._impact);
        }
        get launchCameraShake() {
            const collection = this.collectionCache.getCollection(BattleCameraShakeParameters.KEY, BattleCameraShakeParameters.Entry);
            return collection.find(entry => entry.key === this._launchCameraShake);
        }
        get impactBounce() {
            const collection = this.collectionCache.getCollection(ProjectileImpacts$1.KEY, ProjectileImpacts$1.Entry);
            return collection.find(entry => entry.key === this._impactBounce);
        }
        get impactPenetrate() {
            const collection = this.collectionCache.getCollection(ProjectileImpacts$1.KEY, ProjectileImpacts$1.Entry);
            return collection.find(entry => entry.key === this._impactPenetrate);
        }
        get impactBlood() {
            const collection = this.collectionCache.getCollection(ProjectileImpacts$1.KEY, ProjectileImpacts$1.Entry);
            return collection.find(entry => entry.key === this._impactBlood);
        }
        get impactBounceBlood() {
            const collection = this.collectionCache.getCollection(ProjectileImpacts$1.KEY, ProjectileImpacts$1.Entry);
            return collection.find(entry => entry.key === this._impactBounceBlood);
        }
        get impactPenetrateBlood() {
            const collection = this.collectionCache.getCollection(ProjectileImpacts$1.KEY, ProjectileImpacts$1.Entry);
            return collection.find(entry => entry.key === this._impactPenetrateBlood);
        }
    }
    ProjectileDisplays.Entry = Entry;
})(ProjectileDisplays$1 || (ProjectileDisplays$1 = {}));

var AudioProjectileLimitations;
(function (AudioProjectileLimitations) {
    AudioProjectileLimitations.KEY = new CollectionKey("audio_projectile_limitations");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.nearInside = values["near_inside"];
            this.nearOutside = values["near_outside"];
            this.farInside = values["far_inside"];
            this.farOutside = values["far_outside"];
            this.uncapped = !!values["uncapped"];
            this.maxDistance = values["max_distance"];
        }
    }
    AudioProjectileLimitations.Entry = Entry;
})(AudioProjectileLimitations || (AudioProjectileLimitations = {}));

var AudioProjectiles$1;
(function (AudioProjectiles) {
    AudioProjectiles.KEY = new CollectionKey("audio_projectiles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.maxAttenuationFire = values["max_attenuation_fire"];
            this.maxAttenuationInflight = values["max_attenuation_inflight"];
            this.maxAttenuationIdle = values["max_attenuation_idle"];
            this.maxAttenuationImpact = values["max_attenuation_impact"];
            this.inflightMinSpeed = values["inflight_min_speed"];
            this.fireStartEvent = values["fire_start_event"];
            this.incomingEvent = values["incoming_event"];
            this.impactEvent = values["impact_event"];
            this.impactBloodEvent = values["impact_blood_event"];
            this.inflightStartEvent = values["inflight_start_event"];
            this.inflightStopEvent = values["inflight_stop_event"];
            this.hitTreeStartEvent = values["hit_tree_start_event"];
            this.hitTreeStopEvent = values["hit_tree_stop_event"];
            this.idleStartEvent = values["idle_start_event"];
            this.idleStopEvent = values["idle_stop_event"];
            this.obstructionSize = values["obstruction_size"];
            this.useReverb = !!values["use_reverb"];
            this._groupFire = values["group_fire"];
            this._groupInflight = values["group_inflight"];
            this._groupImpact = values["group_impact"];
            this.incomingTime = values["incoming_time"];
            this.rtpc1Name = values["rtpc_1_name"];
            this._rtpc1Assignment = values["rtpc_1_assignment"];
            this.rtpc2Name = values["rtpc_2_name"];
            this._rtpc2Assignment = values["rtpc_2_assignment"];
            this.switch1 = values["switch_1"];
            this.fireStopEvent = values["fire_stop_event"];
            this.fireOnlyTriggerOncePerVolley = !!values["fire_only_trigger_once_per_volley"];
            this.inflightOnlyTriggerOncePerVolley = !!values["inflight_only_trigger_once_per_volley"];
            this.impactOnlyTriggerOncePerVolley = !!values["impact_only_trigger_once_per_volley"];
            this.flybyEvent = values["flyby_event"];
            this.flybyDistance = values["flyby_distance"];
            this.dopplerRtpcName = values["doppler_rtpc_name"];
            this._limitation = values["limitation"];
            this.limitationScaleFire = values["limitation_scale_fire"];
            this.limitationScaleInflight = values["limitation_scale_inflight"];
            this.limitationScaleImpact = values["limitation_scale_impact"];
            this.limitationScaleIncoming = values["limitation_scale_incoming"];
            this.limitationScaleFlyby = values["limitation_scale_flyby"];
        }
        get groupFire() {
            const collection = this.collectionCache.getCollection(AudioGroupSounds.KEY, AudioGroupSounds.Entry);
            return collection.find(entry => entry.name === this._groupFire);
        }
        get groupInflight() {
            const collection = this.collectionCache.getCollection(AudioGroupSounds.KEY, AudioGroupSounds.Entry);
            return collection.find(entry => entry.name === this._groupInflight);
        }
        get groupImpact() {
            const collection = this.collectionCache.getCollection(AudioGroupSounds.KEY, AudioGroupSounds.Entry);
            return collection.find(entry => entry.name === this._groupImpact);
        }
        get rtpc1Assignment() {
            const collection = this.collectionCache.getCollection(AudioRtpcAssignments.KEY, AudioRtpcAssignments.Entry);
            return collection.find(entry => entry.name === this._rtpc1Assignment);
        }
        get rtpc2Assignment() {
            const collection = this.collectionCache.getCollection(AudioRtpcAssignments.KEY, AudioRtpcAssignments.Entry);
            return collection.find(entry => entry.name === this._rtpc2Assignment);
        }
        get limitation() {
            const collection = this.collectionCache.getCollection(AudioProjectileLimitations.KEY, AudioProjectileLimitations.Entry);
            return collection.find(entry => entry.key === this._limitation);
        }
    }
    AudioProjectiles.Entry = Entry;
})(AudioProjectiles$1 || (AudioProjectiles$1 = {}));

var ProjectileHomingParams;
(function (ProjectileHomingParams) {
    ProjectileHomingParams.KEY = new CollectionKey("projectile_homing_params");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.startTime = values["start_time"];
            this.maxTargetAngleDelta = values["max_target_angle_delta"];
            this.lookaheadTime = values["lookahead_time"];
            this.steeringCoefficient = values["steering_coefficient"];
        }
    }
    ProjectileHomingParams.Entry = Entry;
})(ProjectileHomingParams || (ProjectileHomingParams = {}));

var ProjectileFirstPersonParams;
(function (ProjectileFirstPersonParams) {
    ProjectileFirstPersonParams.KEY = new CollectionKey("projectile_first_person_params");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.invertPitchControl = !!values["invert_pitch_control"];
            this.mouseSensitivity = values["mouse_sensitivity"];
            this.angularVelocityDecay = values["angular_velocity_decay"];
            this.gravity = values["gravity"];
            this.launchElevation = values["launch_elevation"];
            this.launchSpeed = values["launch_speed"];
            this.liftCoefficent = values["lift_coefficent"];
            this.tailCoefficent = values["tail_coefficent"];
            this.dragCoefficent = values["drag_coefficent"];
            this.cameraYOffset = values["camera_y_offset"];
            this.cameraZOffset = values["camera_z_offset"];
            this.impactViewTime = values["impact_view_time"];
            this.impactViewElevation = values["impact_view_elevation"];
            this.impactViewDistance = values["impact_view_distance"];
            this.yawControl = !!values["yaw_control"];
            this.yawCoefficient = values["yaw_coefficient"];
            this.useReloadStage = !!values["use_reload_stage"];
        }
    }
    ProjectileFirstPersonParams.Entry = Entry;
})(ProjectileFirstPersonParams || (ProjectileFirstPersonParams = {}));

var ProjectilePenetrationJunctions;
(function (ProjectilePenetrationJunctions) {
    ProjectilePenetrationJunctions.KEY = new CollectionKey("projectile_penetration_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._entitySizeCap = values["entity_size_cap"];
            this.maxPenetration = values["max_penetration"];
            this.description = values["description"];
        }
        get entitySizeCap() {
            const collection = this.collectionCache.getCollection(BattleEntitiesSizeEnums.KEY, BattleEntitiesSizeEnums.Entry);
            return collection.find(entry => entry.key === this._entitySizeCap);
        }
    }
    ProjectilePenetrationJunctions.Entry = Entry;
})(ProjectilePenetrationJunctions || (ProjectilePenetrationJunctions = {}));

var ProjectilesScalingDamages;
(function (ProjectilesScalingDamages) {
    ProjectilesScalingDamages.KEY = new CollectionKey("projectiles_scaling_damages");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.minDamageMultiplier = values["min_damage_multiplier"];
            this.maxDamageMultiplier = values["max_damage_multiplier"];
            this.minHealthRatio = values["min_health_ratio"];
            this.maxHealthRatio = values["max_health_ratio"];
        }
    }
    ProjectilesScalingDamages.Entry = Entry;
})(ProjectilesScalingDamages || (ProjectilesScalingDamages = {}));

var Projectiles$1;
(function (Projectiles) {
    Projectiles.KEY = new CollectionKey("projectiles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._category = values["category"];
            this._shotType = values["shot_type"];
            this._explosionType = values["explosion_type"];
            this.highAirResistance = !!values["high_air_resistance"];
            this._spinType = values["spin_type"];
            this.projectileNumber = values["projectile_number"];
            this._trajectorySight = values["trajectory_sight"];
            this.effectiveRange = values["effective_range"];
            this.minimumRange = values["minimum_range"];
            this.maxElevation = values["max_elevation"];
            this.muzzleVelocity = values["muzzle_velocity"];
            this.marksmanshipBonus = values["marksmanship_bonus"];
            this.spread = values["spread"];
            this.damage = values["damage"];
            this.apDamage = values["ap_damage"];
            this.canBounce = !!values["can_bounce"];
            this.collisionRadius = values["collision_radius"];
            this.baseReloadTime = values["base_reload_time"];
            this.calibrationDistance = values["calibration_distance"];
            this.calibrationArea = values["calibration_area"];
            this.bonusVInfantry = values["bonus_v_infantry"];
            this.bonusVCavalry = values["bonus_v_cavalry"];
            this.bonusVLarge = values["bonus_v_large"];
            this._projectileDisplay = values["projectile_display"];
            this._overheadStatEffect = values["overhead_stat_effect"];
            this._contactStatEffect = values["contact_stat_effect"];
            this._projectileAudio = values["projectile_audio"];
            this.shockwaveRadius = values["shockwave_radius"];
            this.canDamageBuildings = !!values["can_damage_buildings"];
            this.isGrapple = !!values["is_grapple"];
            this.burstSize = values["burst_size"];
            this.burstShotDelay = values["burst_shot_delay"];
            this.gravity = values["gravity"];
            this.mass = values["mass"];
            this._homingParams = values["homing_params"];
            this._firstPersonParams = values["first_person_params"];
            this.ignitionAmount = values["ignition_amount"];
            this.isMagical = !!values["is_magical"];
            this.canTargetAirborne = !!values["can_target_airborne"];
            this.fixedElevation = values["fixed_elevation"];
            this._projectilePenetration = values["projectile_penetration"];
            this.expiryRange = values["expiry_range"];
            this.isBeamLaunchBurst = !!values["is_beam_launch_burst"];
            this.expireOnImpact = !!values["expire_on_impact"];
            this.canRoll = !!values["can_roll"];
            this.shotsPerVolley = values["shots_per_volley"];
            this._gameExpansionKey = values["game_expansion_key"];
            this.trailAlwaysOn = !!values["trail_always_on"];
            this.firedByMount = !!values["fired_by_mount"];
            this.lockOnMultipleFirePos = !!values["lock_on_multiple_fire_pos"];
            this.preferCentralTargets = !!values["prefer_central_targets"];
            this.canDamageVehicles = !!values["can_damage_vehicles"];
            this._scalingDamage = values["scaling_damage"];
        }
        get shotType() {
            const collection = this.collectionCache.getCollection(ProjectileShotTypeEnum$1.KEY, ProjectileShotTypeEnum$1.Entry);
            return collection.find(entry => entry.key === this._shotType);
        }
        get explosionType() {
            const collection = this.collectionCache.getCollection(ProjectilesExplosions$1.KEY, ProjectilesExplosions$1.Entry);
            return collection.find(entry => entry.key === this._explosionType);
        }
        get spinType() {
            const collection = this.collectionCache.getCollection(ProjectilesSpinTypeEnum$1.KEY, ProjectilesSpinTypeEnum$1.Entry);
            return collection.find(entry => entry.key === this._spinType);
        }
        get projectileDisplay() {
            const collection = this.collectionCache.getCollection(ProjectileDisplays$1.KEY, ProjectileDisplays$1.Entry);
            return collection.find(entry => entry.key === this._projectileDisplay);
        }
        get overheadStatEffect() {
            const collection = this.collectionCache.getCollection(SpecialAbilityPhases$1.KEY, SpecialAbilityPhases$1.Entry);
            return collection.find(entry => entry.id === this._overheadStatEffect);
        }
        get contactStatEffect() {
            const collection = this.collectionCache.getCollection(SpecialAbilityPhases$1.KEY, SpecialAbilityPhases$1.Entry);
            return collection.find(entry => entry.id === this._contactStatEffect);
        }
        get projectileAudio() {
            const collection = this.collectionCache.getCollection(AudioProjectiles$1.KEY, AudioProjectiles$1.Entry);
            return collection.find(entry => entry.key === this._projectileAudio);
        }
        get homingParams() {
            const collection = this.collectionCache.getCollection(ProjectileHomingParams.KEY, ProjectileHomingParams.Entry);
            return collection.find(entry => entry.key === this._homingParams);
        }
        get firstPersonParams() {
            const collection = this.collectionCache.getCollection(ProjectileFirstPersonParams.KEY, ProjectileFirstPersonParams.Entry);
            return collection.find(entry => entry.key === this._firstPersonParams);
        }
        get projectilePenetration() {
            const collection = this.collectionCache.getCollection(ProjectilePenetrationJunctions.KEY, ProjectilePenetrationJunctions.Entry);
            return collection.find(entry => entry.key === this._projectilePenetration);
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
        get scalingDamage() {
            const collection = this.collectionCache.getCollection(ProjectilesScalingDamages.KEY, ProjectilesScalingDamages.Entry);
            return collection.find(entry => entry.key === this._scalingDamage);
        }
    }
    Projectiles.Entry = Entry;
})(Projectiles$1 || (Projectiles$1 = {}));

var AudioMissileWeaponTypes;
(function (AudioMissileWeaponTypes) {
    AudioMissileWeaponTypes.KEY = new CollectionKey("audio_missile_weapon_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.switch = values["switch"];
            this.fireStartEvent = values["fire_start_event"];
            this.fireMaxAttenuation = values["fire_max_attenuation"];
            this._groupFire = values["group_fire"];
            this.fireStopEvent = values["fire_stop_event"];
            this.onlyTriggerOncePerVolley = !!values["only_trigger_once_per_volley"];
            this.fireUseReverb = !!values["fire_use_reverb"];
            this.fireObstructionSize = values["fire_obstruction_size"];
            this._groupFireStart = values["group_fire_start"];
            this._groupFireStop = values["group_fire_stop"];
        }
        get groupFire() {
            const collection = this.collectionCache.getCollection(AudioGroupSounds.KEY, AudioGroupSounds.Entry);
            return collection.find(entry => entry.name === this._groupFire);
        }
        get groupFireStart() {
            const collection = this.collectionCache.getCollection(AudioGroupSounds.KEY, AudioGroupSounds.Entry);
            return collection.find(entry => entry.name === this._groupFireStart);
        }
        get groupFireStop() {
            const collection = this.collectionCache.getCollection(AudioGroupSounds.KEY, AudioGroupSounds.Entry);
            return collection.find(entry => entry.name === this._groupFireStop);
        }
    }
    AudioMissileWeaponTypes.Entry = Entry;
})(AudioMissileWeaponTypes || (AudioMissileWeaponTypes = {}));

var MissileWeapons$1;
(function (MissileWeapons) {
    MissileWeapons.KEY = new CollectionKey("missile_weapons");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.precursor = !!values["precursor"];
            this._defaultProjectile = values["default_projectile"];
            this._audioType = values["audio_type"];
            this.useSecondaryAmmoPool = !!values["use_secondary_ammo_pool"];
        }
        get defaultProjectile() {
            const collection = this.collectionCache.getCollection(Projectiles$1.KEY, Projectiles$1.Entry);
            return collection.find(entry => entry.key === this._defaultProjectile);
        }
        get audioType() {
            const collection = this.collectionCache.getCollection(AudioMissileWeaponTypes.KEY, AudioMissileWeaponTypes.Entry);
            return collection.find(entry => entry.key === this._audioType);
        }
    }
    MissileWeapons.Entry = Entry;
})(MissileWeapons$1 || (MissileWeapons$1 = {}));

var UnitMeleeWeaponsEnum$1;
(function (UnitMeleeWeaponsEnum) {
    UnitMeleeWeaponsEnum.KEY = new CollectionKey("unit_melee_weapons_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    UnitMeleeWeaponsEnum.Entry = Entry;
})(UnitMeleeWeaponsEnum$1 || (UnitMeleeWeaponsEnum$1 = {}));

var AudioMeleeWeaponTypes;
(function (AudioMeleeWeaponTypes) {
    AudioMeleeWeaponTypes.KEY = new CollectionKey("audio_melee_weapon_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.switch = values["switch"];
            this._groupMelee = values["group_melee"];
            this.cannotParry = !!values["cannot_parry"];
            this._meleeHitType = values["melee_hit_type"];
        }
        get groupMelee() {
            const collection = this.collectionCache.getCollection(AudioGroupSounds.KEY, AudioGroupSounds.Entry);
            return collection.find(entry => entry.name === this._groupMelee);
        }
        get meleeHitType() {
            const collection = this.collectionCache.getCollection(AudioMeleeHitTypes.KEY, AudioMeleeHitTypes.Entry);
            return collection.find(entry => entry.key === this._meleeHitType);
        }
    }
    AudioMeleeWeaponTypes.Entry = Entry;
})(AudioMeleeWeaponTypes || (AudioMeleeWeaponTypes = {}));

var MeleeWeapons$1;
(function (MeleeWeapons) {
    MeleeWeapons.KEY = new CollectionKey("melee_weapons");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.damage = values["damage"];
            this.apDamage = values["ap_damage"];
            this.firstStrike = values["first_strike"];
            this.bonusVInfantry = values["bonus_v_infantry"];
            this.bonusVCavalry = values["bonus_v_cavalry"];
            this.bonusVLarge = values["bonus_v_large"];
            this.weaponLength = values["weapon_length"];
            this._meleeWeaponType = values["melee_weapon_type"];
            this._audioType = values["audio_type"];
            this._splashAttackTargetSize = values["splash_attack_target_size"];
            this.splashAttackMaxAttacks = values["splash_attack_max_attacks"];
            this.splashAttackPowerMultiplier = values["splash_attack_power_multiplier"];
            this.buildingDamage = values["building_damage"];
            this.ignitionAmount = values["ignition_amount"];
            this.isMagical = !!values["is_magical"];
            this._contactPhase = values["contact_phase"];
            this.collisionAttackMaxTargets = values["collision_attack_max_targets"];
            this.collisionAttackMaxTargetsCooldown = values["collision_attack_max_targets_cooldown"];
            this.meleeAttackInterval = values["melee_attack_interval"];
            this._scalingDamage = values["scaling_damage"];
        }
        get meleeWeaponType() {
            const collection = this.collectionCache.getCollection(UnitMeleeWeaponsEnum$1.KEY, UnitMeleeWeaponsEnum$1.Entry);
            return collection.find(entry => entry.key === this._meleeWeaponType);
        }
        get audioType() {
            const collection = this.collectionCache.getCollection(AudioMeleeWeaponTypes.KEY, AudioMeleeWeaponTypes.Entry);
            return collection.find(entry => entry.key === this._audioType);
        }
        get splashAttackTargetSize() {
            const collection = this.collectionCache.getCollection(BattleEntitiesSizeEnums.KEY, BattleEntitiesSizeEnums.Entry);
            return collection.find(entry => entry.key === this._splashAttackTargetSize);
        }
        get contactPhase() {
            const collection = this.collectionCache.getCollection(SpecialAbilityPhases$1.KEY, SpecialAbilityPhases$1.Entry);
            return collection.find(entry => entry.id === this._contactPhase);
        }
        get scalingDamage() {
            const collection = this.collectionCache.getCollection(ProjectilesScalingDamages.KEY, ProjectilesScalingDamages.Entry);
            return collection.find(entry => entry.key === this._scalingDamage);
        }
    }
    MeleeWeapons.Entry = Entry;
})(MeleeWeapons$1 || (MeleeWeapons$1 = {}));

var BattleEntityStats;
(function (BattleEntityStats) {
    BattleEntityStats.KEY = new CollectionKey("battle_entity_stats");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._primaryMeleeWeapon = values["primary_melee_weapon"];
            this._primaryMissileWeapon = values["primary_missile_weapon"];
        }
        get primaryMeleeWeapon() {
            const collection = this.collectionCache.getCollection(MeleeWeapons$1.KEY, MeleeWeapons$1.Entry);
            return collection.find(entry => entry.key === this._primaryMeleeWeapon);
        }
        get primaryMissileWeapon() {
            const collection = this.collectionCache.getCollection(MissileWeapons$1.KEY, MissileWeapons$1.Entry);
            return collection.find(entry => entry.key === this._primaryMissileWeapon);
        }
    }
    BattleEntityStats.Entry = Entry;
})(BattleEntityStats || (BattleEntityStats = {}));

var BattlePersonalities$1;
(function (BattlePersonalities) {
    BattlePersonalities.KEY = new CollectionKey("battle_personalities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._manAnimationsTable = values["man_animations_table"];
            this._type = values["type"];
            this._missileType = values["missile_type"];
            this._variant = values["variant"];
            this._battleEntity = values["battle_entity"];
            this.riderAttachmentPoint = values["rider_attachment_point"];
            this._battleEntityStats = values["battle_entity_stats"];
            this._gameExpansionKey = values["game_expansion_key"];
            this.autonomousRiderHero = !!values["autonomous_rider_hero"];
        }
        get manAnimationsTable() {
            const collection = this.collectionCache.getCollection(BattleAnimationsTable$1.KEY, BattleAnimationsTable$1.Entry);
            return collection.find(entry => entry.key === this._manAnimationsTable);
        }
        get missileType() {
            const collection = this.collectionCache.getCollection(Projectiles$1.KEY, Projectiles$1.Entry);
            return collection.find(entry => entry.key === this._missileType);
        }
        get variant() {
            const collection = this.collectionCache.getCollection(Variants$1.KEY, Variants$1.Entry);
            return collection.find(entry => entry.variantName === this._variant);
        }
        get battleEntity() {
            const collection = this.collectionCache.getCollection(BattleEntities$1.KEY, BattleEntities$1.Entry);
            return collection.find(entry => entry.key === this._battleEntity);
        }
        get battleEntityStats() {
            const collection = this.collectionCache.getCollection(BattleEntityStats.KEY, BattleEntityStats.Entry);
            return collection.find(entry => entry.key === this._battleEntityStats);
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
    }
    BattlePersonalities.Entry = Entry;
})(BattlePersonalities$1 || (BattlePersonalities$1 = {}));

var PersonalityLocationEnums$1;
(function (PersonalityLocationEnums) {
    PersonalityLocationEnums.KEY = new CollectionKey("personality_location_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    PersonalityLocationEnums.Entry = Entry;
})(PersonalityLocationEnums$1 || (PersonalityLocationEnums$1 = {}));

var LandUnitsAdditionalPersonalitiesGroups;
(function (LandUnitsAdditionalPersonalitiesGroups) {
    LandUnitsAdditionalPersonalitiesGroups.KEY = new CollectionKey("land_units_additional_personalities_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    LandUnitsAdditionalPersonalitiesGroups.Entry = Entry;
})(LandUnitsAdditionalPersonalitiesGroups || (LandUnitsAdditionalPersonalitiesGroups = {}));

var LandUnitsOfficers$1;
(function (LandUnitsOfficers) {
    LandUnitsOfficers.KEY = new CollectionKey("land_units_officers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._officer1 = values["officer_1"];
            this._officer2 = values["officer_2"];
            this._standardBearer1 = values["standard_bearer_1"];
            this._standardBearer2 = values["standard_bearer_2"];
            this._musician1 = values["musician_1"];
            this._musician2 = values["musician_2"];
            this._personalityLocation = values["personality_location"];
            this._additionalPersonalities = values["additional_personalities"];
        }
        get officer1() {
            const collection = this.collectionCache.getCollection(BattlePersonalities$1.KEY, BattlePersonalities$1.Entry);
            return collection.find(entry => entry.key === this._officer1);
        }
        get officer2() {
            const collection = this.collectionCache.getCollection(BattlePersonalities$1.KEY, BattlePersonalities$1.Entry);
            return collection.find(entry => entry.key === this._officer2);
        }
        get standardBearer1() {
            const collection = this.collectionCache.getCollection(BattlePersonalities$1.KEY, BattlePersonalities$1.Entry);
            return collection.find(entry => entry.key === this._standardBearer1);
        }
        get standardBearer2() {
            const collection = this.collectionCache.getCollection(BattlePersonalities$1.KEY, BattlePersonalities$1.Entry);
            return collection.find(entry => entry.key === this._standardBearer2);
        }
        get musician1() {
            const collection = this.collectionCache.getCollection(BattlePersonalities$1.KEY, BattlePersonalities$1.Entry);
            return collection.find(entry => entry.key === this._musician1);
        }
        get musician2() {
            const collection = this.collectionCache.getCollection(BattlePersonalities$1.KEY, BattlePersonalities$1.Entry);
            return collection.find(entry => entry.key === this._musician2);
        }
        get personalityLocation() {
            const collection = this.collectionCache.getCollection(PersonalityLocationEnums$1.KEY, PersonalityLocationEnums$1.Entry);
            return collection.find(entry => entry.key === this._personalityLocation);
        }
        get additionalPersonalities() {
            const collection = this.collectionCache.getCollection(LandUnitsAdditionalPersonalitiesGroups.KEY, LandUnitsAdditionalPersonalitiesGroups.Entry);
            return collection.find(entry => entry.key === this._additionalPersonalities);
        }
    }
    LandUnitsOfficers.Entry = Entry;
})(LandUnitsOfficers$1 || (LandUnitsOfficers$1 = {}));

var GunTypesEnum$1;
(function (GunTypesEnum) {
    GunTypesEnum.KEY = new CollectionKey("gun_types_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    GunTypesEnum.Entry = Entry;
})(GunTypesEnum$1 || (GunTypesEnum$1 = {}));

var WarscapeCategories$1;
(function (WarscapeCategories) {
    WarscapeCategories.KEY = new CollectionKey("warscape_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    WarscapeCategories.Entry = Entry;
})(WarscapeCategories$1 || (WarscapeCategories$1 = {}));

var WarscapeAnimated$1;
(function (WarscapeAnimated) {
    WarscapeAnimated.KEY = new CollectionKey("warscape_animated");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.textureFilenameBase = values["texture_filename_base"];
            this._category = values["category"];
            this._gameExpansionKey = values["game_expansion_key"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(WarscapeCategories$1.KEY, WarscapeCategories$1.Entry);
            return collection.find(entry => entry.key === this._category);
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
    }
    WarscapeAnimated.Entry = Entry;
})(WarscapeAnimated$1 || (WarscapeAnimated$1 = {}));

var FirstPersonEngines$1;
(function (FirstPersonEngines) {
    FirstPersonEngines.KEY = new CollectionKey("first_person_engines");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.reloadTime = values["reload_time"];
            this.autoTarget = !!values["auto_target"];
            this.cameraOffsetX = values["camera_offset_x"];
            this.cameraOffsetY = values["camera_offset_y"];
            this.cameraOffsetZ = values["camera_offset_z"];
            this.nearClippingPlane = values["near_clipping_plane"];
            this.trackProjectileDistance = values["track_projectile_distance"];
            this.halfAccuracyArc = values["half_accuracy_arc"];
            this.halfHorizontalFireArc = values["half_horizontal_fire_arc"];
            this.halfVerticalFireArcElevation = values["half_vertical_fire_arc_elevation"];
            this.turnDelay = values["turn_delay"];
            this.halfVerticalFireArcDeclination = values["half_vertical_fire_arc_declination"];
            this.allowDirectControl = !!values["allow_direct_control"];
            this.showTrajectory = !!values["show_trajectory"];
        }
    }
    FirstPersonEngines.Entry = Entry;
})(FirstPersonEngines$1 || (FirstPersonEngines$1 = {}));

var BattlefieldEngines$1;
(function (BattlefieldEngines) {
    BattlefieldEngines.KEY = new CollectionKey("battlefield_engines");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._engineType = values["engine_type"];
            this._model = values["model"];
            this._gunAnimationTable = values["gun_animation_table"];
            this._missileWeapon = values["missile_weapon"];
            this._destructionAnimation = values["destruction_animation"];
            this.destroyedModel = values["destroyed_model"];
            this._battleEntity = values["battle_entity"];
            this.assetFolder = values["asset_folder"];
            this._variant = values["variant"];
            this.draughtAttachmentPoint = values["draught_attachment_point"];
            this.techFolder = values["tech_folder"];
            this.riderAttachmentPoint = values["rider_attachment_point"];
            this._firstPerson = values["first_person"];
            this.destructModel = values["destruct_model"];
            this.destructAnim = values["destruct_anim"];
            this.destructMeta = values["destruct_meta"];
        }
        get engineType() {
            const collection = this.collectionCache.getCollection(GunTypesEnum$1.KEY, GunTypesEnum$1.Entry);
            return collection.find(entry => entry.key === this._engineType);
        }
        get model() {
            const collection = this.collectionCache.getCollection(WarscapeAnimated$1.KEY, WarscapeAnimated$1.Entry);
            return collection.find(entry => entry.key === this._model);
        }
        get gunAnimationTable() {
            const collection = this.collectionCache.getCollection(BattleAnimationsTable$1.KEY, BattleAnimationsTable$1.Entry);
            return collection.find(entry => entry.key === this._gunAnimationTable);
        }
        get missileWeapon() {
            const collection = this.collectionCache.getCollection(MissileWeapons$1.KEY, MissileWeapons$1.Entry);
            return collection.find(entry => entry.key === this._missileWeapon);
        }
        get destructionAnimation() {
            const collection = this.collectionCache.getCollection(WarscapeAnimated$1.KEY, WarscapeAnimated$1.Entry);
            return collection.find(entry => entry.key === this._destructionAnimation);
        }
        get battleEntity() {
            const collection = this.collectionCache.getCollection(BattleEntities$1.KEY, BattleEntities$1.Entry);
            return collection.find(entry => entry.key === this._battleEntity);
        }
        get variant() {
            const collection = this.collectionCache.getCollection(Variants$1.KEY, Variants$1.Entry);
            return collection.find(entry => entry.variantName === this._variant);
        }
        get firstPerson() {
            const collection = this.collectionCache.getCollection(FirstPersonEngines$1.KEY, FirstPersonEngines$1.Entry);
            return collection.find(entry => entry.key === this._firstPerson);
        }
    }
    BattlefieldEngines.Entry = Entry;
})(BattlefieldEngines$1 || (BattlefieldEngines$1 = {}));

var LandUnitArticulatedVehicles$1;
(function (LandUnitArticulatedVehicles) {
    LandUnitArticulatedVehicles.KEY = new CollectionKey("land_unit_articulated_vehicles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._articulatedEntity = values["articulated_entity"];
            this._ammoCaissonEntity = values["ammo_caisson_entity"];
            this._ammoCaissonModel = values["ammo_caisson_model"];
            this.ammoCaissonDestroyedModel = values["ammo_caisson_destroyed_model"];
            this._ammoCaissonDestruction = values["ammo_caisson_destruction"];
            this.articulationNode1Offset = values["articulation_node_1_offset"];
            this.articulationNode1Radius = values["articulation_node_1_radius"];
            this.articulationNode2Offset = values["articulation_node_2_offset"];
            this.articulationNode2Radius = values["articulation_node_2_radius"];
            this.articulationNode3Offset = values["articulation_node_3_offset"];
            this.articulationNode3Radius = values["articulation_node_3_radius"];
            this.articulationMaxAngle = values["articulation_max_angle"];
            this.headOffset = values["head_offset"];
        }
        get articulatedEntity() {
            const collection = this.collectionCache.getCollection(BattleEntities$1.KEY, BattleEntities$1.Entry);
            return collection.find(entry => entry.key === this._articulatedEntity);
        }
        get ammoCaissonEntity() {
            const collection = this.collectionCache.getCollection(BattleEntities$1.KEY, BattleEntities$1.Entry);
            return collection.find(entry => entry.key === this._ammoCaissonEntity);
        }
        get ammoCaissonModel() {
            const collection = this.collectionCache.getCollection(WarscapeAnimated$1.KEY, WarscapeAnimated$1.Entry);
            return collection.find(entry => entry.key === this._ammoCaissonModel);
        }
        get ammoCaissonDestruction() {
            const collection = this.collectionCache.getCollection(WarscapeAnimated$1.KEY, WarscapeAnimated$1.Entry);
            return collection.find(entry => entry.key === this._ammoCaissonDestruction);
        }
    }
    LandUnitArticulatedVehicles.Entry = Entry;
})(LandUnitArticulatedVehicles$1 || (LandUnitArticulatedVehicles$1 = {}));

var UnitAttributesGroups$1;
(function (UnitAttributesGroups) {
    UnitAttributesGroups.KEY = new CollectionKey("unit_attributes_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.groupName = values["group_name"];
        }
    }
    UnitAttributesGroups.Entry = Entry;
})(UnitAttributesGroups$1 || (UnitAttributesGroups$1 = {}));

var AudioVoSelectedSwitches$1;
(function (AudioVoSelectedSwitches) {
    AudioVoSelectedSwitches.KEY = new CollectionKey("audio_vo_selected_switches");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    AudioVoSelectedSwitches.Entry = Entry;
})(AudioVoSelectedSwitches$1 || (AudioVoSelectedSwitches$1 = {}));

var GroundTypeStatEffectGroups;
(function (GroundTypeStatEffectGroups) {
    GroundTypeStatEffectGroups.KEY = new CollectionKey("ground_type_stat_effect_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.groupName = values["group_name"];
            this.onscreenName = values["onscreen_name"];
        }
    }
    GroundTypeStatEffectGroups.Entry = Entry;
})(GroundTypeStatEffectGroups || (GroundTypeStatEffectGroups = {}));

var AiUsageGroups;
(function (AiUsageGroups) {
    AiUsageGroups.KEY = new CollectionKey("ai_usage_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.melee = !!values["melee"];
            this.rangedIndirect = !!values["ranged_indirect"];
            this.fast = !!values["fast"];
            this.support = !!values["support"];
            this.rangedDirect = !!values["ranged_direct"];
            this.flanker = !!values["flanker"];
            this.flying = !!values["flying"];
            this.highValue = !!values["high_value"];
            this.gateCrusher = !!values["gate_crusher"];
            this.bomber = !!values["bomber"];
            this.shock = !!values["shock"];
            this.useSkirmish = !!values["use_skirmish"];
            this.harasser = !!values["harasser"];
            this.stalker = !!values["stalker"];
        }
    }
    AiUsageGroups.Entry = Entry;
})(AiUsageGroups || (AiUsageGroups = {}));

var LandUnits$1;
(function (LandUnits) {
    LandUnits.KEY = new CollectionKey("land_units");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreenName = values["onscreen_name"];
            this._category = values["category"];
            this._class = values["class"];
            this._shortDescriptionText = values["short_description_text"];
            this._historicalDescriptionText = values["historical_description_text"];
            this._strengthsWeaknessesText = values["strengths_weaknesses_text"];
            this.campaignActionPoints = values["campaign_action_points"];
            this.supportsFirstPerson = !!values["supports_first_person"];
            this._manEntity = values["man_entity"];
            this._manAnimation = values["man_animation"];
            this.numMounts = values["num_mounts"];
            this._mount = values["mount"];
            this.numAnimals = values["num_animals"];
            this._animal = values["animal"];
            this._spacing = values["spacing"];
            this.rankDepth = values["rank_depth"];
            this.morale = values["morale"];
            this.bonusHitPoints = values["bonus_hit_points"];
            this._trainingLevel = values["training_level"];
            this._armour = values["armour"];
            this._shield = values["shield"];
            this._primaryMissileWeapon = values["primary_missile_weapon"];
            this.accuracy = values["accuracy"];
            this.primaryAmmo = values["primary_ammo"];
            this._primaryMeleeWeapon = values["primary_melee_weapon"];
            this.meleeAttack = values["melee_attack"];
            this.chargeBonus = values["charge_bonus"];
            this.meleeDefence = values["melee_defence"];
            this.dismountedMeleeAttack = values["dismounted_melee_attack"];
            this.dismountedChargeBonus = values["dismounted_charge_bonus"];
            this.numEngines = values["num_engines"];
            this._officers = values["officers"];
            this._engine = values["engine"];
            this._articulatedRecord = values["articulated_record"];
            this.isMale = !!values["is_male"];
            this.visibilitySpottingRangeMin = values["visibility_spotting_range_min"];
            this.visibilitySpottingRangeMax = values["visibility_spotting_range_max"];
            this.abilityGlobalRecharge = values["ability_global_recharge"];
            this._attributeGroup = values["attribute_group"];
            this.spotDistTree = values["spot_dist_tree"];
            this.spotDistScrub = values["spot_dist_scrub"];
            this.reload = values["reload"];
            this.looseSpacing = !!values["loose_spacing"];
            this._selectionVo = values["selection_vo"];
            this._selectedVoSecondary = values["selected_vo_secondary"];
            this._selectedVoTertiary = values["selected_vo_tertiary"];
            this.hidingScalar = values["hiding_scalar"];
            this._groundStatEffectGroup = values["ground_stat_effect_group"];
            this.capturePower = values["capture_power"];
            this.secondaryAmmo = values["secondary_ammo"];
            this.damageModFlame = values["damage_mod_flame"];
            this.damageModMagic = values["damage_mod_magic"];
            this.damageModPhysical = values["damage_mod_physical"];
            this.damageModMissile = values["damage_mod_missile"];
            this.damageModAll = values["damage_mod_all"];
            this._aiUsageGroup = values["ai_usage_group"];
            this.canSkirmish = !!values["can_skirmish"];
            this.concealedName = values["concealed_name"];
            this.mountedDraughts = !!values["mounted_draughts"];
            this.syncLocomotion = !!values["sync_locomotion"];
            this._gameExpansionKey = values["game_expansion_key"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(UnitCategory$1.KEY, UnitCategory$1.Entry);
            return collection.find(entry => entry.key === this._category);
        }
        get class() {
            const collection = this.collectionCache.getCollection(UnitClass$1.KEY, UnitClass$1.Entry);
            return collection.find(entry => entry.key === this._class);
        }
        get shortDescriptionText() {
            const collection = this.collectionCache.getCollection(UnitDescriptionShortTexts$1.KEY, UnitDescriptionShortTexts$1.Entry);
            return collection.find(entry => entry.key === this._shortDescriptionText);
        }
        get historicalDescriptionText() {
            const collection = this.collectionCache.getCollection(UnitDescriptionHistoricalTexts$1.KEY, UnitDescriptionHistoricalTexts$1.Entry);
            return collection.find(entry => entry.key === this._historicalDescriptionText);
        }
        get strengthsWeaknessesText() {
            const collection = this.collectionCache.getCollection(UnitDescriptionStrengthsWeaknessesTexts$1.KEY, UnitDescriptionStrengthsWeaknessesTexts$1.Entry);
            return collection.find(entry => entry.key === this._strengthsWeaknessesText);
        }
        get manEntity() {
            const collection = this.collectionCache.getCollection(BattleEntities$1.KEY, BattleEntities$1.Entry);
            return collection.find(entry => entry.key === this._manEntity);
        }
        get manAnimation() {
            const collection = this.collectionCache.getCollection(BattleAnimationsTable$1.KEY, BattleAnimationsTable$1.Entry);
            return collection.find(entry => entry.key === this._manAnimation);
        }
        get mount() {
            const collection = this.collectionCache.getCollection(Mounts$1.KEY, Mounts$1.Entry);
            return collection.find(entry => entry.key === this._mount);
        }
        get animal() {
            const collection = this.collectionCache.getCollection(Animals$1.KEY, Animals$1.Entry);
            return collection.find(entry => entry.key === this._animal);
        }
        get spacing() {
            const collection = this.collectionCache.getCollection(UnitSpacings$1.KEY, UnitSpacings$1.Entry);
            return collection.find(entry => entry.key === this._spacing);
        }
        get trainingLevel() {
            const collection = this.collectionCache.getCollection(UnitTrainingLevelEnum$1.KEY, UnitTrainingLevelEnum$1.Entry);
            return collection.find(entry => entry.key === this._trainingLevel);
        }
        get armour() {
            const collection = this.collectionCache.getCollection(UnitArmourTypes$1.KEY, UnitArmourTypes$1.Entry);
            return collection.find(entry => entry.key === this._armour);
        }
        get shield() {
            const collection = this.collectionCache.getCollection(UnitShieldTypes$1.KEY, UnitShieldTypes$1.Entry);
            return collection.find(entry => entry.key === this._shield);
        }
        get primaryMissileWeapon() {
            const collection = this.collectionCache.getCollection(MissileWeapons$1.KEY, MissileWeapons$1.Entry);
            return collection.find(entry => entry.key === this._primaryMissileWeapon);
        }
        get primaryMeleeWeapon() {
            const collection = this.collectionCache.getCollection(MeleeWeapons$1.KEY, MeleeWeapons$1.Entry);
            return collection.find(entry => entry.key === this._primaryMeleeWeapon);
        }
        get officers() {
            const collection = this.collectionCache.getCollection(LandUnitsOfficers$1.KEY, LandUnitsOfficers$1.Entry);
            return collection.find(entry => entry.key === this._officers);
        }
        get engine() {
            const collection = this.collectionCache.getCollection(BattlefieldEngines$1.KEY, BattlefieldEngines$1.Entry);
            return collection.find(entry => entry.key === this._engine);
        }
        get articulatedRecord() {
            const collection = this.collectionCache.getCollection(LandUnitArticulatedVehicles$1.KEY, LandUnitArticulatedVehicles$1.Entry);
            return collection.find(entry => entry.key === this._articulatedRecord);
        }
        get attributeGroup() {
            const collection = this.collectionCache.getCollection(UnitAttributesGroups$1.KEY, UnitAttributesGroups$1.Entry);
            return collection.find(entry => entry.groupName === this._attributeGroup);
        }
        get selectionVo() {
            const collection = this.collectionCache.getCollection(AudioVoSelectedSwitches$1.KEY, AudioVoSelectedSwitches$1.Entry);
            return collection.find(entry => entry.key === this._selectionVo);
        }
        get selectedVoSecondary() {
            const collection = this.collectionCache.getCollection(AudioVoSelectedSwitches$1.KEY, AudioVoSelectedSwitches$1.Entry);
            return collection.find(entry => entry.key === this._selectedVoSecondary);
        }
        get selectedVoTertiary() {
            const collection = this.collectionCache.getCollection(AudioVoSelectedSwitches$1.KEY, AudioVoSelectedSwitches$1.Entry);
            return collection.find(entry => entry.key === this._selectedVoTertiary);
        }
        get groundStatEffectGroup() {
            const collection = this.collectionCache.getCollection(GroundTypeStatEffectGroups.KEY, GroundTypeStatEffectGroups.Entry);
            return collection.find(entry => entry.groupName === this._groundStatEffectGroup);
        }
        get aiUsageGroup() {
            const collection = this.collectionCache.getCollection(AiUsageGroups.KEY, AiUsageGroups.Entry);
            return collection.find(entry => entry.key === this._aiUsageGroup);
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
    }
    LandUnits.Entry = Entry;
})(LandUnits$1 || (LandUnits$1 = {}));

var ModelsOars$1;
(function (ModelsOars) {
    ModelsOars.KEY = new CollectionKey("models_oars");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.rigidModel = values["rigid_model"];
            this.leftRow = values["left_row"];
            this.leftEnd = values["left_end"];
            this.rightRow = values["right_row"];
            this.rightEnd = values["right_end"];
        }
    }
    ModelsOars.Entry = Entry;
})(ModelsOars$1 || (ModelsOars$1 = {}));

var ModelsNaval$1;
(function (ModelsNaval) {
    ModelsNaval.KEY = new CollectionKey("models_naval");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.logicFolder = values["logic_folder"];
            this.riggingFile = values["rigging_file"];
            this.destructionFile = values["destruction_file"];
            this.displayFolder = values["display_folder"];
            this._oarUpper = values["oar_upper"];
            this._oarMiddle = values["oar_middle"];
            this._oarLower = values["oar_lower"];
            this.selectionIndicatorShape = values["selection_indicator_shape"];
        }
        get oarUpper() {
            const collection = this.collectionCache.getCollection(ModelsOars$1.KEY, ModelsOars$1.Entry);
            return collection.find(entry => entry.key === this._oarUpper);
        }
        get oarMiddle() {
            const collection = this.collectionCache.getCollection(ModelsOars$1.KEY, ModelsOars$1.Entry);
            return collection.find(entry => entry.key === this._oarMiddle);
        }
        get oarLower() {
            const collection = this.collectionCache.getCollection(ModelsOars$1.KEY, ModelsOars$1.Entry);
            return collection.find(entry => entry.key === this._oarLower);
        }
    }
    ModelsNaval.Entry = Entry;
})(ModelsNaval$1 || (ModelsNaval$1 = {}));

var ShipDbs$1;
(function (ShipDbs) {
    ShipDbs.KEY = new CollectionKey("ship_dbs");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._spacing = values["spacing"];
            this._entity = values["entity"];
            this._model = values["model"];
        }
        get spacing() {
            const collection = this.collectionCache.getCollection(UnitSpacings$1.KEY, UnitSpacings$1.Entry);
            return collection.find(entry => entry.key === this._spacing);
        }
        get entity() {
            const collection = this.collectionCache.getCollection(BattleEntities$1.KEY, BattleEntities$1.Entry);
            return collection.find(entry => entry.key === this._entity);
        }
        get model() {
            const collection = this.collectionCache.getCollection(ModelsNaval$1.KEY, ModelsNaval$1.Entry);
            return collection.find(entry => entry.key === this._model);
        }
    }
    ShipDbs.Entry = Entry;
})(ShipDbs$1 || (ShipDbs$1 = {}));

var NavalWeaponsEnums$1;
(function (NavalWeaponsEnums) {
    NavalWeaponsEnums.KEY = new CollectionKey("naval_weapons_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.types = values["types"];
        }
    }
    NavalWeaponsEnums.Entry = Entry;
})(NavalWeaponsEnums$1 || (NavalWeaponsEnums$1 = {}));

var BattlefieldEnginesAutonomous$1;
(function (BattlefieldEnginesAutonomous) {
    BattlefieldEnginesAutonomous.KEY = new CollectionKey("battlefield_engines_autonomous");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._autonomousEngineType = values["autonomous_engine_type"];
            this._engineCrewEntity = values["engine_crew_entity"];
            this._engineCrewAnims = values["engine_crew_anims"];
            this.numAmmo = values["num_ammo"];
        }
        get autonomousEngineType() {
            const collection = this.collectionCache.getCollection(BattlefieldEngines$1.KEY, BattlefieldEngines$1.Entry);
            return collection.find(entry => entry.key === this._autonomousEngineType);
        }
        get engineCrewEntity() {
            const collection = this.collectionCache.getCollection(BattleEntities$1.KEY, BattleEntities$1.Entry);
            return collection.find(entry => entry.key === this._engineCrewEntity);
        }
        get engineCrewAnims() {
            const collection = this.collectionCache.getCollection(BattleAnimationsTable$1.KEY, BattleAnimationsTable$1.Entry);
            return collection.find(entry => entry.key === this._engineCrewAnims);
        }
    }
    BattlefieldEnginesAutonomous.Entry = Entry;
})(BattlefieldEnginesAutonomous$1 || (BattlefieldEnginesAutonomous$1 = {}));

var ModelsEntityWeapons$1;
(function (ModelsEntityWeapons) {
    ModelsEntityWeapons.KEY = new CollectionKey("models_entity_weapons");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.modelFile = values["model_file"];
            this.logicFile = values["logic_file"];
        }
    }
    ModelsEntityWeapons.Entry = Entry;
})(ModelsEntityWeapons$1 || (ModelsEntityWeapons$1 = {}));

var NavalWeapons$1;
(function (NavalWeapons) {
    NavalWeapons.KEY = new CollectionKey("naval_weapons");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._type = values["type"];
            this._autonomousEngine = values["autonomous_engine"];
            this._modelsEntityWeaponry = values["models_entity_weaponry"];
            this.isPrimaryUnitAttack = !!values["is_primary_unit_attack"];
        }
        get type() {
            const collection = this.collectionCache.getCollection(NavalWeaponsEnums$1.KEY, NavalWeaponsEnums$1.Entry);
            return collection.find(entry => entry.types === this._type);
        }
        get autonomousEngine() {
            const collection = this.collectionCache.getCollection(BattlefieldEnginesAutonomous$1.KEY, BattlefieldEnginesAutonomous$1.Entry);
            return collection.find(entry => entry.key === this._autonomousEngine);
        }
        get modelsEntityWeaponry() {
            const collection = this.collectionCache.getCollection(ModelsEntityWeapons$1.KEY, ModelsEntityWeapons$1.Entry);
            return collection.find(entry => entry.key === this._modelsEntityWeaponry);
        }
    }
    NavalWeapons.Entry = Entry;
})(NavalWeapons$1 || (NavalWeapons$1 = {}));

var NavalUnits$1;
(function (NavalUnits) {
    NavalUnits.KEY = new CollectionKey("naval_units");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreenName = values["onscreen_name"];
            this._category = values["category"];
            this._class = values["class"];
            this._shortDescriptionText = values["short_description_text"];
            this._historicalDescriptionText = values["historical_description_text"];
            this._strengthsWeaknessesText = values["strengths_weaknesses_text"];
            this.campaignActionPoints = values["campaign_action_points"];
            this.unitTypeIcon = values["unit_type_icon"];
            this.supportsFirstPerson = !!values["supports_first_person"];
            this._ship = values["ship"];
            this._primaryNavalWeapon = values["primary_naval_weapon"];
            this._secondaryNavalWeapon = values["secondary_naval_weapon"];
            this.rankDepth = values["rank_depth"];
            this._attributeGroups = values["attribute_groups"];
            this.canBoard = !!values["can_board"];
            this.unitCard = values["unit_card"];
            this.isComposite = !!values["is_composite"];
            this.ignitionThreshold = values["ignition_threshold"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(UnitCategory$1.KEY, UnitCategory$1.Entry);
            return collection.find(entry => entry.key === this._category);
        }
        get class() {
            const collection = this.collectionCache.getCollection(UnitClass$1.KEY, UnitClass$1.Entry);
            return collection.find(entry => entry.key === this._class);
        }
        get shortDescriptionText() {
            const collection = this.collectionCache.getCollection(UnitDescriptionShortTexts$1.KEY, UnitDescriptionShortTexts$1.Entry);
            return collection.find(entry => entry.key === this._shortDescriptionText);
        }
        get historicalDescriptionText() {
            const collection = this.collectionCache.getCollection(UnitDescriptionHistoricalTexts$1.KEY, UnitDescriptionHistoricalTexts$1.Entry);
            return collection.find(entry => entry.key === this._historicalDescriptionText);
        }
        get strengthsWeaknessesText() {
            const collection = this.collectionCache.getCollection(UnitDescriptionStrengthsWeaknessesTexts$1.KEY, UnitDescriptionStrengthsWeaknessesTexts$1.Entry);
            return collection.find(entry => entry.key === this._strengthsWeaknessesText);
        }
        get ship() {
            const collection = this.collectionCache.getCollection(ShipDbs$1.KEY, ShipDbs$1.Entry);
            return collection.find(entry => entry.key === this._ship);
        }
        get primaryNavalWeapon() {
            const collection = this.collectionCache.getCollection(NavalWeapons$1.KEY, NavalWeapons$1.Entry);
            return collection.find(entry => entry.key === this._primaryNavalWeapon);
        }
        get secondaryNavalWeapon() {
            const collection = this.collectionCache.getCollection(NavalWeapons$1.KEY, NavalWeapons$1.Entry);
            return collection.find(entry => entry.key === this._secondaryNavalWeapon);
        }
        get attributeGroups() {
            const collection = this.collectionCache.getCollection(UnitAttributesGroups$1.KEY, UnitAttributesGroups$1.Entry);
            return collection.find(entry => entry.groupName === this._attributeGroups);
        }
    }
    NavalUnits.Entry = Entry;
})(NavalUnits$1 || (NavalUnits$1 = {}));

var UnitWeights$1;
(function (UnitWeights) {
    UnitWeights.KEY = new CollectionKey("unit_weights");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreenText = values["onscreen_text"];
        }
    }
    UnitWeights.Entry = Entry;
})(UnitWeights$1 || (UnitWeights$1 = {}));

var UnitCastes$1;
(function (UnitCastes) {
    UnitCastes.KEY = new CollectionKey("unit_castes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.caste = values["caste"];
            this.localisedName = values["localised_name"];
            this.sortPriority = values["sort_priority"];
        }
    }
    UnitCastes.Entry = Entry;
})(UnitCastes$1 || (UnitCastes$1 = {}));

var BuildingSuperchains$1;
(function (BuildingSuperchains) {
    BuildingSuperchains.KEY = new CollectionKey("building_superchains");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    BuildingSuperchains.Entry = Entry;
})(BuildingSuperchains$1 || (BuildingSuperchains$1 = {}));

var EncyclopediaBuildingChainGroups$1;
(function (EncyclopediaBuildingChainGroups) {
    EncyclopediaBuildingChainGroups.KEY = new CollectionKey("encyclopedia_building_chain_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.groupName = values["group_name"];
            this.localisedName = values["localised_name"];
            this.order = values["order"];
        }
    }
    EncyclopediaBuildingChainGroups.Entry = Entry;
})(EncyclopediaBuildingChainGroups$1 || (EncyclopediaBuildingChainGroups$1 = {}));

var AudioVoActors$1;
(function (AudioVoActors) {
    AudioVoActors.KEY = new CollectionKey("audio_vo_actors");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._gameExpansionKey = values["game_expansion_key"];
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
    }
    AudioVoActors.Entry = Entry;
})(AudioVoActors$1 || (AudioVoActors$1 = {}));

var AudioVoActorGroups$1;
(function (AudioVoActorGroups) {
    AudioVoActorGroups.KEY = new CollectionKey("audio_vo_actor_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
            this._voActor1 = values["vo_actor_1"];
            this._voActor2 = values["vo_actor_2"];
            this._voActor3 = values["vo_actor_3"];
            this._voActor4 = values["vo_actor_4"];
            this._voActor5 = values["vo_actor_5"];
            this._voActor6 = values["vo_actor_6"];
            this._voActor7 = values["vo_actor_7"];
            this._voActor8 = values["vo_actor_8"];
            this._voActor9 = values["vo_actor_9"];
            this._voActor10 = values["vo_actor_10"];
            this._voActor11 = values["vo_actor_11"];
            this._voActor12 = values["vo_actor_12"];
            this._voActor13 = values["vo_actor_13"];
            this._voActor14 = values["vo_actor_14"];
            this._voActor15 = values["vo_actor_15"];
            this.cooldownOverlap = values["cooldown_overlap"];
        }
        get voActor1() {
            const collection = this.collectionCache.getCollection(AudioVoActors$1.KEY, AudioVoActors$1.Entry);
            return collection.find(entry => entry.key === this._voActor1);
        }
        get voActor2() {
            const collection = this.collectionCache.getCollection(AudioVoActors$1.KEY, AudioVoActors$1.Entry);
            return collection.find(entry => entry.key === this._voActor2);
        }
        get voActor3() {
            const collection = this.collectionCache.getCollection(AudioVoActors$1.KEY, AudioVoActors$1.Entry);
            return collection.find(entry => entry.key === this._voActor3);
        }
        get voActor4() {
            const collection = this.collectionCache.getCollection(AudioVoActors$1.KEY, AudioVoActors$1.Entry);
            return collection.find(entry => entry.key === this._voActor4);
        }
        get voActor5() {
            const collection = this.collectionCache.getCollection(AudioVoActors$1.KEY, AudioVoActors$1.Entry);
            return collection.find(entry => entry.key === this._voActor5);
        }
        get voActor6() {
            const collection = this.collectionCache.getCollection(AudioVoActors$1.KEY, AudioVoActors$1.Entry);
            return collection.find(entry => entry.key === this._voActor6);
        }
        get voActor7() {
            const collection = this.collectionCache.getCollection(AudioVoActors$1.KEY, AudioVoActors$1.Entry);
            return collection.find(entry => entry.key === this._voActor7);
        }
        get voActor8() {
            const collection = this.collectionCache.getCollection(AudioVoActors$1.KEY, AudioVoActors$1.Entry);
            return collection.find(entry => entry.key === this._voActor8);
        }
        get voActor9() {
            const collection = this.collectionCache.getCollection(AudioVoActors$1.KEY, AudioVoActors$1.Entry);
            return collection.find(entry => entry.key === this._voActor9);
        }
        get voActor10() {
            const collection = this.collectionCache.getCollection(AudioVoActors$1.KEY, AudioVoActors$1.Entry);
            return collection.find(entry => entry.key === this._voActor10);
        }
        get voActor11() {
            const collection = this.collectionCache.getCollection(AudioVoActors$1.KEY, AudioVoActors$1.Entry);
            return collection.find(entry => entry.key === this._voActor11);
        }
        get voActor12() {
            const collection = this.collectionCache.getCollection(AudioVoActors$1.KEY, AudioVoActors$1.Entry);
            return collection.find(entry => entry.key === this._voActor12);
        }
        get voActor13() {
            const collection = this.collectionCache.getCollection(AudioVoActors$1.KEY, AudioVoActors$1.Entry);
            return collection.find(entry => entry.key === this._voActor13);
        }
        get voActor14() {
            const collection = this.collectionCache.getCollection(AudioVoActors$1.KEY, AudioVoActors$1.Entry);
            return collection.find(entry => entry.key === this._voActor14);
        }
        get voActor15() {
            const collection = this.collectionCache.getCollection(AudioVoActors$1.KEY, AudioVoActors$1.Entry);
            return collection.find(entry => entry.key === this._voActor15);
        }
    }
    AudioVoActorGroups.Entry = Entry;
})(AudioVoActorGroups$1 || (AudioVoActorGroups$1 = {}));

var AgentSubtypes;
(function (AgentSubtypes) {
    AgentSubtypes.KEY = new CollectionKey("agent_subtypes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.autoGenerate = !!values["auto_generate"];
            this.onscreenNameOverride = values["onscreen_name_override"];
            this.isCaster = !!values["is_caster"];
            this.smallIcon = values["small_icon"];
            this._associatedUnitOverride = values["associated_unit_override"];
            this.descriptionTextOverride = values["description_text_override"];
            this._audioVoiceoverActorGroup = values["audio_voiceover_actor_group"];
            this.showInUi = !!values["show_in_ui"];
            this.cap = values["cap"];
            this.hasFemaleName = !!values["has_female_name"];
            this.canGainXp = !!values["can_gain_xp"];
            this.loyaltyIsApplicable = !!values["loyalty_is_applicable"];
            this.contributesToAgentCap = !!values["contributes_to_agent_cap"];
        }
        get associatedUnitOverride() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._associatedUnitOverride);
        }
        get audioVoiceoverActorGroup() {
            const collection = this.collectionCache.getCollection(AudioVoActorGroups$1.KEY, AudioVoActorGroups$1.Entry);
            return collection.find(entry => entry.name === this._audioVoiceoverActorGroup);
        }
    }
    AgentSubtypes.Entry = Entry;
})(AgentSubtypes || (AgentSubtypes = {}));

var BuildingChains$1;
(function (BuildingChains) {
    BuildingChains.KEY = new CollectionKey("building_chains");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.techCategoryTab = values["tech_category_tab"];
            this.techCategoryPosition = values["tech_category_position"];
            this.chainCategory = values["chain_category"];
            this.chainTooltip = values["chain_tooltip"];
            this.inEncyclopedia = !!values["in_encyclopedia"];
            this._buildingSuperchain = values["building_superchain"];
            this.encyclopediaDescription = values["encyclopedia_description"];
            this._encyclopediaGroup = values["encyclopedia_group"];
            this.encyclopediaIncludeInIndex = !!values["encyclopedia_include_in_index"];
            this.encyclopediaName = values["encyclopedia_name"];
            this.optionalTierIcon = values["optional_tier_icon"];
            this.optionalSortOrder = values["optional_sort_order"];
            this._optionalRequiredHordeCommander = values["optional_required_horde_commander"];
        }
        get buildingSuperchain() {
            const collection = this.collectionCache.getCollection(BuildingSuperchains$1.KEY, BuildingSuperchains$1.Entry);
            return collection.find(entry => entry.key === this._buildingSuperchain);
        }
        get encyclopediaGroup() {
            const collection = this.collectionCache.getCollection(EncyclopediaBuildingChainGroups$1.KEY, EncyclopediaBuildingChainGroups$1.Entry);
            return collection.find(entry => entry.groupName === this._encyclopediaGroup);
        }
        get optionalRequiredHordeCommander() {
            const collection = this.collectionCache.getCollection(AgentSubtypes.KEY, AgentSubtypes.Entry);
            return collection.find(entry => entry.key === this._optionalRequiredHordeCommander);
        }
    }
    BuildingChains.Entry = Entry;
})(BuildingChains$1 || (BuildingChains$1 = {}));

var CommodityUnitNames$1;
(function (CommodityUnitNames) {
    CommodityUnitNames.KEY = new CollectionKey("commodity_unit_names");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.unit = values["unit"];
            this.plural = values["plural"];
            this.singular = values["singular"];
        }
    }
    CommodityUnitNames.Entry = Entry;
})(CommodityUnitNames$1 || (CommodityUnitNames$1 = {}));

var Resources$1;
(function (Resources) {
    Resources.KEY = new CollectionKey("resources");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.iconFilepath = values["icon_filepath"];
            this.key = values["key"];
            this.onscreenText = values["onscreen_text"];
            this._unit = values["unit"];
            this.tradeValue = values["trade_value"];
            this.strategicValue = values["strategic_value"];
            this.description = values["description"];
            this.longDescription = values["long_description"];
            this.inEncyclopedia = !!values["in_encyclopedia"];
            this.showOnCityInfobar = !!values["show_on_city_infobar"];
        }
        get unit() {
            const collection = this.collectionCache.getCollection(CommodityUnitNames$1.KEY, CommodityUnitNames$1.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
    }
    Resources.Entry = Entry;
})(Resources$1 || (Resources$1 = {}));

var Commodities$1;
(function (Commodities) {
    Commodities.KEY = new CollectionKey("commodities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this.baselinePricePerUnit = values["baseline_price_per_unit"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(Resources$1.KEY, Resources$1.Entry);
            return collection.find(entry => entry.key === this._key);
        }
    }
    Commodities.Entry = Entry;
})(Commodities$1 || (Commodities$1 = {}));

var BuildingInstances$1;
(function (BuildingInstances) {
    BuildingInstances.KEY = new CollectionKey("building_instances");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.numInstances = values["num_instances"];
        }
    }
    BuildingInstances.Entry = Entry;
})(BuildingInstances$1 || (BuildingInstances$1 = {}));

var AudioCampaignBuildings;
(function (AudioCampaignBuildings) {
    AudioCampaignBuildings.KEY = new CollectionKey("audio_campaign_buildings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.ambienceStartEvent = values["ambience_start_event"];
            this.ambienceStopEvent = values["ambience_stop_event"];
            this.ambienceOnlyPlayIfPrimary = !!values["ambience_only_play_if_primary"];
            this.ambienceOnlyPlayIfPort = !!values["ambience_only_play_if_port"];
            this.oneShotEvent = values["one_shot_event"];
            this.oneShotMinTime = values["one_shot_min_time"];
            this.oneShotMaxTime = values["one_shot_max_time"];
            this.oneShotOnlyPlayIfPrimary = !!values["one_shot_only_play_if_primary"];
            this.oneShotOnlyPlayIfPort = !!values["one_shot_only_play_if_port"];
            this.selectedEvent = values["selected_event"];
        }
    }
    AudioCampaignBuildings.Entry = Entry;
})(AudioCampaignBuildings || (AudioCampaignBuildings = {}));

var BuildingLevels$1;
(function (BuildingLevels) {
    BuildingLevels.KEY = new CollectionKey("building_levels");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.levelName = values["level_name"];
            this._chain = values["chain"];
            this.level = values["level"];
            this.onlyInCapital = !!values["only_in_capital"];
            this.createTime = values["create_time"];
            this.createCost = values["create_cost"];
            this.upkeepCost = values["upkeep_cost"];
            this._commodity = values["commodity"];
            this.commodityVol = values["commodity_vol"];
            this.militaryPrestige = values["military_prestige"];
            this.navalPrestige = values["naval_prestige"];
            this.economicPrestige = values["economic_prestige"];
            this.enlightenmentPrestige = values["enlightenment_prestige"];
            this.factionUnique = !!values["faction_unique"];
            this._religionRequirement = values["religion_requirement"];
            this._firstInWorldBundle = values["first_in_world_bundle"];
            this._resourceRequirement = values["resource_requirement"];
            this.canConvert = !!values["can_convert"];
            this._buildingInstanceKey = values["building_instance_key"];
            this._audioBuildingType = values["audio_building_type"];
            this.shouldShowBuildingLevelInUiForTechnology = !!values["should_show_building_level_in_ui_for_technology"];
            this.healthOverride = values["health_override"];
            this.developmentPointCost = values["development_point_cost"];
            this.canBeDamaged = !!values["can_be_damaged"];
            this.primarySlotBuildingBuildingLevelRequirement = values["primary_slot_building_building_level_requirement"];
            this.visibleInUi = !!values["visible_in_ui"];
            this.foodCost = values["food_cost"];
            this.slaveCapContribution = values["slave_cap_contribution"];
        }
        get chain() {
            const collection = this.collectionCache.getCollection(BuildingChains$1.KEY, BuildingChains$1.Entry);
            return collection.find(entry => entry.key === this._chain);
        }
        get commodity() {
            const collection = this.collectionCache.getCollection(Commodities$1.KEY, Commodities$1.Entry);
            return collection.find(entry => entry._key === this._commodity);
        }
        get religionRequirement() {
            const collection = this.collectionCache.getCollection(Religions$1.KEY, Religions$1.Entry);
            return collection.find(entry => entry.religionKey === this._religionRequirement);
        }
        get firstInWorldBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._firstInWorldBundle);
        }
        get resourceRequirement() {
            const collection = this.collectionCache.getCollection(Resources$1.KEY, Resources$1.Entry);
            return collection.find(entry => entry.key === this._resourceRequirement);
        }
        get buildingInstanceKey() {
            const collection = this.collectionCache.getCollection(BuildingInstances$1.KEY, BuildingInstances$1.Entry);
            return collection.find(entry => entry.key === this._buildingInstanceKey);
        }
        get audioBuildingType() {
            const collection = this.collectionCache.getCollection(AudioCampaignBuildings.KEY, AudioCampaignBuildings.Entry);
            return collection.find(entry => entry.key === this._audioBuildingType);
        }
    }
    BuildingLevels.Entry = Entry;
})(BuildingLevels$1 || (BuildingLevels$1 = {}));

var RegionUnitResources$1;
(function (RegionUnitResources) {
    RegionUnitResources.KEY = new CollectionKey("region_unit_resources");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.string = values["string"];
        }
    }
    RegionUnitResources.Entry = Entry;
})(RegionUnitResources$1 || (RegionUnitResources$1 = {}));

var UiUnitGroupParents;
(function (UiUnitGroupParents) {
    UiUnitGroupParents.KEY = new CollectionKey("ui_unit_group_parents");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreenName = values["onscreen_name"];
            this.icon = values["icon"];
            this.order = values["order"];
            this.mpCap = values["mp_cap"];
        }
    }
    UiUnitGroupParents.Entry = Entry;
})(UiUnitGroupParents || (UiUnitGroupParents = {}));

var UiUnitGroupings;
(function (UiUnitGroupings) {
    UiUnitGroupings.KEY = new CollectionKey("ui_unit_groupings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreen = values["onscreen"];
            this.icon = values["icon"];
            this.tooltip = values["tooltip"];
            this._parentGroup = values["parent_group"];
        }
        get parentGroup() {
            const collection = this.collectionCache.getCollection(UiUnitGroupParents.KEY, UiUnitGroupParents.Entry);
            return collection.find(entry => entry.key === this._parentGroup);
        }
    }
    UiUnitGroupings.Entry = Entry;
})(UiUnitGroupings || (UiUnitGroupings = {}));

var CampaignAnimSetEnums$1;
(function (CampaignAnimSetEnums) {
    CampaignAnimSetEnums.KEY = new CollectionKey("campaign_anim_set_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
            this.skeleton = values["skeleton"];
        }
    }
    CampaignAnimSetEnums.Entry = Entry;
})(CampaignAnimSetEnums$1 || (CampaignAnimSetEnums$1 = {}));

var CampaignMounts;
(function (CampaignMounts) {
    CampaignMounts.KEY = new CollectionKey("campaign_mounts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.model = values["model"];
            this._animationSet = values["animation_set"];
            this._variant = values["variant"];
            this.scale = values["scale"];
            this._actor = values["actor"];
            this.ignoreRiderVariantScale = !!values["ignore_rider_variant_scale"];
            this.vfxFilter = values["vfx_filter"];
            this.bannerRelativeToMount = !!values["banner_relative_to_mount"];
        }
        get animationSet() {
            const collection = this.collectionCache.getCollection(CampaignAnimSetEnums$1.KEY, CampaignAnimSetEnums$1.Entry);
            return collection.find(entry => entry.name === this._animationSet);
        }
        get variant() {
            const collection = this.collectionCache.getCollection(Variants$1.KEY, Variants$1.Entry);
            return collection.find(entry => entry.variantName === this._variant);
        }
        get actor() {
            const collection = this.collectionCache.getCollection(AudioVoiceoverCultures.KEY, AudioVoiceoverCultures.Entry);
            return collection.find(entry => entry.name === this._actor);
        }
    }
    CampaignMounts.Entry = Entry;
})(CampaignMounts || (CampaignMounts = {}));

var MainUnits$1;
(function (MainUnits) {
    MainUnits.KEY = new CollectionKey("main_units");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.unit = values["unit"];
            this._landUnit = values["land_unit"];
            this.numMen = values["num_men"];
            this._navalUnit = values["naval_unit"];
            this.numShips = values["num_ships"];
            this.minMenPerShip = values["min_men_per_ship"];
            this.maxMenPerShip = values["max_men_per_ship"];
            this.isNaval = !!values["is_naval"];
            this._weight = values["weight"];
            this.recruitmentCost = values["recruitment_cost"];
            this.upkeepCost = values["upkeep_cost"];
            this.createTime = values["create_time"];
            this.campaignCap = values["campaign_cap"];
            this.multiplayerCost = values["multiplayer_cost"];
            this.multiplayerCap = values["multiplayer_cap"];
            this._caste = values["caste"];
            this.prestige = values["prestige"];
            this._additionalBuildingRequirement = values["additional_building_requirement"];
            this._religionRequirement = values["religion_requirement"];
            this.recruitmentMovie = values["recruitment_movie"];
            this._resourceRequirement = values["resource_requirement"];
            this.worldLeaderOnly = !!values["world_leader_only"];
            this.canTrade = !!values["can_trade"];
            this.specialEditionMask = values["special_edition_mask"];
            this.uniqueIndex = values["unique_index"];
            this.inEncyclopedia = !!values["in_encyclopedia"];
            this._regionUnitResourceRequirement = values["region_unit_resource_requirement"];
            this._audioVoiceoverCulture = values["audio_voiceover_culture"];
            this._uiUnitGroupLand = values["ui_unit_group_land"];
            this._uiUnitGroupNaval = values["ui_unit_group_naval"];
            this.tier = values["tier"];
            this.isHighThreat = !!values["is_high_threat"];
            this._portholeCamera = values["porthole_camera"];
            this._mount = values["mount"];
            this.useHitpointsInCampaign = !!values["use_hitpoints_in_campaign"];
            this.unitScaling = !!values["unit_scaling"];
            this.portholeCompositeScene = values["porthole_composite_scene"];
            this.meleeCp = values["melee_cp"];
            this.missileCp = values["missile_cp"];
            this.canSiege = !!values["can_siege"];
            this._audioVoiceoverCultureOverride = values["audio_voiceover_culture_override"];
            this.restrictXpGainInCampaign = !!values["restrict_xp_gain_in_campaign"];
            this._audioVoiceoverActorGroup = values["audio_voiceover_actor_group"];
            this.foodCost = values["food_cost"];
            this.hasSpokenVo = !!values["has_spoken_vo"];
            this.isMonstrous = !!values["is_monstrous"];
            this.multiplayerQbCap = values["multiplayer_qb_cap"];
            this.voIsDragon = !!values["vo_is_dragon"];
            this.voIsDinosaur = !!values["vo_is_dinosaur"];
            this.optionalUiElement = values["optional_ui_element"];
        }
        get landUnit() {
            const collection = this.collectionCache.getCollection(LandUnits$1.KEY, LandUnits$1.Entry);
            return collection.find(entry => entry.key === this._landUnit);
        }
        get navalUnit() {
            const collection = this.collectionCache.getCollection(NavalUnits$1.KEY, NavalUnits$1.Entry);
            return collection.find(entry => entry.key === this._navalUnit);
        }
        get weight() {
            const collection = this.collectionCache.getCollection(UnitWeights$1.KEY, UnitWeights$1.Entry);
            return collection.find(entry => entry.key === this._weight);
        }
        get caste() {
            const collection = this.collectionCache.getCollection(UnitCastes$1.KEY, UnitCastes$1.Entry);
            return collection.find(entry => entry.caste === this._caste);
        }
        get additionalBuildingRequirement() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._additionalBuildingRequirement);
        }
        get religionRequirement() {
            const collection = this.collectionCache.getCollection(Religions$1.KEY, Religions$1.Entry);
            return collection.find(entry => entry.religionKey === this._religionRequirement);
        }
        get resourceRequirement() {
            const collection = this.collectionCache.getCollection(Resources$1.KEY, Resources$1.Entry);
            return collection.find(entry => entry.key === this._resourceRequirement);
        }
        get regionUnitResourceRequirement() {
            const collection = this.collectionCache.getCollection(RegionUnitResources$1.KEY, RegionUnitResources$1.Entry);
            return collection.find(entry => entry.key === this._regionUnitResourceRequirement);
        }
        get audioVoiceoverCulture() {
            const collection = this.collectionCache.getCollection(AudioVoiceoverCultures.KEY, AudioVoiceoverCultures.Entry);
            return collection.find(entry => entry.name === this._audioVoiceoverCulture);
        }
        get uiUnitGroupLand() {
            const collection = this.collectionCache.getCollection(UiUnitGroupings.KEY, UiUnitGroupings.Entry);
            return collection.find(entry => entry.key === this._uiUnitGroupLand);
        }
        get uiUnitGroupNaval() {
            const collection = this.collectionCache.getCollection(UiUnitGroupings.KEY, UiUnitGroupings.Entry);
            return collection.find(entry => entry.key === this._uiUnitGroupNaval);
        }
        get portholeCamera() {
            const collection = this.collectionCache.getCollection(UnitPortholeCameraSettings.KEY, UnitPortholeCameraSettings.Entry);
            return collection.find(entry => entry.key === this._portholeCamera);
        }
        get mount() {
            const collection = this.collectionCache.getCollection(CampaignMounts.KEY, CampaignMounts.Entry);
            return collection.find(entry => entry.model === this._mount);
        }
        get audioVoiceoverCultureOverride() {
            const collection = this.collectionCache.getCollection(AudioVoiceoverCultures.KEY, AudioVoiceoverCultures.Entry);
            return collection.find(entry => entry.name === this._audioVoiceoverCultureOverride);
        }
        get audioVoiceoverActorGroup() {
            const collection = this.collectionCache.getCollection(AudioVoActorGroups$1.KEY, AudioVoActorGroups$1.Entry);
            return collection.find(entry => entry.name === this._audioVoiceoverActorGroup);
        }
    }
    MainUnits.Entry = Entry;
})(MainUnits$1 || (MainUnits$1 = {}));

var MovieEvents;
(function (MovieEvents) {
    MovieEvents.KEY = new CollectionKey("movie_events");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.event = values["event"];
        }
    }
    MovieEvents.Entry = Entry;
})(MovieEvents || (MovieEvents = {}));

var MovieEventStrings$1;
(function (MovieEventStrings) {
    MovieEventStrings.KEY = new CollectionKey("movie_event_strings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._event = values["event"];
            this._culture = values["culture"];
            this.title = values["title"];
            this.movie = values["movie"];
            this.id = values["id"];
        }
        get event() {
            const collection = this.collectionCache.getCollection(MovieEvents.KEY, MovieEvents.Entry);
            return collection.find(entry => entry.event === this._event);
        }
    }
    MovieEventStrings.Entry = Entry;
})(MovieEventStrings$1 || (MovieEventStrings$1 = {}));

var Genders$1;
(function (Genders) {
    Genders.KEY = new CollectionKey("genders");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.gender = values["gender"];
            this.onscreen = values["onscreen"];
        }
    }
    Genders.Entry = Entry;
})(Genders$1 || (Genders$1 = {}));

var AgentCultureDetails$1;
(function (AgentCultureDetails) {
    AgentCultureDetails.KEY = new CollectionKey("agent_culture_details");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._agent = values["agent"];
            this._culture = values["culture"];
            this.onscreenName = values["onscreen_name"];
            this._associatedUnit = values["associated_unit"];
            this.descriptionText = values["description_text"];
            this.season = values["season"];
            this.level = values["level"];
            this._agentRecruitedMovie = values["agent_recruited_movie"];
            this._gender = values["gender"];
            this.icon = values["icon"];
            this.smallIcon = values["small_icon"];
            this.recruitableInUi = !!values["recruitable_in_ui"];
        }
        get agent() {
            const collection = this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry);
            return collection.find(entry => entry.key === this._agent);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get associatedUnit() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._associatedUnit);
        }
        get agentRecruitedMovie() {
            const collection = this.collectionCache.getCollection(MovieEventStrings$1.KEY, MovieEventStrings$1.Entry);
            return collection.find(entry => entry._event === this._agentRecruitedMovie);
        }
        get gender() {
            const collection = this.collectionCache.getCollection(Genders$1.KEY, Genders$1.Entry);
            return collection.find(entry => entry.gender === this._gender);
        }
    }
    AgentCultureDetails.Entry = Entry;
})(AgentCultureDetails$1 || (AgentCultureDetails$1 = {}));

var AgentLocalisations$1;
(function (AgentLocalisations) {
    AgentLocalisations.KEY = new CollectionKey("agent_localisations");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.text = values["text"];
        }
    }
    AgentLocalisations.Entry = Entry;
})(AgentLocalisations$1 || (AgentLocalisations$1 = {}));

var NamesGroups$1;
(function (NamesGroups) {
    NamesGroups.KEY = new CollectionKey("names_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["ID"];
            this.description = values["Description"];
            this.key = values["key"];
            this._gameExpansionKey = values["game_expansion_key"];
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
    }
    NamesGroups.Entry = Entry;
})(NamesGroups$1 || (NamesGroups$1 = {}));

var UnitBanners;
(function (UnitBanners) {
    UnitBanners.KEY = new CollectionKey("unit_banners");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.factionOffsetX = values["faction_offset_x"];
            this.factionOffsetY = values["faction_offset_y"];
            this.factionScaleX = values["faction_scale_x"];
            this.factionScaleY = values["faction_scale_y"];
            this.unitcatOffsetX = values["unitcat_offset_x"];
            this.unitcatOffsetY = values["unitcat_offset_y"];
            this.unitcatScaleX = values["unitcat_scale_x"];
            this.unitcatScaleY = values["unitcat_scale_y"];
            this.commandStarOffsetX = values["command_star_offset_x"];
            this.commandStarOffsetY = values["command_star_offset_y"];
            this.armyIdOffsetY = values["army_id_offset_y"];
            this.animationName = values["animation_name"];
            this.unitIdOffsetY = values["unit_id_offset_y"];
        }
    }
    UnitBanners.Entry = Entry;
})(UnitBanners || (UnitBanners = {}));

var GroupingsMilitary$1;
(function (GroupingsMilitary) {
    GroupingsMilitary.KEY = new CollectionKey("groupings_military");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.militaryGroup = values["military_group"];
        }
    }
    GroupingsMilitary.Entry = Entry;
})(GroupingsMilitary$1 || (GroupingsMilitary$1 = {}));

var PreBattleSpeechParametersEnum$1;
(function (PreBattleSpeechParametersEnum) {
    PreBattleSpeechParametersEnum.KEY = new CollectionKey("pre_battle_speech_parameters_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    PreBattleSpeechParametersEnum.Entry = Entry;
})(PreBattleSpeechParametersEnum$1 || (PreBattleSpeechParametersEnum$1 = {}));

var MpForceGenTemplates$1;
(function (MpForceGenTemplates) {
    MpForceGenTemplates.KEY = new CollectionKey("mp_force_gen_templates");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    MpForceGenTemplates.Entry = Entry;
})(MpForceGenTemplates$1 || (MpForceGenTemplates$1 = {}));

var CdirMilitaryGeneratorConfigs$1;
(function (CdirMilitaryGeneratorConfigs) {
    CdirMilitaryGeneratorConfigs.KEY = new CollectionKey("cdir_military_generator_configs");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._gameExpansionKey = values["game_expansion_key"];
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
    }
    CdirMilitaryGeneratorConfigs.Entry = Entry;
})(CdirMilitaryGeneratorConfigs$1 || (CdirMilitaryGeneratorConfigs$1 = {}));

var FactionFeatureForests;
(function (FactionFeatureForests) {
    FactionFeatureForests.KEY = new CollectionKey("faction_feature_forests");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    FactionFeatureForests.Entry = Entry;
})(FactionFeatureForests || (FactionFeatureForests = {}));

var FactionSets;
(function (FactionSets) {
    FactionSets.KEY = new CollectionKey("faction_sets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    FactionSets.Entry = Entry;
})(FactionSets || (FactionSets = {}));

var Factions$1;
(function (Factions) {
    Factions.KEY = new CollectionKey("factions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.index = values["index"];
            this._subculture = values["subculture"];
            this.category = values["category"];
            this.screenName = values["screen_name"];
            this.screenNameWhenRebels = values["screen_name_when_rebels"];
            this.screenAdjective = values["screen_adjective"];
            this._nameGroup = values["name_group"];
            this._skin = values["skin"];
            this.isRebel = !!values["is_rebel"];
            this.flagsPath = values["flags_path"];
            this.republicanFlagPath = values["republican_flag_path"];
            this.sameGovTypeRevolutionFlagPath = values["same_gov_type_revolution_flag_path"];
            this.primaryColourR = values["primary_colour_r"];
            this.primaryColourG = values["primary_colour_g"];
            this.primaryColourB = values["primary_colour_b"];
            this.altPrimaryColourR = values["alt_primary_colour_r"];
            this.altPrimaryColourG = values["alt_primary_colour_g"];
            this.altPrimaryColourB = values["alt_primary_colour_b"];
            this.secondaryColourR = values["secondary_colour_r"];
            this.secondaryColourG = values["secondary_colour_g"];
            this.secondaryColourB = values["secondary_colour_b"];
            this.altSecondaryColourR = values["alt_secondary_colour_r"];
            this.altSecondaryColourG = values["alt_secondary_colour_g"];
            this.altSecondaryColourB = values["alt_secondary_colour_b"];
            this.rebelColourR = values["rebel_colour_r"];
            this.rebelColourG = values["rebel_colour_g"];
            this.rebelColourB = values["rebel_colour_b"];
            this.uniformColourR = values["uniform_colour_r"];
            this.uniformColourG = values["uniform_colour_g"];
            this.uniformColourB = values["uniform_colour_b"];
            this.altUniformColourR = values["alt_uniform_colour_r"];
            this.altUniformColourG = values["alt_uniform_colour_g"];
            this.altUniformColourB = values["alt_uniform_colour_b"];
            this._militaryGroup = values["military_group"];
            this.mpAvailable = !!values["mp_available"];
            this.mpAvailableNaval = !!values["mp_available_naval"];
            this._movieDeathEvent = values["movie_death_event"];
            this.mpUseRepublicEarly = !!values["mp_use_republic_early"];
            this.mpUseRepublicLate = !!values["mp_use_republic_late"];
            this._unitRegimentNameGroup = values["unit_regiment_name_group"];
            this._shipNameGroup = values["ship_name_group"];
            this.uiSkin = values["ui_skin"];
            this.attackDesc = values["attack_desc"];
            this.defendDesc = values["defend_desc"];
            this._preBattleSpeechParameter = values["pre_battle_speech_parameter"];
            this.screenNameWhenShogun = values["screen_name_when_shogun"];
            this.clanSummaryName = values["clan_summary_name"];
            this.clanSummaryNameWhenShogun = values["clan_summary_name_when_shogun"];
            this.cardColourR = values["card_colour_r"];
            this.cardColourG = values["card_colour_g"];
            this.cardColourB = values["card_colour_b"];
            this.senatorTotal = values["senator_total"];
            this.senatorTextNOutOfN = values["senator_text_n_out_of_n"];
            this._audioVoiceoverCulture = values["audio_voiceover_culture"];
            this._mpForceGenTemplate = values["mp_force_gen_template"];
            this.factionSwappingId = values["faction_swapping_id"];
            this._winMovie = values["win_movie"];
            this.hasPolitics = !!values["has_politics"];
            this._waaaghFaction = values["waaagh_faction"];
            this._waaaghGeneralUnit = values["waaagh_general_unit"];
            this.isQuestFaction = !!values["is_quest_faction"];
            this._gameExpansionKey = values["game_expansion_key"];
            this._cdirMilitaryGeneratorConfig = values["cdir_military_generator_config"];
            this._featureForest = values["feature_forest"];
            this._defaultAudioActorVoGroup = values["default_audio_actor_vo_group"];
            this._neutralReinforcementFactions = values["neutral_reinforcement_factions"];
            this.canAcceptGiftsWhenDead = !!values["can_accept_gifts_when_dead"];
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
        get nameGroup() {
            const collection = this.collectionCache.getCollection(NamesGroups$1.KEY, NamesGroups$1.Entry);
            return collection.find(entry => entry.key === this._nameGroup);
        }
        get skin() {
            const collection = this.collectionCache.getCollection(UnitBanners.KEY, UnitBanners.Entry);
            return collection.find(entry => entry.key === this._skin);
        }
        get militaryGroup() {
            const collection = this.collectionCache.getCollection(GroupingsMilitary$1.KEY, GroupingsMilitary$1.Entry);
            return collection.find(entry => entry.militaryGroup === this._militaryGroup);
        }
        get unitRegimentNameGroup() {
            const collection = this.collectionCache.getCollection(NamesGroups$1.KEY, NamesGroups$1.Entry);
            return collection.find(entry => entry.key === this._unitRegimentNameGroup);
        }
        get shipNameGroup() {
            const collection = this.collectionCache.getCollection(NamesGroups$1.KEY, NamesGroups$1.Entry);
            return collection.find(entry => entry.key === this._shipNameGroup);
        }
        get preBattleSpeechParameter() {
            const collection = this.collectionCache.getCollection(PreBattleSpeechParametersEnum$1.KEY, PreBattleSpeechParametersEnum$1.Entry);
            return collection.find(entry => entry.key === this._preBattleSpeechParameter);
        }
        get audioVoiceoverCulture() {
            const collection = this.collectionCache.getCollection(AudioVoiceoverCultures.KEY, AudioVoiceoverCultures.Entry);
            return collection.find(entry => entry.name === this._audioVoiceoverCulture);
        }
        get mpForceGenTemplate() {
            const collection = this.collectionCache.getCollection(MpForceGenTemplates$1.KEY, MpForceGenTemplates$1.Entry);
            return collection.find(entry => entry.key === this._mpForceGenTemplate);
        }
        get winMovie() {
            const collection = this.collectionCache.getCollection(MovieEvents.KEY, MovieEvents.Entry);
            return collection.find(entry => entry.event === this._winMovie);
        }
        get waaaghFaction() {
            const collection = this.collectionCache.getCollection(Factions.KEY, Factions.Entry);
            return collection.find(entry => entry.key === this._waaaghFaction);
        }
        get waaaghGeneralUnit() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._waaaghGeneralUnit);
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
        get cdirMilitaryGeneratorConfig() {
            const collection = this.collectionCache.getCollection(CdirMilitaryGeneratorConfigs$1.KEY, CdirMilitaryGeneratorConfigs$1.Entry);
            return collection.find(entry => entry.key === this._cdirMilitaryGeneratorConfig);
        }
        get featureForest() {
            const collection = this.collectionCache.getCollection(FactionFeatureForests.KEY, FactionFeatureForests.Entry);
            return collection.find(entry => entry.key === this._featureForest);
        }
        get defaultAudioActorVoGroup() {
            const collection = this.collectionCache.getCollection(AudioVoActorGroups$1.KEY, AudioVoActorGroups$1.Entry);
            return collection.find(entry => entry.name === this._defaultAudioActorVoGroup);
        }
        get neutralReinforcementFactions() {
            const collection = this.collectionCache.getCollection(FactionSets.KEY, FactionSets.Entry);
            return collection.find(entry => entry.key === this._neutralReinforcementFactions);
        }
    }
    Factions.Entry = Entry;
})(Factions$1 || (Factions$1 = {}));

var AgentStringFactionOverrides$1;
(function (AgentStringFactionOverrides) {
    AgentStringFactionOverrides.KEY = new CollectionKey("agent_string_faction_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._agent = values["agent"];
            this._faction = values["faction"];
            this._gender = values["gender"];
            this.nameOverride = values["name_override"];
            this.descriptionOverride = values["description_override"];
            this.iconPath = values["icon_path"];
            this.id = values["id"];
            this._religion = values["religion"];
        }
        get agent() {
            const collection = this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry);
            return collection.find(entry => entry.key === this._agent);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get gender() {
            const collection = this.collectionCache.getCollection(Genders$1.KEY, Genders$1.Entry);
            return collection.find(entry => entry.gender === this._gender);
        }
        get religion() {
            const collection = this.collectionCache.getCollection(Religions$1.KEY, Religions$1.Entry);
            return collection.find(entry => entry.religionKey === this._religion);
        }
    }
    AgentStringFactionOverrides.Entry = Entry;
})(AgentStringFactionOverrides$1 || (AgentStringFactionOverrides$1 = {}));

var AgentStringSubcultureOverrides$1;
(function (AgentStringSubcultureOverrides) {
    AgentStringSubcultureOverrides.KEY = new CollectionKey("agent_string_subculture_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._agent = values["agent"];
            this._subculture = values["subculture"];
            this._gender = values["gender"];
            this.nameOverride = values["name_override"];
            this.descriptionOverride = values["description_override"];
            this.iconPath = values["icon_path"];
            this.id = values["id"];
            this._religion = values["religion"];
        }
        get agent() {
            const collection = this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry);
            return collection.find(entry => entry.key === this._agent);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
        get gender() {
            const collection = this.collectionCache.getCollection(Genders$1.KEY, Genders$1.Entry);
            return collection.find(entry => entry.gender === this._gender);
        }
        get religion() {
            const collection = this.collectionCache.getCollection(Religions$1.KEY, Religions$1.Entry);
            return collection.find(entry => entry.religionKey === this._religion);
        }
    }
    AgentStringSubcultureOverrides.Entry = Entry;
})(AgentStringSubcultureOverrides$1 || (AgentStringSubcultureOverrides$1 = {}));

var AgentSubcultureGenderOverrides$1;
(function (AgentSubcultureGenderOverrides) {
    AgentSubcultureGenderOverrides.KEY = new CollectionKey("agent_subculture_gender_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._agent = values["agent"];
            this._subculture = values["subculture"];
            this._gender = values["gender"];
        }
        get agent() {
            const collection = this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry);
            return collection.find(entry => entry.key === this._agent);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
        get gender() {
            const collection = this.collectionCache.getCollection(Genders$1.KEY, Genders$1.Entry);
            return collection.find(entry => entry.gender === this._gender);
        }
    }
    AgentSubcultureGenderOverrides.Entry = Entry;
})(AgentSubcultureGenderOverrides$1 || (AgentSubcultureGenderOverrides$1 = {}));

var MissionGroups;
(function (MissionGroups) {
    MissionGroups.KEY = new CollectionKey("mission_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.groupKey = values["group_key"];
        }
    }
    MissionGroups.Entry = Entry;
})(MissionGroups || (MissionGroups = {}));

var AgentSubtypesToMissionGroups;
(function (AgentSubtypesToMissionGroups) {
    AgentSubtypesToMissionGroups.KEY = new CollectionKey("agent_subtypes_to_mission_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._agent = values["agent"];
            this._missionGroup = values["mission_group"];
            this.videoPath = values["video_path"];
            this._effectBundle = values["effect_bundle"];
            this._battleEffect = values["battle_effect"];
            this.imagePath = values["image_path"];
            this.order = values["order"];
        }
        get agent() {
            const collection = this.collectionCache.getCollection(AgentSubtypes.KEY, AgentSubtypes.Entry);
            return collection.find(entry => entry.key === this._agent);
        }
        get missionGroup() {
            const collection = this.collectionCache.getCollection(MissionGroups.KEY, MissionGroups.Entry);
            return collection.find(entry => entry.groupKey === this._missionGroup);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
        get battleEffect() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._battleEffect);
        }
    }
    AgentSubtypesToMissionGroups.Entry = Entry;
})(AgentSubtypesToMissionGroups || (AgentSubtypesToMissionGroups = {}));

var FactionCivilWarSetups$1;
(function (FactionCivilWarSetups) {
    FactionCivilWarSetups.KEY = new CollectionKey("faction_civil_war_setups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._primaryFaction = values["primary_faction"];
            this._secondaryFaction = values["secondary_faction"];
            this._effectBundle = values["effect_bundle"];
        }
        get primaryFaction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._primaryFaction);
        }
        get secondaryFaction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._secondaryFaction);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    FactionCivilWarSetups.Entry = Entry;
})(FactionCivilWarSetups$1 || (FactionCivilWarSetups$1 = {}));

var AgentSubtypeCivilWarFactionOverrides;
(function (AgentSubtypeCivilWarFactionOverrides) {
    AgentSubtypeCivilWarFactionOverrides.KEY = new CollectionKey("agent_subtype_civil_war_faction_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._secondaryFaction = values["secondary_faction"];
            this._agentSubtype = values["agent_subtype"];
            this._overrideFaction = values["override_faction"];
        }
        get secondaryFaction() {
            const collection = this.collectionCache.getCollection(FactionCivilWarSetups$1.KEY, FactionCivilWarSetups$1.Entry);
            return collection.find(entry => entry._secondaryFaction === this._secondaryFaction);
        }
        get agentSubtype() {
            const collection = this.collectionCache.getCollection(AgentSubtypes.KEY, AgentSubtypes.Entry);
            return collection.find(entry => entry.key === this._agentSubtype);
        }
        get overrideFaction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._overrideFaction);
        }
    }
    AgentSubtypeCivilWarFactionOverrides.Entry = Entry;
})(AgentSubtypeCivilWarFactionOverrides || (AgentSubtypeCivilWarFactionOverrides = {}));

var CampaignGroups;
(function (CampaignGroups) {
    CampaignGroups.KEY = new CollectionKey("campaign_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
        }
    }
    CampaignGroups.Entry = Entry;
})(CampaignGroups || (CampaignGroups = {}));

var MilitaryForceTypes;
(function (MilitaryForceTypes) {
    MilitaryForceTypes.KEY = new CollectionKey("military_force_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    MilitaryForceTypes.Entry = Entry;
})(MilitaryForceTypes || (MilitaryForceTypes = {}));

var AgentSubtypeMilitaryForceCreationOverrides;
(function (AgentSubtypeMilitaryForceCreationOverrides) {
    AgentSubtypeMilitaryForceCreationOverrides.KEY = new CollectionKey("agent_subtype_military_force_creation_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._validGroup = values["valid_group"];
            this._militaryForceType = values["military_force_type"];
        }
        get validGroup() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._validGroup);
        }
        get militaryForceType() {
            const collection = this.collectionCache.getCollection(MilitaryForceTypes.KEY, MilitaryForceTypes.Entry);
            return collection.find(entry => entry.key === this._militaryForceType);
        }
    }
    AgentSubtypeMilitaryForceCreationOverrides.Entry = Entry;
})(AgentSubtypeMilitaryForceCreationOverrides || (AgentSubtypeMilitaryForceCreationOverrides = {}));

var AgentSubtypeSubcultureOverrides;
(function (AgentSubtypeSubcultureOverrides) {
    AgentSubtypeSubcultureOverrides.KEY = new CollectionKey("agent_subtype_subculture_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._subtype = values["subtype"];
            this._subculture = values["subculture"];
            this._associatedUnitOverride = values["associated_unit_override"];
            this._agent = values["agent"];
            this.onscreenName = values["onscreen_name"];
            this.description = values["description"];
            this.smallIcon = values["small_icon"];
        }
        get subtype() {
            const collection = this.collectionCache.getCollection(AgentSubtypes.KEY, AgentSubtypes.Entry);
            return collection.find(entry => entry.key === this._subtype);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
        get associatedUnitOverride() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._associatedUnitOverride);
        }
        get agent() {
            const collection = this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry);
            return collection.find(entry => entry.key === this._agent);
        }
    }
    AgentSubtypeSubcultureOverrides.Entry = Entry;
})(AgentSubtypeSubcultureOverrides || (AgentSubtypeSubcultureOverrides = {}));

var BretonniaVows;
(function (BretonniaVows) {
    BretonniaVows.KEY = new CollectionKey("bretonnia_vows");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.localisedName = values["localised_name"];
            this.localisedDescription = values["localised_description"];
            this.order = values["order"];
            this.image = values["image"];
        }
    }
    BretonniaVows.Entry = Entry;
})(BretonniaVows || (BretonniaVows = {}));

var AgentSubtypeToVows;
(function (AgentSubtypeToVows) {
    AgentSubtypeToVows.KEY = new CollectionKey("agent_subtype_to_vows");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._agentSubtype = values["agent_subtype"];
            this._vow = values["vow"];
        }
        get agentSubtype() {
            const collection = this.collectionCache.getCollection(AgentSubtypes.KEY, AgentSubtypes.Entry);
            return collection.find(entry => entry.key === this._agentSubtype);
        }
        get vow() {
            const collection = this.collectionCache.getCollection(BretonniaVows.KEY, BretonniaVows.Entry);
            return collection.find(entry => entry.key === this._vow);
        }
    }
    AgentSubtypeToVows.Entry = Entry;
})(AgentSubtypeToVows || (AgentSubtypeToVows = {}));

var AgentToAgentAbilities$1;
(function (AgentToAgentAbilities) {
    AgentToAgentAbilities.KEY = new CollectionKey("agent_to_agent_abilities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._agent = values["agent"];
            this._ability = values["ability"];
        }
        get agent() {
            const collection = this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry);
            return collection.find(entry => entry.key === this._agent);
        }
        get ability() {
            const collection = this.collectionCache.getCollection(Abilities$1.KEY, Abilities$1.Entry);
            return collection.find(entry => entry.ability === this._ability);
        }
    }
    AgentToAgentAbilities.Entry = Entry;
})(AgentToAgentAbilities$1 || (AgentToAgentAbilities$1 = {}));

var AgentToAgentAttributes$1;
(function (AgentToAgentAttributes) {
    AgentToAgentAttributes.KEY = new CollectionKey("agent_to_agent_attributes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._attribute = values["attribute"];
            this._agent = values["agent"];
            this.defaultValue = values["default_value"];
        }
        get attribute() {
            const collection = this.collectionCache.getCollection(AgentAttributes$1.KEY, AgentAttributes$1.Entry);
            return collection.find(entry => entry.key === this._attribute);
        }
        get agent() {
            const collection = this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry);
            return collection.find(entry => entry.key === this._agent);
        }
    }
    AgentToAgentAttributes.Entry = Entry;
})(AgentToAgentAttributes$1 || (AgentToAgentAttributes$1 = {}));

var AgentUniforms$1;
(function (AgentUniforms) {
    AgentUniforms.KEY = new CollectionKey("agent_uniforms");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.uniformName = values["uniform_name"];
            this._filename = values["filename"];
            this._battleFilename = values["battle_filename"];
            this._campaignPortholeFilename = values["campaign_porthole_filename"];
            this.campaignPoliticianFilename = values["campaign_politician_filename"];
        }
        get filename() {
            const collection = this.collectionCache.getCollection(Variants$1.KEY, Variants$1.Entry);
            return collection.find(entry => entry.variantName === this._filename);
        }
        get battleFilename() {
            const collection = this.collectionCache.getCollection(Variants$1.KEY, Variants$1.Entry);
            return collection.find(entry => entry.variantName === this._battleFilename);
        }
        get campaignPortholeFilename() {
            const collection = this.collectionCache.getCollection(Variants$1.KEY, Variants$1.Entry);
            return collection.find(entry => entry.variantName === this._campaignPortholeFilename);
        }
    }
    AgentUniforms.Entry = Entry;
})(AgentUniforms$1 || (AgentUniforms$1 = {}));

var BattleCinematicEventCategories$1;
(function (BattleCinematicEventCategories) {
    BattleCinematicEventCategories.KEY = new CollectionKey("battle_cinematic_event_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    BattleCinematicEventCategories.Entry = Entry;
})(BattleCinematicEventCategories$1 || (BattleCinematicEventCategories$1 = {}));

var BattleCinematicEvents$1;
(function (BattleCinematicEvents) {
    BattleCinematicEvents.KEY = new CollectionKey("battle_cinematic_events");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.filename = values["filename"];
            this.priority = values["priority"];
            this.level = values["level"];
            this.windowIn = values["window_in"];
            this.windowOut = values["window_out"];
            this.repeatWaitMs = values["repeat_wait_ms"];
            this._eventCategory = values["event_category"];
            this.timeAfterEvent = values["time_after_event"];
        }
        get eventCategory() {
            const collection = this.collectionCache.getCollection(BattleCinematicEventCategories$1.KEY, BattleCinematicEventCategories$1.Entry);
            return collection.find(entry => entry.key === this._eventCategory);
        }
    }
    BattleCinematicEvents.Entry = Entry;
})(BattleCinematicEvents$1 || (BattleCinematicEvents$1 = {}));

var AideDeCampSpeeches$1;
(function (AideDeCampSpeeches) {
    AideDeCampSpeeches.KEY = new CollectionKey("aide_de_camp_speeches");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.text = values["text"];
            this.pictureInPicture = !!values["picture_in_picture"];
            this.offsetAngle = values["offset_angle"];
            this.offsetRange = values["offset_range"];
            this.circumventCooldown = !!values["circumvent_cooldown"];
            this._cinematicEvent = values["cinematic_event"];
            this.iconName = values["icon_name"];
            this.uiDurationMs = values["ui_duration_ms"];
            this.hasWorldspaceUiPing = !!values["has_worldspace_ui_ping"];
        }
        get cinematicEvent() {
            const collection = this.collectionCache.getCollection(BattleCinematicEvents$1.KEY, BattleCinematicEvents$1.Entry);
            return collection.find(entry => entry.key === this._cinematicEvent);
        }
    }
    AideDeCampSpeeches.Entry = Entry;
})(AideDeCampSpeeches$1 || (AideDeCampSpeeches$1 = {}));

var AncillaryInfo$1;
(function (AncillaryInfo) {
    AncillaryInfo.KEY = new CollectionKey("ancillary_info");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.ancillary = values["ancillary"];
            this.historicalExample = values["historical_example"];
            this.author = values["author"];
            this.comment = values["comment"];
        }
    }
    AncillaryInfo.Entry = Entry;
})(AncillaryInfo$1 || (AncillaryInfo$1 = {}));

var AncillaryTypes$1;
(function (AncillaryTypes) {
    AncillaryTypes.KEY = new CollectionKey("ancillary_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.type = values["type"];
            this.uiIcon = values["ui_icon"];
        }
    }
    AncillaryTypes.Entry = Entry;
})(AncillaryTypes$1 || (AncillaryTypes$1 = {}));

var AncillariesCategories$1;
(function (AncillariesCategories) {
    AncillariesCategories.KEY = new CollectionKey("ancillaries_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.category = values["category"];
            this.onscreenName = values["onscreen_name"];
            this.iconName = values["icon_name"];
            this.sortOrder = values["sort_order"];
            this.defaultEntryName = values["default_entry_name"];
            this.defaultEntryTooltip = values["default_entry_tooltip"];
        }
    }
    AncillariesCategories.Entry = Entry;
})(AncillariesCategories$1 || (AncillariesCategories$1 = {}));

var Banners;
(function (Banners) {
    Banners.KEY = new CollectionKey("banners");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.banner = values["banner"];
            this._effectBundle = values["effect_bundle"];
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    Banners.Entry = Entry;
})(Banners || (Banners = {}));

var AncillariesSubcategories;
(function (AncillariesSubcategories) {
    AncillariesSubcategories.KEY = new CollectionKey("ancillaries_subcategories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.subcategory = values["subcategory"];
            this.onscreenName = values["onscreen_name"];
        }
    }
    AncillariesSubcategories.Entry = Entry;
})(AncillariesSubcategories || (AncillariesSubcategories = {}));

var Ancillaries$1;
(function (Ancillaries) {
    Ancillaries.KEY = new CollectionKey("ancillaries");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this.onscreenName = values["onscreen_name"];
            this._type = values["type"];
            this.appliesTo = values["applies_to"];
            this.transferrable = !!values["transferrable"];
            this.uniqueToWorld = !!values["unique_to_world"];
            this.uniqueToFaction = !!values["unique_to_faction"];
            this.precedence = values["precedence"];
            this.startDate = values["start_date"];
            this.endDate = values["end_date"];
            this.colourText = values["colour_text"];
            this.avatarSkill = values["avatar_skill"];
            this.avatarSpecialAbility = values["avatar_special_ability"];
            this.legendaryItem = !!values["legendary_item"];
            this.mpExclusive = !!values["mp_exclusive"];
            this.isWifeAncillary = !!values["is_wife_ancillary"];
            this._category = values["category"];
            this.minStartingAge = values["min_starting_age"];
            this.maxStartingAge = values["max_starting_age"];
            this.minExpiryAge = values["min_expiry_age"];
            this.maxExpiryAge = values["max_expiry_age"];
            this.immortal = !!values["immortal"];
            this._providedBodyguardUnit = values["provided_bodyguard_unit"];
            this._providedBanner = values["provided_banner"];
            this.uniquenessScore = values["uniqueness_score"];
            this.turnsBeforeSwapAllowed = values["turns_before_swap_allowed"];
            this._subcategory = values["subcategory"];
            this.randomlyDropped = !!values["randomly_dropped"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(AncillaryInfo$1.KEY, AncillaryInfo$1.Entry);
            return collection.find(entry => entry.ancillary === this._key);
        }
        get type() {
            const collection = this.collectionCache.getCollection(AncillaryTypes$1.KEY, AncillaryTypes$1.Entry);
            return collection.find(entry => entry.type === this._type);
        }
        get category() {
            const collection = this.collectionCache.getCollection(AncillariesCategories$1.KEY, AncillariesCategories$1.Entry);
            return collection.find(entry => entry.category === this._category);
        }
        get providedBodyguardUnit() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._providedBodyguardUnit);
        }
        get providedBanner() {
            const collection = this.collectionCache.getCollection(Banners.KEY, Banners.Entry);
            return collection.find(entry => entry.banner === this._providedBanner);
        }
        get subcategory() {
            const collection = this.collectionCache.getCollection(AncillariesSubcategories.KEY, AncillariesSubcategories.Entry);
            return collection.find(entry => entry.subcategory === this._subcategory);
        }
    }
    Ancillaries.Entry = Entry;
})(Ancillaries$1 || (Ancillaries$1 = {}));

var AncillariesCategoriesAgentTypeScores;
(function (AncillariesCategoriesAgentTypeScores) {
    AncillariesCategoriesAgentTypeScores.KEY = new CollectionKey("ancillaries_categories_agent_type_scores");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._category = values["category"];
            this._agentType = values["agent_type"];
            this.score = values["score"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(AncillariesCategories$1.KEY, AncillariesCategories$1.Entry);
            return collection.find(entry => entry.category === this._category);
        }
        get agentType() {
            const collection = this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry);
            return collection.find(entry => entry.key === this._agentType);
        }
    }
    AncillariesCategoriesAgentTypeScores.Entry = Entry;
})(AncillariesCategoriesAgentTypeScores || (AncillariesCategoriesAgentTypeScores = {}));

var AncillariesCategoriesFactionJunctions;
(function (AncillariesCategoriesFactionJunctions) {
    AncillariesCategoriesFactionJunctions.KEY = new CollectionKey("ancillaries_categories_faction_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._ancillaryCategory = values["ancillary_category"];
            this._faction = values["faction"];
            this.allowedPerCharacter = values["allowed_per_character"];
        }
        get ancillaryCategory() {
            const collection = this.collectionCache.getCollection(AncillariesCategories$1.KEY, AncillariesCategories$1.Entry);
            return collection.find(entry => entry.category === this._ancillaryCategory);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    AncillariesCategoriesFactionJunctions.Entry = Entry;
})(AncillariesCategoriesFactionJunctions || (AncillariesCategoriesFactionJunctions = {}));

var AncillariesIncludedAgentSubtypes;
(function (AncillariesIncludedAgentSubtypes) {
    AncillariesIncludedAgentSubtypes.KEY = new CollectionKey("ancillaries_included_agent_subtypes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._ancillary = values["ancillary"];
            this._agentSubtype = values["agent_subtype"];
        }
        get ancillary() {
            const collection = this.collectionCache.getCollection(Ancillaries$1.KEY, Ancillaries$1.Entry);
            return collection.find(entry => entry._key === this._ancillary);
        }
        get agentSubtype() {
            const collection = this.collectionCache.getCollection(AgentSubtypes.KEY, AgentSubtypes.Entry);
            return collection.find(entry => entry.key === this._agentSubtype);
        }
    }
    AncillariesIncludedAgentSubtypes.Entry = Entry;
})(AncillariesIncludedAgentSubtypes || (AncillariesIncludedAgentSubtypes = {}));

var CharacterSkills$1;
(function (CharacterSkills) {
    CharacterSkills.KEY = new CollectionKey("character_skills");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.imagePath = values["image_path"];
            this.localisedName = values["localised_name"];
            this.localisedDescription = values["localised_description"];
            this._preBattleSpeechParameter = values["pre_battle_speech_parameter"];
            this.unlockedAtRank = values["unlocked_at_rank"];
            this.isBackgroundSkill = !!values["is_background_skill"];
            this.isFemaleOnlyBackgroundSkill = !!values["is_female_only_background_skill"];
            this.isMaleOnlyBackgroundSkill = !!values["is_male_only_background_skill"];
            this.backgroundWeighting = values["background_weighting"];
            this.influenceCost = values["influence_cost"];
        }
        get preBattleSpeechParameter() {
            const collection = this.collectionCache.getCollection(PreBattleSpeechParametersEnum$1.KEY, PreBattleSpeechParametersEnum$1.Entry);
            return collection.find(entry => entry.key === this._preBattleSpeechParameter);
        }
    }
    CharacterSkills.Entry = Entry;
})(CharacterSkills$1 || (CharacterSkills$1 = {}));

var AncillariesRequiredSkills;
(function (AncillariesRequiredSkills) {
    AncillariesRequiredSkills.KEY = new CollectionKey("ancillaries_required_skills");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._ancillary = values["ancillary"];
            this._requiredSkill = values["required_skill"];
            this.requiredSkillLevel = values["required_skill_level"];
        }
        get ancillary() {
            const collection = this.collectionCache.getCollection(Ancillaries$1.KEY, Ancillaries$1.Entry);
            return collection.find(entry => entry._key === this._ancillary);
        }
        get requiredSkill() {
            const collection = this.collectionCache.getCollection(CharacterSkills$1.KEY, CharacterSkills$1.Entry);
            return collection.find(entry => entry.key === this._requiredSkill);
        }
    }
    AncillariesRequiredSkills.Entry = Entry;
})(AncillariesRequiredSkills || (AncillariesRequiredSkills = {}));

var AncillaryIncludedSubcultures$1;
(function (AncillaryIncludedSubcultures) {
    AncillaryIncludedSubcultures.KEY = new CollectionKey("ancillary_included_subcultures");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._ancillary = values["ancillary"];
            this._subculture = values["subculture"];
        }
        get ancillary() {
            const collection = this.collectionCache.getCollection(AncillaryInfo$1.KEY, AncillaryInfo$1.Entry);
            return collection.find(entry => entry.ancillary === this._ancillary);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
    }
    AncillaryIncludedSubcultures.Entry = Entry;
})(AncillaryIncludedSubcultures$1 || (AncillaryIncludedSubcultures$1 = {}));

var InstantExpenditureTypes;
(function (InstantExpenditureTypes) {
    InstantExpenditureTypes.KEY = new CollectionKey("instant_expenditure_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
        }
    }
    InstantExpenditureTypes.Entry = Entry;
})(InstantExpenditureTypes || (InstantExpenditureTypes = {}));

var InstantIncomeTypes;
(function (InstantIncomeTypes) {
    InstantIncomeTypes.KEY = new CollectionKey("instant_income_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
        }
    }
    InstantIncomeTypes.Entry = Entry;
})(InstantIncomeTypes || (InstantIncomeTypes = {}));

var ResourceCosts;
(function (ResourceCosts) {
    ResourceCosts.KEY = new CollectionKey("resource_costs");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this.treasuryCost = values["treasury_cost"];
            this._expenditureType = values["expenditure_type"];
            this._incomeType = values["income_type"];
        }
        get expenditureType() {
            const collection = this.collectionCache.getCollection(InstantExpenditureTypes.KEY, InstantExpenditureTypes.Entry);
            return collection.find(entry => entry.id === this._expenditureType);
        }
        get incomeType() {
            const collection = this.collectionCache.getCollection(InstantIncomeTypes.KEY, InstantIncomeTypes.Entry);
            return collection.find(entry => entry.id === this._incomeType);
        }
    }
    ResourceCosts.Entry = Entry;
})(ResourceCosts || (ResourceCosts = {}));

var AncillarySalvageResources;
(function (AncillarySalvageResources) {
    AncillarySalvageResources.KEY = new CollectionKey("ancillary_salvage_resources");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._category = values["category"];
            this.minUniquenessScore = values["min_uniqueness_score"];
            this._salvageResources = values["salvage_resources"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(AncillariesCategories$1.KEY, AncillariesCategories$1.Entry);
            return collection.find(entry => entry.category === this._category);
        }
        get salvageResources() {
            const collection = this.collectionCache.getCollection(ResourceCosts.KEY, ResourceCosts.Entry);
            return collection.find(entry => entry.id === this._salvageResources);
        }
    }
    AncillarySalvageResources.Entry = Entry;
})(AncillarySalvageResources || (AncillarySalvageResources = {}));

var AncillaryToEffects$1;
(function (AncillaryToEffects) {
    AncillaryToEffects.KEY = new CollectionKey("ancillary_to_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._ancillary = values["ancillary"];
            this._effect = values["effect"];
            this.value = values["value"];
            this._effectScope = values["effect_scope"];
        }
        get ancillary() {
            const collection = this.collectionCache.getCollection(AncillaryInfo$1.KEY, AncillaryInfo$1.Entry);
            return collection.find(entry => entry.ancillary === this._ancillary);
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get effectScope() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes$1.KEY, CampaignEffectScopes$1.Entry);
            return collection.find(entry => entry.key === this._effectScope);
        }
    }
    AncillaryToEffects.Entry = Entry;
})(AncillaryToEffects$1 || (AncillaryToEffects$1 = {}));

var AncillaryToIncludedAgents$1;
(function (AncillaryToIncludedAgents) {
    AncillaryToIncludedAgents.KEY = new CollectionKey("ancillary_to_included_agents");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._ancillary = values["ancillary"];
            this._agent = values["agent"];
        }
        get ancillary() {
            const collection = this.collectionCache.getCollection(AncillaryInfo$1.KEY, AncillaryInfo$1.Entry);
            return collection.find(entry => entry.ancillary === this._ancillary);
        }
        get agent() {
            const collection = this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry);
            return collection.find(entry => entry.key === this._agent);
        }
    }
    AncillaryToIncludedAgents.Entry = Entry;
})(AncillaryToIncludedAgents$1 || (AncillaryToIncludedAgents$1 = {}));

var AncillaryTriggers$1;
(function (AncillaryTriggers) {
    AncillaryTriggers.KEY = new CollectionKey("ancillary_triggers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.trigger = values["trigger"];
            this._event = values["event"];
            this.conditions = values["conditions"];
        }
        get event() {
            const collection = this.collectionCache.getCollection(TriggerEvents$1.KEY, TriggerEvents$1.Entry);
            return collection.find(entry => entry.event === this._event);
        }
    }
    AncillaryTriggers.Entry = Entry;
})(AncillaryTriggers$1 || (AncillaryTriggers$1 = {}));

var AncillaryTriggersToAncillaryRemovals$1;
(function (AncillaryTriggersToAncillaryRemovals) {
    AncillaryTriggersToAncillaryRemovals.KEY = new CollectionKey("ancillary_triggers_to_ancillary_removals");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._trigger = values["trigger"];
            this._ancillary = values["ancillary"];
        }
        get trigger() {
            const collection = this.collectionCache.getCollection(AncillaryTriggers$1.KEY, AncillaryTriggers$1.Entry);
            return collection.find(entry => entry.trigger === this._trigger);
        }
        get ancillary() {
            const collection = this.collectionCache.getCollection(AncillaryInfo$1.KEY, AncillaryInfo$1.Entry);
            return collection.find(entry => entry.ancillary === this._ancillary);
        }
    }
    AncillaryTriggersToAncillaryRemovals.Entry = Entry;
})(AncillaryTriggersToAncillaryRemovals$1 || (AncillaryTriggersToAncillaryRemovals$1 = {}));

var AncillaryTriggerEffects$1;
(function (AncillaryTriggerEffects) {
    AncillaryTriggerEffects.KEY = new CollectionKey("ancillary_trigger_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._trigger = values["trigger"];
            this._ancillary = values["ancillary"];
            this.chance = values["chance"];
        }
        get trigger() {
            const collection = this.collectionCache.getCollection(AncillaryTriggers$1.KEY, AncillaryTriggers$1.Entry);
            return collection.find(entry => entry.trigger === this._trigger);
        }
        get ancillary() {
            const collection = this.collectionCache.getCollection(AncillaryInfo$1.KEY, AncillaryInfo$1.Entry);
            return collection.find(entry => entry.ancillary === this._ancillary);
        }
    }
    AncillaryTriggerEffects.Entry = Entry;
})(AncillaryTriggerEffects$1 || (AncillaryTriggerEffects$1 = {}));

var AncillaryUniquenessGroupings;
(function (AncillaryUniquenessGroupings) {
    AncillaryUniquenessGroupings.KEY = new CollectionKey("ancillary_uniqueness_groupings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.groupKey = values["group_key"];
            this.uniquenessMin = values["uniqueness_min"];
            this.uniquenessMax = values["uniqueness_max"];
            this.colR = values["col_r"];
            this.colG = values["col_g"];
            this.colB = values["col_b"];
            this.uiState = values["ui_state"];
            this.onscreenName = values["onscreen_name"];
            this.description = values["description"];
        }
    }
    AncillaryUniquenessGroupings.Entry = Entry;
})(AncillaryUniquenessGroupings || (AncillaryUniquenessGroupings = {}));

var AnimationCategories$1;
(function (AnimationCategories) {
    AnimationCategories.KEY = new CollectionKey("animation_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
            this.order = values["order"];
        }
    }
    AnimationCategories.Entry = Entry;
})(AnimationCategories$1 || (AnimationCategories$1 = {}));

var AnimationSetPrebattleGroups;
(function (AnimationSetPrebattleGroups) {
    AnimationSetPrebattleGroups.KEY = new CollectionKey("animation_set_prebattle_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    AnimationSetPrebattleGroups.Entry = Entry;
})(AnimationSetPrebattleGroups || (AnimationSetPrebattleGroups = {}));

var AnimationSetPrebattleGroupJunctions;
(function (AnimationSetPrebattleGroupJunctions) {
    AnimationSetPrebattleGroupJunctions.KEY = new CollectionKey("animation_set_prebattle_group_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._animSet = values["anim_set"];
            this._group = values["group"];
        }
        get animSet() {
            const collection = this.collectionCache.getCollection(CampaignAnimSetEnums$1.KEY, CampaignAnimSetEnums$1.Entry);
            return collection.find(entry => entry.name === this._animSet);
        }
        get group() {
            const collection = this.collectionCache.getCollection(AnimationSetPrebattleGroups.KEY, AnimationSetPrebattleGroups.Entry);
            return collection.find(entry => entry.key === this._group);
        }
    }
    AnimationSetPrebattleGroupJunctions.Entry = Entry;
})(AnimationSetPrebattleGroupJunctions || (AnimationSetPrebattleGroupJunctions = {}));

var AnimationSetPrebattleGroupViewConfigurations;
(function (AnimationSetPrebattleGroupViewConfigurations) {
    AnimationSetPrebattleGroupViewConfigurations.KEY = new CollectionKey("animation_set_prebattle_group_view_configurations");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._attacker = values["attacker"];
            this._defender = values["defender"];
            this.separation = values["separation"];
            this.cameraDistance = values["camera_distance"];
            this.cameraHeight = values["camera_height"];
            this.scale = values["scale"];
        }
        get attacker() {
            const collection = this.collectionCache.getCollection(AnimationSetPrebattleGroups.KEY, AnimationSetPrebattleGroups.Entry);
            return collection.find(entry => entry.key === this._attacker);
        }
        get defender() {
            const collection = this.collectionCache.getCollection(AnimationSetPrebattleGroups.KEY, AnimationSetPrebattleGroups.Entry);
            return collection.find(entry => entry.key === this._defender);
        }
    }
    AnimationSetPrebattleGroupViewConfigurations.Entry = Entry;
})(AnimationSetPrebattleGroupViewConfigurations || (AnimationSetPrebattleGroupViewConfigurations = {}));

var AnimationSlotCategories$1;
(function (AnimationSlotCategories) {
    AnimationSlotCategories.KEY = new CollectionKey("animation_slot_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.slot = values["slot"];
            this._category = values["category"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(AnimationCategories$1.KEY, AnimationCategories$1.Entry);
            return collection.find(entry => entry.name === this._category);
        }
    }
    AnimationSlotCategories.Entry = Entry;
})(AnimationSlotCategories$1 || (AnimationSlotCategories$1 = {}));

var AreaOfEffectDisplays;
(function (AreaOfEffectDisplays) {
    AreaOfEffectDisplays.KEY = new CollectionKey("area_of_effect_displays");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.spline = values["spline"];
            this.decal = values["decal"];
            this._vfxRing = values["vfx_ring"];
            this._vfxCentral = values["vfx_central"];
            this.splineWidth = values["spline_width"];
            this.splineColR = values["spline_col_r"];
            this.splineColG = values["spline_col_g"];
            this.splineColB = values["spline_col_b"];
            this.splineOorColR = values["spline_oor_col_r"];
            this.splineOorColG = values["spline_oor_col_g"];
            this.splineOorColB = values["spline_oor_col_b"];
            this.splineVertical = !!values["spline_vertical"];
            this.splineAnimationSpeed = values["spline_animation_speed"];
            this.splineTileCount = values["spline_tile_count"];
            this.compositeScene = values["composite_scene"];
            this.isTargettingPerEntity = !!values["is_targetting_per_entity"];
            this.vfxRingSegmentLength = values["vfx_ring_segment_length"];
            this.useModelTime = !!values["use_model_time"];
        }
        get vfxRing() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._vfxRing);
        }
        get vfxCentral() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._vfxCentral);
        }
    }
    AreaOfEffectDisplays.Entry = Entry;
})(AreaOfEffectDisplays || (AreaOfEffectDisplays = {}));

var ArmedCitizenryUnitGroups$1;
(function (ArmedCitizenryUnitGroups) {
    ArmedCitizenryUnitGroups.KEY = new CollectionKey("armed_citizenry_unit_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.unitGroup = values["unit_group"];
        }
    }
    ArmedCitizenryUnitGroups.Entry = Entry;
})(ArmedCitizenryUnitGroups$1 || (ArmedCitizenryUnitGroups$1 = {}));

var ArmedCitizenryUnitsToUnitGroupsJunctions$1;
(function (ArmedCitizenryUnitsToUnitGroupsJunctions) {
    ArmedCitizenryUnitsToUnitGroupsJunctions.KEY = new CollectionKey("armed_citizenry_units_to_unit_groups_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._unitGroup = values["unit_group"];
            this._unit = values["unit"];
            this.priority = values["priority"];
        }
        get unitGroup() {
            const collection = this.collectionCache.getCollection(ArmedCitizenryUnitGroups$1.KEY, ArmedCitizenryUnitGroups$1.Entry);
            return collection.find(entry => entry.unitGroup === this._unitGroup);
        }
        get unit() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
    }
    ArmedCitizenryUnitsToUnitGroupsJunctions.Entry = Entry;
})(ArmedCitizenryUnitsToUnitGroupsJunctions$1 || (ArmedCitizenryUnitsToUnitGroupsJunctions$1 = {}));

var UnitAbilityTypes;
(function (UnitAbilityTypes) {
    UnitAbilityTypes.KEY = new CollectionKey("unit_ability_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreenName = values["onscreen_name"];
            this.showCursorTrail = !!values["show_cursor_trail"];
            this.iconPath = values["icon_path"];
            this.localisedDescription = values["localised_description"];
        }
    }
    UnitAbilityTypes.Entry = Entry;
})(UnitAbilityTypes || (UnitAbilityTypes = {}));

var VideoTypes$1;
(function (VideoTypes) {
    VideoTypes.KEY = new CollectionKey("video_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.videoType = values["video_type"];
        }
    }
    VideoTypes.Entry = Entry;
})(VideoTypes$1 || (VideoTypes$1 = {}));

var VoScripts$1;
(function (VoScripts) {
    VoScripts.KEY = new CollectionKey("vo_scripts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this.name = values["name"];
        }
    }
    VoScripts.Entry = Entry;
})(VoScripts$1 || (VoScripts$1 = {}));

var Videos$1;
(function (Videos) {
    Videos.KEY = new CollectionKey("videos");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.videoName = values["video_name"];
            this._videoType = values["video_type"];
            this.audioTracks = values["audio_tracks"];
            this._scriptRef = values["script_ref"];
            this._gameExpansionKey = values["game_expansion_key"];
        }
        get videoType() {
            const collection = this.collectionCache.getCollection(VideoTypes$1.KEY, VideoTypes$1.Entry);
            return collection.find(entry => entry.videoType === this._videoType);
        }
        get scriptRef() {
            const collection = this.collectionCache.getCollection(VoScripts$1.KEY, VoScripts$1.Entry);
            return collection.find(entry => entry.id === this._scriptRef);
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
    }
    Videos.Entry = Entry;
})(Videos$1 || (Videos$1 = {}));

var UnitAbilitySourceTypes;
(function (UnitAbilitySourceTypes) {
    UnitAbilitySourceTypes.KEY = new CollectionKey("unit_ability_source_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.name = values["name"];
            this.tooltip = values["tooltip"];
        }
    }
    UnitAbilitySourceTypes.Entry = Entry;
})(UnitAbilitySourceTypes || (UnitAbilitySourceTypes = {}));

var UnitAbilities$1;
(function (UnitAbilities) {
    UnitAbilities.KEY = new CollectionKey("unit_abilities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.supersedesAbility = values["supersedes_ability"];
            this.requiresEffectEnabling = !!values["requires_effect_enabling"];
            this.tooltipText = values["tooltip_text"];
            this.onscreenName = values["onscreen_name"];
            this.iconName = values["icon_name"];
            this._overpowerOption = values["overpower_option"];
            this._type = values["type"];
            this._video = values["video"];
            this._uniqueness = values["uniqueness"];
            this.isUnitUpgrade = !!values["is_unit_upgrade"];
            this.isHiddenInUi = !!values["is_hidden_in_ui"];
            this._sourceType = values["source_type"];
        }
        get overpowerOption() {
            const collection = this.collectionCache.getCollection(UnitAbilities.KEY, UnitAbilities.Entry);
            return collection.find(entry => entry.key === this._overpowerOption);
        }
        get type() {
            const collection = this.collectionCache.getCollection(UnitAbilityTypes.KEY, UnitAbilityTypes.Entry);
            return collection.find(entry => entry.key === this._type);
        }
        get video() {
            const collection = this.collectionCache.getCollection(Videos$1.KEY, Videos$1.Entry);
            return collection.find(entry => entry.videoName === this._video);
        }
        get uniqueness() {
            const collection = this.collectionCache.getCollection(AncillaryUniquenessGroupings.KEY, AncillaryUniquenessGroupings.Entry);
            return collection.find(entry => entry.groupKey === this._uniqueness);
        }
        get sourceType() {
            const collection = this.collectionCache.getCollection(UnitAbilitySourceTypes.KEY, UnitAbilitySourceTypes.Entry);
            return collection.find(entry => entry.key === this._sourceType);
        }
    }
    UnitAbilities.Entry = Entry;
})(UnitAbilities$1 || (UnitAbilities$1 = {}));

var SpecialAbilitiesSpecificBehaviourTypes$1;
(function (SpecialAbilitiesSpecificBehaviourTypes) {
    SpecialAbilitiesSpecificBehaviourTypes.KEY = new CollectionKey("special_abilities_specific_behaviour_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    SpecialAbilitiesSpecificBehaviourTypes.Entry = Entry;
})(SpecialAbilitiesSpecificBehaviourTypes$1 || (SpecialAbilitiesSpecificBehaviourTypes$1 = {}));

var ProjectileBombardmentLaunchSources;
(function (ProjectileBombardmentLaunchSources) {
    ProjectileBombardmentLaunchSources.KEY = new CollectionKey("projectile_bombardment_launch_sources");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.suggestedLaunchSource = values["suggested_launch_source"];
            this.description = values["description"];
        }
    }
    ProjectileBombardmentLaunchSources.Entry = Entry;
})(ProjectileBombardmentLaunchSources || (ProjectileBombardmentLaunchSources = {}));

var AudioProjectileBombardments;
(function (AudioProjectileBombardments) {
    AudioProjectileBombardments.KEY = new CollectionKey("audio_projectile_bombardments");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.event = values["event"];
            this.obstructionSize = values["obstruction_size"];
            this.useReverb = !!values["use_reverb"];
            this.maxAttenuation = values["max_attenuation"];
        }
    }
    AudioProjectileBombardments.Entry = Entry;
})(AudioProjectileBombardments || (AudioProjectileBombardments = {}));

var ProjectileBombardments;
(function (ProjectileBombardments) {
    ProjectileBombardments.KEY = new CollectionKey("projectile_bombardments");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.bombardmentKey = values["bombardment_key"];
            this._projectileType = values["projectile_type"];
            this.numProjectiles = values["num_projectiles"];
            this.startTime = values["start_time"];
            this.arrivalWindow = values["arrival_window"];
            this.radiusSpread = values["radius_spread"];
            this._launchSource = values["launch_source"];
            this._launchVfx = values["launch_vfx"];
            this.launchHeight = values["launch_height"];
            this._audioType = values["audio_type"];
            this.launchHeightUnderground = values["launch_height_underground"];
            this.randomiseLaunch = !!values["randomise_launch"];
        }
        get projectileType() {
            const collection = this.collectionCache.getCollection(Projectiles$1.KEY, Projectiles$1.Entry);
            return collection.find(entry => entry.key === this._projectileType);
        }
        get launchSource() {
            const collection = this.collectionCache.getCollection(ProjectileBombardmentLaunchSources.KEY, ProjectileBombardmentLaunchSources.Entry);
            return collection.find(entry => entry.suggestedLaunchSource === this._launchSource);
        }
        get launchVfx() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._launchVfx);
        }
        get audioType() {
            const collection = this.collectionCache.getCollection(AudioProjectileBombardments.KEY, AudioProjectileBombardments.Entry);
            return collection.find(entry => entry.key === this._audioType);
        }
    }
    ProjectileBombardments.Entry = Entry;
})(ProjectileBombardments || (ProjectileBombardments = {}));

var CompositeSceneFiles;
(function (CompositeSceneFiles) {
    CompositeSceneFiles.KEY = new CollectionKey("composite_scene_files");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.sceneFilepath = values["scene_filepath"];
        }
    }
    CompositeSceneFiles.Entry = Entry;
})(CompositeSceneFiles || (CompositeSceneFiles = {}));

var BattleVortexLaunchSources;
(function (BattleVortexLaunchSources) {
    BattleVortexLaunchSources.KEY = new CollectionKey("battle_vortex_launch_sources");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.suggestedLaunchSource = values["suggested_launch_source"];
            this.description = values["description"];
        }
    }
    BattleVortexLaunchSources.Entry = Entry;
})(BattleVortexLaunchSources || (BattleVortexLaunchSources = {}));

var BattleVortexCollisionResponses;
(function (BattleVortexCollisionResponses) {
    BattleVortexCollisionResponses.KEY = new CollectionKey("battle_vortex_collision_responses");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.vortexCollisionType = values["vortex_collision_type"];
            this.description = values["description"];
        }
    }
    BattleVortexCollisionResponses.Entry = Entry;
})(BattleVortexCollisionResponses || (BattleVortexCollisionResponses = {}));

var BattleVortexs;
(function (BattleVortexs) {
    BattleVortexs.KEY = new CollectionKey("battle_vortexs");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.vortexKey = values["vortex_key"];
            this.duration = values["duration"];
            this.damage = values["damage"];
            this.damageAp = values["damage_ap"];
            this.expansionSpeed = values["expansion_speed"];
            this.startRadius = values["start_radius"];
            this.goalRadius = values["goal_radius"];
            this.movementSpeed = values["movement_speed"];
            this.moveChangeFreq = values["move_change_freq"];
            this.changeMaxAngle = values["change_max_angle"];
            this._contactEffect = values["contact_effect"];
            this.heightOffGround = values["height_off_ground"];
            this.infiniteHeight = !!values["infinite_height"];
            this.ignitionAmount = values["ignition_amount"];
            this.isMagical = !!values["is_magical"];
            this._compositeScene = values["composite_scene"];
            this.detonationForce = values["detonation_force"];
            this._launchSource = values["launch_source"];
            this._buildingCollision = values["building_collision"];
            this.delay = values["delay"];
            this._launchVfx = values["launch_vfx"];
            this._compositeSceneBlood = values["composite_scene_blood"];
            this.numVortexes = values["num_vortexes"];
            this.affectsAllies = !!values["affects_allies"];
            this.launchSourceOffset = values["launch_source_offset"];
            this._compositeSceneGroup = values["composite_scene_group"];
            this.delayBetweenVortexes = values["delay_between_vortexes"];
        }
        get contactEffect() {
            const collection = this.collectionCache.getCollection(SpecialAbilityPhases$1.KEY, SpecialAbilityPhases$1.Entry);
            return collection.find(entry => entry.id === this._contactEffect);
        }
        get compositeScene() {
            const collection = this.collectionCache.getCollection(CompositeSceneFiles.KEY, CompositeSceneFiles.Entry);
            return collection.find(entry => entry.sceneFilepath === this._compositeScene);
        }
        get launchSource() {
            const collection = this.collectionCache.getCollection(BattleVortexLaunchSources.KEY, BattleVortexLaunchSources.Entry);
            return collection.find(entry => entry.suggestedLaunchSource === this._launchSource);
        }
        get buildingCollision() {
            const collection = this.collectionCache.getCollection(BattleVortexCollisionResponses.KEY, BattleVortexCollisionResponses.Entry);
            return collection.find(entry => entry.vortexCollisionType === this._buildingCollision);
        }
        get launchVfx() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._launchVfx);
        }
        get compositeSceneBlood() {
            const collection = this.collectionCache.getCollection(CompositeSceneFiles.KEY, CompositeSceneFiles.Entry);
            return collection.find(entry => entry.sceneFilepath === this._compositeSceneBlood);
        }
        get compositeSceneGroup() {
            const collection = this.collectionCache.getCollection(BattleVortexCompositeSceneGroups.KEY, BattleVortexCompositeSceneGroups.Entry);
            return collection.find(entry => entry.groupId === this._compositeSceneGroup);
        }
    }
    BattleVortexs.Entry = Entry;
})(BattleVortexs || (BattleVortexs = {}));

var BattleAiAbilitiesUsageTemplateNames;
(function (BattleAiAbilitiesUsageTemplateNames) {
    BattleAiAbilitiesUsageTemplateNames.KEY = new CollectionKey("battle_ai_abilities_usage_template_names");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.aiAbilityUsageTemplateKey = values["ai_ability_usage_template_key"];
            this.factorBias = values["factor_bias"];
        }
    }
    BattleAiAbilitiesUsageTemplateNames.Entry = Entry;
})(BattleAiAbilitiesUsageTemplateNames || (BattleAiAbilitiesUsageTemplateNames = {}));

var AudioAbilities;
(function (AudioAbilities) {
    AudioAbilities.KEY = new CollectionKey("audio_abilities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.uiEnableEvent = values["ui_enable_event"];
            this.uiTargettingEventStart = values["ui_targetting_event_start"];
            this.uiTargettingEventStop = values["ui_targetting_event_stop"];
            this.uiDisableEvent = values["ui_disable_event"];
            this.uiSelectEvent = values["ui_select_event"];
            this.enableEvent = values["enable_event"];
            this.disableEvent = values["disable_event"];
            this.maxDistance = values["max_distance"];
            this.useReverb = !!values["use_reverb"];
            this.switch = values["switch"];
            this.windUpTargetEnableEvent = values["wind_up_target_enable_event"];
            this.windUpTargetDisableEvent = values["wind_up_target_disable_event"];
            this.windUpTargetMaxDistance = values["wind_up_target_max_distance"];
            this.windUpTargetUseReverb = !!values["wind_up_target_use_reverb"];
            this.windUpTargetSwitch = values["wind_up_target_switch"];
            this.useActiveTime = !!values["use_active_time"];
            this.useWindUpTime = !!values["use_wind_up_time"];
            this.castingRtpcName = values["casting_rtpc_name"];
        }
    }
    AudioAbilities.Entry = Entry;
})(AudioAbilities || (AudioAbilities = {}));

var SpecialAbilityDisplays;
(function (SpecialAbilityDisplays) {
    SpecialAbilityDisplays.KEY = new CollectionKey("special_ability_displays");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.saDisplayKey = values["sa_display_key"];
            this._windUpWeaponVfx = values["wind_up_weapon_vfx"];
            this._windUpAuraVfx = values["wind_up_aura_vfx"];
        }
        get windUpWeaponVfx() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._windUpWeaponVfx);
        }
        get windUpAuraVfx() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._windUpAuraVfx);
        }
    }
    SpecialAbilityDisplays.Entry = Entry;
})(SpecialAbilityDisplays || (SpecialAbilityDisplays = {}));

var AudioVoBattleSpecialAbilityStates;
(function (AudioVoBattleSpecialAbilityStates) {
    AudioVoBattleSpecialAbilityStates.KEY = new CollectionKey("audio_vo_battle_special_ability_states");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    AudioVoBattleSpecialAbilityStates.Entry = Entry;
})(AudioVoBattleSpecialAbilityStates || (AudioVoBattleSpecialAbilityStates = {}));

var SpecialAbilitySpawnTypes;
(function (SpecialAbilitySpawnTypes) {
    SpecialAbilitySpawnTypes.KEY = new CollectionKey("special_ability_spawn_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    SpecialAbilitySpawnTypes.Entry = Entry;
})(SpecialAbilitySpawnTypes || (SpecialAbilitySpawnTypes = {}));

var UnitSpecialAbilities$1;
(function (UnitSpecialAbilities) {
    UnitSpecialAbilities.KEY = new CollectionKey("unit_special_abilities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this.numUses = values["num_uses"];
            this.activeTime = values["active_time"];
            this.rechargeTime = values["recharge_time"];
            this.initialRecharge = values["initial_recharge"];
            this.windUpTime = values["wind_up_time"];
            this.passive = !!values["passive"];
            this.effectRange = values["effect_range"];
            this.affectSelf = !!values["affect_self"];
            this.numEffectedFriendlyUnits = values["num_effected_friendly_units"];
            this.numEffectedEnemyUnits = values["num_effected_enemy_units"];
            this.updateTargetsEveryFrame = !!values["update_targets_every_frame"];
            this._activatedProjectile = values["activated_projectile"];
            this.targetFriends = !!values["target_friends"];
            this.targetEnemies = !!values["target_enemies"];
            this.targetGround = !!values["target_ground"];
            this.targetInterceptRange = values["target_intercept_range"];
            this._assumeSpecificBehaviour = values["assume_specific_behaviour"];
            this.clearCurrentOrder = !!values["clear_current_order"];
            this.uniqueId = values["unique_id"];
            this._bombardment = values["bombardment"];
            this._spawnedUnit = values["spawned_unit"];
            this._vortex = values["vortex"];
            this._windUpStance = values["wind_up_stance"];
            this.manaCost = values["mana_cost"];
            this.minRange = values["min_range"];
            this._targettingAoe = values["targetting_aoe"];
            this._passiveAoe = values["passive_aoe"];
            this._activeAoe = values["active_aoe"];
            this._activationEffect = values["activation_effect"];
            this.miscastChance = values["miscast_chance"];
            this._miscastExplosion = values["miscast_explosion"];
            this._aiUsage = values["ai_usage"];
            this._audio = values["audio"];
            this._specialAbilityDisplay = values["special_ability_display"];
            this._voiceoverState = values["voiceover_state"];
            this.additionalMeleeCp = values["additional_melee_cp"];
            this.additionalMissileCp = values["additional_missile_cp"];
            this._parentAbility = values["parent_ability"];
            this._spawnType = values["spawn_type"];
            this._spawnProxyVfx = values["spawn_proxy_vfx"];
            this.targetGroundUnderAllies = !!values["target_ground_under_allies"];
            this.targetGroundUnderEnemies = !!values["target_ground_under_enemies"];
            this.miscastGlobalBonus = !!values["miscast_global_bonus"];
            this.targetSelf = !!values["target_self"];
            this._compositeSceneGroupOnWindUp = values["composite_scene_group_on_wind_up"];
            this._compositeSceneGroupOnActive = values["composite_scene_group_on_active"];
            this.spawnIsTransformation = !!values["spawn_is_transformation"];
            this._windDownStance = values["wind_down_stance"];
            this.useLoopStance = !!values["use_loop_stance"];
            this.spawnIsDecoy = !!values["spawn_is_decoy"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(UnitAbilities$1.KEY, UnitAbilities$1.Entry);
            return collection.find(entry => entry.key === this._key);
        }
        get activatedProjectile() {
            const collection = this.collectionCache.getCollection(Projectiles$1.KEY, Projectiles$1.Entry);
            return collection.find(entry => entry.key === this._activatedProjectile);
        }
        get assumeSpecificBehaviour() {
            const collection = this.collectionCache.getCollection(SpecialAbilitiesSpecificBehaviourTypes$1.KEY, SpecialAbilitiesSpecificBehaviourTypes$1.Entry);
            return collection.find(entry => entry.key === this._assumeSpecificBehaviour);
        }
        get bombardment() {
            const collection = this.collectionCache.getCollection(ProjectileBombardments.KEY, ProjectileBombardments.Entry);
            return collection.find(entry => entry.bombardmentKey === this._bombardment);
        }
        get spawnedUnit() {
            const collection = this.collectionCache.getCollection(LandUnits$1.KEY, LandUnits$1.Entry);
            return collection.find(entry => entry.key === this._spawnedUnit);
        }
        get vortex() {
            const collection = this.collectionCache.getCollection(BattleVortexs.KEY, BattleVortexs.Entry);
            return collection.find(entry => entry.vortexKey === this._vortex);
        }
        get windUpStance() {
            const collection = this.collectionCache.getCollection(SpecialAbilityStanceEnums$1.KEY, SpecialAbilityStanceEnums$1.Entry);
            return collection.find(entry => entry.key === this._windUpStance);
        }
        get targettingAoe() {
            const collection = this.collectionCache.getCollection(AreaOfEffectDisplays.KEY, AreaOfEffectDisplays.Entry);
            return collection.find(entry => entry.key === this._targettingAoe);
        }
        get passiveAoe() {
            const collection = this.collectionCache.getCollection(AreaOfEffectDisplays.KEY, AreaOfEffectDisplays.Entry);
            return collection.find(entry => entry.key === this._passiveAoe);
        }
        get activeAoe() {
            const collection = this.collectionCache.getCollection(AreaOfEffectDisplays.KEY, AreaOfEffectDisplays.Entry);
            return collection.find(entry => entry.key === this._activeAoe);
        }
        get activationEffect() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._activationEffect);
        }
        get miscastExplosion() {
            const collection = this.collectionCache.getCollection(ProjectilesExplosions$1.KEY, ProjectilesExplosions$1.Entry);
            return collection.find(entry => entry.key === this._miscastExplosion);
        }
        get aiUsage() {
            const collection = this.collectionCache.getCollection(BattleAiAbilitiesUsageTemplateNames.KEY, BattleAiAbilitiesUsageTemplateNames.Entry);
            return collection.find(entry => entry.aiAbilityUsageTemplateKey === this._aiUsage);
        }
        get audio() {
            const collection = this.collectionCache.getCollection(AudioAbilities.KEY, AudioAbilities.Entry);
            return collection.find(entry => entry.key === this._audio);
        }
        get specialAbilityDisplay() {
            const collection = this.collectionCache.getCollection(SpecialAbilityDisplays.KEY, SpecialAbilityDisplays.Entry);
            return collection.find(entry => entry.saDisplayKey === this._specialAbilityDisplay);
        }
        get voiceoverState() {
            const collection = this.collectionCache.getCollection(AudioVoBattleSpecialAbilityStates.KEY, AudioVoBattleSpecialAbilityStates.Entry);
            return collection.find(entry => entry.key === this._voiceoverState);
        }
        get parentAbility() {
            const collection = this.collectionCache.getCollection(UnitSpecialAbilities.KEY, UnitSpecialAbilities.Entry);
            return collection.find(entry => entry._key === this._parentAbility);
        }
        get spawnType() {
            const collection = this.collectionCache.getCollection(SpecialAbilitySpawnTypes.KEY, SpecialAbilitySpawnTypes.Entry);
            return collection.find(entry => entry.key === this._spawnType);
        }
        get spawnProxyVfx() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._spawnProxyVfx);
        }
        get compositeSceneGroupOnWindUp() {
            const collection = this.collectionCache.getCollection(BattleVortexCompositeSceneGroups.KEY, BattleVortexCompositeSceneGroups.Entry);
            return collection.find(entry => entry.groupId === this._compositeSceneGroupOnWindUp);
        }
        get compositeSceneGroupOnActive() {
            const collection = this.collectionCache.getCollection(BattleVortexCompositeSceneGroups.KEY, BattleVortexCompositeSceneGroups.Entry);
            return collection.find(entry => entry.groupId === this._compositeSceneGroupOnActive);
        }
        get windDownStance() {
            const collection = this.collectionCache.getCollection(SpecialAbilityStanceEnums$1.KEY, SpecialAbilityStanceEnums$1.Entry);
            return collection.find(entry => entry.key === this._windDownStance);
        }
    }
    UnitSpecialAbilities.Entry = Entry;
})(UnitSpecialAbilities$1 || (UnitSpecialAbilities$1 = {}));

var ArmySpecialAbilities;
(function (ArmySpecialAbilities) {
    ArmySpecialAbilities.KEY = new CollectionKey("army_special_abilities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.armySpecialAbility = values["army_special_ability"];
            this._unitSpecialAbility = values["unit_special_ability"];
            this.uniqueId = values["unique_id"];
            this.enablesSiegeAssault = !!values["enables_siege_assault"];
        }
        get unitSpecialAbility() {
            const collection = this.collectionCache.getCollection(UnitSpecialAbilities$1.KEY, UnitSpecialAbilities$1.Entry);
            return collection.find(entry => entry._key === this._unitSpecialAbility);
        }
    }
    ArmySpecialAbilities.Entry = Entry;
})(ArmySpecialAbilities || (ArmySpecialAbilities = {}));

var ArmySpecialAbilitiesForFactionJunctions;
(function (ArmySpecialAbilitiesForFactionJunctions) {
    ArmySpecialAbilitiesForFactionJunctions.KEY = new CollectionKey("army_special_abilities_for_faction_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._armySpecialAbility = values["army_special_ability"];
            this._faction = values["faction"];
        }
        get armySpecialAbility() {
            const collection = this.collectionCache.getCollection(ArmySpecialAbilities.KEY, ArmySpecialAbilities.Entry);
            return collection.find(entry => entry.armySpecialAbility === this._armySpecialAbility);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    ArmySpecialAbilitiesForFactionJunctions.Entry = Entry;
})(ArmySpecialAbilitiesForFactionJunctions || (ArmySpecialAbilitiesForFactionJunctions = {}));

var AudioAreaOfEffectPositioningTypes;
(function (AudioAreaOfEffectPositioningTypes) {
    AudioAreaOfEffectPositioningTypes.KEY = new CollectionKey("audio_area_of_effect_positioning_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.type = values["type"];
        }
    }
    AudioAreaOfEffectPositioningTypes.Entry = Entry;
})(AudioAreaOfEffectPositioningTypes || (AudioAreaOfEffectPositioningTypes = {}));

var AudioAreaOfEffects;
(function (AudioAreaOfEffects) {
    AudioAreaOfEffects.KEY = new CollectionKey("audio_area_of_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
            this.eventStart = values["event_start"];
            this.eventStop = values["event_stop"];
            this._positioningType = values["positioning_type"];
            this.maxDistance = values["max_distance"];
            this.useReverb = !!values["use_reverb"];
            this.velocityRtpc = values["velocity_rtpc"];
            this.switch = values["switch"];
        }
        get positioningType() {
            const collection = this.collectionCache.getCollection(AudioAreaOfEffectPositioningTypes.KEY, AudioAreaOfEffectPositioningTypes.Entry);
            return collection.find(entry => entry.type === this._positioningType);
        }
    }
    AudioAreaOfEffects.Entry = Entry;
})(AudioAreaOfEffects || (AudioAreaOfEffects = {}));

var AudioBattleEnvironments;
(function (AudioBattleEnvironments) {
    AudioBattleEnvironments.KEY = new CollectionKey("audio_battle_environments");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
            this.isDefault = !!values["is_default"];
            this.globalWaterRtpc = values["global_water_rtpc"];
            this.globalPlainsRtpc = values["global_plains_rtpc"];
            this.globalForestRtpc = values["global_forest_rtpc"];
            this.globalUrbanRtpc = values["global_urban_rtpc"];
        }
    }
    AudioBattleEnvironments.Entry = Entry;
})(AudioBattleEnvironments || (AudioBattleEnvironments = {}));

var AudioBattleEnvironmentLoops;
(function (AudioBattleEnvironmentLoops) {
    AudioBattleEnvironmentLoops.KEY = new CollectionKey("audio_battle_environment_loops");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
            this.eventStart = values["event_start"];
            this.eventStop = values["event_stop"];
            this.intensityRtpc = values["intensity_rtpc"];
            this.makeRtpcGlobal = !!values["make_rtpc_global"];
            this.sampleDistance = values["sample_distance"];
            this.canWeatherDisable = !!values["can_weather_disable"];
            this.heightInfluence = !!values["height_influence"];
            this.heightScale = values["height_scale"];
            this.useBuildingHeight = !!values["use_building_height"];
            this.useTreeHeight = !!values["use_tree_height"];
            this.alwaysPlay = !!values["always_play"];
        }
    }
    AudioBattleEnvironmentLoops.Entry = Entry;
})(AudioBattleEnvironmentLoops || (AudioBattleEnvironmentLoops = {}));

var AudioBattleEnvironmentTypes;
(function (AudioBattleEnvironmentTypes) {
    AudioBattleEnvironmentTypes.KEY = new CollectionKey("audio_battle_environment_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
        }
    }
    AudioBattleEnvironmentTypes.Entry = Entry;
})(AudioBattleEnvironmentTypes || (AudioBattleEnvironmentTypes = {}));

var AudioBattleEnvironmentLoopJunctions;
(function (AudioBattleEnvironmentLoopJunctions) {
    AudioBattleEnvironmentLoopJunctions.KEY = new CollectionKey("audio_battle_environment_loop_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._environment = values["environment"];
            this._type = values["type"];
            this._loop = values["loop"];
        }
        get environment() {
            const collection = this.collectionCache.getCollection(AudioBattleEnvironments.KEY, AudioBattleEnvironments.Entry);
            return collection.find(entry => entry.name === this._environment);
        }
        get type() {
            const collection = this.collectionCache.getCollection(AudioBattleEnvironmentTypes.KEY, AudioBattleEnvironmentTypes.Entry);
            return collection.find(entry => entry.name === this._type);
        }
        get loop() {
            const collection = this.collectionCache.getCollection(AudioBattleEnvironmentLoops.KEY, AudioBattleEnvironmentLoops.Entry);
            return collection.find(entry => entry.name === this._loop);
        }
    }
    AudioBattleEnvironmentLoopJunctions.Entry = Entry;
})(AudioBattleEnvironmentLoopJunctions || (AudioBattleEnvironmentLoopJunctions = {}));

var AudioBattleEnvironmentOneShots;
(function (AudioBattleEnvironmentOneShots) {
    AudioBattleEnvironmentOneShots.KEY = new CollectionKey("audio_battle_environment_one_shots");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
            this.event = values["event"];
            this.minTime = values["min_time"];
            this.maxTime = values["max_time"];
            this.minDistance = values["min_distance"];
            this.maxDistance = values["max_distance"];
            this.minHeight = values["min_height"];
            this.maxHeight = values["max_height"];
            this.requiredIntensity = values["required_intensity"];
            this.canWeatherDisable = !!values["can_weather_disable"];
            this.probability = values["probability"];
        }
    }
    AudioBattleEnvironmentOneShots.Entry = Entry;
})(AudioBattleEnvironmentOneShots || (AudioBattleEnvironmentOneShots = {}));

var AudioBattleEnvironmentOneShotJunctions;
(function (AudioBattleEnvironmentOneShotJunctions) {
    AudioBattleEnvironmentOneShotJunctions.KEY = new CollectionKey("audio_battle_environment_one_shot_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._environment = values["environment"];
            this._type = values["type"];
            this._oneShot = values["one_shot"];
        }
        get environment() {
            const collection = this.collectionCache.getCollection(AudioBattleEnvironments.KEY, AudioBattleEnvironments.Entry);
            return collection.find(entry => entry.name === this._environment);
        }
        get type() {
            const collection = this.collectionCache.getCollection(AudioBattleEnvironmentTypes.KEY, AudioBattleEnvironmentTypes.Entry);
            return collection.find(entry => entry.name === this._type);
        }
        get oneShot() {
            const collection = this.collectionCache.getCollection(AudioBattleEnvironmentOneShots.KEY, AudioBattleEnvironmentOneShots.Entry);
            return collection.find(entry => entry.name === this._oneShot);
        }
    }
    AudioBattleEnvironmentOneShotJunctions.Entry = Entry;
})(AudioBattleEnvironmentOneShotJunctions || (AudioBattleEnvironmentOneShotJunctions = {}));

var AudioBattleEnvironmentReverbs;
(function (AudioBattleEnvironmentReverbs) {
    AudioBattleEnvironmentReverbs.KEY = new CollectionKey("audio_battle_environment_reverbs");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
            this.auxFl = values["aux_fl"];
            this.auxFr = values["aux_fr"];
            this.auxRl = values["aux_rl"];
            this.auxRr = values["aux_rr"];
        }
    }
    AudioBattleEnvironmentReverbs.Entry = Entry;
})(AudioBattleEnvironmentReverbs || (AudioBattleEnvironmentReverbs = {}));

var AudioBattleEnvironmentReverbTypes;
(function (AudioBattleEnvironmentReverbTypes) {
    AudioBattleEnvironmentReverbTypes.KEY = new CollectionKey("audio_battle_environment_reverb_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.type = values["type"];
        }
    }
    AudioBattleEnvironmentReverbTypes.Entry = Entry;
})(AudioBattleEnvironmentReverbTypes || (AudioBattleEnvironmentReverbTypes = {}));

var AudioBattleEnvironmentReverbJunctions;
(function (AudioBattleEnvironmentReverbJunctions) {
    AudioBattleEnvironmentReverbJunctions.KEY = new CollectionKey("audio_battle_environment_reverb_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._environment = values["environment"];
            this._type = values["type"];
            this._reverb = values["reverb"];
        }
        get environment() {
            const collection = this.collectionCache.getCollection(AudioBattleEnvironments.KEY, AudioBattleEnvironments.Entry);
            return collection.find(entry => entry.name === this._environment);
        }
        get type() {
            const collection = this.collectionCache.getCollection(AudioBattleEnvironmentReverbTypes.KEY, AudioBattleEnvironmentReverbTypes.Entry);
            return collection.find(entry => entry.type === this._type);
        }
        get reverb() {
            const collection = this.collectionCache.getCollection(AudioBattleEnvironmentReverbs.KEY, AudioBattleEnvironmentReverbs.Entry);
            return collection.find(entry => entry.name === this._reverb);
        }
    }
    AudioBattleEnvironmentReverbJunctions.Entry = Entry;
})(AudioBattleEnvironmentReverbJunctions || (AudioBattleEnvironmentReverbJunctions = {}));

var AudioBattleEnvironmentWeathers;
(function (AudioBattleEnvironmentWeathers) {
    AudioBattleEnvironmentWeathers.KEY = new CollectionKey("audio_battle_environment_weathers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
            this.windIntensityModifier = values["wind_intensity_modifier"];
            this.disablesEnvironment = !!values["disables_environment"];
        }
    }
    AudioBattleEnvironmentWeathers.Entry = Entry;
})(AudioBattleEnvironmentWeathers || (AudioBattleEnvironmentWeathers = {}));

var AudioBattleEnvironmentWeatherLoopJunctions;
(function (AudioBattleEnvironmentWeatherLoopJunctions) {
    AudioBattleEnvironmentWeatherLoopJunctions.KEY = new CollectionKey("audio_battle_environment_weather_loop_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._weather = values["weather"];
            this._type = values["type"];
            this._loop = values["loop"];
        }
        get weather() {
            const collection = this.collectionCache.getCollection(AudioBattleEnvironmentWeathers.KEY, AudioBattleEnvironmentWeathers.Entry);
            return collection.find(entry => entry.name === this._weather);
        }
        get type() {
            const collection = this.collectionCache.getCollection(AudioBattleEnvironmentTypes.KEY, AudioBattleEnvironmentTypes.Entry);
            return collection.find(entry => entry.name === this._type);
        }
        get loop() {
            const collection = this.collectionCache.getCollection(AudioBattleEnvironmentLoops.KEY, AudioBattleEnvironmentLoops.Entry);
            return collection.find(entry => entry.name === this._loop);
        }
    }
    AudioBattleEnvironmentWeatherLoopJunctions.Entry = Entry;
})(AudioBattleEnvironmentWeatherLoopJunctions || (AudioBattleEnvironmentWeatherLoopJunctions = {}));

var AudioBattleEnvironmentWeatherOneShotJunctions;
(function (AudioBattleEnvironmentWeatherOneShotJunctions) {
    AudioBattleEnvironmentWeatherOneShotJunctions.KEY = new CollectionKey("audio_battle_environment_weather_one_shot_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._weather = values["weather"];
            this._type = values["type"];
            this._oneShot = values["one_shot"];
        }
        get weather() {
            const collection = this.collectionCache.getCollection(AudioBattleEnvironmentWeathers.KEY, AudioBattleEnvironmentWeathers.Entry);
            return collection.find(entry => entry.name === this._weather);
        }
        get type() {
            const collection = this.collectionCache.getCollection(AudioBattleEnvironmentTypes.KEY, AudioBattleEnvironmentTypes.Entry);
            return collection.find(entry => entry.name === this._type);
        }
        get oneShot() {
            const collection = this.collectionCache.getCollection(AudioBattleEnvironmentOneShots.KEY, AudioBattleEnvironmentOneShots.Entry);
            return collection.find(entry => entry.name === this._oneShot);
        }
    }
    AudioBattleEnvironmentWeatherOneShotJunctions.Entry = Entry;
})(AudioBattleEnvironmentWeatherOneShotJunctions || (AudioBattleEnvironmentWeatherOneShotJunctions = {}));

var AudioBattleGroundTypes;
(function (AudioBattleGroundTypes) {
    AudioBattleGroundTypes.KEY = new CollectionKey("audio_battle_ground_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.switch = values["switch"];
            this.canBeSnow = !!values["can_be_snow"];
            this._fallback = values["fallback"];
            this._audioMaterial = values["audio_material"];
        }
        get fallback() {
            const collection = this.collectionCache.getCollection(AudioBattleGroundTypes.KEY, AudioBattleGroundTypes.Entry);
            return collection.find(entry => entry.key === this._fallback);
        }
        get audioMaterial() {
            const collection = this.collectionCache.getCollection(AudioMaterials.KEY, AudioMaterials.Entry);
            return collection.find(entry => entry.key === this._audioMaterial);
        }
    }
    AudioBattleGroundTypes.Entry = Entry;
})(AudioBattleGroundTypes || (AudioBattleGroundTypes = {}));

var AudioCampaignBuildingEnums$1;
(function (AudioCampaignBuildingEnums) {
    AudioCampaignBuildingEnums.KEY = new CollectionKey("audio_campaign_building_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    AudioCampaignBuildingEnums.Entry = Entry;
})(AudioCampaignBuildingEnums$1 || (AudioCampaignBuildingEnums$1 = {}));

var AudioCampaignEnvironmentGroundTypeSounds;
(function (AudioCampaignEnvironmentGroundTypeSounds) {
    AudioCampaignEnvironmentGroundTypeSounds.KEY = new CollectionKey("audio_campaign_environment_ground_type_sounds");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.sampleRange = values["sample_range"];
            this.groupingSize = values["grouping_size"];
            this.requiredIntensity = values["required_intensity"];
        }
    }
    AudioCampaignEnvironmentGroundTypeSounds.Entry = Entry;
})(AudioCampaignEnvironmentGroundTypeSounds || (AudioCampaignEnvironmentGroundTypeSounds = {}));

var CampaignMaps$1;
(function (CampaignMaps) {
    CampaignMaps.KEY = new CollectionKey("campaign_maps");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.mapname = values["mapname"];
            this.minx = values["minx"];
            this.miny = values["miny"];
            this.maxx = values["maxx"];
            this.maxy = values["maxy"];
            this._gameExpansionKey = values["game_expansion_key"];
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
    }
    CampaignMaps.Entry = Entry;
})(CampaignMaps$1 || (CampaignMaps$1 = {}));

var AudioCampaignMaps;
(function (AudioCampaignMaps) {
    AudioCampaignMaps.KEY = new CollectionKey("audio_campaign_maps");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this.listenerScalingFactor = values["listener_scaling_factor"];
            this.reverbDefault = values["reverb_default"];
            this.reverbUnderground = values["reverb_underground"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(CampaignMaps$1.KEY, CampaignMaps$1.Entry);
            return collection.find(entry => entry.mapname === this._key);
        }
    }
    AudioCampaignMaps.Entry = Entry;
})(AudioCampaignMaps || (AudioCampaignMaps = {}));

var AudioCampaignEnvironmentGroundTypeSoundAssignments;
(function (AudioCampaignEnvironmentGroundTypeSoundAssignments) {
    AudioCampaignEnvironmentGroundTypeSoundAssignments.KEY = new CollectionKey("audio_campaign_environment_ground_type_sound_assignments");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._map = values["map"];
            this._sound = values["sound"];
        }
        get map() {
            const collection = this.collectionCache.getCollection(AudioCampaignMaps.KEY, AudioCampaignMaps.Entry);
            return collection.find(entry => entry._key === this._map);
        }
        get sound() {
            const collection = this.collectionCache.getCollection(AudioCampaignEnvironmentGroundTypeSounds.KEY, AudioCampaignEnvironmentGroundTypeSounds.Entry);
            return collection.find(entry => entry.key === this._sound);
        }
    }
    AudioCampaignEnvironmentGroundTypeSoundAssignments.Entry = Entry;
})(AudioCampaignEnvironmentGroundTypeSoundAssignments || (AudioCampaignEnvironmentGroundTypeSoundAssignments = {}));

var AudioCampaignGroundTypes;
(function (AudioCampaignGroundTypes) {
    AudioCampaignGroundTypes.KEY = new CollectionKey("audio_campaign_ground_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    AudioCampaignGroundTypes.Entry = Entry;
})(AudioCampaignGroundTypes || (AudioCampaignGroundTypes = {}));

var Cursors$1;
(function (Cursors) {
    Cursors.KEY = new CollectionKey("cursors");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.image = values["image"];
            this.frames = values["frames"];
            this.framerate = values["framerate"];
            this.hotspotX = values["hotspotX"];
            this.hotspotY = values["hotspotY"];
            this.loop = !!values["loop"];
            this.width = values["width"];
            this.height = values["height"];
            this.overlayImage = values["overlay_image"];
            this.isAniFile = !!values["is_ani_file"];
        }
    }
    Cursors.Entry = Entry;
})(Cursors$1 || (Cursors$1 = {}));

var CampaignGroundTypes$1;
(function (CampaignGroundTypes) {
    CampaignGroundTypes.KEY = new CollectionKey("campaign_ground_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.type = values["type"];
            this.movementCost = values["movement_cost"];
            this.onscreenName = values["onscreen_name"];
            this.isSea = !!values["is_sea"];
            this.icon = values["icon"];
            this._audioType = values["audio_type"];
            this._standardCursor = values["standard_cursor"];
            this._selectionCursor = values["selection_cursor"];
        }
        get audioType() {
            const collection = this.collectionCache.getCollection(AudioCampaignGroundTypes.KEY, AudioCampaignGroundTypes.Entry);
            return collection.find(entry => entry.key === this._audioType);
        }
        get standardCursor() {
            const collection = this.collectionCache.getCollection(Cursors$1.KEY, Cursors$1.Entry);
            return collection.find(entry => entry.key === this._standardCursor);
        }
        get selectionCursor() {
            const collection = this.collectionCache.getCollection(Cursors$1.KEY, Cursors$1.Entry);
            return collection.find(entry => entry.key === this._selectionCursor);
        }
    }
    CampaignGroundTypes.Entry = Entry;
})(CampaignGroundTypes$1 || (CampaignGroundTypes$1 = {}));

var AudioCampaignEnvironmentGroundTypeSoundGroundTypes;
(function (AudioCampaignEnvironmentGroundTypeSoundGroundTypes) {
    AudioCampaignEnvironmentGroundTypeSoundGroundTypes.KEY = new CollectionKey("audio_campaign_environment_ground_type_sound_ground_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._sound = values["sound"];
            this._groundType = values["ground_type"];
        }
        get sound() {
            const collection = this.collectionCache.getCollection(AudioCampaignEnvironmentGroundTypeSounds.KEY, AudioCampaignEnvironmentGroundTypeSounds.Entry);
            return collection.find(entry => entry.key === this._sound);
        }
        get groundType() {
            const collection = this.collectionCache.getCollection(CampaignGroundTypes$1.KEY, CampaignGroundTypes$1.Entry);
            return collection.find(entry => entry.type === this._groundType);
        }
    }
    AudioCampaignEnvironmentGroundTypeSoundGroundTypes.Entry = Entry;
})(AudioCampaignEnvironmentGroundTypeSoundGroundTypes || (AudioCampaignEnvironmentGroundTypeSoundGroundTypes = {}));

var AudioCampaignEnvironmentLoopingSounds;
(function (AudioCampaignEnvironmentLoopingSounds) {
    AudioCampaignEnvironmentLoopingSounds.KEY = new CollectionKey("audio_campaign_environment_looping_sounds");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.startEvent = values["start_event"];
            this.stopEvent = values["stop_event"];
            this.intensityRtpc = values["intensity_rtpc"];
        }
    }
    AudioCampaignEnvironmentLoopingSounds.Entry = Entry;
})(AudioCampaignEnvironmentLoopingSounds || (AudioCampaignEnvironmentLoopingSounds = {}));

var AudioCampaignEnvironmentGroundTypeSoundSounds;
(function (AudioCampaignEnvironmentGroundTypeSoundSounds) {
    AudioCampaignEnvironmentGroundTypeSoundSounds.KEY = new CollectionKey("audio_campaign_environment_ground_type_sound_sounds");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._sound = values["sound"];
            this.is3D = !!values["is_3d"];
            this._loopingSound = values["looping_sound"];
        }
        get sound() {
            const collection = this.collectionCache.getCollection(AudioCampaignEnvironmentGroundTypeSounds.KEY, AudioCampaignEnvironmentGroundTypeSounds.Entry);
            return collection.find(entry => entry.key === this._sound);
        }
        get loopingSound() {
            const collection = this.collectionCache.getCollection(AudioCampaignEnvironmentLoopingSounds.KEY, AudioCampaignEnvironmentLoopingSounds.Entry);
            return collection.find(entry => entry.key === this._loopingSound);
        }
    }
    AudioCampaignEnvironmentGroundTypeSoundSounds.Entry = Entry;
})(AudioCampaignEnvironmentGroundTypeSoundSounds || (AudioCampaignEnvironmentGroundTypeSoundSounds = {}));

var AudioCampaignEnvironmentStaticSounds;
(function (AudioCampaignEnvironmentStaticSounds) {
    AudioCampaignEnvironmentStaticSounds.KEY = new CollectionKey("audio_campaign_environment_static_sounds");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._map = values["map"];
            this._loopingSound = values["looping_sound"];
        }
        get map() {
            const collection = this.collectionCache.getCollection(AudioCampaignMaps.KEY, AudioCampaignMaps.Entry);
            return collection.find(entry => entry._key === this._map);
        }
        get loopingSound() {
            const collection = this.collectionCache.getCollection(AudioCampaignEnvironmentLoopingSounds.KEY, AudioCampaignEnvironmentLoopingSounds.Entry);
            return collection.find(entry => entry.key === this._loopingSound);
        }
    }
    AudioCampaignEnvironmentStaticSounds.Entry = Entry;
})(AudioCampaignEnvironmentStaticSounds || (AudioCampaignEnvironmentStaticSounds = {}));

var AudioCampaignEnvironmentTreeSounds;
(function (AudioCampaignEnvironmentTreeSounds) {
    AudioCampaignEnvironmentTreeSounds.KEY = new CollectionKey("audio_campaign_environment_tree_sounds");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.sampleRange = values["sample_range"];
            this.groupingSize = values["grouping_size"];
            this.requiredIntensity = values["required_intensity"];
        }
    }
    AudioCampaignEnvironmentTreeSounds.Entry = Entry;
})(AudioCampaignEnvironmentTreeSounds || (AudioCampaignEnvironmentTreeSounds = {}));

var AudioCampaignEnvironmentTreeSoundAssignments;
(function (AudioCampaignEnvironmentTreeSoundAssignments) {
    AudioCampaignEnvironmentTreeSoundAssignments.KEY = new CollectionKey("audio_campaign_environment_tree_sound_assignments");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._map = values["map"];
            this._sound = values["sound"];
        }
        get map() {
            const collection = this.collectionCache.getCollection(AudioCampaignMaps.KEY, AudioCampaignMaps.Entry);
            return collection.find(entry => entry._key === this._map);
        }
        get sound() {
            const collection = this.collectionCache.getCollection(AudioCampaignEnvironmentTreeSounds.KEY, AudioCampaignEnvironmentTreeSounds.Entry);
            return collection.find(entry => entry.key === this._sound);
        }
    }
    AudioCampaignEnvironmentTreeSoundAssignments.Entry = Entry;
})(AudioCampaignEnvironmentTreeSoundAssignments || (AudioCampaignEnvironmentTreeSoundAssignments = {}));

var AudioCampaignEnvironmentTreeSoundSounds;
(function (AudioCampaignEnvironmentTreeSoundSounds) {
    AudioCampaignEnvironmentTreeSoundSounds.KEY = new CollectionKey("audio_campaign_environment_tree_sound_sounds");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._treeSound = values["tree_sound"];
            this.is3D = !!values["is_3d"];
            this._loopingSound = values["looping_sound"];
        }
        get treeSound() {
            const collection = this.collectionCache.getCollection(AudioCampaignEnvironmentTreeSounds.KEY, AudioCampaignEnvironmentTreeSounds.Entry);
            return collection.find(entry => entry.key === this._treeSound);
        }
        get loopingSound() {
            const collection = this.collectionCache.getCollection(AudioCampaignEnvironmentLoopingSounds.KEY, AudioCampaignEnvironmentLoopingSounds.Entry);
            return collection.find(entry => entry.key === this._loopingSound);
        }
    }
    AudioCampaignEnvironmentTreeSoundSounds.Entry = Entry;
})(AudioCampaignEnvironmentTreeSoundSounds || (AudioCampaignEnvironmentTreeSoundSounds = {}));

var AudioCampaignTreeTypes;
(function (AudioCampaignTreeTypes) {
    AudioCampaignTreeTypes.KEY = new CollectionKey("audio_campaign_tree_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    AudioCampaignTreeTypes.Entry = Entry;
})(AudioCampaignTreeTypes || (AudioCampaignTreeTypes = {}));

var AudioCampaignEnvironmentTreeSoundTrees;
(function (AudioCampaignEnvironmentTreeSoundTrees) {
    AudioCampaignEnvironmentTreeSoundTrees.KEY = new CollectionKey("audio_campaign_environment_tree_sound_trees");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._sound = values["sound"];
            this._tree = values["tree"];
        }
        get sound() {
            const collection = this.collectionCache.getCollection(AudioCampaignEnvironmentTreeSounds.KEY, AudioCampaignEnvironmentTreeSounds.Entry);
            return collection.find(entry => entry.key === this._sound);
        }
        get tree() {
            const collection = this.collectionCache.getCollection(AudioCampaignTreeTypes.KEY, AudioCampaignTreeTypes.Entry);
            return collection.find(entry => entry.key === this._tree);
        }
    }
    AudioCampaignEnvironmentTreeSoundTrees.Entry = Entry;
})(AudioCampaignEnvironmentTreeSoundTrees || (AudioCampaignEnvironmentTreeSoundTrees = {}));

var CampaignStances$1;
(function (CampaignStances) {
    CampaignStances.KEY = new CollectionKey("campaign_stances");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignStances.Entry = Entry;
})(CampaignStances$1 || (CampaignStances$1 = {}));

var AudioCampaignStances;
(function (AudioCampaignStances) {
    AudioCampaignStances.KEY = new CollectionKey("audio_campaign_stances");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._stance = values["stance"];
            this.uiSoundEvent = values["ui_sound_event"];
            this.enterEvent = values["enter_event"];
            this.leaveEvent = values["leave_event"];
            this._subcultureRecord = values["subculture_record"];
            this._factionRecord = values["faction_record"];
            this._overridingVoStance = values["overriding_vo_stance"];
        }
        get stance() {
            const collection = this.collectionCache.getCollection(CampaignStances$1.KEY, CampaignStances$1.Entry);
            return collection.find(entry => entry.key === this._stance);
        }
        get subcultureRecord() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subcultureRecord);
        }
        get factionRecord() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._factionRecord);
        }
        get overridingVoStance() {
            const collection = this.collectionCache.getCollection(CampaignStances$1.KEY, CampaignStances$1.Entry);
            return collection.find(entry => entry.key === this._overridingVoStance);
        }
    }
    AudioCampaignStances.Entry = Entry;
})(AudioCampaignStances || (AudioCampaignStances = {}));

var AudioGroupSoundSituations;
(function (AudioGroupSoundSituations) {
    AudioGroupSoundSituations.KEY = new CollectionKey("audio_group_sound_situations");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.situation = values["situation"];
        }
    }
    AudioGroupSoundSituations.Entry = Entry;
})(AudioGroupSoundSituations || (AudioGroupSoundSituations = {}));

var AudioGroupSoundAssignments;
(function (AudioGroupSoundAssignments) {
    AudioGroupSoundAssignments.KEY = new CollectionKey("audio_group_sound_assignments");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._entityType = values["entity_type"];
            this._situation = values["situation"];
            this._ability = values["ability"];
            this._groupSound = values["group_sound"];
        }
        get entityType() {
            const collection = this.collectionCache.getCollection(AudioEntityTypes.KEY, AudioEntityTypes.Entry);
            return collection.find(entry => entry.key === this._entityType);
        }
        get situation() {
            const collection = this.collectionCache.getCollection(AudioGroupSoundSituations.KEY, AudioGroupSoundSituations.Entry);
            return collection.find(entry => entry.situation === this._situation);
        }
        get ability() {
            const collection = this.collectionCache.getCollection(AudioAbilities.KEY, AudioAbilities.Entry);
            return collection.find(entry => entry.key === this._ability);
        }
        get groupSound() {
            const collection = this.collectionCache.getCollection(AudioGroupSounds.KEY, AudioGroupSounds.Entry);
            return collection.find(entry => entry.name === this._groupSound);
        }
    }
    AudioGroupSoundAssignments.Entry = Entry;
})(AudioGroupSoundAssignments || (AudioGroupSoundAssignments = {}));

var AudioMarkerTypes;
(function (AudioMarkerTypes) {
    AudioMarkerTypes.KEY = new CollectionKey("audio_marker_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    AudioMarkerTypes.Entry = Entry;
})(AudioMarkerTypes || (AudioMarkerTypes = {}));

var AudioMarkers;
(function (AudioMarkers) {
    AudioMarkers.KEY = new CollectionKey("audio_markers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._type = values["type"];
            this.colourRed = values["colour_red"];
            this.colourGreen = values["colour_green"];
            this.colourBlue = values["colour_blue"];
            this.battleStart = values["battle_start"];
            this.battleStop = values["battle_stop"];
            this.battleRtpc = values["battle_rtpc"];
            this.campaignStart = values["campaign_start"];
            this.campaignStop = values["campaign_stop"];
            this.campaignRtpc = values["campaign_rtpc"];
            this.distanceBattle = values["distance_battle"];
            this.distanceCampaign = values["distance_campaign"];
            this.minTime = values["min_time"];
            this.maxTime = values["max_time"];
            this.randomPosition = !!values["random_position"];
            this.flattenRtpcTo2D = !!values["flatten_rtpc_to_2d"];
            this.dopplerRtpcName = values["doppler_rtpc_name"];
        }
        get type() {
            const collection = this.collectionCache.getCollection(AudioMarkerTypes.KEY, AudioMarkerTypes.Entry);
            return collection.find(entry => entry.key === this._type);
        }
    }
    AudioMarkers.Entry = Entry;
})(AudioMarkers || (AudioMarkers = {}));

var AudioMaterialsEnums$1;
(function (AudioMaterialsEnums) {
    AudioMaterialsEnums.KEY = new CollectionKey("audio_materials_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    AudioMaterialsEnums.Entry = Entry;
})(AudioMaterialsEnums$1 || (AudioMaterialsEnums$1 = {}));

var AudioMeleeHitCategories;
(function (AudioMeleeHitCategories) {
    AudioMeleeHitCategories.KEY = new CollectionKey("audio_melee_hit_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    AudioMeleeHitCategories.Entry = Entry;
})(AudioMeleeHitCategories || (AudioMeleeHitCategories = {}));

var AudioMetadataTags;
(function (AudioMetadataTags) {
    AudioMetadataTags.KEY = new CollectionKey("audio_metadata_tags");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.path = values["path"];
            this.colourRed = values["colour_red"];
            this.colourGreen = values["colour_green"];
            this.colourBlue = values["colour_blue"];
            this.soundEventBattleStart = values["sound_event_battle_start"];
            this.soundEventBattleStop = values["sound_event_battle_stop"];
            this.soundEventCampaignStart = values["sound_event_campaign_start"];
            this.soundEventCampaignStop = values["sound_event_campaign_stop"];
            this.limitationScale = values["limitation_scale"];
            this.entityTypeSwitch = values["entity_type_switch"];
            this._meleeHitCategory = values["melee_hit_category"];
            this._meleeHitTypeOverride = values["melee_hit_type_override"];
            this.rtpc1Name = values["rtpc_1_name"];
            this._rtpc1Assignment = values["rtpc_1_assignment"];
            this.rtpc2Name = values["rtpc_2_name"];
            this._rtpc2Assignment = values["rtpc_2_assignment"];
            this.scaledSoundUpsize = values["scaled_sound_upsize"];
            this.scaledMaxDelay = values["scaled_max_delay"];
            this._scaledSoundNext = values["scaled_sound_next"];
            this.isVocalisation = !!values["is_vocalisation"];
            this.playAtBone = !!values["play_at_bone"];
            this.playAtPosition = !!values["play_at_position"];
            this.playAtBase = !!values["play_at_base"];
            this.requireGroundTypeLimited = !!values["require_ground_type_limited"];
            this.requireGroundType = !!values["require_ground_type"];
            this.requireArmourType = !!values["require_armour_type"];
            this.requireMeleeWeaponType = !!values["require_melee_weapon_type"];
            this.requireShieldType = !!values["require_shield_type"];
            this.triggersBlood = !!values["triggers_blood"];
            this.isTracked = !!values["is_tracked"];
            this.requireReverb = !!values["require_reverb"];
            this.requireObstruction = !!values["require_obstruction"];
            this.canPlayUnderSplice = !!values["can_play_under_splice"];
            this.ignoreIfHeadless = !!values["ignore_if_headless"];
            this.playOnLoopingSound = !!values["play_on_looping_sound"];
            this.cinematicOnly = !!values["cinematic_only"];
            this.requiresCinematic = !!values["requires_cinematic"];
            this.flipDirection = !!values["flip_direction"];
            this.dopplerRtpcName = values["doppler_rtpc_name"];
            this.bloodEnabledOnly = !!values["blood_enabled_only"];
            this._gameExpansionKey = values["game_expansion_key"];
            this.minProbability = values["min_probability"];
            this.maxProbability = values["max_probability"];
            this.useLimitationTypeOverride = !!values["use_limitation_type_override"];
            this._limitationTypeOverride = values["limitation_type_override"];
            this.cullingDistanceOverride = values["culling_distance_override"];
            this.ignoreAlphaCheck = !!values["ignore_alpha_check"];
            this.overrideVo = !!values["override_vo"];
        }
        get meleeHitCategory() {
            const collection = this.collectionCache.getCollection(AudioMeleeHitCategories.KEY, AudioMeleeHitCategories.Entry);
            return collection.find(entry => entry.key === this._meleeHitCategory);
        }
        get meleeHitTypeOverride() {
            const collection = this.collectionCache.getCollection(AudioMeleeHitTypes.KEY, AudioMeleeHitTypes.Entry);
            return collection.find(entry => entry.key === this._meleeHitTypeOverride);
        }
        get rtpc1Assignment() {
            const collection = this.collectionCache.getCollection(AudioRtpcAssignments.KEY, AudioRtpcAssignments.Entry);
            return collection.find(entry => entry.name === this._rtpc1Assignment);
        }
        get rtpc2Assignment() {
            const collection = this.collectionCache.getCollection(AudioRtpcAssignments.KEY, AudioRtpcAssignments.Entry);
            return collection.find(entry => entry.name === this._rtpc2Assignment);
        }
        get scaledSoundNext() {
            const collection = this.collectionCache.getCollection(AudioMetadataTags.KEY, AudioMetadataTags.Entry);
            return collection.find(entry => entry.key === this._scaledSoundNext);
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
        get limitationTypeOverride() {
            const collection = this.collectionCache.getCollection(AudioEntityTypeLimitations.KEY, AudioEntityTypeLimitations.Entry);
            return collection.find(entry => entry.key === this._limitationTypeOverride);
        }
    }
    AudioMetadataTags.Entry = Entry;
})(AudioMetadataTags || (AudioMetadataTags = {}));

var AudioMetadataTagEntityOverrides;
(function (AudioMetadataTagEntityOverrides) {
    AudioMetadataTagEntityOverrides.KEY = new CollectionKey("audio_metadata_tag_entity_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._metadataTag = values["metadata_tag"];
            this._entityType = values["entity_type"];
            this.soundEventBattleStart = values["sound_event_battle_start"];
            this.soundEventBattleStop = values["sound_event_battle_stop"];
            this.soundEventCampaignStart = values["sound_event_campaign_start"];
            this.soundEventCampaignStop = values["sound_event_campaign_stop"];
            this.cullingDistanceOverride = values["culling_distance_override"];
        }
        get metadataTag() {
            const collection = this.collectionCache.getCollection(AudioMetadataTags.KEY, AudioMetadataTags.Entry);
            return collection.find(entry => entry.key === this._metadataTag);
        }
        get entityType() {
            const collection = this.collectionCache.getCollection(AudioEntityTypes.KEY, AudioEntityTypes.Entry);
            return collection.find(entry => entry.key === this._entityType);
        }
    }
    AudioMetadataTagEntityOverrides.Entry = Entry;
})(AudioMetadataTagEntityOverrides || (AudioMetadataTagEntityOverrides = {}));

var Technologies$1;
(function (Technologies) {
    Technologies.KEY = new CollectionKey("technologies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._buildingLevel = values["building_level"];
            this.positionIndex = values["position_index"];
            this.onscreenName = values["onscreen_name"];
            this.shortDescription = values["short_description"];
            this.longDescription = values["long_description"];
            this.iconName = values["icon_name"];
            this.militaryPrestige = values["military_prestige"];
            this.navalPrestige = values["naval_prestige"];
            this.economicPrestige = values["economic_prestige"];
            this.enlightenmentPrestige = values["enlightenment_prestige"];
            this.mpAvailableEarly = !!values["mp_available_early"];
            this.mpAvailableLate = !!values["mp_available_late"];
            this.infoPic = values["info_pic"];
            this.uniqueIndex = values["unique_index"];
            this.inEncyclopedia = !!values["in_encyclopedia"];
            this.isCivil = !!values["is_civil"];
            this.isEngineering = !!values["is_engineering"];
            this.isMilitary = !!values["is_military"];
        }
        get buildingLevel() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._buildingLevel);
        }
    }
    Technologies.Entry = Entry;
})(Technologies$1 || (Technologies$1 = {}));

var AudioUiCategories;
(function (AudioUiCategories) {
    AudioUiCategories.KEY = new CollectionKey("audio_ui_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.leftClick = values["left_click"];
            this.rightClick = values["right_click"];
            this.mouseOn = values["mouse_on"];
            this.mouseOff = values["mouse_off"];
            this.dragStart = values["drag_start"];
            this.dragStop = values["drag_stop"];
            this.shortcut = values["shortcut"];
            this.panelOpened = values["panel_opened"];
            this.panelClosed = values["panel_closed"];
            this.doubleLeftClick = values["double_left_click"];
        }
    }
    AudioUiCategories.Entry = Entry;
})(AudioUiCategories || (AudioUiCategories = {}));

var AudioTechnologies;
(function (AudioTechnologies) {
    AudioTechnologies.KEY = new CollectionKey("audio_technologies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._technology = values["technology"];
            this._uiAudio = values["ui_audio"];
        }
        get technology() {
            const collection = this.collectionCache.getCollection(Technologies$1.KEY, Technologies$1.Entry);
            return collection.find(entry => entry.key === this._technology);
        }
        get uiAudio() {
            const collection = this.collectionCache.getCollection(AudioUiCategories.KEY, AudioUiCategories.Entry);
            return collection.find(entry => entry.key === this._uiAudio);
        }
    }
    AudioTechnologies.Entry = Entry;
})(AudioTechnologies || (AudioTechnologies = {}));

var AutoresolverAiUsageGroupCombatPotentialModifiers;
(function (AutoresolverAiUsageGroupCombatPotentialModifiers) {
    AutoresolverAiUsageGroupCombatPotentialModifiers.KEY = new CollectionKey("autoresolver_ai_usage_group_combat_potential_modifiers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._usageGroup = values["usage_group"];
            this.additiveMod = values["additive_mod"];
            this.multiplier = values["multiplier"];
        }
        get usageGroup() {
            const collection = this.collectionCache.getCollection(AiUsageGroups.KEY, AiUsageGroups.Entry);
            return collection.find(entry => entry.key === this._usageGroup);
        }
    }
    AutoresolverAiUsageGroupCombatPotentialModifiers.Entry = Entry;
})(AutoresolverAiUsageGroupCombatPotentialModifiers || (AutoresolverAiUsageGroupCombatPotentialModifiers = {}));

var CampaignBattleTypeEnums$1;
(function (CampaignBattleTypeEnums) {
    CampaignBattleTypeEnums.KEY = new CollectionKey("campaign_battle_type_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignBattleTypeEnums.Entry = Entry;
})(CampaignBattleTypeEnums$1 || (CampaignBattleTypeEnums$1 = {}));

var AutoresolverOptionalBoolEnums;
(function (AutoresolverOptionalBoolEnums) {
    AutoresolverOptionalBoolEnums.KEY = new CollectionKey("autoresolver_optional_bool_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    AutoresolverOptionalBoolEnums.Entry = Entry;
})(AutoresolverOptionalBoolEnums || (AutoresolverOptionalBoolEnums = {}));

var AutoresolverBattleTypes;
(function (AutoresolverBattleTypes) {
    AutoresolverBattleTypes.KEY = new CollectionKey("autoresolver_battle_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._battleType = values["battle_type"];
            this._isNightBattle = values["is_night_battle"];
            this.autoresolverStance = values["autoresolver_stance"];
            this._isEncampment = values["is_encampment"];
        }
        get battleType() {
            const collection = this.collectionCache.getCollection(CampaignBattleTypeEnums$1.KEY, CampaignBattleTypeEnums$1.Entry);
            return collection.find(entry => entry.key === this._battleType);
        }
        get isNightBattle() {
            const collection = this.collectionCache.getCollection(AutoresolverOptionalBoolEnums.KEY, AutoresolverOptionalBoolEnums.Entry);
            return collection.find(entry => entry.key === this._isNightBattle);
        }
        get isEncampment() {
            const collection = this.collectionCache.getCollection(AutoresolverOptionalBoolEnums.KEY, AutoresolverOptionalBoolEnums.Entry);
            return collection.find(entry => entry.key === this._isEncampment);
        }
    }
    AutoresolverBattleTypes.Entry = Entry;
})(AutoresolverBattleTypes || (AutoresolverBattleTypes = {}));

var AutoresolverDifficultyLevelEnums;
(function (AutoresolverDifficultyLevelEnums) {
    AutoresolverDifficultyLevelEnums.KEY = new CollectionKey("autoresolver_difficulty_level_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    AutoresolverDifficultyLevelEnums.Entry = Entry;
})(AutoresolverDifficultyLevelEnums || (AutoresolverDifficultyLevelEnums = {}));

var AutoresolverModifierBonusTypes;
(function (AutoresolverModifierBonusTypes) {
    AutoresolverModifierBonusTypes.KEY = new CollectionKey("autoresolver_modifier_bonus_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.description = values["description"];
        }
    }
    AutoresolverModifierBonusTypes.Entry = Entry;
})(AutoresolverModifierBonusTypes || (AutoresolverModifierBonusTypes = {}));

var AutoresolverModifierGroupKeys;
(function (AutoresolverModifierGroupKeys) {
    AutoresolverModifierGroupKeys.KEY = new CollectionKey("autoresolver_modifier_group_keys");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.groupKey = values["group_key"];
        }
    }
    AutoresolverModifierGroupKeys.Entry = Entry;
})(AutoresolverModifierGroupKeys || (AutoresolverModifierGroupKeys = {}));

var AutoresolverPlayerTypes;
(function (AutoresolverPlayerTypes) {
    AutoresolverPlayerTypes.KEY = new CollectionKey("autoresolver_player_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.ifPlayerIsAttacker = !!values["if_player_is_attacker"];
            this.ifPlayerIsDefender = !!values["if_player_is_defender"];
            this._playerIsHuman = values["player_is_human"];
            this._playerCampaignDifficulty = values["player_campaign_difficulty"];
            this._enemyPlayerIsHuman = values["enemy_player_is_human"];
            this._enemyPlayerCampaignDifficulty = values["enemy_player_campaign_difficulty"];
        }
        get playerIsHuman() {
            const collection = this.collectionCache.getCollection(AutoresolverOptionalBoolEnums.KEY, AutoresolverOptionalBoolEnums.Entry);
            return collection.find(entry => entry.key === this._playerIsHuman);
        }
        get playerCampaignDifficulty() {
            const collection = this.collectionCache.getCollection(AutoresolverDifficultyLevelEnums.KEY, AutoresolverDifficultyLevelEnums.Entry);
            return collection.find(entry => entry.key === this._playerCampaignDifficulty);
        }
        get enemyPlayerIsHuman() {
            const collection = this.collectionCache.getCollection(AutoresolverOptionalBoolEnums.KEY, AutoresolverOptionalBoolEnums.Entry);
            return collection.find(entry => entry.key === this._enemyPlayerIsHuman);
        }
        get enemyPlayerCampaignDifficulty() {
            const collection = this.collectionCache.getCollection(AutoresolverDifficultyLevelEnums.KEY, AutoresolverDifficultyLevelEnums.Entry);
            return collection.find(entry => entry.key === this._enemyPlayerCampaignDifficulty);
        }
    }
    AutoresolverPlayerTypes.Entry = Entry;
})(AutoresolverPlayerTypes || (AutoresolverPlayerTypes = {}));

var AutoresolverModifierMultiplierMechanicEnums;
(function (AutoresolverModifierMultiplierMechanicEnums) {
    AutoresolverModifierMultiplierMechanicEnums.KEY = new CollectionKey("autoresolver_modifier_multiplier_mechanic_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    AutoresolverModifierMultiplierMechanicEnums.Entry = Entry;
})(AutoresolverModifierMultiplierMechanicEnums || (AutoresolverModifierMultiplierMechanicEnums = {}));

var AutoresolverModifierGroupLookups;
(function (AutoresolverModifierGroupLookups) {
    AutoresolverModifierGroupLookups.KEY = new CollectionKey("autoresolver_modifier_group_lookups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._battleType = values["battle_type"];
            this._playerType = values["player_type"];
            this._modifierGroupApplied = values["modifier_group_applied"];
            this._modifierValueMultiplierMechanic = values["modifier_value_multiplier_mechanic"];
        }
        get battleType() {
            const collection = this.collectionCache.getCollection(AutoresolverBattleTypes.KEY, AutoresolverBattleTypes.Entry);
            return collection.find(entry => entry.key === this._battleType);
        }
        get playerType() {
            const collection = this.collectionCache.getCollection(AutoresolverPlayerTypes.KEY, AutoresolverPlayerTypes.Entry);
            return collection.find(entry => entry.key === this._playerType);
        }
        get modifierGroupApplied() {
            const collection = this.collectionCache.getCollection(AutoresolverModifierGroupKeys.KEY, AutoresolverModifierGroupKeys.Entry);
            return collection.find(entry => entry.groupKey === this._modifierGroupApplied);
        }
        get modifierValueMultiplierMechanic() {
            const collection = this.collectionCache.getCollection(AutoresolverModifierMultiplierMechanicEnums.KEY, AutoresolverModifierMultiplierMechanicEnums.Entry);
            return collection.find(entry => entry.key === this._modifierValueMultiplierMechanic);
        }
    }
    AutoresolverModifierGroupLookups.Entry = Entry;
})(AutoresolverModifierGroupLookups || (AutoresolverModifierGroupLookups = {}));

var AutoresolverModifierTargets;
(function (AutoresolverModifierTargets) {
    AutoresolverModifierTargets.KEY = new CollectionKey("autoresolver_modifier_targets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._targetUnitClass = values["target_unit_class"];
            this._vsUnitClass = values["vs_unit_class"];
        }
        get targetUnitClass() {
            const collection = this.collectionCache.getCollection(UnitClass$1.KEY, UnitClass$1.Entry);
            return collection.find(entry => entry.key === this._targetUnitClass);
        }
        get vsUnitClass() {
            const collection = this.collectionCache.getCollection(UnitClass$1.KEY, UnitClass$1.Entry);
            return collection.find(entry => entry.key === this._vsUnitClass);
        }
    }
    AutoresolverModifierTargets.Entry = Entry;
})(AutoresolverModifierTargets || (AutoresolverModifierTargets = {}));

var AutoresolverModifierGroupToModifiers;
(function (AutoresolverModifierGroupToModifiers) {
    AutoresolverModifierGroupToModifiers.KEY = new CollectionKey("autoresolver_modifier_group_to_modifiers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._group = values["group"];
            this._modifierTarget = values["modifier_target"];
            this._modifierBonus = values["modifier_bonus"];
            this.value = values["value"];
            this.id = values["id"];
        }
        get group() {
            const collection = this.collectionCache.getCollection(AutoresolverModifierGroupKeys.KEY, AutoresolverModifierGroupKeys.Entry);
            return collection.find(entry => entry.groupKey === this._group);
        }
        get modifierTarget() {
            const collection = this.collectionCache.getCollection(AutoresolverModifierTargets.KEY, AutoresolverModifierTargets.Entry);
            return collection.find(entry => entry.key === this._modifierTarget);
        }
        get modifierBonus() {
            const collection = this.collectionCache.getCollection(AutoresolverModifierBonusTypes.KEY, AutoresolverModifierBonusTypes.Entry);
            return collection.find(entry => entry.key === this._modifierBonus);
        }
    }
    AutoresolverModifierGroupToModifiers.Entry = Entry;
})(AutoresolverModifierGroupToModifiers || (AutoresolverModifierGroupToModifiers = {}));

var AutoresolverUnitRecordUsageFlags;
(function (AutoresolverUnitRecordUsageFlags) {
    AutoresolverUnitRecordUsageFlags.KEY = new CollectionKey("autoresolver_unit_record_usage_flags");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._mainUnitRecord = values["main_unit_record"];
            this.alwaysDestroyIfEngagedInMelee = !!values["always_destroy_if_engaged_in_melee"];
        }
        get mainUnitRecord() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._mainUnitRecord);
        }
    }
    AutoresolverUnitRecordUsageFlags.Entry = Entry;
})(AutoresolverUnitRecordUsageFlags || (AutoresolverUnitRecordUsageFlags = {}));

var SpecialUnitCategories;
(function (SpecialUnitCategories) {
    SpecialUnitCategories.KEY = new CollectionKey("special_unit_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.category = values["category"];
        }
    }
    SpecialUnitCategories.Entry = Entry;
})(SpecialUnitCategories || (SpecialUnitCategories = {}));

var UnitSets$1;
(function (UnitSets) {
    UnitSets.KEY = new CollectionKey("unit_sets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.useUnitExpLevelRange = !!values["use_unit_exp_level_range"];
            this.minUnitExpLevelInclusive = values["min_unit_exp_level_inclusive"];
            this.maxUnitExpLevelInclusive = values["max_unit_exp_level_inclusive"];
            this._specialCategory = values["special_category"];
        }
        get specialCategory() {
            const collection = this.collectionCache.getCollection(SpecialUnitCategories.KEY, SpecialUnitCategories.Entry);
            return collection.find(entry => entry.category === this._specialCategory);
        }
    }
    UnitSets.Entry = Entry;
})(UnitSets$1 || (UnitSets$1 = {}));

var BannersPermittedUnitSets;
(function (BannersPermittedUnitSets) {
    BannersPermittedUnitSets.KEY = new CollectionKey("banners_permitted_unit_sets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._banner = values["banner"];
            this._unitSet = values["unit_set"];
        }
        get banner() {
            const collection = this.collectionCache.getCollection(Banners.KEY, Banners.Entry);
            return collection.find(entry => entry.banner === this._banner);
        }
        get unitSet() {
            const collection = this.collectionCache.getCollection(UnitSets$1.KEY, UnitSets$1.Entry);
            return collection.find(entry => entry.key === this._unitSet);
        }
    }
    BannersPermittedUnitSets.Entry = Entry;
})(BannersPermittedUnitSets || (BannersPermittedUnitSets = {}));

var BattlefieldBuildingCategories$1;
(function (BattlefieldBuildingCategories) {
    BattlefieldBuildingCategories.KEY = new CollectionKey("battlefield_building_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.category = values["category"];
            this._defaultDestructionEffect = values["default_destruction_effect"];
            this.iconPath = values["icon_path"];
        }
    }
    BattlefieldBuildingCategories.Entry = Entry;
})(BattlefieldBuildingCategories$1 || (BattlefieldBuildingCategories$1 = {}));

var ModelsBuilding$1;
(function (ModelsBuilding) {
    ModelsBuilding.KEY = new CollectionKey("models_building");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.modelFile = values["model_file"];
            this.logicFile = values["logic_file"];
            this.displayPath = values["display_path"];
            this.cs2File = values["cs2_file"];
            this.techFile = values["tech_file"];
            this.collisionFile = values["collision_file"];
        }
    }
    ModelsBuilding.Entry = Entry;
})(ModelsBuilding$1 || (ModelsBuilding$1 = {}));

var BattlefieldBuildingsNames$1;
(function (BattlefieldBuildingsNames) {
    BattlefieldBuildingsNames.KEY = new CollectionKey("battlefield_buildings_names");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.onscreenName = values["onscreen_name"];
            this.key = values["key"];
            this.globalEffectsDescription = values["global_effects_description"];
            this.localEffectsDescription = values["local_effects_description"];
        }
    }
    BattlefieldBuildingsNames.Entry = Entry;
})(BattlefieldBuildingsNames$1 || (BattlefieldBuildingsNames$1 = {}));

var UnitAttributes$1;
(function (UnitAttributes) {
    UnitAttributes.KEY = new CollectionKey("unit_attributes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.bulletText = values["bullet_text"];
            this.imuedEffectText = values["imued_effect_text"];
        }
    }
    UnitAttributes.Entry = Entry;
})(UnitAttributes$1 || (UnitAttributes$1 = {}));

var GroundTypes$1;
(function (GroundTypes) {
    GroundTypes.KEY = new CollectionKey("ground_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.type = values["type"];
            this.description = values["description"];
            this._standardCursor = values["standard_cursor"];
            this._selectionCursor = values["selection_cursor"];
            this._penaltyImmuneAttribute = values["penalty_immune_attribute"];
            this.onscreenName = values["onscreen_name"];
            this._audioType = values["audio_type"];
            this.burnRate = values["burn_rate"];
            this.colourRed = values["colour_red"];
            this.colourGreen = values["colour_green"];
            this.colourBlue = values["colour_blue"];
            this.minimumThreshold = values["minimum_threshold"];
        }
        get standardCursor() {
            const collection = this.collectionCache.getCollection(Cursors$1.KEY, Cursors$1.Entry);
            return collection.find(entry => entry.key === this._standardCursor);
        }
        get selectionCursor() {
            const collection = this.collectionCache.getCollection(Cursors$1.KEY, Cursors$1.Entry);
            return collection.find(entry => entry.key === this._selectionCursor);
        }
        get penaltyImmuneAttribute() {
            const collection = this.collectionCache.getCollection(UnitAttributes$1.KEY, UnitAttributes$1.Entry);
            return collection.find(entry => entry.key === this._penaltyImmuneAttribute);
        }
        get audioType() {
            const collection = this.collectionCache.getCollection(AudioBattleGroundTypes.KEY, AudioBattleGroundTypes.Entry);
            return collection.find(entry => entry.key === this._audioType);
        }
    }
    GroundTypes.Entry = Entry;
})(GroundTypes$1 || (GroundTypes$1 = {}));

var BattlefieldBuildings$1;
(function (BattlefieldBuildings) {
    BattlefieldBuildings.KEY = new CollectionKey("battlefield_buildings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._category = values["category"];
            this._model = values["model"];
            this._audioMaterial = values["audio_material"];
            this.hitPoints = values["hit_points"];
            this._gunType = values["gun_type"];
            this._onscreenName = values["onscreen_name"];
            this.ignitionThreshold = values["ignition_threshold"];
            this.radarIcon = values["radar_icon"];
            this.visibleInPublicTed = !!values["visible_in_public_ted"];
            this.fortwallPenetrationChance = values["fortwall_penetration_chance"];
            this.collision3D = !!values["collision_3d"];
            this.destructThresholds = values["destruct_thresholds"];
            this.joiner = !!values["joiner"];
            this.auxiliary = !!values["auxiliary"];
            this.burnRate = values["burn_rate"];
            this.heightMapMesh = !!values["height_map_mesh"];
            this._groundType = values["ground_type"];
            this.canBurn = !!values["can_burn"];
            this.audioCountAsUrban = !!values["audio_count_as_urban"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(BattlefieldBuildingCategories$1.KEY, BattlefieldBuildingCategories$1.Entry);
            return collection.find(entry => entry.category === this._category);
        }
        get model() {
            const collection = this.collectionCache.getCollection(ModelsBuilding$1.KEY, ModelsBuilding$1.Entry);
            return collection.find(entry => entry.key === this._model);
        }
        get audioMaterial() {
            const collection = this.collectionCache.getCollection(AudioMaterials.KEY, AudioMaterials.Entry);
            return collection.find(entry => entry.key === this._audioMaterial);
        }
        get gunType() {
            const collection = this.collectionCache.getCollection(MissileWeapons$1.KEY, MissileWeapons$1.Entry);
            return collection.find(entry => entry.key === this._gunType);
        }
        get onscreenName() {
            const collection = this.collectionCache.getCollection(BattlefieldBuildingsNames$1.KEY, BattlefieldBuildingsNames$1.Entry);
            return collection.find(entry => entry.key === this._onscreenName);
        }
        get groundType() {
            const collection = this.collectionCache.getCollection(GroundTypes$1.KEY, GroundTypes$1.Entry);
            return collection.find(entry => entry.type === this._groundType);
        }
    }
    BattlefieldBuildings.Entry = Entry;
})(BattlefieldBuildings$1 || (BattlefieldBuildings$1 = {}));

var BattlefieldBuildingsWithProjectilesNames$1;
(function (BattlefieldBuildingsWithProjectilesNames) {
    BattlefieldBuildingsWithProjectilesNames.KEY = new CollectionKey("battlefield_buildings_with_projectiles_names");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._buildingCategory = values["building_category"];
            this._projectile = values["projectile"];
            this._name = values["name"];
        }
        get buildingCategory() {
            const collection = this.collectionCache.getCollection(BattlefieldBuildingCategories$1.KEY, BattlefieldBuildingCategories$1.Entry);
            return collection.find(entry => entry.category === this._buildingCategory);
        }
        get projectile() {
            const collection = this.collectionCache.getCollection(Projectiles$1.KEY, Projectiles$1.Entry);
            return collection.find(entry => entry.key === this._projectile);
        }
        get name() {
            const collection = this.collectionCache.getCollection(BattlefieldBuildingsNames$1.KEY, BattlefieldBuildingsNames$1.Entry);
            return collection.find(entry => entry.key === this._name);
        }
    }
    BattlefieldBuildingsWithProjectilesNames.Entry = Entry;
})(BattlefieldBuildingsWithProjectilesNames$1 || (BattlefieldBuildingsWithProjectilesNames$1 = {}));

var ModelsSieges$1;
(function (ModelsSieges) {
    ModelsSieges.KEY = new CollectionKey("models_sieges");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.modelFile = values["model_file"];
            this.logicFile = values["logic_file"];
            this.displayPath = values["display_path"];
        }
    }
    ModelsSieges.Entry = Entry;
})(ModelsSieges$1 || (ModelsSieges$1 = {}));

var BattlefieldSiegeVehicles$1;
(function (BattlefieldSiegeVehicles) {
    BattlefieldSiegeVehicles.KEY = new CollectionKey("battlefield_siege_vehicles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._model = values["model"];
            this.hitPoints = values["hit_points"];
            this._battleEntity = values["battle_entity"];
            this.gunType = values["gun_type"];
            this.dockingClearance = values["docking_clearance"];
            this._engine = values["engine"];
            this.onscreenName = values["onscreen_name"];
            this.description = values["description"];
            this.imagePath = values["image_path"];
            this.recruitmentCap = values["recruitment_cap"];
            this.uses8MWall = !!values["uses_8m_wall"];
            this.uses15MWall = !!values["uses_15m_wall"];
            this.cost = values["cost"];
            this.categoryImagePath = values["category_image_path"];
            this.specialEditionMask = values["special_edition_mask"];
            this.ignitionThreshold = values["ignition_threshold"];
            this.attackDamage = values["attack_damage"];
            this.selectionPriority = values["selection_priority"];
            this.sortOrder = values["sort_order"];
            this._audioType = values["audio_type"];
            this.autoresolverEffectiveness = values["autoresolver_effectiveness"];
        }
        get model() {
            const collection = this.collectionCache.getCollection(ModelsSieges$1.KEY, ModelsSieges$1.Entry);
            return collection.find(entry => entry.key === this._model);
        }
        get battleEntity() {
            const collection = this.collectionCache.getCollection(BattleEntities$1.KEY, BattleEntities$1.Entry);
            return collection.find(entry => entry.key === this._battleEntity);
        }
        get engine() {
            const collection = this.collectionCache.getCollection(BattlefieldEnginesAutonomous$1.KEY, BattlefieldEnginesAutonomous$1.Entry);
            return collection.find(entry => entry.key === this._engine);
        }
        get audioType() {
            const collection = this.collectionCache.getCollection(AudioEntityTypes.KEY, AudioEntityTypes.Entry);
            return collection.find(entry => entry.key === this._audioType);
        }
    }
    BattlefieldSiegeVehicles.Entry = Entry;
})(BattlefieldSiegeVehicles$1 || (BattlefieldSiegeVehicles$1 = {}));

var BattlefieldDeployableSiegeItems$1;
(function (BattlefieldDeployableSiegeItems) {
    BattlefieldDeployableSiegeItems.KEY = new CollectionKey("battlefield_deployable_siege_items");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._battlefieldSiegeVehicle = values["battlefield_siege_vehicle"];
            this.level = values["level"];
            this.type = values["type"];
            this.siegeEffortCost = values["siege_effort_cost"];
        }
        get battlefieldSiegeVehicle() {
            const collection = this.collectionCache.getCollection(BattlefieldSiegeVehicles$1.KEY, BattlefieldSiegeVehicles$1.Entry);
            return collection.find(entry => entry.key === this._battlefieldSiegeVehicle);
        }
    }
    BattlefieldDeployableSiegeItems.Entry = Entry;
})(BattlefieldDeployableSiegeItems$1 || (BattlefieldDeployableSiegeItems$1 = {}));

var BattlefieldSiegeVehiclesCustomBattles$1;
(function (BattlefieldSiegeVehiclesCustomBattles) {
    BattlefieldSiegeVehiclesCustomBattles.KEY = new CollectionKey("battlefield_siege_vehicles_custom_battles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._vehicle = values["vehicle"];
            this.cap = values["cap"];
            this.probability = values["probability"];
        }
        get vehicle() {
            const collection = this.collectionCache.getCollection(BattlefieldSiegeVehicles$1.KEY, BattlefieldSiegeVehicles$1.Entry);
            return collection.find(entry => entry.key === this._vehicle);
        }
    }
    BattlefieldSiegeVehiclesCustomBattles.Entry = Entry;
})(BattlefieldSiegeVehiclesCustomBattles$1 || (BattlefieldSiegeVehiclesCustomBattles$1 = {}));

var BattleTypes$1;
(function (BattleTypes) {
    BattleTypes.KEY = new CollectionKey("battle_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.type = values["type"];
            this.onscreen = values["onscreen"];
            this.sortOrder = values["sort_order"];
            this.defenderFundsRatio = values["defender_funds_ratio"];
            this.maxTeamsize = values["max_teamsize"];
        }
    }
    BattleTypes.Entry = Entry;
})(BattleTypes$1 || (BattleTypes$1 = {}));

var Battles$1;
(function (Battles) {
    Battles.KEY = new CollectionKey("battles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._type = values["type"];
            this.isNaval = !!values["is_naval"];
            this.specification = values["specification"];
            this.localisedName = values["localised_name"];
            this.description = values["description"];
            this.objectivesTeam1 = values["objectives_team_1"];
            this.objectivesTeam2 = values["objectives_team_2"];
            this.screenshotPath = values["screenshot_path"];
            this.mapPath = values["map_path"];
            this.teamSize1 = values["team_size_1"];
            this.teamSize2 = values["team_size_2"];
            this.release = !!values["release"];
            this.multiplayer = !!values["multiplayer"];
            this.singleplayer = !!values["singleplayer"];
            this.introMovie = values["intro_movie"];
            this.year = values["year"];
            this.defenderFundsRatio = values["defender_funds_ratio"];
            this.hasKeyBuildings = !!values["has_key_buildings"];
            this.matchmaking = !!values["matchmaking"];
            this.playableAreaWidth = values["playable_area_width"];
            this.playableAreaHeight = values["playable_area_height"];
            this.isLargeSettlement = !!values["is_large_settlement"];
            this.has15MWalls = !!values["has_15m_walls"];
            this._gameExpansionKey = values["game_expansion_key"];
            this.isUnderground = !!values["is_underground"];
            this.catchmentName = values["catchment_name"];
            this.tileUpgrade = values["tile_upgrade"];
            this.battleEnvironment = values["battle_environment"];
            this._battleEnvironmentAudio = values["battle_environment_audio"];
        }
        get type() {
            const collection = this.collectionCache.getCollection(BattleTypes$1.KEY, BattleTypes$1.Entry);
            return collection.find(entry => entry.type === this._type);
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
        get battleEnvironmentAudio() {
            const collection = this.collectionCache.getCollection(AudioBattleEnvironments.KEY, AudioBattleEnvironments.Entry);
            return collection.find(entry => entry.name === this._battleEnvironmentAudio);
        }
    }
    Battles.Entry = Entry;
})(Battles$1 || (Battles$1 = {}));

var BattleAiAbilitiesUsageParams;
(function (BattleAiAbilitiesUsageParams) {
    BattleAiAbilitiesUsageParams.KEY = new CollectionKey("battle_ai_abilities_usage_params");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.usageParam = values["usage_param"];
            this.multiplier = values["multiplier"];
        }
    }
    BattleAiAbilitiesUsageParams.Entry = Entry;
})(BattleAiAbilitiesUsageParams || (BattleAiAbilitiesUsageParams = {}));

var BattleAiAbilitiesUsageTemplatesToParams;
(function (BattleAiAbilitiesUsageTemplatesToParams) {
    BattleAiAbilitiesUsageTemplatesToParams.KEY = new CollectionKey("battle_ai_abilities_usage_templates_to_params");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._template = values["template"];
            this._parameter = values["parameter"];
            this.weighting = values["weighting"];
        }
        get template() {
            const collection = this.collectionCache.getCollection(BattleAiAbilitiesUsageTemplateNames.KEY, BattleAiAbilitiesUsageTemplateNames.Entry);
            return collection.find(entry => entry.aiAbilityUsageTemplateKey === this._template);
        }
        get parameter() {
            const collection = this.collectionCache.getCollection(BattleAiAbilitiesUsageParams.KEY, BattleAiAbilitiesUsageParams.Entry);
            return collection.find(entry => entry.usageParam === this._parameter);
        }
    }
    BattleAiAbilitiesUsageTemplatesToParams.Entry = Entry;
})(BattleAiAbilitiesUsageTemplatesToParams || (BattleAiAbilitiesUsageTemplatesToParams = {}));

var BattleCameras$1;
(function (BattleCameras) {
    BattleCameras.KEY = new CollectionKey("battle_cameras");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.minHeight = values["min_height"];
            this.maxHeightSmall = values["max_height_small"];
            this.maxHeightLarge = values["max_height_large"];
            this.minFortMaxHeight = values["min_fort_max_height"];
            this.moveSpeedMinMultiplier = values["move_speed_min_multiplier"];
            this.moveSpeedMaxMultiplier = values["move_speed_max_multiplier"];
            this.turnSpeedMultiplier = values["turn_speed_multiplier"];
            this.moveFastMultiplier = values["move_fast_multiplier"];
            this.playableAreaOffset = values["playable_area_offset"];
        }
    }
    BattleCameras.Entry = Entry;
})(BattleCameras$1 || (BattleCameras$1 = {}));

var BattleCatchmentOverrideAreas;
(function (BattleCatchmentOverrideAreas) {
    BattleCatchmentOverrideAreas.KEY = new CollectionKey("battle_catchment_override_areas");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.area = values["area"];
            this.red = values["red"];
            this.green = values["green"];
            this.blue = values["blue"];
        }
    }
    BattleCatchmentOverrideAreas.Entry = Entry;
})(BattleCatchmentOverrideAreas || (BattleCatchmentOverrideAreas = {}));

var CampaignBattlePaths;
(function (CampaignBattlePaths) {
    CampaignBattlePaths.KEY = new CollectionKey("campaign_battle_paths");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.path = values["path"];
        }
    }
    CampaignBattlePaths.Entry = Entry;
})(CampaignBattlePaths || (CampaignBattlePaths = {}));

var BattleCatchmentOverrideGroups;
(function (BattleCatchmentOverrideGroups) {
    BattleCatchmentOverrideGroups.KEY = new CollectionKey("battle_catchment_override_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.group = values["group"];
        }
    }
    BattleCatchmentOverrideGroups.Entry = Entry;
})(BattleCatchmentOverrideGroups || (BattleCatchmentOverrideGroups = {}));

var BattleCatchmentOverrideBattleMappings;
(function (BattleCatchmentOverrideBattleMappings) {
    BattleCatchmentOverrideBattleMappings.KEY = new CollectionKey("battle_catchment_override_battle_mappings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._area = values["area"];
            this._attacker = values["attacker"];
            this._defender = values["defender"];
            this._battleType = values["battle_type"];
            this._battlePath = values["battle_path"];
            this._battleGroup = values["battle_group"];
            this.requiredTileUpgrades = values["required_tile_upgrades"];
        }
        get area() {
            const collection = this.collectionCache.getCollection(BattleCatchmentOverrideAreas.KEY, BattleCatchmentOverrideAreas.Entry);
            return collection.find(entry => entry.area === this._area);
        }
        get attacker() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._attacker);
        }
        get defender() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._defender);
        }
        get battleType() {
            const collection = this.collectionCache.getCollection(CampaignBattleTypeEnums$1.KEY, CampaignBattleTypeEnums$1.Entry);
            return collection.find(entry => entry.key === this._battleType);
        }
        get battlePath() {
            const collection = this.collectionCache.getCollection(CampaignBattlePaths.KEY, CampaignBattlePaths.Entry);
            return collection.find(entry => entry.path === this._battlePath);
        }
        get battleGroup() {
            const collection = this.collectionCache.getCollection(BattleCatchmentOverrideGroups.KEY, BattleCatchmentOverrideGroups.Entry);
            return collection.find(entry => entry.group === this._battleGroup);
        }
    }
    BattleCatchmentOverrideBattleMappings.Entry = Entry;
})(BattleCatchmentOverrideBattleMappings || (BattleCatchmentOverrideBattleMappings = {}));

var BattleCatchmentOverrideGroupBattles;
(function (BattleCatchmentOverrideGroupBattles) {
    BattleCatchmentOverrideGroupBattles.KEY = new CollectionKey("battle_catchment_override_group_battles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._group = values["group"];
            this.battleMapLocation = values["battle_map_location"];
            this.catchmentName = values["catchment_name"];
            this.tileUpgrades = values["tile_upgrades"];
        }
        get group() {
            const collection = this.collectionCache.getCollection(BattleCatchmentOverrideGroups.KEY, BattleCatchmentOverrideGroups.Entry);
            return collection.find(entry => entry.group === this._group);
        }
    }
    BattleCatchmentOverrideGroupBattles.Entry = Entry;
})(BattleCatchmentOverrideGroupBattles || (BattleCatchmentOverrideGroupBattles = {}));

var Climates$1;
(function (Climates) {
    Climates.KEY = new CollectionKey("climates");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.climateType = values["climate_type"];
        }
    }
    Climates.Entry = Entry;
})(Climates$1 || (Climates$1 = {}));

var Seasons$1;
(function (Seasons) {
    Seasons.KEY = new CollectionKey("seasons");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.season = values["season"];
            this.onscreen = values["onscreen"];
        }
    }
    Seasons.Entry = Entry;
})(Seasons$1 || (Seasons$1 = {}));

var BattleWeatherTypes$1;
(function (BattleWeatherTypes) {
    BattleWeatherTypes.KEY = new CollectionKey("battle_weather_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.level = values["level"];
            this.precipitationType = values["precipitation_type"];
            this.numParticles = values["num_particles"];
            this.particleSize = values["particle_size"];
            this.particleSpeed = values["particle_speed"];
            this.onscreen = values["onscreen"];
            this.listOrder = values["list_order"];
            this.navalAppropriate = !!values["naval_appropriate"];
            this.accuracyMultiplier = values["accuracy_multiplier"];
            this.bowReloadBonus = values["bow_reload_bonus"];
            this.gunReloadBonus = values["gun_reload_bonus"];
        }
    }
    BattleWeatherTypes.Entry = Entry;
})(BattleWeatherTypes$1 || (BattleWeatherTypes$1 = {}));

var BattleClimateWeatherDescriptions$1;
(function (BattleClimateWeatherDescriptions) {
    BattleClimateWeatherDescriptions.KEY = new CollectionKey("battle_climate_weather_descriptions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._climateType = values["climate_type"];
            this._season = values["season"];
            this._weatherType = values["weather_type"];
            this.probability = values["probability"];
            this.heatFatigue = values["heat_fatigue"];
            this.coldFatigue = values["cold_fatigue"];
            this.spottingScalar = values["spotting_scalar"];
        }
        get climateType() {
            const collection = this.collectionCache.getCollection(Climates$1.KEY, Climates$1.Entry);
            return collection.find(entry => entry.climateType === this._climateType);
        }
        get season() {
            const collection = this.collectionCache.getCollection(Seasons$1.KEY, Seasons$1.Entry);
            return collection.find(entry => entry.season === this._season);
        }
        get weatherType() {
            const collection = this.collectionCache.getCollection(BattleWeatherTypes$1.KEY, BattleWeatherTypes$1.Entry);
            return collection.find(entry => entry.key === this._weatherType);
        }
    }
    BattleClimateWeatherDescriptions.Entry = Entry;
})(BattleClimateWeatherDescriptions$1 || (BattleClimateWeatherDescriptions$1 = {}));

var CampaignBonusValueBattleContextSpecifiers$1;
(function (CampaignBonusValueBattleContextSpecifiers) {
    CampaignBonusValueBattleContextSpecifiers.KEY = new CollectionKey("campaign_bonus_value_battle_context_specifiers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.nightBattlesOnly = !!values["night_battles_only"];
        }
    }
    CampaignBonusValueBattleContextSpecifiers.Entry = Entry;
})(CampaignBonusValueBattleContextSpecifiers$1 || (CampaignBonusValueBattleContextSpecifiers$1 = {}));

var BattleContextArmySpecialAbilityJunctions;
(function (BattleContextArmySpecialAbilityJunctions) {
    BattleContextArmySpecialAbilityJunctions.KEY = new CollectionKey("battle_context_army_special_ability_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._battleContext = values["battle_context"];
            this._armySpecialAbility = values["army_special_ability"];
        }
        get battleContext() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueBattleContextSpecifiers$1.KEY, CampaignBonusValueBattleContextSpecifiers$1.Entry);
            return collection.find(entry => entry.key === this._battleContext);
        }
        get armySpecialAbility() {
            const collection = this.collectionCache.getCollection(ArmySpecialAbilities.KEY, ArmySpecialAbilities.Entry);
            return collection.find(entry => entry.armySpecialAbility === this._armySpecialAbility);
        }
    }
    BattleContextArmySpecialAbilityJunctions.Entry = Entry;
})(BattleContextArmySpecialAbilityJunctions || (BattleContextArmySpecialAbilityJunctions = {}));

var BattleContextUnitAbilityJunctions;
(function (BattleContextUnitAbilityJunctions) {
    BattleContextUnitAbilityJunctions.KEY = new CollectionKey("battle_context_unit_ability_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._battleContext = values["battle_context"];
            this._unitAbility = values["unit_ability"];
        }
        get battleContext() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueBattleContextSpecifiers$1.KEY, CampaignBonusValueBattleContextSpecifiers$1.Entry);
            return collection.find(entry => entry.key === this._battleContext);
        }
        get unitAbility() {
            const collection = this.collectionCache.getCollection(UnitAbilities$1.KEY, UnitAbilities$1.Entry);
            return collection.find(entry => entry.key === this._unitAbility);
        }
    }
    BattleContextUnitAbilityJunctions.Entry = Entry;
})(BattleContextUnitAbilityJunctions || (BattleContextUnitAbilityJunctions = {}));

var BattleContextUnitAttributeJunctions;
(function (BattleContextUnitAttributeJunctions) {
    BattleContextUnitAttributeJunctions.KEY = new CollectionKey("battle_context_unit_attribute_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._battleContext = values["battle_context"];
            this._unitAttribute = values["unit_attribute"];
        }
        get battleContext() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueBattleContextSpecifiers$1.KEY, CampaignBonusValueBattleContextSpecifiers$1.Entry);
            return collection.find(entry => entry.key === this._battleContext);
        }
        get unitAttribute() {
            const collection = this.collectionCache.getCollection(UnitAttributes$1.KEY, UnitAttributes$1.Entry);
            return collection.find(entry => entry.key === this._unitAttribute);
        }
    }
    BattleContextUnitAttributeJunctions.Entry = Entry;
})(BattleContextUnitAttributeJunctions || (BattleContextUnitAttributeJunctions = {}));

var BattleEntitiesClassValidationEnum$1;
(function (BattleEntitiesClassValidationEnum) {
    BattleEntitiesClassValidationEnum.KEY = new CollectionKey("battle_entities_class_validation_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    BattleEntitiesClassValidationEnum.Entry = Entry;
})(BattleEntitiesClassValidationEnum$1 || (BattleEntitiesClassValidationEnum$1 = {}));

var BattleEntitiesShapeEnum$1;
(function (BattleEntitiesShapeEnum) {
    BattleEntitiesShapeEnum.KEY = new CollectionKey("battle_entities_shape_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    BattleEntitiesShapeEnum.Entry = Entry;
})(BattleEntitiesShapeEnum$1 || (BattleEntitiesShapeEnum$1 = {}));

var BattleMiscEffects$1;
(function (BattleMiscEffects) {
    BattleMiscEffects.KEY = new CollectionKey("battle_misc_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
            this._effect = values["effect"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._effect);
        }
    }
    BattleMiscEffects.Entry = Entry;
})(BattleMiscEffects$1 || (BattleMiscEffects$1 = {}));

var BattlePersonalityTypesEnum$1;
(function (BattlePersonalityTypesEnum) {
    BattlePersonalityTypesEnum.KEY = new CollectionKey("battle_personality_types_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    BattlePersonalityTypesEnum.Entry = Entry;
})(BattlePersonalityTypesEnum$1 || (BattlePersonalityTypesEnum$1 = {}));

var BattleResultTypes;
(function (BattleResultTypes) {
    BattleResultTypes.KEY = new CollectionKey("battle_result_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.battleResultType = values["battle_result_type"];
            this.resultScreenName = values["result_screen_name"];
            this.resultDescription = values["result_description"];
            this.unitXpGain = values["unit_xp_gain"];
        }
    }
    BattleResultTypes.Entry = Entry;
})(BattleResultTypes || (BattleResultTypes = {}));

var BattleSequences$1;
(function (BattleSequences) {
    BattleSequences.KEY = new CollectionKey("battle_sequences");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._battle = values["battle"];
            this.unlockOrder = values["unlock_order"];
        }
        get battle() {
            const collection = this.collectionCache.getCollection(Battles$1.KEY, Battles$1.Entry);
            return collection.find(entry => entry.key === this._battle);
        }
    }
    BattleSequences.Entry = Entry;
})(BattleSequences$1 || (BattleSequences$1 = {}));

var BmdLayerGroups;
(function (BmdLayerGroups) {
    BmdLayerGroups.KEY = new CollectionKey("bmd_layer_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    BmdLayerGroups.Entry = Entry;
})(BmdLayerGroups || (BmdLayerGroups = {}));

var BmdExportTypes;
(function (BmdExportTypes) {
    BmdExportTypes.KEY = new CollectionKey("bmd_export_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
            this.description = values["description"];
            this._group = values["group"];
            this.default = !!values["default"];
        }
        get group() {
            const collection = this.collectionCache.getCollection(BmdLayerGroups.KEY, BmdLayerGroups.Entry);
            return collection.find(entry => entry.key === this._group);
        }
    }
    BmdExportTypes.Entry = Entry;
})(BmdExportTypes || (BmdExportTypes = {}));

var BattleSetPieces;
(function (BattleSetPieces) {
    BattleSetPieces.KEY = new CollectionKey("battle_set_pieces");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.battleName = values["battle_name"];
            this._battleType = values["battle_type"];
            this.battleScript = values["battle_script"];
            this.battleEnvironment = values["battle_environment"];
            this.battleDuration = values["battle_duration"];
            this.frontendIconOffsetX = values["frontend_icon_offset_x"];
            this.frontendIconOffsetY = values["frontend_icon_offset_y"];
            this.isPlayerAttacker = !!values["is_player_attacker"];
            this._bmdLayerType = values["bmd_layer_type"];
            this.useLargeArmies = !!values["use_large_armies"];
            this.localisedName = values["localised_name"];
            this.localisedDescription = values["localised_description"];
            this.battlefieldFolder = values["battlefield_folder"];
            this._gameExpansionKey = values["game_expansion_key"];
            this.teleportCost = values["teleport_cost"];
            this.catchmentArea = values["catchment_area"];
            this._introMovie = values["intro_movie"];
            this._outroMovieWin = values["outro_movie_win"];
            this._outroMovieLose = values["outro_movie_lose"];
            this._battleEnvironmentAudio = values["battle_environment_audio"];
            this._campaignPreBattleIntroMovie = values["campaign_pre_battle_intro_movie"];
        }
        get battleType() {
            const collection = this.collectionCache.getCollection(BattleTypes$1.KEY, BattleTypes$1.Entry);
            return collection.find(entry => entry.type === this._battleType);
        }
        get bmdLayerType() {
            const collection = this.collectionCache.getCollection(BmdExportTypes.KEY, BmdExportTypes.Entry);
            return collection.find(entry => entry.name === this._bmdLayerType);
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
        get introMovie() {
            const collection = this.collectionCache.getCollection(Videos$1.KEY, Videos$1.Entry);
            return collection.find(entry => entry.videoName === this._introMovie);
        }
        get outroMovieWin() {
            const collection = this.collectionCache.getCollection(Videos$1.KEY, Videos$1.Entry);
            return collection.find(entry => entry.videoName === this._outroMovieWin);
        }
        get outroMovieLose() {
            const collection = this.collectionCache.getCollection(Videos$1.KEY, Videos$1.Entry);
            return collection.find(entry => entry.videoName === this._outroMovieLose);
        }
        get battleEnvironmentAudio() {
            const collection = this.collectionCache.getCollection(AudioBattleEnvironments.KEY, AudioBattleEnvironments.Entry);
            return collection.find(entry => entry.name === this._battleEnvironmentAudio);
        }
        get campaignPreBattleIntroMovie() {
            const collection = this.collectionCache.getCollection(Videos$1.KEY, Videos$1.Entry);
            return collection.find(entry => entry.videoName === this._campaignPreBattleIntroMovie);
        }
    }
    BattleSetPieces.Entry = Entry;
})(BattleSetPieces || (BattleSetPieces = {}));

var CampaignCharacterArtSets$1;
(function (CampaignCharacterArtSets) {
    CampaignCharacterArtSets.KEY = new CollectionKey("campaign_character_art_sets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.artSetId = values["art_set_id"];
            this.isCustom = !!values["is_custom"];
            this._agentType = values["agent_type"];
            this._faction = values["faction"];
            this._culture = values["culture"];
            this._subculture = values["subculture"];
            this.isMale = !!values["is_male"];
            this._agentSubtype = values["agent_subtype"];
            this.campaignMapScale = values["campaign_map_scale"];
        }
        get agentType() {
            const collection = this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry);
            return collection.find(entry => entry.key === this._agentType);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
        get agentSubtype() {
            const collection = this.collectionCache.getCollection(AgentSubtypes.KEY, AgentSubtypes.Entry);
            return collection.find(entry => entry.key === this._agentSubtype);
        }
    }
    CampaignCharacterArtSets.Entry = Entry;
})(CampaignCharacterArtSets$1 || (CampaignCharacterArtSets$1 = {}));

var CampaignCharacterArts$1;
(function (CampaignCharacterArts) {
    CampaignCharacterArts.KEY = new CollectionKey("campaign_character_arts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._artSetId = values["art_set_id"];
            this.level = values["level"];
            this.season = values["season"];
            this.age = values["age"];
            this.portrait = values["portrait"];
            this._uniform = values["uniform"];
            this.card = values["card"];
            this.info = values["info"];
            this._seaUniform = values["sea_uniform"];
            this._navyUniform = values["navy_uniform"];
            this._landAnimation = values["land_animation"];
            this._seaAnimation = values["sea_animation"];
            this._navyAnimation = values["navy_animation"];
            this.id = values["id"];
            this._religion = values["religion"];
            this.landAnimationVfxFilter = values["land_animation_vfx_filter"];
            this.seaAnimationVfxFilter = values["sea_animation_vfx_filter"];
            this.navyAnimationVfxFilter = values["navy_animation_vfx_filter"];
        }
        get artSetId() {
            const collection = this.collectionCache.getCollection(CampaignCharacterArtSets$1.KEY, CampaignCharacterArtSets$1.Entry);
            return collection.find(entry => entry.artSetId === this._artSetId);
        }
        get uniform() {
            const collection = this.collectionCache.getCollection(AgentUniforms$1.KEY, AgentUniforms$1.Entry);
            return collection.find(entry => entry.uniformName === this._uniform);
        }
        get seaUniform() {
            const collection = this.collectionCache.getCollection(AgentUniforms$1.KEY, AgentUniforms$1.Entry);
            return collection.find(entry => entry.uniformName === this._seaUniform);
        }
        get navyUniform() {
            const collection = this.collectionCache.getCollection(AgentUniforms$1.KEY, AgentUniforms$1.Entry);
            return collection.find(entry => entry.uniformName === this._navyUniform);
        }
        get landAnimation() {
            const collection = this.collectionCache.getCollection(CampaignAnimSetEnums$1.KEY, CampaignAnimSetEnums$1.Entry);
            return collection.find(entry => entry.name === this._landAnimation);
        }
        get seaAnimation() {
            const collection = this.collectionCache.getCollection(CampaignAnimSetEnums$1.KEY, CampaignAnimSetEnums$1.Entry);
            return collection.find(entry => entry.name === this._seaAnimation);
        }
        get navyAnimation() {
            const collection = this.collectionCache.getCollection(CampaignAnimSetEnums$1.KEY, CampaignAnimSetEnums$1.Entry);
            return collection.find(entry => entry.name === this._navyAnimation);
        }
        get religion() {
            const collection = this.collectionCache.getCollection(Religions$1.KEY, Religions$1.Entry);
            return collection.find(entry => entry.religionKey === this._religion);
        }
    }
    CampaignCharacterArts.Entry = Entry;
})(CampaignCharacterArts$1 || (CampaignCharacterArts$1 = {}));

var MilitaryForceLegacyEmblems$1;
(function (MilitaryForceLegacyEmblems) {
    MilitaryForceLegacyEmblems.KEY = new CollectionKey("military_force_legacy_emblems");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.isArmy = !!values["is_army"];
            this._factionKey = values["faction_key"];
            this._culureKey = values["culure_key"];
            this._subcultureKey = values["subculture_key"];
            this.icon = values["icon"];
            this.bannerDecorator = values["banner_decorator"];
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get culureKey() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culureKey);
        }
        get subcultureKey() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subcultureKey);
        }
    }
    MilitaryForceLegacyEmblems.Entry = Entry;
})(MilitaryForceLegacyEmblems$1 || (MilitaryForceLegacyEmblems$1 = {}));

var BattleSetPieceArmies;
(function (BattleSetPieceArmies) {
    BattleSetPieceArmies.KEY = new CollectionKey("battle_set_piece_armies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.armyName = values["army_name"];
            this._faction = values["faction"];
            this.isAlliedToPlayer = !!values["is_allied_to_player"];
            this.isReinforcementArmy = !!values["is_reinforcement_army"];
            this.armyOnscreenName = values["army_onscreen_name"];
            this._armyModel = values["army_model"];
            this._armyEmblem = values["army_emblem"];
            this.approachAngle = values["approach_angle"];
            this.deploymentZoneId = values["deployment_zone_id"];
            this.aiArmyTactic = values["ai_army_tactic"];
            this.isFrontendPlayerArmy = !!values["is_frontend_player_army"];
            this.useDefaultDeploymentZones = !!values["use_default_deployment_zones"];
            this.isHiddenArmy = !!values["is_hidden_army"];
            this.shouldMergeArmy = !!values["should_merge_army"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get armyModel() {
            const collection = this.collectionCache.getCollection(CampaignCharacterArts$1.KEY, CampaignCharacterArts$1.Entry);
            return collection.find(entry => entry.id === this._armyModel);
        }
        get armyEmblem() {
            const collection = this.collectionCache.getCollection(MilitaryForceLegacyEmblems$1.KEY, MilitaryForceLegacyEmblems$1.Entry);
            return collection.find(entry => entry.key === this._armyEmblem);
        }
    }
    BattleSetPieceArmies.Entry = Entry;
})(BattleSetPieceArmies || (BattleSetPieceArmies = {}));

var NameTypes$1;
(function (NameTypes) {
    NameTypes.KEY = new CollectionKey("name_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    NameTypes.Entry = Entry;
})(NameTypes$1 || (NameTypes$1 = {}));

var Names$1;
(function (Names) {
    Names.KEY = new CollectionKey("names");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._namesGroup = values["names_group"];
            this.name = values["name"];
            this._type = values["type"];
            this._gender = values["gender"];
            this.frequency = values["frequency"];
            this.nobility = !!values["nobility"];
            this.id = values["id"];
        }
        get namesGroup() {
            const collection = this.collectionCache.getCollection(NamesGroups$1.KEY, NamesGroups$1.Entry);
            return collection.find(entry => entry.key === this._namesGroup);
        }
        get type() {
            const collection = this.collectionCache.getCollection(NameTypes$1.KEY, NameTypes$1.Entry);
            return collection.find(entry => entry.key === this._type);
        }
        get gender() {
            const collection = this.collectionCache.getCollection(Genders$1.KEY, Genders$1.Entry);
            return collection.find(entry => entry.gender === this._gender);
        }
    }
    Names.Entry = Entry;
})(Names$1 || (Names$1 = {}));

var SpecialAbilityGroups$1;
(function (SpecialAbilityGroups) {
    SpecialAbilityGroups.KEY = new CollectionKey("special_ability_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.abilityGroup = values["ability_group"];
            this.iconPath = values["icon_path"];
            this.name = values["name"];
            this.specialEditionMask = values["special_edition_mask"];
            this.sortOrder = values["sort_order"];
            this.isNaval = !!values["is_naval"];
            this.colourR = values["colour_r"];
            this.colourG = values["colour_g"];
            this.colourB = values["colour_b"];
            this.buttonName = values["button_name"];
            this.soundEvent = values["sound_event"];
            this.isCompositeGroup = !!values["is_composite_group"];
        }
    }
    SpecialAbilityGroups.Entry = Entry;
})(SpecialAbilityGroups$1 || (SpecialAbilityGroups$1 = {}));

var BattleSetPieceArmiesCharactersSkillsets;
(function (BattleSetPieceArmiesCharactersSkillsets) {
    BattleSetPieceArmiesCharactersSkillsets.KEY = new CollectionKey("battle_set_piece_armies_characters_skillsets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    BattleSetPieceArmiesCharactersSkillsets.Entry = Entry;
})(BattleSetPieceArmiesCharactersSkillsets || (BattleSetPieceArmiesCharactersSkillsets = {}));

var BattleSetPieceArmiesCharacters;
(function (BattleSetPieceArmiesCharacters) {
    BattleSetPieceArmiesCharacters.KEY = new CollectionKey("battle_set_piece_armies_characters");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.characterName = values["character_name"];
            this._unitType = values["unit_type"];
            this._forename = values["forename"];
            this._surname = values["surname"];
            this._magicLore = values["magic_lore"];
            this.numMen = values["num_men"];
            this.characterLevel = values["character_level"];
            this._agentType = values["agent_type"];
            this._agentSubtype = values["agent_subtype"];
            this.portrait = values["portrait"];
            this._characterModel = values["character_model"];
            this._skillset = values["skillset"];
            this.male = !!values["male"];
        }
        get unitType() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unitType);
        }
        get forename() {
            const collection = this.collectionCache.getCollection(Names$1.KEY, Names$1.Entry);
            return collection.find(entry => entry.id === this._forename);
        }
        get surname() {
            const collection = this.collectionCache.getCollection(Names$1.KEY, Names$1.Entry);
            return collection.find(entry => entry.id === this._surname);
        }
        get magicLore() {
            const collection = this.collectionCache.getCollection(SpecialAbilityGroups$1.KEY, SpecialAbilityGroups$1.Entry);
            return collection.find(entry => entry.abilityGroup === this._magicLore);
        }
        get agentType() {
            const collection = this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry);
            return collection.find(entry => entry.key === this._agentType);
        }
        get agentSubtype() {
            const collection = this.collectionCache.getCollection(AgentSubtypes.KEY, AgentSubtypes.Entry);
            return collection.find(entry => entry.key === this._agentSubtype);
        }
        get characterModel() {
            const collection = this.collectionCache.getCollection(CampaignCharacterArts$1.KEY, CampaignCharacterArts$1.Entry);
            return collection.find(entry => entry.id === this._characterModel);
        }
        get skillset() {
            const collection = this.collectionCache.getCollection(BattleSetPieceArmiesCharactersSkillsets.KEY, BattleSetPieceArmiesCharactersSkillsets.Entry);
            return collection.find(entry => entry.key === this._skillset);
        }
    }
    BattleSetPieceArmiesCharacters.Entry = Entry;
})(BattleSetPieceArmiesCharacters || (BattleSetPieceArmiesCharacters = {}));

var BattleSetPieceArmiesCharactersItems;
(function (BattleSetPieceArmiesCharactersItems) {
    BattleSetPieceArmiesCharactersItems.KEY = new CollectionKey("battle_set_piece_armies_characters_items");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._characterName = values["character_name"];
            this._characterItem = values["character_item"];
        }
        get characterName() {
            const collection = this.collectionCache.getCollection(BattleSetPieceArmiesCharacters.KEY, BattleSetPieceArmiesCharacters.Entry);
            return collection.find(entry => entry.characterName === this._characterName);
        }
        get characterItem() {
            const collection = this.collectionCache.getCollection(Ancillaries$1.KEY, Ancillaries$1.Entry);
            return collection.find(entry => entry._key === this._characterItem);
        }
    }
    BattleSetPieceArmiesCharactersItems.Entry = Entry;
})(BattleSetPieceArmiesCharactersItems || (BattleSetPieceArmiesCharactersItems = {}));

var BattleSetPieceArmiesCharactersJunctions;
(function (BattleSetPieceArmiesCharactersJunctions) {
    BattleSetPieceArmiesCharactersJunctions.KEY = new CollectionKey("battle_set_piece_armies_characters_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._armyName = values["army_name"];
            this._characterName = values["character_name"];
            this.scriptName = values["script_name"];
        }
        get armyName() {
            const collection = this.collectionCache.getCollection(BattleSetPieceArmies.KEY, BattleSetPieceArmies.Entry);
            return collection.find(entry => entry.armyName === this._armyName);
        }
        get characterName() {
            const collection = this.collectionCache.getCollection(BattleSetPieceArmiesCharacters.KEY, BattleSetPieceArmiesCharacters.Entry);
            return collection.find(entry => entry.characterName === this._characterName);
        }
    }
    BattleSetPieceArmiesCharactersJunctions.Entry = Entry;
})(BattleSetPieceArmiesCharactersJunctions || (BattleSetPieceArmiesCharactersJunctions = {}));

var BattleSetPieceArmiesCharactersSkills;
(function (BattleSetPieceArmiesCharactersSkills) {
    BattleSetPieceArmiesCharactersSkills.KEY = new CollectionKey("battle_set_piece_armies_characters_skills");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._characterName = values["character_name"];
            this._skill = values["skill"];
            this.level = values["level"];
        }
        get characterName() {
            const collection = this.collectionCache.getCollection(BattleSetPieceArmiesCharacters.KEY, BattleSetPieceArmiesCharacters.Entry);
            return collection.find(entry => entry.characterName === this._characterName);
        }
        get skill() {
            const collection = this.collectionCache.getCollection(CharacterSkills$1.KEY, CharacterSkills$1.Entry);
            return collection.find(entry => entry.key === this._skill);
        }
    }
    BattleSetPieceArmiesCharactersSkills.Entry = Entry;
})(BattleSetPieceArmiesCharactersSkills || (BattleSetPieceArmiesCharactersSkills = {}));

var BattleSetPieceArmiesCharactersSkillsetsSkills;
(function (BattleSetPieceArmiesCharactersSkillsetsSkills) {
    BattleSetPieceArmiesCharactersSkillsetsSkills.KEY = new CollectionKey("battle_set_piece_armies_characters_skillsets_skills");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._skillsetKey = values["skillset_key"];
            this._skill = values["skill"];
            this.sortOrder = values["sort_order"];
        }
        get skillsetKey() {
            const collection = this.collectionCache.getCollection(BattleSetPieceArmiesCharactersSkillsets.KEY, BattleSetPieceArmiesCharactersSkillsets.Entry);
            return collection.find(entry => entry.key === this._skillsetKey);
        }
        get skill() {
            const collection = this.collectionCache.getCollection(CharacterSkills$1.KEY, CharacterSkills$1.Entry);
            return collection.find(entry => entry.key === this._skill);
        }
    }
    BattleSetPieceArmiesCharactersSkillsetsSkills.Entry = Entry;
})(BattleSetPieceArmiesCharactersSkillsetsSkills || (BattleSetPieceArmiesCharactersSkillsetsSkills = {}));

var BattleSetPieceArmiesEffectBundles;
(function (BattleSetPieceArmiesEffectBundles) {
    BattleSetPieceArmiesEffectBundles.KEY = new CollectionKey("battle_set_piece_armies_effect_bundles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._battleSetPieceArmy = values["battle_set_piece_army"];
            this._effectBundle = values["effect_bundle"];
        }
        get battleSetPieceArmy() {
            const collection = this.collectionCache.getCollection(BattleSetPieceArmies.KEY, BattleSetPieceArmies.Entry);
            return collection.find(entry => entry.armyName === this._battleSetPieceArmy);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    BattleSetPieceArmiesEffectBundles.Entry = Entry;
})(BattleSetPieceArmiesEffectBundles || (BattleSetPieceArmiesEffectBundles = {}));

var BattleSetPieceArmiesJunctions;
(function (BattleSetPieceArmiesJunctions) {
    BattleSetPieceArmiesJunctions.KEY = new CollectionKey("battle_set_piece_armies_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._battleName = values["battle_name"];
            this._armyName = values["army_name"];
        }
        get battleName() {
            const collection = this.collectionCache.getCollection(BattleSetPieces.KEY, BattleSetPieces.Entry);
            return collection.find(entry => entry.battleName === this._battleName);
        }
        get armyName() {
            const collection = this.collectionCache.getCollection(BattleSetPieceArmies.KEY, BattleSetPieceArmies.Entry);
            return collection.find(entry => entry.armyName === this._armyName);
        }
    }
    BattleSetPieceArmiesJunctions.Entry = Entry;
})(BattleSetPieceArmiesJunctions || (BattleSetPieceArmiesJunctions = {}));

var BattleSetPieceArmiesSkillsJunctions;
(function (BattleSetPieceArmiesSkillsJunctions) {
    BattleSetPieceArmiesSkillsJunctions.KEY = new CollectionKey("battle_set_piece_armies_skills_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._armyName = values["army_name"];
            this._armySkill = values["army_skill"];
        }
        get armyName() {
            const collection = this.collectionCache.getCollection(BattleSetPieceArmies.KEY, BattleSetPieceArmies.Entry);
            return collection.find(entry => entry.armyName === this._armyName);
        }
        get armySkill() {
            const collection = this.collectionCache.getCollection(Ancillaries$1.KEY, Ancillaries$1.Entry);
            return collection.find(entry => entry._key === this._armySkill);
        }
    }
    BattleSetPieceArmiesSkillsJunctions.Entry = Entry;
})(BattleSetPieceArmiesSkillsJunctions || (BattleSetPieceArmiesSkillsJunctions = {}));

var BattleSetPieceArmiesUnits;
(function (BattleSetPieceArmiesUnits) {
    BattleSetPieceArmiesUnits.KEY = new CollectionKey("battle_set_piece_armies_units");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.unitName = values["unit_name"];
            this._unitType = values["unit_type"];
            this.percentageNumMen = values["percentage_num_men"];
            this.unitLevel = values["unit_level"];
        }
        get unitType() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unitType);
        }
    }
    BattleSetPieceArmiesUnits.Entry = Entry;
})(BattleSetPieceArmiesUnits || (BattleSetPieceArmiesUnits = {}));

var BattleSetPieceArmiesUnitsJunctions;
(function (BattleSetPieceArmiesUnitsJunctions) {
    BattleSetPieceArmiesUnitsJunctions.KEY = new CollectionKey("battle_set_piece_armies_units_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._armyName = values["army_name"];
            this._unitName = values["unit_name"];
            this.scriptName = values["script_name"];
            this.numberOfUnit = values["number_of_unit"];
        }
        get armyName() {
            const collection = this.collectionCache.getCollection(BattleSetPieceArmies.KEY, BattleSetPieceArmies.Entry);
            return collection.find(entry => entry.armyName === this._armyName);
        }
        get unitName() {
            const collection = this.collectionCache.getCollection(BattleSetPieceArmiesUnits.KEY, BattleSetPieceArmiesUnits.Entry);
            return collection.find(entry => entry.unitName === this._unitName);
        }
    }
    BattleSetPieceArmiesUnitsJunctions.Entry = Entry;
})(BattleSetPieceArmiesUnitsJunctions || (BattleSetPieceArmiesUnitsJunctions = {}));

var BattleSetPieceCampaignBattleScenes;
(function (BattleSetPieceCampaignBattleScenes) {
    BattleSetPieceCampaignBattleScenes.KEY = new CollectionKey("battle_set_piece_campaign_battle_scenes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._battleSetPiece = values["battle_set_piece"];
            this.bmd = values["bmd"];
            this.environment = values["environment"];
        }
        get battleSetPiece() {
            const collection = this.collectionCache.getCollection(BattleSetPieces.KEY, BattleSetPieces.Entry);
            return collection.find(entry => entry.battleName === this._battleSetPiece);
        }
    }
    BattleSetPieceCampaignBattleScenes.Entry = Entry;
})(BattleSetPieceCampaignBattleScenes || (BattleSetPieceCampaignBattleScenes = {}));

var BattleSetPieceCampaignBattleSceneViewConfigurations;
(function (BattleSetPieceCampaignBattleSceneViewConfigurations) {
    BattleSetPieceCampaignBattleSceneViewConfigurations.KEY = new CollectionKey("battle_set_piece_campaign_battle_scene_view_configurations");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._setPieceBattleScene = values["set_piece_battle_scene"];
            this.separation = values["separation"];
            this.cameraDistance = values["camera_distance"];
            this.cameraHeight = values["camera_height"];
            this.scale = values["scale"];
        }
        get setPieceBattleScene() {
            const collection = this.collectionCache.getCollection(BattleSetPieceCampaignBattleScenes.KEY, BattleSetPieceCampaignBattleScenes.Entry);
            return collection.find(entry => entry._battleSetPiece === this._setPieceBattleScene);
        }
    }
    BattleSetPieceCampaignBattleSceneViewConfigurations.Entry = Entry;
})(BattleSetPieceCampaignBattleSceneViewConfigurations || (BattleSetPieceCampaignBattleSceneViewConfigurations = {}));

var BattleSetPieceFrontendGroups;
(function (BattleSetPieceFrontendGroups) {
    BattleSetPieceFrontendGroups.KEY = new CollectionKey("battle_set_piece_frontend_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.sortOrder = values["sort_order"];
            this.campaignMap = values["campaign_map"];
        }
    }
    BattleSetPieceFrontendGroups.Entry = Entry;
})(BattleSetPieceFrontendGroups || (BattleSetPieceFrontendGroups = {}));

var BattleSetPieceFrontendGroupsToCharacters;
(function (BattleSetPieceFrontendGroupsToCharacters) {
    BattleSetPieceFrontendGroupsToCharacters.KEY = new CollectionKey("battle_set_piece_frontend_groups_to_characters");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._frontendGroup = values["frontend_group"];
            this._character = values["character"];
        }
        get frontendGroup() {
            const collection = this.collectionCache.getCollection(BattleSetPieceFrontendGroups.KEY, BattleSetPieceFrontendGroups.Entry);
            return collection.find(entry => entry.key === this._frontendGroup);
        }
        get character() {
            const collection = this.collectionCache.getCollection(BattleSetPieceArmiesCharacters.KEY, BattleSetPieceArmiesCharacters.Entry);
            return collection.find(entry => entry.characterName === this._character);
        }
    }
    BattleSetPieceFrontendGroupsToCharacters.Entry = Entry;
})(BattleSetPieceFrontendGroupsToCharacters || (BattleSetPieceFrontendGroupsToCharacters = {}));

var BattleSiegeVehiclePermissions$1;
(function (BattleSiegeVehiclePermissions) {
    BattleSiegeVehiclePermissions.KEY = new CollectionKey("battle_siege_vehicle_permissions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._vehicle = values["vehicle"];
            this._faction = values["faction"];
        }
        get vehicle() {
            const collection = this.collectionCache.getCollection(BattlefieldSiegeVehicles$1.KEY, BattlefieldSiegeVehicles$1.Entry);
            return collection.find(entry => entry.key === this._vehicle);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    BattleSiegeVehiclePermissions.Entry = Entry;
})(BattleSiegeVehiclePermissions$1 || (BattleSiegeVehiclePermissions$1 = {}));

var VictoryConditions$1;
(function (VictoryConditions) {
    VictoryConditions.KEY = new CollectionKey("victory_conditions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.condition = values["condition"];
        }
    }
    VictoryConditions.Entry = Entry;
})(VictoryConditions$1 || (VictoryConditions$1 = {}));

var BattleTypesToVictoryConditions$1;
(function (BattleTypesToVictoryConditions) {
    BattleTypesToVictoryConditions.KEY = new CollectionKey("battle_types_to_victory_conditions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._battleType = values["battle_type"];
            this._attackerVictoryCondition = values["attacker_victory_condition"];
            this._defenderVictoryCondition = values["defender_victory_condition"];
        }
        get battleType() {
            const collection = this.collectionCache.getCollection(BattleTypes$1.KEY, BattleTypes$1.Entry);
            return collection.find(entry => entry.type === this._battleType);
        }
        get attackerVictoryCondition() {
            const collection = this.collectionCache.getCollection(VictoryConditions$1.KEY, VictoryConditions$1.Entry);
            return collection.find(entry => entry.condition === this._attackerVictoryCondition);
        }
        get defenderVictoryCondition() {
            const collection = this.collectionCache.getCollection(VictoryConditions$1.KEY, VictoryConditions$1.Entry);
            return collection.find(entry => entry.condition === this._defenderVictoryCondition);
        }
    }
    BattleTypesToVictoryConditions.Entry = Entry;
})(BattleTypesToVictoryConditions$1 || (BattleTypesToVictoryConditions$1 = {}));

var BattleTypeSetupLimits$1;
(function (BattleTypeSetupLimits) {
    BattleTypeSetupLimits.KEY = new CollectionKey("battle_type_setup_limits");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._battleType = values["battle_type"];
            this.weightingType = values["weighting_type"];
            this.armySize = values["army_size"];
            this.era = values["era"];
            this.maxInfantry = values["max_infantry"];
            this.maxCavalry = values["max_cavalry"];
            this.maxArtillery = values["max_artillery"];
            this.maxSmallShip = values["max_small_ship"];
            this.maxFrigate = values["max_frigate"];
            this.maxLineOfBattle = values["max_line_of_battle"];
            this.id = values["id"];
        }
        get battleType() {
            const collection = this.collectionCache.getCollection(BattleTypes$1.KEY, BattleTypes$1.Entry);
            return collection.find(entry => entry.type === this._battleType);
        }
    }
    BattleTypeSetupLimits.Entry = Entry;
})(BattleTypeSetupLimits$1 || (BattleTypeSetupLimits$1 = {}));

var BattleVortexCompositeSceneGroupToScenes;
(function (BattleVortexCompositeSceneGroupToScenes) {
    BattleVortexCompositeSceneGroupToScenes.KEY = new CollectionKey("battle_vortex_composite_scene_group_to_scenes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._groupId = values["group_id"];
            this._compositeScene = values["composite_scene"];
            this.triggerDelay = values["trigger_delay"];
            this.freezePosition = !!values["freeze_position"];
            this.freezeRotation = !!values["freeze_rotation"];
        }
        get groupId() {
            const collection = this.collectionCache.getCollection(BattleVortexCompositeSceneGroups.KEY, BattleVortexCompositeSceneGroups.Entry);
            return collection.find(entry => entry.groupId === this._groupId);
        }
        get compositeScene() {
            const collection = this.collectionCache.getCollection(CompositeSceneFiles.KEY, CompositeSceneFiles.Entry);
            return collection.find(entry => entry.sceneFilepath === this._compositeScene);
        }
    }
    BattleVortexCompositeSceneGroupToScenes.Entry = Entry;
})(BattleVortexCompositeSceneGroupToScenes || (BattleVortexCompositeSceneGroupToScenes = {}));

var TraitInfo$1;
(function (TraitInfo) {
    TraitInfo.KEY = new CollectionKey("trait_info");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.trait = values["trait"];
            this.applicableTo = values["applicable_to"];
        }
    }
    TraitInfo.Entry = Entry;
})(TraitInfo$1 || (TraitInfo$1 = {}));

var TraitCategories$1;
(function (TraitCategories) {
    TraitCategories.KEY = new CollectionKey("trait_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.category = values["category"];
            this.iconPath = values["icon_path"];
        }
    }
    TraitCategories.Entry = Entry;
})(TraitCategories$1 || (TraitCategories$1 = {}));

var CharacterTraits$1;
(function (CharacterTraits) {
    CharacterTraits.KEY = new CollectionKey("character_traits");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this.noGoingBackLevel = values["no_going_back_level"];
            this.hidden = !!values["hidden"];
            this.precedence = values["precedence"];
            this._icon = values["icon"];
            this.author = values["author"];
            this.comment = values["comment"];
            this._preBattleSpeechParameter = values["pre_battle_speech_parameter"];
            this.uiPriority = values["ui_priority"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(TraitInfo$1.KEY, TraitInfo$1.Entry);
            return collection.find(entry => entry.trait === this._key);
        }
        get icon() {
            const collection = this.collectionCache.getCollection(TraitCategories$1.KEY, TraitCategories$1.Entry);
            return collection.find(entry => entry.category === this._icon);
        }
        get preBattleSpeechParameter() {
            const collection = this.collectionCache.getCollection(PreBattleSpeechParametersEnum$1.KEY, PreBattleSpeechParametersEnum$1.Entry);
            return collection.find(entry => entry.key === this._preBattleSpeechParameter);
        }
    }
    CharacterTraits.Entry = Entry;
})(CharacterTraits$1 || (CharacterTraits$1 = {}));

var BretonniaVowsToTraits;
(function (BretonniaVowsToTraits) {
    BretonniaVowsToTraits.KEY = new CollectionKey("bretonnia_vows_to_traits");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._vow = values["vow"];
            this._trait = values["trait"];
            this.order = values["order"];
        }
        get vow() {
            const collection = this.collectionCache.getCollection(BretonniaVows.KEY, BretonniaVows.Entry);
            return collection.find(entry => entry.key === this._vow);
        }
        get trait() {
            const collection = this.collectionCache.getCollection(CharacterTraits$1.KEY, CharacterTraits$1.Entry);
            return collection.find(entry => entry._key === this._trait);
        }
    }
    BretonniaVowsToTraits.Entry = Entry;
})(BretonniaVowsToTraits || (BretonniaVowsToTraits = {}));

var BuildingBenefitCategories;
(function (BuildingBenefitCategories) {
    BuildingBenefitCategories.KEY = new CollectionKey("building_benefit_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreenName = values["onscreen_name"];
            this.onscreenDescription = values["onscreen_description"];
            this.iconPath = values["icon_path"];
        }
    }
    BuildingBenefitCategories.Entry = Entry;
})(BuildingBenefitCategories || (BuildingBenefitCategories = {}));

var BuildingCategories$1;
(function (BuildingCategories) {
    BuildingCategories.KEY = new CollectionKey("building_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    BuildingCategories.Entry = Entry;
})(BuildingCategories$1 || (BuildingCategories$1 = {}));

var BuildingChainAvailabilitySetIds$1;
(function (BuildingChainAvailabilitySetIds) {
    BuildingChainAvailabilitySetIds.KEY = new CollectionKey("building_chain_availability_set_ids");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
        }
    }
    BuildingChainAvailabilitySetIds.Entry = Entry;
})(BuildingChainAvailabilitySetIds$1 || (BuildingChainAvailabilitySetIds$1 = {}));

var CampaignMapMasks;
(function (CampaignMapMasks) {
    CampaignMapMasks.KEY = new CollectionKey("campaign_map_masks");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.maskName = values["mask_name"];
        }
    }
    CampaignMapMasks.Entry = Entry;
})(CampaignMapMasks || (CampaignMapMasks = {}));

var Campaigns$1;
(function (Campaigns) {
    Campaigns.KEY = new CollectionKey("campaigns");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.campaignName = values["campaign_name"];
            this.onscreenName = values["onscreen_name"];
            this.description = values["description"];
            this._mapName = values["map_name"];
            this.exportable = !!values["exportable"];
            this.bulletList = values["bullet_list"];
            this.displayLocation = values["display_location"];
            this.isTutorial = !!values["is_tutorial"];
            this._mask = values["mask"];
            this.availableForMp = !!values["available_for_mp"];
            this.mpSortOrder = values["mp_sort_order"];
            this._gameExpansionKey = values["game_expansion_key"];
            this.scriptPath = values["script_path"];
            this._battlePath = values["battle_path"];
            this.terrainLocation = values["terrain_location"];
        }
        get mapName() {
            const collection = this.collectionCache.getCollection(CampaignMaps$1.KEY, CampaignMaps$1.Entry);
            return collection.find(entry => entry.mapname === this._mapName);
        }
        get mask() {
            const collection = this.collectionCache.getCollection(CampaignMapMasks.KEY, CampaignMapMasks.Entry);
            return collection.find(entry => entry.maskName === this._mask);
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
        get battlePath() {
            const collection = this.collectionCache.getCollection(CampaignBattlePaths.KEY, CampaignBattlePaths.Entry);
            return collection.find(entry => entry.path === this._battlePath);
        }
    }
    Campaigns.Entry = Entry;
})(Campaigns$1 || (Campaigns$1 = {}));

var BuildingChainAvailabilities$1;
(function (BuildingChainAvailabilities) {
    BuildingChainAvailabilities.KEY = new CollectionKey("building_chain_availabilities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._setId = values["set_id"];
            this._culture = values["culture"];
            this._subCulture = values["sub_culture"];
            this._faction = values["faction"];
            this._campaign = values["campaign"];
        }
        get setId() {
            const collection = this.collectionCache.getCollection(BuildingChainAvailabilitySetIds$1.KEY, BuildingChainAvailabilitySetIds$1.Entry);
            return collection.find(entry => entry.id === this._setId);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get subCulture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subCulture);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
    }
    BuildingChainAvailabilities.Entry = Entry;
})(BuildingChainAvailabilities$1 || (BuildingChainAvailabilities$1 = {}));

var BuildingChainAvailabilitySets$1;
(function (BuildingChainAvailabilitySets) {
    BuildingChainAvailabilitySets.KEY = new CollectionKey("building_chain_availability_sets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._id = values["id"];
            this._buildingChain = values["building_chain"];
        }
        get id() {
            const collection = this.collectionCache.getCollection(BuildingChainAvailabilitySetIds$1.KEY, BuildingChainAvailabilitySetIds$1.Entry);
            return collection.find(entry => entry.id === this._id);
        }
        get buildingChain() {
            const collection = this.collectionCache.getCollection(BuildingChains$1.KEY, BuildingChains$1.Entry);
            return collection.find(entry => entry.key === this._buildingChain);
        }
    }
    BuildingChainAvailabilitySets.Entry = Entry;
})(BuildingChainAvailabilitySets$1 || (BuildingChainAvailabilitySets$1 = {}));

var BuildingDescriptionTexts$1;
(function (BuildingDescriptionTexts) {
    BuildingDescriptionTexts.KEY = new CollectionKey("building_description_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.longDescription = values["long_description"];
        }
    }
    BuildingDescriptionTexts.Entry = Entry;
})(BuildingDescriptionTexts$1 || (BuildingDescriptionTexts$1 = {}));

var BuildingShortDescriptionTexts$1;
(function (BuildingShortDescriptionTexts) {
    BuildingShortDescriptionTexts.KEY = new CollectionKey("building_short_description_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.shortDescription = values["short_description"];
        }
    }
    BuildingShortDescriptionTexts.Entry = Entry;
})(BuildingShortDescriptionTexts$1 || (BuildingShortDescriptionTexts$1 = {}));

var BuildingFlavourTexts$1;
(function (BuildingFlavourTexts) {
    BuildingFlavourTexts.KEY = new CollectionKey("building_flavour_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.flavour = values["flavour"];
        }
    }
    BuildingFlavourTexts.Entry = Entry;
})(BuildingFlavourTexts$1 || (BuildingFlavourTexts$1 = {}));

var BuildingCultureVariants$1;
(function (BuildingCultureVariants) {
    BuildingCultureVariants.KEY = new CollectionKey("building_culture_variants");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._building = values["building"];
            this._culture = values["culture"];
            this.name = values["name"];
            this._description = values["description"];
            this.icon = values["icon"];
            this._subculture = values["subculture"];
            this._faction = values["faction"];
            this.disables = !!values["disables"];
            this._shortDescription = values["short_description"];
            this._flavour = values["flavour"];
            this.displayTooltip = !!values["display_tooltip"];
        }
        get building() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._building);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get description() {
            const collection = this.collectionCache.getCollection(BuildingDescriptionTexts$1.KEY, BuildingDescriptionTexts$1.Entry);
            return collection.find(entry => entry.key === this._description);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get shortDescription() {
            const collection = this.collectionCache.getCollection(BuildingShortDescriptionTexts$1.KEY, BuildingShortDescriptionTexts$1.Entry);
            return collection.find(entry => entry.key === this._shortDescription);
        }
        get flavour() {
            const collection = this.collectionCache.getCollection(BuildingFlavourTexts$1.KEY, BuildingFlavourTexts$1.Entry);
            return collection.find(entry => entry.key === this._flavour);
        }
    }
    BuildingCultureVariants.Entry = Entry;
})(BuildingCultureVariants$1 || (BuildingCultureVariants$1 = {}));

var BuildingDowngradeJunctions;
(function (BuildingDowngradeJunctions) {
    BuildingDowngradeJunctions.KEY = new CollectionKey("building_downgrade_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._from = values["from"];
            this._to = values["to"];
        }
        get from() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._from);
        }
        get to() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._to);
        }
    }
    BuildingDowngradeJunctions.Entry = Entry;
})(BuildingDowngradeJunctions || (BuildingDowngradeJunctions = {}));

var BuildingEffectsJunction$1;
(function (BuildingEffectsJunction) {
    BuildingEffectsJunction.KEY = new CollectionKey("building_effects_junction");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._building = values["building"];
            this._effect = values["effect"];
            this.value = values["value"];
            this._effectScope = values["effect_scope"];
            this.valueDamaged = values["value_damaged"];
            this.valueRuined = values["value_ruined"];
        }
        get building() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._building);
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get effectScope() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes$1.KEY, CampaignEffectScopes$1.Entry);
            return collection.find(entry => entry.key === this._effectScope);
        }
    }
    BuildingEffectsJunction.Entry = Entry;
})(BuildingEffectsJunction$1 || (BuildingEffectsJunction$1 = {}));

var CampaignBmdLayerGroupIds;
(function (CampaignBmdLayerGroupIds) {
    CampaignBmdLayerGroupIds.KEY = new CollectionKey("campaign_bmd_layer_group_ids");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
        }
    }
    CampaignBmdLayerGroupIds.Entry = Entry;
})(CampaignBmdLayerGroupIds || (CampaignBmdLayerGroupIds = {}));

var BuildingLevelsCampaignBmdLayerGroupJunctions;
(function (BuildingLevelsCampaignBmdLayerGroupJunctions) {
    BuildingLevelsCampaignBmdLayerGroupJunctions.KEY = new CollectionKey("building_levels_campaign_bmd_layer_group_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._buildingLevel = values["building_level"];
            this._campaignBmdLayerGroup = values["campaign_bmd_layer_group"];
        }
        get buildingLevel() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._buildingLevel);
        }
        get campaignBmdLayerGroup() {
            const collection = this.collectionCache.getCollection(CampaignBmdLayerGroupIds.KEY, CampaignBmdLayerGroupIds.Entry);
            return collection.find(entry => entry.id === this._campaignBmdLayerGroup);
        }
    }
    BuildingLevelsCampaignBmdLayerGroupJunctions.Entry = Entry;
})(BuildingLevelsCampaignBmdLayerGroupJunctions || (BuildingLevelsCampaignBmdLayerGroupJunctions = {}));

var BuildingLevelArmedCitizenryJunctions$1;
(function (BuildingLevelArmedCitizenryJunctions) {
    BuildingLevelArmedCitizenryJunctions.KEY = new CollectionKey("building_level_armed_citizenry_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._buildingLevel = values["building_level"];
            this._unitGroup = values["unit_group"];
        }
        get buildingLevel() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._buildingLevel);
        }
        get unitGroup() {
            const collection = this.collectionCache.getCollection(ArmedCitizenryUnitGroups$1.KEY, ArmedCitizenryUnitGroups$1.Entry);
            return collection.find(entry => entry.unitGroup === this._unitGroup);
        }
    }
    BuildingLevelArmedCitizenryJunctions.Entry = Entry;
})(BuildingLevelArmedCitizenryJunctions$1 || (BuildingLevelArmedCitizenryJunctions$1 = {}));

var BuildingLevelRequiredBuildings;
(function (BuildingLevelRequiredBuildings) {
    BuildingLevelRequiredBuildings.KEY = new CollectionKey("building_level_required_buildings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._buildingLevel = values["building_level"];
            this._required = values["required"];
        }
        get buildingLevel() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._buildingLevel);
        }
        get required() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._required);
        }
    }
    BuildingLevelRequiredBuildings.Entry = Entry;
})(BuildingLevelRequiredBuildings || (BuildingLevelRequiredBuildings = {}));

var BuildingLevelRequiredTechnologyJunctions$1;
(function (BuildingLevelRequiredTechnologyJunctions) {
    BuildingLevelRequiredTechnologyJunctions.KEY = new CollectionKey("building_level_required_technology_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._buildingLevelKey = values["building_level_key"];
            this._technologyKey = values["technology_key"];
        }
        get buildingLevelKey() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._buildingLevelKey);
        }
        get technologyKey() {
            const collection = this.collectionCache.getCollection(Technologies$1.KEY, Technologies$1.Entry);
            return collection.find(entry => entry.key === this._technologyKey);
        }
    }
    BuildingLevelRequiredTechnologyJunctions.Entry = Entry;
})(BuildingLevelRequiredTechnologyJunctions$1 || (BuildingLevelRequiredTechnologyJunctions$1 = {}));

var BuildingSets$1;
(function (BuildingSets) {
    BuildingSets.KEY = new CollectionKey("building_sets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreenName = values["onscreen_name"];
            this.icon = values["icon"];
            this.sortOrder = values["sort_order"];
            this.colourR = values["colour_r"];
            this.colourG = values["colour_g"];
            this.colourB = values["colour_b"];
            this.onscreenDescription = values["onscreen_description"];
        }
    }
    BuildingSets.Entry = Entry;
})(BuildingSets$1 || (BuildingSets$1 = {}));

var BuildingSetToBuildingJunctions$1;
(function (BuildingSetToBuildingJunctions) {
    BuildingSetToBuildingJunctions.KEY = new CollectionKey("building_set_to_building_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._buildingSet = values["building_set"];
            this._buildingLevel = values["building_level"];
            this._buildingChain = values["building_chain"];
            this.exclude = !!values["exclude"];
        }
        get buildingSet() {
            const collection = this.collectionCache.getCollection(BuildingSets$1.KEY, BuildingSets$1.Entry);
            return collection.find(entry => entry.key === this._buildingSet);
        }
        get buildingLevel() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._buildingLevel);
        }
        get buildingChain() {
            const collection = this.collectionCache.getCollection(BuildingChains$1.KEY, BuildingChains$1.Entry);
            return collection.find(entry => entry.key === this._buildingChain);
        }
    }
    BuildingSetToBuildingJunctions.Entry = Entry;
})(BuildingSetToBuildingJunctions$1 || (BuildingSetToBuildingJunctions$1 = {}));

var BuildingStates$1;
(function (BuildingStates) {
    BuildingStates.KEY = new CollectionKey("building_states");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    BuildingStates.Entry = Entry;
})(BuildingStates$1 || (BuildingStates$1 = {}));

var BuildingToBuildingBenefitJunctions;
(function (BuildingToBuildingBenefitJunctions) {
    BuildingToBuildingBenefitJunctions.KEY = new CollectionKey("building_to_building_benefit_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._building = values["building"];
            this._benefit = values["benefit"];
        }
        get building() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._building);
        }
        get benefit() {
            const collection = this.collectionCache.getCollection(BuildingBenefitCategories.KEY, BuildingBenefitCategories.Entry);
            return collection.find(entry => entry.key === this._benefit);
        }
    }
    BuildingToBuildingBenefitJunctions.Entry = Entry;
})(BuildingToBuildingBenefitJunctions || (BuildingToBuildingBenefitJunctions = {}));

var BuildingUnitsAllowed$1;
(function (BuildingUnitsAllowed) {
    BuildingUnitsAllowed.KEY = new CollectionKey("building_units_allowed");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._building = values["building"];
            this._unit = values["unit"];
            this.xp = values["XP"];
            this.conditions = values["conditions"];
            this.key = values["key"];
            this._faction = values["faction"];
            this.enabled = !!values["enabled"];
        }
        get building() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._building);
        }
        get unit() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    BuildingUnitsAllowed.Entry = Entry;
})(BuildingUnitsAllowed$1 || (BuildingUnitsAllowed$1 = {}));

var BuildingUpgradesJunction$1;
(function (BuildingUpgradesJunction) {
    BuildingUpgradesJunction.KEY = new CollectionKey("building_upgrades_junction");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._from = values["from"];
            this._to = values["to"];
        }
        get from() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._from);
        }
        get to() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._to);
        }
    }
    BuildingUpgradesJunction.Entry = Entry;
})(BuildingUpgradesJunction$1 || (BuildingUpgradesJunction$1 = {}));

var CaiAgentDistributionProfiles$1;
(function (CaiAgentDistributionProfiles) {
    CaiAgentDistributionProfiles.KEY = new CollectionKey("cai_agent_distribution_profiles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiAgentDistributionProfiles.Entry = Entry;
})(CaiAgentDistributionProfiles$1 || (CaiAgentDistributionProfiles$1 = {}));

var CaiAgentDistributionTypes$1;
(function (CaiAgentDistributionTypes) {
    CaiAgentDistributionTypes.KEY = new CollectionKey("cai_agent_distribution_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiAgentDistributionTypes.Entry = Entry;
})(CaiAgentDistributionTypes$1 || (CaiAgentDistributionTypes$1 = {}));

var CaiAgentEmbedProfiles;
(function (CaiAgentEmbedProfiles) {
    CaiAgentEmbedProfiles.KEY = new CollectionKey("cai_agent_embed_profiles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.freeAgentExcessCap = values["free_agent_excess_cap"];
            this.freeAgentExcessCapPerRegionMultiplier = values["free_agent_excess_cap_per_region_multiplier"];
            this.freeAgentExcessCapPerHordeMultiplier = values["free_agent_excess_cap_per_horde_multiplier"];
            this.freeAgentDefaultTypeCap = values["free_agent_default_type_cap"];
            this.freeAgentDefaultTypeCapPerRegionMultiplier = values["free_agent_default_type_cap_per_region_multiplier"];
            this.freeAgentDefaultTypeCapPerHordeMultiplier = values["free_agent_default_type_cap_per_horde_multiplier"];
        }
    }
    CaiAgentEmbedProfiles.Entry = Entry;
})(CaiAgentEmbedProfiles || (CaiAgentEmbedProfiles = {}));

var CaiAgentTypes$1;
(function (CaiAgentTypes) {
    CaiAgentTypes.KEY = new CollectionKey("cai_agent_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiAgentTypes.Entry = Entry;
})(CaiAgentTypes$1 || (CaiAgentTypes$1 = {}));

var CaiAgentEmbedProfileAgentTypeJunctions;
(function (CaiAgentEmbedProfileAgentTypeJunctions) {
    CaiAgentEmbedProfileAgentTypeJunctions.KEY = new CollectionKey("cai_agent_embed_profile_agent_type_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._agentEmbedProfileKey = values["agent_embed_profile_key"];
            this._agentTypeKey = values["agent_type_key"];
            this.freeAgentTypeCap = values["free_agent_type_cap"];
            this.freeAgentTypeCapPerRegionMultiplier = values["free_agent_type_cap_per_region_multiplier"];
            this.freeAgentTypeCapPerHordeMultiplier = values["free_agent_type_cap_per_horde_multiplier"];
            this.exemptFromFreeAgentCaps = !!values["exempt_from_free_agent_caps"];
        }
        get agentEmbedProfileKey() {
            const collection = this.collectionCache.getCollection(CaiAgentEmbedProfiles.KEY, CaiAgentEmbedProfiles.Entry);
            return collection.find(entry => entry.key === this._agentEmbedProfileKey);
        }
        get agentTypeKey() {
            const collection = this.collectionCache.getCollection(CaiAgentTypes$1.KEY, CaiAgentTypes$1.Entry);
            return collection.find(entry => entry.key === this._agentTypeKey);
        }
    }
    CaiAgentEmbedProfileAgentTypeJunctions.Entry = Entry;
})(CaiAgentEmbedProfileAgentTypeJunctions || (CaiAgentEmbedProfileAgentTypeJunctions = {}));

var CaiAgentRecordToCaiAgentTypeJunctions$1;
(function (CaiAgentRecordToCaiAgentTypeJunctions) {
    CaiAgentRecordToCaiAgentTypeJunctions.KEY = new CollectionKey("cai_agent_record_to_cai_agent_type_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._agentTypeKey = values["agent_type_key"];
            this._agentRecordKey = values["agent_record_key"];
            this._agentSubtypeKey = values["agent_subtype_key"];
        }
        get agentTypeKey() {
            const collection = this.collectionCache.getCollection(CaiAgentTypes$1.KEY, CaiAgentTypes$1.Entry);
            return collection.find(entry => entry.key === this._agentTypeKey);
        }
        get agentRecordKey() {
            const collection = this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry);
            return collection.find(entry => entry.key === this._agentRecordKey);
        }
        get agentSubtypeKey() {
            const collection = this.collectionCache.getCollection(AgentSubtypes.KEY, AgentSubtypes.Entry);
            return collection.find(entry => entry.key === this._agentSubtypeKey);
        }
    }
    CaiAgentRecordToCaiAgentTypeJunctions.Entry = Entry;
})(CaiAgentRecordToCaiAgentTypeJunctions$1 || (CaiAgentRecordToCaiAgentTypeJunctions$1 = {}));

var CaiAgentRecruitmentProfiles$1;
(function (CaiAgentRecruitmentProfiles) {
    CaiAgentRecruitmentProfiles.KEY = new CollectionKey("cai_agent_recruitment_profiles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiAgentRecruitmentProfiles.Entry = Entry;
})(CaiAgentRecruitmentProfiles$1 || (CaiAgentRecruitmentProfiles$1 = {}));

var CaiAgentRecruitmentTypes$1;
(function (CaiAgentRecruitmentTypes) {
    CaiAgentRecruitmentTypes.KEY = new CollectionKey("cai_agent_recruitment_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiAgentRecruitmentTypes.Entry = Entry;
})(CaiAgentRecruitmentTypes$1 || (CaiAgentRecruitmentTypes$1 = {}));

var CaiAgentTypeDistributionProfileJunctions$1;
(function (CaiAgentTypeDistributionProfileJunctions) {
    CaiAgentTypeDistributionProfileJunctions.KEY = new CollectionKey("cai_agent_type_distribution_profile_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._distributionProfileKey = values["distribution_profile_key"];
            this._agentTypeKey = values["agent_type_key"];
            this._distributionTypeKey = values["distribution_type_key"];
        }
        get distributionProfileKey() {
            const collection = this.collectionCache.getCollection(CaiAgentDistributionProfiles$1.KEY, CaiAgentDistributionProfiles$1.Entry);
            return collection.find(entry => entry.key === this._distributionProfileKey);
        }
        get agentTypeKey() {
            const collection = this.collectionCache.getCollection(CaiAgentTypes$1.KEY, CaiAgentTypes$1.Entry);
            return collection.find(entry => entry.key === this._agentTypeKey);
        }
        get distributionTypeKey() {
            const collection = this.collectionCache.getCollection(CaiAgentDistributionTypes$1.KEY, CaiAgentDistributionTypes$1.Entry);
            return collection.find(entry => entry.key === this._distributionTypeKey);
        }
    }
    CaiAgentTypeDistributionProfileJunctions.Entry = Entry;
})(CaiAgentTypeDistributionProfileJunctions$1 || (CaiAgentTypeDistributionProfileJunctions$1 = {}));

var CaiAgentTypeRecruitmentProfileJunctions$1;
(function (CaiAgentTypeRecruitmentProfileJunctions) {
    CaiAgentTypeRecruitmentProfileJunctions.KEY = new CollectionKey("cai_agent_type_recruitment_profile_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._recruitmentProfileKey = values["recruitment_profile_key"];
            this._agentTypeKey = values["agent_type_key"];
            this._recruitmentTypeKey = values["recruitment_type_key"];
        }
        get recruitmentProfileKey() {
            const collection = this.collectionCache.getCollection(CaiAgentRecruitmentProfiles$1.KEY, CaiAgentRecruitmentProfiles$1.Entry);
            return collection.find(entry => entry.key === this._recruitmentProfileKey);
        }
        get agentTypeKey() {
            const collection = this.collectionCache.getCollection(CaiAgentTypes$1.KEY, CaiAgentTypes$1.Entry);
            return collection.find(entry => entry.key === this._agentTypeKey);
        }
        get recruitmentTypeKey() {
            const collection = this.collectionCache.getCollection(CaiAgentRecruitmentTypes$1.KEY, CaiAgentRecruitmentTypes$1.Entry);
            return collection.find(entry => entry.key === this._recruitmentTypeKey);
        }
    }
    CaiAgentTypeRecruitmentProfileJunctions.Entry = Entry;
})(CaiAgentTypeRecruitmentProfileJunctions$1 || (CaiAgentTypeRecruitmentProfileJunctions$1 = {}));

var CaiBaseBuildingContextValues$1;
(function (CaiBaseBuildingContextValues) {
    CaiBaseBuildingContextValues.KEY = new CollectionKey("cai_base_building_context_values");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._buildingKey = values["building_key"];
            this.economicValue = values["economic_value"];
            this.militaryValue = values["military_value"];
            this.happinessValue = values["happiness_value"];
            this.prestigeValue = values["prestige_value"];
            this.educationValue = values["education_value"];
            this.existingBuildingsApplyDiscountOverLimit = values["existing_buildings_apply_discount_over_limit"];
            this.existingBuildingsDiscountPerBuilding = values["existing_buildings_discount_per_building"];
            this.existingBuildingsMaximumDiscount = values["existing_buildings_maximum_discount"];
        }
        get buildingKey() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._buildingKey);
        }
    }
    CaiBaseBuildingContextValues.Entry = Entry;
})(CaiBaseBuildingContextValues$1 || (CaiBaseBuildingContextValues$1 = {}));

var CaiCharacterSkillSynergyLevels;
(function (CaiCharacterSkillSynergyLevels) {
    CaiCharacterSkillSynergyLevels.KEY = new CollectionKey("cai_character_skill_synergy_levels");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.relativeEffect = values["relative_effect"];
        }
    }
    CaiCharacterSkillSynergyLevels.Entry = Entry;
})(CaiCharacterSkillSynergyLevels || (CaiCharacterSkillSynergyLevels = {}));

var CaiCharacterSkillSynergies;
(function (CaiCharacterSkillSynergies) {
    CaiCharacterSkillSynergies.KEY = new CollectionKey("cai_character_skill_synergies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._existingCharacterSkillKey = values["existing_character_skill_key"];
            this._potentialCharacterSkillKey = values["potential_character_skill_key"];
            this._synergyLevelKey = values["synergy_level_key"];
        }
        get existingCharacterSkillKey() {
            const collection = this.collectionCache.getCollection(CharacterSkills$1.KEY, CharacterSkills$1.Entry);
            return collection.find(entry => entry.key === this._existingCharacterSkillKey);
        }
        get potentialCharacterSkillKey() {
            const collection = this.collectionCache.getCollection(CharacterSkills$1.KEY, CharacterSkills$1.Entry);
            return collection.find(entry => entry.key === this._potentialCharacterSkillKey);
        }
        get synergyLevelKey() {
            const collection = this.collectionCache.getCollection(CaiCharacterSkillSynergyLevels.KEY, CaiCharacterSkillSynergyLevels.Entry);
            return collection.find(entry => entry.key === this._synergyLevelKey);
        }
    }
    CaiCharacterSkillSynergies.Entry = Entry;
})(CaiCharacterSkillSynergies || (CaiCharacterSkillSynergies = {}));

var CaiConstructionSystemBlockingCategories;
(function (CaiConstructionSystemBlockingCategories) {
    CaiConstructionSystemBlockingCategories.KEY = new CollectionKey("cai_construction_system_blocking_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.nonBlockingBonus = values["non_blocking_bonus"];
            this.blockingPenalty = values["blocking_penalty"];
            this.numberOfTurnsBeforeEnablingConversion = values["number_of_turns_before_enabling_conversion"];
            this.numberOfTurnsBeforeEnablingDemolition = values["number_of_turns_before_enabling_demolition"];
            this.absenceOfNonBlockingBuildingIsAProblem = !!values["absence_of_non_blocking_building_is_a_problem"];
            this.shouldDisableRecruitmentWhenBlocking = !!values["should_disable_recruitment_when_blocking"];
        }
    }
    CaiConstructionSystemBlockingCategories.Entry = Entry;
})(CaiConstructionSystemBlockingCategories || (CaiConstructionSystemBlockingCategories = {}));

var CaiConstructionSystemBlockingBuildings;
(function (CaiConstructionSystemBlockingBuildings) {
    CaiConstructionSystemBlockingBuildings.KEY = new CollectionKey("cai_construction_system_blocking_buildings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._category = values["category"];
            this._buildingStart = values["building_start"];
            this._buildingEnd = values["building_end"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemBlockingCategories.KEY, CaiConstructionSystemBlockingCategories.Entry);
            return collection.find(entry => entry.key === this._category);
        }
        get buildingStart() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._buildingStart);
        }
        get buildingEnd() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._buildingEnd);
        }
    }
    CaiConstructionSystemBlockingBuildings.Entry = Entry;
})(CaiConstructionSystemBlockingBuildings || (CaiConstructionSystemBlockingBuildings = {}));

var CaiConstructionSystemCategoryGroups$1;
(function (CaiConstructionSystemCategoryGroups) {
    CaiConstructionSystemCategoryGroups.KEY = new CollectionKey("cai_construction_system_category_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiConstructionSystemCategoryGroups.Entry = Entry;
})(CaiConstructionSystemCategoryGroups$1 || (CaiConstructionSystemCategoryGroups$1 = {}));

var CdirMilitaryGeneratorUnitGroups$1;
(function (CdirMilitaryGeneratorUnitGroups) {
    CdirMilitaryGeneratorUnitGroups.KEY = new CollectionKey("cdir_military_generator_unit_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CdirMilitaryGeneratorUnitGroups.Entry = Entry;
})(CdirMilitaryGeneratorUnitGroups$1 || (CdirMilitaryGeneratorUnitGroups$1 = {}));

var CaiConstructionSystemCategories$1;
(function (CaiConstructionSystemCategories) {
    CaiConstructionSystemCategories.KEY = new CollectionKey("cai_construction_system_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._caiConstructionSystemCategoryGroup = values["cai_construction_system_category_group"];
            this._cdirMilitaryGeneratorUnitGroup = values["cdir_military_generator_unit_group"];
        }
        get caiConstructionSystemCategoryGroup() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemCategoryGroups$1.KEY, CaiConstructionSystemCategoryGroups$1.Entry);
            return collection.find(entry => entry.key === this._caiConstructionSystemCategoryGroup);
        }
        get cdirMilitaryGeneratorUnitGroup() {
            const collection = this.collectionCache.getCollection(CdirMilitaryGeneratorUnitGroups$1.KEY, CdirMilitaryGeneratorUnitGroups$1.Entry);
            return collection.find(entry => entry.key === this._cdirMilitaryGeneratorUnitGroup);
        }
    }
    CaiConstructionSystemCategories.Entry = Entry;
})(CaiConstructionSystemCategories$1 || (CaiConstructionSystemCategories$1 = {}));

var CaiConstructionSystemBuildingValues$1;
(function (CaiConstructionSystemBuildingValues) {
    CaiConstructionSystemBuildingValues.KEY = new CollectionKey("cai_construction_system_building_values");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaign = values["campaign"];
            this._faction = values["faction"];
            this._subCulture = values["sub_culture"];
            this._culture = values["culture"];
            this._buildingOrBuildingRangeStartInclusive = values["building_or_building_range_start_inclusive"];
            this._buildingRangeEndInclusive = values["building_range_end_inclusive"];
            this._buildingInstance = values["building_instance"];
            this._buildingChain = values["building_chain"];
            this._buildingSuperChain = values["building_super_chain"];
            this._caiConstructionSystemCategory = values["cai_construction_system_category"];
            this._caiConstructionSystemCategoryGroup = values["cai_construction_system_category_group"];
            this.scoreOrScoreStartInclusive = values["score_or_score_start_inclusive"];
            this.scoreEndInclusive = values["score_end_inclusive"];
            this.perProvinceBuildingLimitStart = values["per_province_building_limit_start"];
            this.perProvinceBuildingMinimumDiscountWhenExceedingLimitStart = values["per_province_building_minimum_discount_when_exceeding_limit_start"];
            this.perProvinceBuildingMaximumDiscountWhenExceedingLimitStart = values["per_province_building_maximum_discount_when_exceeding_limit_start"];
            this.perProvincePerBuildingDiscountIncrementWhenExceedingLimitStart = values["per_province_per_building_discount_increment_when_exceeding_limit_start"];
            this.perProvinceBuildingLimitEnd = values["per_province_building_limit_end"];
            this.perProvinceBuildingMinimumDiscountWhenExceedingLimitEnd = values["per_province_building_minimum_discount_when_exceeding_limit_end"];
            this.perProvinceBuildingMaximumDiscountWhenExceedingLimitEnd = values["per_province_building_maximum_discount_when_exceeding_limit_end"];
            this.perProvincePerBuildingDiscountIncrementWhenExceedingLimitEnd = values["per_province_per_building_discount_increment_when_exceeding_limit_end"];
            this.perFactionBuildingLimitStart = values["per_faction_building_limit_start"];
            this.perFactionBuildingMinimumDiscountWhenExceedingLimitStart = values["per_faction_building_minimum_discount_when_exceeding_limit_start"];
            this.perFactionBuildingMaximumDiscountWhenExceedingLimitStart = values["per_faction_building_maximum_discount_when_exceeding_limit_start"];
            this.perFactionPerBuildingDiscountIncrementWhenExceedingLimitStart = values["per_faction_per_building_discount_increment_when_exceeding_limit_start"];
            this.perFactionBuildingLimitEnd = values["per_faction_building_limit_end"];
            this.perFactionBuildingMinimumDiscountWhenExceedingLimitEnd = values["per_faction_building_minimum_discount_when_exceeding_limit_end"];
            this.perFactionBuildingMaximumDiscountWhenExceedingLimitEnd = values["per_faction_building_maximum_discount_when_exceeding_limit_end"];
            this.perFactionPerBuildingDiscountIncrementWhenExceedingLimitEnd = values["per_faction_per_building_discount_increment_when_exceeding_limit_end"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get subCulture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subCulture);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get buildingOrBuildingRangeStartInclusive() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._buildingOrBuildingRangeStartInclusive);
        }
        get buildingRangeEndInclusive() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._buildingRangeEndInclusive);
        }
        get buildingInstance() {
            const collection = this.collectionCache.getCollection(BuildingInstances$1.KEY, BuildingInstances$1.Entry);
            return collection.find(entry => entry.key === this._buildingInstance);
        }
        get buildingChain() {
            const collection = this.collectionCache.getCollection(BuildingChains$1.KEY, BuildingChains$1.Entry);
            return collection.find(entry => entry.key === this._buildingChain);
        }
        get buildingSuperChain() {
            const collection = this.collectionCache.getCollection(BuildingSuperchains$1.KEY, BuildingSuperchains$1.Entry);
            return collection.find(entry => entry.key === this._buildingSuperChain);
        }
        get caiConstructionSystemCategory() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemCategories$1.KEY, CaiConstructionSystemCategories$1.Entry);
            return collection.find(entry => entry.key === this._caiConstructionSystemCategory);
        }
        get caiConstructionSystemCategoryGroup() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemCategoryGroups$1.KEY, CaiConstructionSystemCategoryGroups$1.Entry);
            return collection.find(entry => entry.key === this._caiConstructionSystemCategoryGroup);
        }
    }
    CaiConstructionSystemBuildingValues.Entry = Entry;
})(CaiConstructionSystemBuildingValues$1 || (CaiConstructionSystemBuildingValues$1 = {}));

var CaiConstructionSystemTemplates$1;
(function (CaiConstructionSystemTemplates) {
    CaiConstructionSystemTemplates.KEY = new CollectionKey("cai_construction_system_templates");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.defaultCategoryAndGroupValue = values["default_category_and_group_value"];
        }
    }
    CaiConstructionSystemTemplates.Entry = Entry;
})(CaiConstructionSystemTemplates$1 || (CaiConstructionSystemTemplates$1 = {}));

var CaiConstructionSystemTemplateAssignmentSchemes;
(function (CaiConstructionSystemTemplateAssignmentSchemes) {
    CaiConstructionSystemTemplateAssignmentSchemes.KEY = new CollectionKey("cai_construction_system_template_assignment_schemes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.schemeKey = values["scheme_key"];
            this._capitalTemplate = values["capital_template"];
            this._basicMilitaryTemplate = values["basic_military_template"];
            this._basicEconomicTemplate = values["basic_economic_template"];
            this.basicIdealMilitaryTemplatePercentage = values["basic_ideal_military_template_percentage"];
            this._navalMilitaryTemplate = values["naval_military_template"];
            this._navalEconomicTemplate = values["naval_economic_template"];
            this.navalIdealMilitaryTemplatePercentage = values["naval_ideal_military_template_percentage"];
        }
        get capitalTemplate() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemTemplates$1.KEY, CaiConstructionSystemTemplates$1.Entry);
            return collection.find(entry => entry.key === this._capitalTemplate);
        }
        get basicMilitaryTemplate() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemTemplates$1.KEY, CaiConstructionSystemTemplates$1.Entry);
            return collection.find(entry => entry.key === this._basicMilitaryTemplate);
        }
        get basicEconomicTemplate() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemTemplates$1.KEY, CaiConstructionSystemTemplates$1.Entry);
            return collection.find(entry => entry.key === this._basicEconomicTemplate);
        }
        get navalMilitaryTemplate() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemTemplates$1.KEY, CaiConstructionSystemTemplates$1.Entry);
            return collection.find(entry => entry.key === this._navalMilitaryTemplate);
        }
        get navalEconomicTemplate() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemTemplates$1.KEY, CaiConstructionSystemTemplates$1.Entry);
            return collection.find(entry => entry.key === this._navalEconomicTemplate);
        }
    }
    CaiConstructionSystemTemplateAssignmentSchemes.Entry = Entry;
})(CaiConstructionSystemTemplateAssignmentSchemes || (CaiConstructionSystemTemplateAssignmentSchemes = {}));

var CaiConstructionSystemProvinceTemplateAssignmentPolicies$1;
(function (CaiConstructionSystemProvinceTemplateAssignmentPolicies) {
    CaiConstructionSystemProvinceTemplateAssignmentPolicies.KEY = new CollectionKey("cai_construction_system_province_template_assignment_policies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._defaultTemplateAssignmentScheme = values["default_template_assignment_scheme"];
        }
        get defaultTemplateAssignmentScheme() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemTemplateAssignmentSchemes.KEY, CaiConstructionSystemTemplateAssignmentSchemes.Entry);
            return collection.find(entry => entry.schemeKey === this._defaultTemplateAssignmentScheme);
        }
    }
    CaiConstructionSystemProvinceTemplateAssignmentPolicies.Entry = Entry;
})(CaiConstructionSystemProvinceTemplateAssignmentPolicies$1 || (CaiConstructionSystemProvinceTemplateAssignmentPolicies$1 = {}));

var CaiConstructionSystemStrategicContextTemplatePolicies$1;
(function (CaiConstructionSystemStrategicContextTemplatePolicies) {
    CaiConstructionSystemStrategicContextTemplatePolicies.KEY = new CollectionKey("cai_construction_system_strategic_context_template_policies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._defaultCaiConstructionSystemTemplate = values["default_cai_construction_system_template"];
        }
        get defaultCaiConstructionSystemTemplate() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemTemplates$1.KEY, CaiConstructionSystemTemplates$1.Entry);
            return collection.find(entry => entry.key === this._defaultCaiConstructionSystemTemplate);
        }
    }
    CaiConstructionSystemStrategicContextTemplatePolicies.Entry = Entry;
})(CaiConstructionSystemStrategicContextTemplatePolicies$1 || (CaiConstructionSystemStrategicContextTemplatePolicies$1 = {}));

var CaiStrategicContextTypes$1;
(function (CaiStrategicContextTypes) {
    CaiStrategicContextTypes.KEY = new CollectionKey("cai_strategic_context_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiStrategicContextTypes.Entry = Entry;
})(CaiStrategicContextTypes$1 || (CaiStrategicContextTypes$1 = {}));

var CaiFactionStatuses;
(function (CaiFactionStatuses) {
    CaiFactionStatuses.KEY = new CollectionKey("cai_faction_statuses");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.factionStatus = values["faction_status"];
        }
    }
    CaiFactionStatuses.Entry = Entry;
})(CaiFactionStatuses || (CaiFactionStatuses = {}));

var CaiConstructionSystemStrategicContextFactionStatusOverrides;
(function (CaiConstructionSystemStrategicContextFactionStatusOverrides) {
    CaiConstructionSystemStrategicContextFactionStatusOverrides.KEY = new CollectionKey("cai_construction_system_strategic_context_faction_status_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._constructionSystemStrategicContextPolicy = values["construction_system_strategic_context_policy"];
            this._strategicContext = values["strategic_context"];
            this._factionStatus = values["faction_status"];
            this._caiConstructionSystemTemplate = values["cai_construction_system_template"];
        }
        get constructionSystemStrategicContextPolicy() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemStrategicContextTemplatePolicies$1.KEY, CaiConstructionSystemStrategicContextTemplatePolicies$1.Entry);
            return collection.find(entry => entry.key === this._constructionSystemStrategicContextPolicy);
        }
        get strategicContext() {
            const collection = this.collectionCache.getCollection(CaiStrategicContextTypes$1.KEY, CaiStrategicContextTypes$1.Entry);
            return collection.find(entry => entry.key === this._strategicContext);
        }
        get factionStatus() {
            const collection = this.collectionCache.getCollection(CaiFactionStatuses.KEY, CaiFactionStatuses.Entry);
            return collection.find(entry => entry.factionStatus === this._factionStatus);
        }
        get caiConstructionSystemTemplate() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemTemplates$1.KEY, CaiConstructionSystemTemplates$1.Entry);
            return collection.find(entry => entry.key === this._caiConstructionSystemTemplate);
        }
    }
    CaiConstructionSystemStrategicContextFactionStatusOverrides.Entry = Entry;
})(CaiConstructionSystemStrategicContextFactionStatusOverrides || (CaiConstructionSystemStrategicContextFactionStatusOverrides = {}));

var CaiConstructionSystemStrategicContextTemplatePolicyJunctions$1;
(function (CaiConstructionSystemStrategicContextTemplatePolicyJunctions) {
    CaiConstructionSystemStrategicContextTemplatePolicyJunctions.KEY = new CollectionKey("cai_construction_system_strategic_context_template_policy_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._caiConstructionSystemStrategicContextPolicy = values["cai_construction_system_strategic_context_policy"];
            this._caiStrategicContext = values["cai_strategic_context"];
            this._caiConstructionSystemTemplate = values["cai_construction_system_template"];
        }
        get caiConstructionSystemStrategicContextPolicy() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemStrategicContextTemplatePolicies$1.KEY, CaiConstructionSystemStrategicContextTemplatePolicies$1.Entry);
            return collection.find(entry => entry.key === this._caiConstructionSystemStrategicContextPolicy);
        }
        get caiStrategicContext() {
            const collection = this.collectionCache.getCollection(CaiStrategicContextTypes$1.KEY, CaiStrategicContextTypes$1.Entry);
            return collection.find(entry => entry.key === this._caiStrategicContext);
        }
        get caiConstructionSystemTemplate() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemTemplates$1.KEY, CaiConstructionSystemTemplates$1.Entry);
            return collection.find(entry => entry.key === this._caiConstructionSystemTemplate);
        }
    }
    CaiConstructionSystemStrategicContextTemplatePolicyJunctions.Entry = Entry;
})(CaiConstructionSystemStrategicContextTemplatePolicyJunctions$1 || (CaiConstructionSystemStrategicContextTemplatePolicyJunctions$1 = {}));

var CaiConstructionSystemSuperchainHints$1;
(function (CaiConstructionSystemSuperchainHints) {
    CaiConstructionSystemSuperchainHints.KEY = new CollectionKey("cai_construction_system_superchain_hints");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._superChainKey = values["super_chain_key"];
            this.militarySpecialisationRecommended = !!values["military_specialisation_recommended"];
            this.economicSpecialisationRecommended = !!values["economic_specialisation_recommended"];
        }
        get superChainKey() {
            const collection = this.collectionCache.getCollection(BuildingSuperchains$1.KEY, BuildingSuperchains$1.Entry);
            return collection.find(entry => entry.key === this._superChainKey);
        }
    }
    CaiConstructionSystemSuperchainHints.Entry = Entry;
})(CaiConstructionSystemSuperchainHints$1 || (CaiConstructionSystemSuperchainHints$1 = {}));

var CaiConstructionSystemSynergyPolicies$1;
(function (CaiConstructionSystemSynergyPolicies) {
    CaiConstructionSystemSynergyPolicies.KEY = new CollectionKey("cai_construction_system_synergy_policies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiConstructionSystemSynergyPolicies.Entry = Entry;
})(CaiConstructionSystemSynergyPolicies$1 || (CaiConstructionSystemSynergyPolicies$1 = {}));

var CaiConstructionSystemSynergyLevels$1;
(function (CaiConstructionSystemSynergyLevels) {
    CaiConstructionSystemSynergyLevels.KEY = new CollectionKey("cai_construction_system_synergy_levels");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.relativeEffect = values["relative_effect"];
            this.absoluteEffect = values["absolute_effect"];
            this.priority = values["priority"];
        }
    }
    CaiConstructionSystemSynergyLevels.Entry = Entry;
})(CaiConstructionSystemSynergyLevels$1 || (CaiConstructionSystemSynergyLevels$1 = {}));

var CaiConstructionSystemSynergyScopes;
(function (CaiConstructionSystemSynergyScopes) {
    CaiConstructionSystemSynergyScopes.KEY = new CollectionKey("cai_construction_system_synergy_scopes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiConstructionSystemSynergyScopes.Entry = Entry;
})(CaiConstructionSystemSynergyScopes || (CaiConstructionSystemSynergyScopes = {}));

var CaiConstructionSystemSynergies$1;
(function (CaiConstructionSystemSynergies) {
    CaiConstructionSystemSynergies.KEY = new CollectionKey("cai_construction_system_synergies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._synergyPolicyKey = values["synergy_policy_key"];
            this._existingBuildingChainKey = values["existing_building_chain_key"];
            this._existingBuildingLevelInclusiveStart = values["existing_building_level_inclusive_start"];
            this._existingBuildingLevelInclusiveEnd = values["existing_building_level_inclusive_end"];
            this._potentialBuidingChainKey = values["potential_buiding_chain_key"];
            this._potentialBuildingLevelInclusiveStart = values["potential_building_level_inclusive_start"];
            this._potentialBuildingLevelInclusiveEnd = values["potential_building_level_inclusive_end"];
            this._synergyLevelKey = values["synergy_level_key"];
            this._existingBuildingInstance = values["existing_building_instance"];
            this._existingBuildingSuperChain = values["existing_building_super_chain"];
            this._potentialBuildingInstance = values["potential_building_instance"];
            this._potentialBuildingSuperChain = values["potential_building_super_chain"];
            this._synergyScopeKey = values["synergy_scope_key"];
        }
        get synergyPolicyKey() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemSynergyPolicies$1.KEY, CaiConstructionSystemSynergyPolicies$1.Entry);
            return collection.find(entry => entry.key === this._synergyPolicyKey);
        }
        get existingBuildingChainKey() {
            const collection = this.collectionCache.getCollection(BuildingChains$1.KEY, BuildingChains$1.Entry);
            return collection.find(entry => entry.key === this._existingBuildingChainKey);
        }
        get existingBuildingLevelInclusiveStart() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._existingBuildingLevelInclusiveStart);
        }
        get existingBuildingLevelInclusiveEnd() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._existingBuildingLevelInclusiveEnd);
        }
        get potentialBuidingChainKey() {
            const collection = this.collectionCache.getCollection(BuildingChains$1.KEY, BuildingChains$1.Entry);
            return collection.find(entry => entry.key === this._potentialBuidingChainKey);
        }
        get potentialBuildingLevelInclusiveStart() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._potentialBuildingLevelInclusiveStart);
        }
        get potentialBuildingLevelInclusiveEnd() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._potentialBuildingLevelInclusiveEnd);
        }
        get synergyLevelKey() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemSynergyLevels$1.KEY, CaiConstructionSystemSynergyLevels$1.Entry);
            return collection.find(entry => entry.key === this._synergyLevelKey);
        }
        get existingBuildingInstance() {
            const collection = this.collectionCache.getCollection(BuildingInstances$1.KEY, BuildingInstances$1.Entry);
            return collection.find(entry => entry.key === this._existingBuildingInstance);
        }
        get existingBuildingSuperChain() {
            const collection = this.collectionCache.getCollection(BuildingSuperchains$1.KEY, BuildingSuperchains$1.Entry);
            return collection.find(entry => entry.key === this._existingBuildingSuperChain);
        }
        get potentialBuildingInstance() {
            const collection = this.collectionCache.getCollection(BuildingInstances$1.KEY, BuildingInstances$1.Entry);
            return collection.find(entry => entry.key === this._potentialBuildingInstance);
        }
        get potentialBuildingSuperChain() {
            const collection = this.collectionCache.getCollection(BuildingSuperchains$1.KEY, BuildingSuperchains$1.Entry);
            return collection.find(entry => entry.key === this._potentialBuildingSuperChain);
        }
        get synergyScopeKey() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemSynergyScopes.KEY, CaiConstructionSystemSynergyScopes.Entry);
            return collection.find(entry => entry.key === this._synergyScopeKey);
        }
    }
    CaiConstructionSystemSynergies.Entry = Entry;
})(CaiConstructionSystemSynergies$1 || (CaiConstructionSystemSynergies$1 = {}));

var CaiConstructionSystemTemplatesJunctions$1;
(function (CaiConstructionSystemTemplatesJunctions) {
    CaiConstructionSystemTemplatesJunctions.KEY = new CollectionKey("cai_construction_system_templates_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._caiConstructionSystemTemplate = values["cai_construction_system_template"];
            this._caiConstructionSystemCategory = values["cai_construction_system_category"];
            this._caiConstructionSystemCategoryGroup = values["cai_construction_system_category_group"];
            this.value = values["value"];
        }
        get caiConstructionSystemTemplate() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemTemplates$1.KEY, CaiConstructionSystemTemplates$1.Entry);
            return collection.find(entry => entry.key === this._caiConstructionSystemTemplate);
        }
        get caiConstructionSystemCategory() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemCategories$1.KEY, CaiConstructionSystemCategories$1.Entry);
            return collection.find(entry => entry.key === this._caiConstructionSystemCategory);
        }
        get caiConstructionSystemCategoryGroup() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemCategoryGroups$1.KEY, CaiConstructionSystemCategoryGroups$1.Entry);
            return collection.find(entry => entry.key === this._caiConstructionSystemCategoryGroup);
        }
    }
    CaiConstructionSystemTemplatesJunctions.Entry = Entry;
})(CaiConstructionSystemTemplatesJunctions$1 || (CaiConstructionSystemTemplatesJunctions$1 = {}));

var CaiConstructionSystemTemplateAssignmentPolicyFactionStatusOverrides;
(function (CaiConstructionSystemTemplateAssignmentPolicyFactionStatusOverrides) {
    CaiConstructionSystemTemplateAssignmentPolicyFactionStatusOverrides.KEY = new CollectionKey("cai_construction_system_template_assignment_policy_faction_status_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._templateAssignmentPolicy = values["template_assignment_policy"];
            this._factionStatus = values["faction_status"];
            this._templateAssignmentScheme = values["template_assignment_scheme"];
        }
        get templateAssignmentPolicy() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemProvinceTemplateAssignmentPolicies$1.KEY, CaiConstructionSystemProvinceTemplateAssignmentPolicies$1.Entry);
            return collection.find(entry => entry.key === this._templateAssignmentPolicy);
        }
        get factionStatus() {
            const collection = this.collectionCache.getCollection(CaiFactionStatuses.KEY, CaiFactionStatuses.Entry);
            return collection.find(entry => entry.factionStatus === this._factionStatus);
        }
        get templateAssignmentScheme() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemTemplateAssignmentSchemes.KEY, CaiConstructionSystemTemplateAssignmentSchemes.Entry);
            return collection.find(entry => entry.schemeKey === this._templateAssignmentScheme);
        }
    }
    CaiConstructionSystemTemplateAssignmentPolicyFactionStatusOverrides.Entry = Entry;
})(CaiConstructionSystemTemplateAssignmentPolicyFactionStatusOverrides || (CaiConstructionSystemTemplateAssignmentPolicyFactionStatusOverrides = {}));

var CaiConstructionSystemUnblockingBuildings;
(function (CaiConstructionSystemUnblockingBuildings) {
    CaiConstructionSystemUnblockingBuildings.KEY = new CollectionKey("cai_construction_system_unblocking_buildings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._category = values["category"];
            this._buildingStart = values["building_start"];
            this._buildingEnd = values["building_end"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemBlockingCategories.KEY, CaiConstructionSystemBlockingCategories.Entry);
            return collection.find(entry => entry.key === this._category);
        }
        get buildingStart() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._buildingStart);
        }
        get buildingEnd() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._buildingEnd);
        }
    }
    CaiConstructionSystemUnblockingBuildings.Entry = Entry;
})(CaiConstructionSystemUnblockingBuildings || (CaiConstructionSystemUnblockingBuildings = {}));

var DiplomacyStrings$1;
(function (DiplomacyStrings) {
    DiplomacyStrings.KEY = new CollectionKey("diplomacy_strings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.string = values["string"];
        }
    }
    DiplomacyStrings.Entry = Entry;
})(DiplomacyStrings$1 || (DiplomacyStrings$1 = {}));

var CaiPersonalityDiplomaticEvents$1;
(function (CaiPersonalityDiplomaticEvents) {
    CaiPersonalityDiplomaticEvents.KEY = new CollectionKey("cai_personality_diplomatic_events");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._diplomaticFactorGroupActive = values["diplomatic_factor_group_active"];
            this._diplomaticFactorGroupInactive = values["diplomatic_factor_group_inactive"];
        }
        get diplomaticFactorGroupActive() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings$1.KEY, DiplomacyStrings$1.Entry);
            return collection.find(entry => entry.key === this._diplomaticFactorGroupActive);
        }
        get diplomaticFactorGroupInactive() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings$1.KEY, DiplomacyStrings$1.Entry);
            return collection.find(entry => entry.key === this._diplomaticFactorGroupInactive);
        }
    }
    CaiPersonalityDiplomaticEvents.Entry = Entry;
})(CaiPersonalityDiplomaticEvents$1 || (CaiPersonalityDiplomaticEvents$1 = {}));

var CaiDiplomacyComplexTreacheries$1;
(function (CaiDiplomacyComplexTreacheries) {
    CaiDiplomacyComplexTreacheries.KEY = new CollectionKey("cai_diplomacy_complex_treacheries");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._firstEvent = values["first_event"];
            this._secondEvent = values["second_event"];
            this.maxTurnDifference = values["max_turn_difference"];
            this.value = values["value"];
        }
        get firstEvent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDiplomaticEvents$1.KEY, CaiPersonalityDiplomaticEvents$1.Entry);
            return collection.find(entry => entry.id === this._firstEvent);
        }
        get secondEvent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDiplomaticEvents$1.KEY, CaiPersonalityDiplomaticEvents$1.Entry);
            return collection.find(entry => entry.id === this._secondEvent);
        }
    }
    CaiDiplomacyComplexTreacheries.Entry = Entry;
})(CaiDiplomacyComplexTreacheries$1 || (CaiDiplomacyComplexTreacheries$1 = {}));

var CaiDiplomacyExcludedFactions;
(function (CaiDiplomacyExcludedFactions) {
    CaiDiplomacyExcludedFactions.KEY = new CollectionKey("cai_diplomacy_excluded_factions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._faction = values["faction"];
            this._campaign = values["campaign"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
    }
    CaiDiplomacyExcludedFactions.Entry = Entry;
})(CaiDiplomacyExcludedFactions || (CaiDiplomacyExcludedFactions = {}));

var CaiDiplomacySimpleTreacheries$1;
(function (CaiDiplomacySimpleTreacheries) {
    CaiDiplomacySimpleTreacheries.KEY = new CollectionKey("cai_diplomacy_simple_treacheries");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._event = values["event"];
            this.value = values["value"];
        }
        get event() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDiplomaticEvents$1.KEY, CaiPersonalityDiplomaticEvents$1.Entry);
            return collection.find(entry => entry.id === this._event);
        }
    }
    CaiDiplomacySimpleTreacheries.Entry = Entry;
})(CaiDiplomacySimpleTreacheries$1 || (CaiDiplomacySimpleTreacheries$1 = {}));

var CaiRegionHintProfiles;
(function (CaiRegionHintProfiles) {
    CaiRegionHintProfiles.KEY = new CollectionKey("cai_region_hint_profiles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiRegionHintProfiles.Entry = Entry;
})(CaiRegionHintProfiles || (CaiRegionHintProfiles = {}));

var CaiHintProfileGroups;
(function (CaiHintProfileGroups) {
    CaiHintProfileGroups.KEY = new CollectionKey("cai_hint_profile_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._regionHintProfileKey = values["region_hint_profile_key"];
        }
        get regionHintProfileKey() {
            const collection = this.collectionCache.getCollection(CaiRegionHintProfiles.KEY, CaiRegionHintProfiles.Entry);
            return collection.find(entry => entry.key === this._regionHintProfileKey);
        }
    }
    CaiHintProfileGroups.Entry = Entry;
})(CaiHintProfileGroups || (CaiHintProfileGroups = {}));

var CaiFactionsToHintProfileGroups;
(function (CaiFactionsToHintProfileGroups) {
    CaiFactionsToHintProfileGroups.KEY = new CollectionKey("cai_factions_to_hint_profile_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._faction = values["faction"];
            this._hintProfileGroupKey = values["hint_profile_group_key"];
            this.campaign = values["campaign"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get hintProfileGroupKey() {
            const collection = this.collectionCache.getCollection(CaiHintProfileGroups.KEY, CaiHintProfileGroups.Entry);
            return collection.find(entry => entry.key === this._hintProfileGroupKey);
        }
    }
    CaiFactionsToHintProfileGroups.Entry = Entry;
})(CaiFactionsToHintProfileGroups || (CaiFactionsToHintProfileGroups = {}));

var CaiHintProfiles;
(function (CaiHintProfiles) {
    CaiHintProfiles.KEY = new CollectionKey("cai_hint_profiles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiHintProfiles.Entry = Entry;
})(CaiHintProfiles || (CaiHintProfiles = {}));

var CaiMilitaryAggressivenessPolicies$1;
(function (CaiMilitaryAggressivenessPolicies) {
    CaiMilitaryAggressivenessPolicies.KEY = new CollectionKey("cai_military_aggressiveness_policies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._shortDescription = values["short_description"];
            this._longDescription = values["long_description"];
        }
        get shortDescription() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings$1.KEY, DiplomacyStrings$1.Entry);
            return collection.find(entry => entry.key === this._shortDescription);
        }
        get longDescription() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings$1.KEY, DiplomacyStrings$1.Entry);
            return collection.find(entry => entry.key === this._longDescription);
        }
    }
    CaiMilitaryAggressivenessPolicies.Entry = Entry;
})(CaiMilitaryAggressivenessPolicies$1 || (CaiMilitaryAggressivenessPolicies$1 = {}));

var CaiMilitaryBehaviourPolicies$1;
(function (CaiMilitaryBehaviourPolicies) {
    CaiMilitaryBehaviourPolicies.KEY = new CollectionKey("cai_military_behaviour_policies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiMilitaryBehaviourPolicies.Entry = Entry;
})(CaiMilitaryBehaviourPolicies$1 || (CaiMilitaryBehaviourPolicies$1 = {}));

var TaxesLevels$1;
(function (TaxesLevels) {
    TaxesLevels.KEY = new CollectionKey("taxes_levels");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.taxLevel = values["tax_level"];
            this.percentage = values["percentage"];
        }
    }
    TaxesLevels.Entry = Entry;
})(TaxesLevels$1 || (TaxesLevels$1 = {}));

var CaiPersonalitiesBudgetAllocations$1;
(function (CaiPersonalitiesBudgetAllocations) {
    CaiPersonalitiesBudgetAllocations.KEY = new CollectionKey("cai_personalities_budget_allocations");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.armyFundsAllocationPercentage = values["army_funds_allocation_percentage"];
            this.armyTurnsOfInactivityUntilCap = values["army_turns_of_inactivity_until_cap"];
            this.armyFundingCap = values["army_funding_cap"];
            this.armyPercentageOfPoolToSaveOnFail = values["army_percentage_of_pool_to_save_on_fail"];
            this.navyFundsAllocationPercentage = values["navy_funds_allocation_percentage"];
            this.navyTurnsOfInactivityUntilCap = values["navy_turns_of_inactivity_until_cap"];
            this.navyFundingCap = values["navy_funding_cap"];
            this.navyPercentageOfPoolToSaveOnFail = values["navy_percentage_of_pool_to_save_on_fail"];
            this.agentsFundsAllocationPercentage = values["agents_funds_allocation_percentage"];
            this.agentsTurnsOfInactivityUntilCap = values["agents_turns_of_inactivity_until_cap"];
            this.agentsFundingCap = values["agents_funding_cap"];
            this.agentsPercentageOfPoolToSaveOnFail = values["agents_percentage_of_pool_to_save_on_fail"];
            this.constructionFundsAllocationPercentage = values["construction_funds_allocation_percentage"];
            this.constructionTurnsOfInactivityUntilCap = values["construction_turns_of_inactivity_until_cap"];
            this.constructionFundingCap = values["construction_funding_cap"];
            this.constructionPercentageOfPoolToSaveOnFail = values["construction_percentage_of_pool_to_save_on_fail"];
            this.diplomacyFundsAllocationPercentage = values["diplomacy_funds_allocation_percentage"];
            this.diplomacyTurnsOfInactivityUntilCap = values["diplomacy_turns_of_inactivity_until_cap"];
            this.diplomacyFundingCap = values["diplomacy_funding_cap"];
            this.diplomacyPercentageOfPoolToSaveOnFail = values["diplomacy_percentage_of_pool_to_save_on_fail"];
            this._minimumSettableTaxLevel = values["minimum_settable_tax_level"];
            this._maximumSettableTaxLevel = values["maximum_settable_tax_level"];
            this.technologyFundsAllocationPercentage = values["technology_funds_allocation_percentage"];
            this.technologyTurnsOfInactivityUntilCap = values["technology_turns_of_inactivity_until_cap"];
            this.technologyFundingCap = values["technology_funding_cap"];
            this.technologyPercentageOfPoolToSaveOnFail = values["technology_percentage_of_pool_to_save_on_fail"];
        }
        get minimumSettableTaxLevel() {
            const collection = this.collectionCache.getCollection(TaxesLevels$1.KEY, TaxesLevels$1.Entry);
            return collection.find(entry => entry.taxLevel === this._minimumSettableTaxLevel);
        }
        get maximumSettableTaxLevel() {
            const collection = this.collectionCache.getCollection(TaxesLevels$1.KEY, TaxesLevels$1.Entry);
            return collection.find(entry => entry.taxLevel === this._maximumSettableTaxLevel);
        }
    }
    CaiPersonalitiesBudgetAllocations.Entry = Entry;
})(CaiPersonalitiesBudgetAllocations$1 || (CaiPersonalitiesBudgetAllocations$1 = {}));

var CaiPersonalitiesBudgetPolicies$1;
(function (CaiPersonalitiesBudgetPolicies) {
    CaiPersonalitiesBudgetPolicies.KEY = new CollectionKey("cai_personalities_budget_policies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._defaultBudgetAllocationKey = values["default_budget_allocation_key"];
            this._shortDescription = values["short_description"];
            this._longDescription = values["long_description"];
        }
        get defaultBudgetAllocationKey() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesBudgetAllocations$1.KEY, CaiPersonalitiesBudgetAllocations$1.Entry);
            return collection.find(entry => entry.key === this._defaultBudgetAllocationKey);
        }
        get shortDescription() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings$1.KEY, DiplomacyStrings$1.Entry);
            return collection.find(entry => entry.key === this._shortDescription);
        }
        get longDescription() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings$1.KEY, DiplomacyStrings$1.Entry);
            return collection.find(entry => entry.key === this._longDescription);
        }
    }
    CaiPersonalitiesBudgetPolicies.Entry = Entry;
})(CaiPersonalitiesBudgetPolicies$1 || (CaiPersonalitiesBudgetPolicies$1 = {}));

var CampaignAiTechnologyManagers$1;
(function (CampaignAiTechnologyManagers) {
    CampaignAiTechnologyManagers.KEY = new CollectionKey("campaign_ai_technology_managers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignAiTechnologyManagers.Entry = Entry;
})(CampaignAiTechnologyManagers$1 || (CampaignAiTechnologyManagers$1 = {}));

var CaiPersonalitiesReliabilityPolicies$1;
(function (CaiPersonalitiesReliabilityPolicies) {
    CaiPersonalitiesReliabilityPolicies.KEY = new CollectionKey("cai_personalities_reliability_policies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.joinAllyBias = values["join_ally_bias"];
            this._shortDescription = values["short_description"];
            this._longDescription = values["long_description"];
            this.noWarDeclarationGiftThresholdMin = values["no_war_declaration_gift_threshold_min"];
            this.noWarDeclarationGiftThresholdMax = values["no_war_declaration_gift_threshold_max"];
            this.noWarDeclarationGiftBonus = values["no_war_declaration_gift_bonus"];
            this.noRaidingGiftThreshold = values["no_raiding_gift_threshold"];
        }
        get shortDescription() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings$1.KEY, DiplomacyStrings$1.Entry);
            return collection.find(entry => entry.key === this._shortDescription);
        }
        get longDescription() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings$1.KEY, DiplomacyStrings$1.Entry);
            return collection.find(entry => entry.key === this._longDescription);
        }
    }
    CaiPersonalitiesReliabilityPolicies.Entry = Entry;
})(CaiPersonalitiesReliabilityPolicies$1 || (CaiPersonalitiesReliabilityPolicies$1 = {}));

var CaiPersonalitiesReligiousConversionPolicies$1;
(function (CaiPersonalitiesReligiousConversionPolicies) {
    CaiPersonalitiesReligiousConversionPolicies.KEY = new CollectionKey("cai_personalities_religious_conversion_policies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiPersonalitiesReligiousConversionPolicies.Entry = Entry;
})(CaiPersonalitiesReligiousConversionPolicies$1 || (CaiPersonalitiesReligiousConversionPolicies$1 = {}));

var CaiPersonalityDiplomaticComponents$1;
(function (CaiPersonalityDiplomaticComponents) {
    CaiPersonalityDiplomaticComponents.KEY = new CollectionKey("cai_personality_diplomatic_components");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._shortDescription = values["short_description"];
            this._longDescription = values["long_description"];
        }
        get shortDescription() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings$1.KEY, DiplomacyStrings$1.Entry);
            return collection.find(entry => entry.key === this._shortDescription);
        }
        get longDescription() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings$1.KEY, DiplomacyStrings$1.Entry);
            return collection.find(entry => entry.key === this._longDescription);
        }
    }
    CaiPersonalityDiplomaticComponents.Entry = Entry;
})(CaiPersonalityDiplomaticComponents$1 || (CaiPersonalityDiplomaticComponents$1 = {}));

var CaiPersonalityStrategicComponents$1;
(function (CaiPersonalityStrategicComponents) {
    CaiPersonalityStrategicComponents.KEY = new CollectionKey("cai_personality_strategic_components");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this.maxFriendlyAttitude = values["max_friendly_attitude"];
            this.friendlyTowardsFriendMultiplier = values["friendly_towards_friend_multiplier"];
            this.hostileTowardsFriendMultiplier = values["hostile_towards_friend_multiplier"];
            this.maxHostileAttitude = values["max_hostile_attitude"];
            this.friendlyTowardsEnemyMultiplier = values["friendly_towards_enemy_multiplier"];
            this.hostileTowardsEnemyMultiplier = values["hostile_towards_enemy_multiplier"];
            this.unknownFactionMultiplier = values["unknown_faction_multiplier"];
            this.maxMercProportion = values["max_merc_proportion"];
            this.minMercCap = values["min_merc_cap"];
            this.enemyStrengthModifier = values["enemy_strength_modifier"];
            this.enemyThreatStrengthModifier = values["enemy_threat_strength_modifier"];
            this.minRetreatRatio = values["min_retreat_ratio"];
            this.minRetreatToSettlementRatio = values["min_retreat_to_settlement_ratio"];
            this.strategicBalanceOpportunismFactor = values["strategic_balance_opportunism_factor"];
            this.fortifiedSettlementAssaultStrengthModifier = values["fortified_settlement_assault_strength_modifier"];
            this.fortifiedSettlementDefendStrengthModifier = values["fortified_settlement_defend_strength_modifier"];
            this._shortDescription = values["short_description"];
            this._longDescription = values["long_description"];
            this.lastSettlementModifier = values["last_settlement_modifier"];
            this.minRefuseTunnelingInterceptRatio = values["min_refuse_tunneling_intercept_ratio"];
            this.useClassicStanceGenerationMechanics = !!values["use_classic_stance_generation_mechanics"];
        }
        get shortDescription() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings$1.KEY, DiplomacyStrings$1.Entry);
            return collection.find(entry => entry.key === this._shortDescription);
        }
        get longDescription() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings$1.KEY, DiplomacyStrings$1.Entry);
            return collection.find(entry => entry.key === this._longDescription);
        }
    }
    CaiPersonalityStrategicComponents.Entry = Entry;
})(CaiPersonalityStrategicComponents$1 || (CaiPersonalityStrategicComponents$1 = {}));

var CaiPersonalityCulturalComponents$1;
(function (CaiPersonalityCulturalComponents) {
    CaiPersonalityCulturalComponents.KEY = new CollectionKey("cai_personality_cultural_components");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this.baseBonusMultiplier = values["base_bonus_multiplier"];
            this.basePenaltyMultiplier = values["base_penalty_multiplier"];
            this.eventBonusMultiplier = values["event_bonus_multiplier"];
            this.eventPenaltyMultiplier = values["event_penalty_multiplier"];
            this._shortDescription = values["short_description"];
            this._longDescription = values["long_description"];
        }
        get shortDescription() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings$1.KEY, DiplomacyStrings$1.Entry);
            return collection.find(entry => entry.key === this._shortDescription);
        }
        get longDescription() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings$1.KEY, DiplomacyStrings$1.Entry);
            return collection.find(entry => entry.key === this._longDescription);
        }
    }
    CaiPersonalityCulturalComponents.Entry = Entry;
})(CaiPersonalityCulturalComponents$1 || (CaiPersonalityCulturalComponents$1 = {}));

var CaiPersonalityDealEvaluationComponents$1;
(function (CaiPersonalityDealEvaluationComponents) {
    CaiPersonalityDealEvaluationComponents.KEY = new CollectionKey("cai_personality_deal_evaluation_components");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this.maxPaymentValue = values["max_payment_value"];
            this.paymentTreacheryValue = values["payment_treachery_value"];
            this.paymentOfferedMultiplierUnder = values["payment_offered_multiplier_under"];
            this.paymentRequestedMultiplier = values["payment_requested_multiplier"];
            this.paymentOfferedMultiplierOver = values["payment_offered_multiplier_over"];
            this.peacePenalty = values["peace_penalty"];
            this.peacePenaltyTurns = values["peace_penalty_turns"];
            this.warPenalty = values["war_penalty"];
            this.warPenaltyTurns = values["war_penalty_turns"];
            this.trespassingPeaceEffectMultiplier = values["trespassing_peace_effect_multiplier"];
            this.trespassingPeaceEffectCap = values["trespassing_peace_effect_cap"];
            this.trespassingWarEffectMultiplier = values["trespassing_war_effect_multiplier"];
            this.trespassingWarEffectCap = values["trespassing_war_effect_cap"];
            this.confederationBonus = values["confederation_bonus"];
            this._shortDescription = values["short_description"];
            this._longDescription = values["long_description"];
            this.warBreakTreatyBonusTowardsVictoryRegionOwners = values["war_break_treaty_bonus_towards_victory_region_owners"];
            this.peaceSignTreatyPenaltyTowardsVictoryRegionOwners = values["peace_sign_treaty_penalty_towards_victory_region_owners"];
        }
        get shortDescription() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings$1.KEY, DiplomacyStrings$1.Entry);
            return collection.find(entry => entry.key === this._shortDescription);
        }
        get longDescription() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings$1.KEY, DiplomacyStrings$1.Entry);
            return collection.find(entry => entry.key === this._longDescription);
        }
    }
    CaiPersonalityDealEvaluationComponents.Entry = Entry;
})(CaiPersonalityDealEvaluationComponents$1 || (CaiPersonalityDealEvaluationComponents$1 = {}));

var CaiPersonalityDealGenerationComponents$1;
(function (CaiPersonalityDealGenerationComponents) {
    CaiPersonalityDealGenerationComponents.KEY = new CollectionKey("cai_personality_deal_generation_components");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
        }
    }
    CaiPersonalityDealGenerationComponents.Entry = Entry;
})(CaiPersonalityDealGenerationComponents$1 || (CaiPersonalityDealGenerationComponents$1 = {}));

var CaiPersonalitiesConstructionSystemPolicies$1;
(function (CaiPersonalitiesConstructionSystemPolicies) {
    CaiPersonalitiesConstructionSystemPolicies.KEY = new CollectionKey("cai_personalities_construction_system_policies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._strategicContextTemplateAssignmentPolicy = values["strategic_context_template_assignment_policy"];
            this._provinceSpecialisationTemplateAssignmentPolicy = values["province_specialisation_template_assignment_policy"];
            this._buildingSynergiesPolicy = values["building_synergies_policy"];
        }
        get strategicContextTemplateAssignmentPolicy() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemStrategicContextTemplatePolicies$1.KEY, CaiConstructionSystemStrategicContextTemplatePolicies$1.Entry);
            return collection.find(entry => entry.key === this._strategicContextTemplateAssignmentPolicy);
        }
        get provinceSpecialisationTemplateAssignmentPolicy() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemProvinceTemplateAssignmentPolicies$1.KEY, CaiConstructionSystemProvinceTemplateAssignmentPolicies$1.Entry);
            return collection.find(entry => entry.key === this._provinceSpecialisationTemplateAssignmentPolicy);
        }
        get buildingSynergiesPolicy() {
            const collection = this.collectionCache.getCollection(CaiConstructionSystemSynergyPolicies$1.KEY, CaiConstructionSystemSynergyPolicies$1.Entry);
            return collection.find(entry => entry.key === this._buildingSynergiesPolicy);
        }
    }
    CaiPersonalitiesConstructionSystemPolicies.Entry = Entry;
})(CaiPersonalitiesConstructionSystemPolicies$1 || (CaiPersonalitiesConstructionSystemPolicies$1 = {}));

var CaiTaskManagementSystemTaskGeneratorGroups$1;
(function (CaiTaskManagementSystemTaskGeneratorGroups) {
    CaiTaskManagementSystemTaskGeneratorGroups.KEY = new CollectionKey("cai_task_management_system_task_generator_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiTaskManagementSystemTaskGeneratorGroups.Entry = Entry;
})(CaiTaskManagementSystemTaskGeneratorGroups$1 || (CaiTaskManagementSystemTaskGeneratorGroups$1 = {}));

var CaiPersonalitiesTaskManagementSystemTaskGeneratorProfiles$1;
(function (CaiPersonalitiesTaskManagementSystemTaskGeneratorProfiles) {
    CaiPersonalitiesTaskManagementSystemTaskGeneratorProfiles.KEY = new CollectionKey("cai_personalities_task_management_system_task_generator_profiles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._defaultGeneratorGroup = values["default_generator_group"];
            this._shortDescription = values["short_description"];
            this._longDescription = values["long_description"];
        }
        get defaultGeneratorGroup() {
            const collection = this.collectionCache.getCollection(CaiTaskManagementSystemTaskGeneratorGroups$1.KEY, CaiTaskManagementSystemTaskGeneratorGroups$1.Entry);
            return collection.find(entry => entry.key === this._defaultGeneratorGroup);
        }
        get shortDescription() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings$1.KEY, DiplomacyStrings$1.Entry);
            return collection.find(entry => entry.key === this._shortDescription);
        }
        get longDescription() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings$1.KEY, DiplomacyStrings$1.Entry);
            return collection.find(entry => entry.key === this._longDescription);
        }
    }
    CaiPersonalitiesTaskManagementSystemTaskGeneratorProfiles.Entry = Entry;
})(CaiPersonalitiesTaskManagementSystemTaskGeneratorProfiles$1 || (CaiPersonalitiesTaskManagementSystemTaskGeneratorProfiles$1 = {}));

var CaiPersonalityNegotiationComponents$1;
(function (CaiPersonalityNegotiationComponents) {
    CaiPersonalityNegotiationComponents.KEY = new CollectionKey("cai_personality_negotiation_components");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this.initialDecline = values["initial_decline"];
            this.initialCounter = values["initial_counter"];
            this.irrelevantDecline = values["irrelevant_decline"];
            this.irrelevantAccept = values["irrelevant_accept"];
            this.irrelevantCounterNew = values["irrelevant_counter_new"];
            this.irrelevantCounterLast = values["irrelevant_counter_last"];
            this.angryRejectMin = values["angry_reject_min"];
            this.angryRejectMax = values["angry_reject_max"];
            this.noPaymentChance = values["no_payment_chance"];
            this.maxStepsAboveAcceptable = values["max_steps_above_acceptable"];
            this.noOfferChance = values["no_offer_chance"];
            this.numGoalsGenerated = values["num_goals_generated"];
            this.maxInteractions = values["max_interactions"];
            this.failedPaymentMod = values["failed_payment_mod"];
            this.noOfferChanceFalloff = values["no_offer_chance_falloff"];
        }
    }
    CaiPersonalityNegotiationComponents.Entry = Entry;
})(CaiPersonalityNegotiationComponents$1 || (CaiPersonalityNegotiationComponents$1 = {}));

var CaiPersonalitiesIncomeAllocations;
(function (CaiPersonalitiesIncomeAllocations) {
    CaiPersonalitiesIncomeAllocations.KEY = new CollectionKey("cai_personalities_income_allocations");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.proportionOfNetIncomeToSpend = values["proportion_of_net_income_to_spend"];
            this.zeroOrNegativeNetIncomeSurvivalRounds = values["zero_or_negative_net_income_survival_rounds"];
            this.positiveNetIncomeSurvivalRounds = values["positive_net_income_survival_rounds"];
        }
    }
    CaiPersonalitiesIncomeAllocations.Entry = Entry;
})(CaiPersonalitiesIncomeAllocations || (CaiPersonalitiesIncomeAllocations = {}));

var CaiPersonalitiesIncomeAllocationPolicies$1;
(function (CaiPersonalitiesIncomeAllocationPolicies) {
    CaiPersonalitiesIncomeAllocationPolicies.KEY = new CollectionKey("cai_personalities_income_allocation_policies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._defaultIncomeAllocation = values["default_income_allocation"];
        }
        get defaultIncomeAllocation() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesIncomeAllocations.KEY, CaiPersonalitiesIncomeAllocations.Entry);
            return collection.find(entry => entry.key === this._defaultIncomeAllocation);
        }
    }
    CaiPersonalitiesIncomeAllocationPolicies.Entry = Entry;
})(CaiPersonalitiesIncomeAllocationPolicies$1 || (CaiPersonalitiesIncomeAllocationPolicies$1 = {}));

var CaiPersonalityOccupationDecisionPolicies;
(function (CaiPersonalityOccupationDecisionPolicies) {
    CaiPersonalityOccupationDecisionPolicies.KEY = new CollectionKey("cai_personality_occupation_decision_policies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this.foodShortageCap = values["food_shortage_cap"];
            this.foodExcessCap = values["food_excess_cap"];
            this.squalorCap = values["squalor_cap"];
            this.minAttitude = values["min_attitude"];
        }
    }
    CaiPersonalityOccupationDecisionPolicies.Entry = Entry;
})(CaiPersonalityOccupationDecisionPolicies || (CaiPersonalityOccupationDecisionPolicies = {}));

var CaiPersonalityOccupationDecisionComponents$1;
(function (CaiPersonalityOccupationDecisionComponents) {
    CaiPersonalityOccupationDecisionComponents.KEY = new CollectionKey("cai_personality_occupation_decision_components");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._policySuitable = values["policy_suitable"];
            this._policyUnsuitable = values["policy_unsuitable"];
            this._policyUninhabitable = values["policy_uninhabitable"];
            this._policyUncapturable = values["policy_uncapturable"];
        }
        get policySuitable() {
            const collection = this.collectionCache.getCollection(CaiPersonalityOccupationDecisionPolicies.KEY, CaiPersonalityOccupationDecisionPolicies.Entry);
            return collection.find(entry => entry.id === this._policySuitable);
        }
        get policyUnsuitable() {
            const collection = this.collectionCache.getCollection(CaiPersonalityOccupationDecisionPolicies.KEY, CaiPersonalityOccupationDecisionPolicies.Entry);
            return collection.find(entry => entry.id === this._policyUnsuitable);
        }
        get policyUninhabitable() {
            const collection = this.collectionCache.getCollection(CaiPersonalityOccupationDecisionPolicies.KEY, CaiPersonalityOccupationDecisionPolicies.Entry);
            return collection.find(entry => entry.id === this._policyUninhabitable);
        }
        get policyUncapturable() {
            const collection = this.collectionCache.getCollection(CaiPersonalityOccupationDecisionPolicies.KEY, CaiPersonalityOccupationDecisionPolicies.Entry);
            return collection.find(entry => entry.id === this._policyUncapturable);
        }
    }
    CaiPersonalityOccupationDecisionComponents.Entry = Entry;
})(CaiPersonalityOccupationDecisionComponents$1 || (CaiPersonalityOccupationDecisionComponents$1 = {}));

var CaiPersonalityReligiousComponents;
(function (CaiPersonalityReligiousComponents) {
    CaiPersonalityReligiousComponents.KEY = new CollectionKey("cai_personality_religious_components");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this.baseBonusMultiplier = values["base_bonus_multiplier"];
            this.basePenaltyMultiplier = values["base_penalty_multiplier"];
            this.eventBonusMultiplier = values["event_bonus_multiplier"];
            this.eventPenaltyMultiplier = values["event_penalty_multiplier"];
            this._shortDescription = values["short_description"];
            this._longDescription = values["long_description"];
        }
        get shortDescription() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings$1.KEY, DiplomacyStrings$1.Entry);
            return collection.find(entry => entry.key === this._shortDescription);
        }
        get longDescription() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings$1.KEY, DiplomacyStrings$1.Entry);
            return collection.find(entry => entry.key === this._longDescription);
        }
    }
    CaiPersonalityReligiousComponents.Entry = Entry;
})(CaiPersonalityReligiousComponents || (CaiPersonalityReligiousComponents = {}));

var CaiPersonalityEmpireRivalryComponents;
(function (CaiPersonalityEmpireRivalryComponents) {
    CaiPersonalityEmpireRivalryComponents.KEY = new CollectionKey("cai_personality_empire_rivalry_components");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.expansionismMultiplierPlayer = values["expansionism_multiplier_player"];
            this.expansionismMultiplierAi = values["expansionism_multiplier_ai"];
            this._shortDescription = values["short_description"];
            this._longDescription = values["long_description"];
        }
        get shortDescription() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings$1.KEY, DiplomacyStrings$1.Entry);
            return collection.find(entry => entry.key === this._shortDescription);
        }
        get longDescription() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings$1.KEY, DiplomacyStrings$1.Entry);
            return collection.find(entry => entry.key === this._longDescription);
        }
    }
    CaiPersonalityEmpireRivalryComponents.Entry = Entry;
})(CaiPersonalityEmpireRivalryComponents || (CaiPersonalityEmpireRivalryComponents = {}));

var CaiPersonalitiesReligionChangeManagementPolicies;
(function (CaiPersonalitiesReligionChangeManagementPolicies) {
    CaiPersonalitiesReligionChangeManagementPolicies.KEY = new CollectionKey("cai_personalities_religion_change_management_policies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.proportionOverMeanStateReligionValueForReligionChangeTick = values["proportion_over_mean_state_religion_value_for_religion_change_tick"];
            this.religionChangeTicksRequiredToChange = values["religion_change_ticks_required_to_change"];
            this.percentProbabilityOfReligionChangeOnceThresholdReached = values["percent_probability_of_religion_change_once_threshold_reached"];
        }
    }
    CaiPersonalitiesReligionChangeManagementPolicies.Entry = Entry;
})(CaiPersonalitiesReligionChangeManagementPolicies || (CaiPersonalitiesReligionChangeManagementPolicies = {}));

var CaiPersonalityTrespassingComponents;
(function (CaiPersonalityTrespassingComponents) {
    CaiPersonalityTrespassingComponents.KEY = new CollectionKey("cai_personality_trespassing_components");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.unknownFactionModifier = values["unknown_faction_modifier"];
            this.minScore = values["min_score"];
            this.minScoreHorde = values["min_score_horde"];
            this.stanceModBestFriends = values["stance_mod_best_friends"];
            this.stanceModVeryFriendly = values["stance_mod_very_friendly"];
            this.stanceModFriendly = values["stance_mod_friendly"];
            this.stanceModNeutral = values["stance_mod_neutral"];
            this.stanceModUnfriendly = values["stance_mod_unfriendly"];
            this.stanceModVeryUnfriendly = values["stance_mod_very_unfriendly"];
            this.stanceModBitterEnemies = values["stance_mod_bitter_enemies"];
        }
    }
    CaiPersonalityTrespassingComponents.Entry = Entry;
})(CaiPersonalityTrespassingComponents || (CaiPersonalityTrespassingComponents = {}));

var CaiPersonalitiesCharacterSkillSelectionPolicies;
(function (CaiPersonalitiesCharacterSkillSelectionPolicies) {
    CaiPersonalitiesCharacterSkillSelectionPolicies.KEY = new CollectionKey("cai_personalities_character_skill_selection_policies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.priorityChainSelectionWeightMean = values["priority_chain_selection_weight_mean"];
            this.priorityChainSelectionWeightStandardDeviation = values["priority_chain_selection_weight_standard_deviation"];
            this.priorityChainSelectionWeightMinimum = values["priority_chain_selection_weight_minimum"];
            this.priorityChainSelectionWeightMaximum = values["priority_chain_selection_weight_maximum"];
            this.existingSkillSelectionWeightMean = values["existing_skill_selection_weight_mean"];
            this.existingSkillSelectionWeightStandardDeviation = values["existing_skill_selection_weight_standard_deviation"];
            this.existingSkillSelectionWeightMinimum = values["existing_skill_selection_weight_minimum"];
            this.existingSkillSelectionWeightMaximum = values["existing_skill_selection_weight_maximum"];
            this.skillUtilizationDefaultMultiplier = values["skill_utilization_default_multiplier"];
        }
    }
    CaiPersonalitiesCharacterSkillSelectionPolicies.Entry = Entry;
})(CaiPersonalitiesCharacterSkillSelectionPolicies || (CaiPersonalitiesCharacterSkillSelectionPolicies = {}));

var CaiPersonalities$1;
(function (CaiPersonalities) {
    CaiPersonalities.KEY = new CollectionKey("cai_personalities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._budgetPolicyKey = values["budget_policy_key"];
            this._technologyManagerKey = values["technology_manager_key"];
            this._agentDistributionProfileKey = values["agent_distribution_profile_key"];
            this._agentRecruitmentProfileKey = values["agent_recruitment_profile_key"];
            this._reliabilityPolicyKey = values["reliability_policy_key"];
            this._religiousConversionPolicy = values["religious_conversion_policy"];
            this._militaryAggressivenessPolicy = values["military_aggressiveness_policy"];
            this._militaryBehaviourPolicy = values["military_behaviour_policy"];
            this.allowedForRandomSelection = !!values["allowed_for_random_selection"];
            this._diplomaticComponent = values["diplomatic_component"];
            this._strategicComponent = values["strategic_component"];
            this._culturalComponent = values["cultural_component"];
            this._dealEvaluationComponent = values["deal_evaluation_component"];
            this._dealGenerationComponent = values["deal_generation_component"];
            this._constructionSystemPolicy = values["construction_system_policy"];
            this._taskManagementSystemTaskGenerationProfile = values["task_management_system_task_generation_profile"];
            this._negotiationComponent = values["negotiation_component"];
            this._incomeAllocationPolicy = values["income_allocation_policy"];
            this._occupationDecisionComponent = values["occupation_decision_component"];
            this._religiousComponent = values["religious_component"];
            this._empireRivalryComponent = values["empire_rivalry_component"];
            this._religionChanageManagementPolicy = values["religion_chanage_management_policy"];
            this._trespassingComponent = values["trespassing_component"];
            this._agentEmbedProfile = values["agent_embed_profile"];
            this._characterSkillSelectionPolicy = values["character_skill_selection_policy"];
            this._militaryGeneratorConfigOverride = values["military_generator_config_override"];
        }
        get budgetPolicyKey() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesBudgetPolicies$1.KEY, CaiPersonalitiesBudgetPolicies$1.Entry);
            return collection.find(entry => entry.key === this._budgetPolicyKey);
        }
        get technologyManagerKey() {
            const collection = this.collectionCache.getCollection(CampaignAiTechnologyManagers$1.KEY, CampaignAiTechnologyManagers$1.Entry);
            return collection.find(entry => entry.key === this._technologyManagerKey);
        }
        get agentDistributionProfileKey() {
            const collection = this.collectionCache.getCollection(CaiAgentDistributionProfiles$1.KEY, CaiAgentDistributionProfiles$1.Entry);
            return collection.find(entry => entry.key === this._agentDistributionProfileKey);
        }
        get agentRecruitmentProfileKey() {
            const collection = this.collectionCache.getCollection(CaiAgentRecruitmentProfiles$1.KEY, CaiAgentRecruitmentProfiles$1.Entry);
            return collection.find(entry => entry.key === this._agentRecruitmentProfileKey);
        }
        get reliabilityPolicyKey() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesReliabilityPolicies$1.KEY, CaiPersonalitiesReliabilityPolicies$1.Entry);
            return collection.find(entry => entry.key === this._reliabilityPolicyKey);
        }
        get religiousConversionPolicy() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesReligiousConversionPolicies$1.KEY, CaiPersonalitiesReligiousConversionPolicies$1.Entry);
            return collection.find(entry => entry.key === this._religiousConversionPolicy);
        }
        get militaryAggressivenessPolicy() {
            const collection = this.collectionCache.getCollection(CaiMilitaryAggressivenessPolicies$1.KEY, CaiMilitaryAggressivenessPolicies$1.Entry);
            return collection.find(entry => entry.key === this._militaryAggressivenessPolicy);
        }
        get militaryBehaviourPolicy() {
            const collection = this.collectionCache.getCollection(CaiMilitaryBehaviourPolicies$1.KEY, CaiMilitaryBehaviourPolicies$1.Entry);
            return collection.find(entry => entry.key === this._militaryBehaviourPolicy);
        }
        get diplomaticComponent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDiplomaticComponents$1.KEY, CaiPersonalityDiplomaticComponents$1.Entry);
            return collection.find(entry => entry.id === this._diplomaticComponent);
        }
        get strategicComponent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityStrategicComponents$1.KEY, CaiPersonalityStrategicComponents$1.Entry);
            return collection.find(entry => entry.id === this._strategicComponent);
        }
        get culturalComponent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityCulturalComponents$1.KEY, CaiPersonalityCulturalComponents$1.Entry);
            return collection.find(entry => entry.id === this._culturalComponent);
        }
        get dealEvaluationComponent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDealEvaluationComponents$1.KEY, CaiPersonalityDealEvaluationComponents$1.Entry);
            return collection.find(entry => entry.id === this._dealEvaluationComponent);
        }
        get dealGenerationComponent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDealGenerationComponents$1.KEY, CaiPersonalityDealGenerationComponents$1.Entry);
            return collection.find(entry => entry.id === this._dealGenerationComponent);
        }
        get constructionSystemPolicy() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesConstructionSystemPolicies$1.KEY, CaiPersonalitiesConstructionSystemPolicies$1.Entry);
            return collection.find(entry => entry.key === this._constructionSystemPolicy);
        }
        get taskManagementSystemTaskGenerationProfile() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesTaskManagementSystemTaskGeneratorProfiles$1.KEY, CaiPersonalitiesTaskManagementSystemTaskGeneratorProfiles$1.Entry);
            return collection.find(entry => entry.key === this._taskManagementSystemTaskGenerationProfile);
        }
        get negotiationComponent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityNegotiationComponents$1.KEY, CaiPersonalityNegotiationComponents$1.Entry);
            return collection.find(entry => entry.id === this._negotiationComponent);
        }
        get incomeAllocationPolicy() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesIncomeAllocationPolicies$1.KEY, CaiPersonalitiesIncomeAllocationPolicies$1.Entry);
            return collection.find(entry => entry.key === this._incomeAllocationPolicy);
        }
        get occupationDecisionComponent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityOccupationDecisionComponents$1.KEY, CaiPersonalityOccupationDecisionComponents$1.Entry);
            return collection.find(entry => entry.id === this._occupationDecisionComponent);
        }
        get religiousComponent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityReligiousComponents.KEY, CaiPersonalityReligiousComponents.Entry);
            return collection.find(entry => entry.id === this._religiousComponent);
        }
        get empireRivalryComponent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityEmpireRivalryComponents.KEY, CaiPersonalityEmpireRivalryComponents.Entry);
            return collection.find(entry => entry.key === this._empireRivalryComponent);
        }
        get religionChanageManagementPolicy() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesReligionChangeManagementPolicies.KEY, CaiPersonalitiesReligionChangeManagementPolicies.Entry);
            return collection.find(entry => entry.key === this._religionChanageManagementPolicy);
        }
        get trespassingComponent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityTrespassingComponents.KEY, CaiPersonalityTrespassingComponents.Entry);
            return collection.find(entry => entry.key === this._trespassingComponent);
        }
        get agentEmbedProfile() {
            const collection = this.collectionCache.getCollection(CaiAgentEmbedProfiles.KEY, CaiAgentEmbedProfiles.Entry);
            return collection.find(entry => entry.key === this._agentEmbedProfile);
        }
        get characterSkillSelectionPolicy() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesCharacterSkillSelectionPolicies.KEY, CaiPersonalitiesCharacterSkillSelectionPolicies.Entry);
            return collection.find(entry => entry.key === this._characterSkillSelectionPolicy);
        }
        get militaryGeneratorConfigOverride() {
            const collection = this.collectionCache.getCollection(CdirMilitaryGeneratorConfigs$1.KEY, CdirMilitaryGeneratorConfigs$1.Entry);
            return collection.find(entry => entry.key === this._militaryGeneratorConfigOverride);
        }
    }
    CaiPersonalities.Entry = Entry;
})(CaiPersonalities$1 || (CaiPersonalities$1 = {}));

var CaiPersonalitiesBudgetAllocationFactionStatusOverides;
(function (CaiPersonalitiesBudgetAllocationFactionStatusOverides) {
    CaiPersonalitiesBudgetAllocationFactionStatusOverides.KEY = new CollectionKey("cai_personalities_budget_allocation_faction_status_overides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._budgetAllocationPolicy = values["budget_allocation_policy"];
            this._strategicContext = values["strategic_context"];
            this._factionStatus = values["faction_status"];
            this._budgetAllocation = values["budget_allocation"];
        }
        get budgetAllocationPolicy() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesBudgetPolicies$1.KEY, CaiPersonalitiesBudgetPolicies$1.Entry);
            return collection.find(entry => entry.key === this._budgetAllocationPolicy);
        }
        get strategicContext() {
            const collection = this.collectionCache.getCollection(CaiStrategicContextTypes$1.KEY, CaiStrategicContextTypes$1.Entry);
            return collection.find(entry => entry.key === this._strategicContext);
        }
        get factionStatus() {
            const collection = this.collectionCache.getCollection(CaiFactionStatuses.KEY, CaiFactionStatuses.Entry);
            return collection.find(entry => entry.factionStatus === this._factionStatus);
        }
        get budgetAllocation() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesBudgetAllocations$1.KEY, CaiPersonalitiesBudgetAllocations$1.Entry);
            return collection.find(entry => entry.key === this._budgetAllocation);
        }
    }
    CaiPersonalitiesBudgetAllocationFactionStatusOverides.Entry = Entry;
})(CaiPersonalitiesBudgetAllocationFactionStatusOverides || (CaiPersonalitiesBudgetAllocationFactionStatusOverides = {}));

var CaiPersonalitiesBudgetAllocationPolicyJunctions$1;
(function (CaiPersonalitiesBudgetAllocationPolicyJunctions) {
    CaiPersonalitiesBudgetAllocationPolicyJunctions.KEY = new CollectionKey("cai_personalities_budget_allocation_policy_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._budgetPolicyKey = values["budget_policy_key"];
            this._budgetContextKey = values["budget_context_key"];
            this._budgetAllocationKey = values["budget_allocation_key"];
        }
        get budgetPolicyKey() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesBudgetPolicies$1.KEY, CaiPersonalitiesBudgetPolicies$1.Entry);
            return collection.find(entry => entry.key === this._budgetPolicyKey);
        }
        get budgetContextKey() {
            const collection = this.collectionCache.getCollection(CaiStrategicContextTypes$1.KEY, CaiStrategicContextTypes$1.Entry);
            return collection.find(entry => entry.key === this._budgetContextKey);
        }
        get budgetAllocationKey() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesBudgetAllocations$1.KEY, CaiPersonalitiesBudgetAllocations$1.Entry);
            return collection.find(entry => entry.key === this._budgetAllocationKey);
        }
    }
    CaiPersonalitiesBudgetAllocationPolicyJunctions.Entry = Entry;
})(CaiPersonalitiesBudgetAllocationPolicyJunctions$1 || (CaiPersonalitiesBudgetAllocationPolicyJunctions$1 = {}));

var CharacterSkillUtilizationHints;
(function (CharacterSkillUtilizationHints) {
    CharacterSkillUtilizationHints.KEY = new CollectionKey("character_skill_utilization_hints");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CharacterSkillUtilizationHints.Entry = Entry;
})(CharacterSkillUtilizationHints || (CharacterSkillUtilizationHints = {}));

var CaiPersonalitiesCharacterSkillSelectionPoliciesSkillUtilizationHintsJunctions;
(function (CaiPersonalitiesCharacterSkillSelectionPoliciesSkillUtilizationHintsJunctions) {
    CaiPersonalitiesCharacterSkillSelectionPoliciesSkillUtilizationHintsJunctions.KEY = new CollectionKey("cai_personalities_character_skill_selection_policies_skill_utilization_hints_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._skillSelectionPolicyKey = values["skill_selection_policy_key"];
            this._skillUtilizationHintKey = values["skill_utilization_hint_key"];
            this.skillUtilizationMultiplier = values["skill_utilization_multiplier"];
        }
        get skillSelectionPolicyKey() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesCharacterSkillSelectionPolicies.KEY, CaiPersonalitiesCharacterSkillSelectionPolicies.Entry);
            return collection.find(entry => entry.key === this._skillSelectionPolicyKey);
        }
        get skillUtilizationHintKey() {
            const collection = this.collectionCache.getCollection(CharacterSkillUtilizationHints.KEY, CharacterSkillUtilizationHints.Entry);
            return collection.find(entry => entry.key === this._skillUtilizationHintKey);
        }
    }
    CaiPersonalitiesCharacterSkillSelectionPoliciesSkillUtilizationHintsJunctions.Entry = Entry;
})(CaiPersonalitiesCharacterSkillSelectionPoliciesSkillUtilizationHintsJunctions || (CaiPersonalitiesCharacterSkillSelectionPoliciesSkillUtilizationHintsJunctions = {}));

var CaiPersonalitiesConstructionPreferencePolicies$1;
(function (CaiPersonalitiesConstructionPreferencePolicies) {
    CaiPersonalitiesConstructionPreferencePolicies.KEY = new CollectionKey("cai_personalities_construction_preference_policies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiPersonalitiesConstructionPreferencePolicies.Entry = Entry;
})(CaiPersonalitiesConstructionPreferencePolicies$1 || (CaiPersonalitiesConstructionPreferencePolicies$1 = {}));

var CaiPersonalitiesConstructionPreferencePolicyBuildingJunctions$1;
(function (CaiPersonalitiesConstructionPreferencePolicyBuildingJunctions) {
    CaiPersonalitiesConstructionPreferencePolicyBuildingJunctions.KEY = new CollectionKey("cai_personalities_construction_preference_policy_building_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._policyKey = values["policy_key"];
            this._buildingKey = values["building_key"];
            this.biasLevel = values["bias_level"];
            this.absoluteAdjustment = values["absolute_adjustment"];
            this.buildingDiscountLimitAdjustment = values["building_discount_limit_adjustment"];
        }
        get policyKey() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesConstructionPreferencePolicies$1.KEY, CaiPersonalitiesConstructionPreferencePolicies$1.Entry);
            return collection.find(entry => entry.key === this._policyKey);
        }
        get buildingKey() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._buildingKey);
        }
    }
    CaiPersonalitiesConstructionPreferencePolicyBuildingJunctions.Entry = Entry;
})(CaiPersonalitiesConstructionPreferencePolicyBuildingJunctions$1 || (CaiPersonalitiesConstructionPreferencePolicyBuildingJunctions$1 = {}));

var CaiPersonalitiesIncomeAllocationPolicyFactionStatusForContextJunctions;
(function (CaiPersonalitiesIncomeAllocationPolicyFactionStatusForContextJunctions) {
    CaiPersonalitiesIncomeAllocationPolicyFactionStatusForContextJunctions.KEY = new CollectionKey("cai_personalities_income_allocation_policy_faction_status_for_context_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._incomeAllocationPolicy = values["income_allocation_policy"];
            this._strategicContext = values["strategic_context"];
            this._factionStatus = values["faction_status"];
            this._incomeAllocation = values["income_allocation"];
        }
        get incomeAllocationPolicy() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesIncomeAllocationPolicies$1.KEY, CaiPersonalitiesIncomeAllocationPolicies$1.Entry);
            return collection.find(entry => entry.key === this._incomeAllocationPolicy);
        }
        get strategicContext() {
            const collection = this.collectionCache.getCollection(CaiStrategicContextTypes$1.KEY, CaiStrategicContextTypes$1.Entry);
            return collection.find(entry => entry.key === this._strategicContext);
        }
        get factionStatus() {
            const collection = this.collectionCache.getCollection(CaiFactionStatuses.KEY, CaiFactionStatuses.Entry);
            return collection.find(entry => entry.factionStatus === this._factionStatus);
        }
        get incomeAllocation() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesIncomeAllocations.KEY, CaiPersonalitiesIncomeAllocations.Entry);
            return collection.find(entry => entry.key === this._incomeAllocation);
        }
    }
    CaiPersonalitiesIncomeAllocationPolicyFactionStatusForContextJunctions.Entry = Entry;
})(CaiPersonalitiesIncomeAllocationPolicyFactionStatusForContextJunctions || (CaiPersonalitiesIncomeAllocationPolicyFactionStatusForContextJunctions = {}));

var CaiPersonalitiesIncomeAllocationPolicyStrategicContextJunctions$1;
(function (CaiPersonalitiesIncomeAllocationPolicyStrategicContextJunctions) {
    CaiPersonalitiesIncomeAllocationPolicyStrategicContextJunctions.KEY = new CollectionKey("cai_personalities_income_allocation_policy_strategic_context_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._incomeAllocationPolicyKey = values["income_allocation_policy_key"];
            this._strategicContextKey = values["strategic_context_key"];
            this.proportionOfNetIncomeToSpend = values["proportion_of_net_income_to_spend"];
            this.zeroOrNegativeNetIncomeSurvivalRounds = values["zero_or_negative_net_income_survival_rounds"];
            this.positiveNetIncomeSurvivalRounds = values["positive_net_income_survival_rounds"];
            this._incomeAllocation = values["income_allocation"];
        }
        get incomeAllocationPolicyKey() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesIncomeAllocationPolicies$1.KEY, CaiPersonalitiesIncomeAllocationPolicies$1.Entry);
            return collection.find(entry => entry.key === this._incomeAllocationPolicyKey);
        }
        get strategicContextKey() {
            const collection = this.collectionCache.getCollection(CaiStrategicContextTypes$1.KEY, CaiStrategicContextTypes$1.Entry);
            return collection.find(entry => entry.key === this._strategicContextKey);
        }
        get incomeAllocation() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesIncomeAllocations.KEY, CaiPersonalitiesIncomeAllocations.Entry);
            return collection.find(entry => entry.key === this._incomeAllocation);
        }
    }
    CaiPersonalitiesIncomeAllocationPolicyStrategicContextJunctions.Entry = Entry;
})(CaiPersonalitiesIncomeAllocationPolicyStrategicContextJunctions$1 || (CaiPersonalitiesIncomeAllocationPolicyStrategicContextJunctions$1 = {}));

var CaiPersonalitiesTechnologyResearches;
(function (CaiPersonalitiesTechnologyResearches) {
    CaiPersonalitiesTechnologyResearches.KEY = new CollectionKey("cai_personalities_technology_researches");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiPersonalitiesTechnologyResearches.Entry = Entry;
})(CaiPersonalitiesTechnologyResearches || (CaiPersonalitiesTechnologyResearches = {}));

var CampaignAiTechnologyPaths$1;
(function (CampaignAiTechnologyPaths) {
    CampaignAiTechnologyPaths.KEY = new CollectionKey("campaign_ai_technology_paths");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignAiTechnologyPaths.Entry = Entry;
})(CampaignAiTechnologyPaths$1 || (CampaignAiTechnologyPaths$1 = {}));

var CaiPersonalitiesTechnologyResearchPathJunctions;
(function (CaiPersonalitiesTechnologyResearchPathJunctions) {
    CaiPersonalitiesTechnologyResearchPathJunctions.KEY = new CollectionKey("cai_personalities_technology_research_path_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this._pathKey = values["path_key"];
            this.priority = values["priority"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesTechnologyResearches.KEY, CaiPersonalitiesTechnologyResearches.Entry);
            return collection.find(entry => entry.key === this._key);
        }
        get pathKey() {
            const collection = this.collectionCache.getCollection(CampaignAiTechnologyPaths$1.KEY, CampaignAiTechnologyPaths$1.Entry);
            return collection.find(entry => entry.key === this._pathKey);
        }
    }
    CaiPersonalitiesTechnologyResearchPathJunctions.Entry = Entry;
})(CaiPersonalitiesTechnologyResearchPathJunctions || (CaiPersonalitiesTechnologyResearchPathJunctions = {}));

var CaiPersonalitiesTechnologyResearchPolicies;
(function (CaiPersonalitiesTechnologyResearchPolicies) {
    CaiPersonalitiesTechnologyResearchPolicies.KEY = new CollectionKey("cai_personalities_technology_research_policies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this.defaultTechnologyResearch = values["default_technology_research"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(CampaignAiTechnologyManagers$1.KEY, CampaignAiTechnologyManagers$1.Entry);
            return collection.find(entry => entry.key === this._key);
        }
    }
    CaiPersonalitiesTechnologyResearchPolicies.Entry = Entry;
})(CaiPersonalitiesTechnologyResearchPolicies || (CaiPersonalitiesTechnologyResearchPolicies = {}));

var CaiPersonalitiesTechnologyResearchPolicyStrategicContextJunctions;
(function (CaiPersonalitiesTechnologyResearchPolicyStrategicContextJunctions) {
    CaiPersonalitiesTechnologyResearchPolicyStrategicContextJunctions.KEY = new CollectionKey("cai_personalities_technology_research_policy_strategic_context_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this._strategicContextKey = values["strategic_context_key"];
            this._factionStatusKey = values["faction_status_key"];
            this._technologyResearchPolicyKey = values["technology_research_policy_key"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(CampaignAiTechnologyManagers$1.KEY, CampaignAiTechnologyManagers$1.Entry);
            return collection.find(entry => entry.key === this._key);
        }
        get strategicContextKey() {
            const collection = this.collectionCache.getCollection(CaiStrategicContextTypes$1.KEY, CaiStrategicContextTypes$1.Entry);
            return collection.find(entry => entry.key === this._strategicContextKey);
        }
        get factionStatusKey() {
            const collection = this.collectionCache.getCollection(CaiFactionStatuses.KEY, CaiFactionStatuses.Entry);
            return collection.find(entry => entry.factionStatus === this._factionStatusKey);
        }
        get technologyResearchPolicyKey() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesTechnologyResearches.KEY, CaiPersonalitiesTechnologyResearches.Entry);
            return collection.find(entry => entry.key === this._technologyResearchPolicyKey);
        }
    }
    CaiPersonalitiesTechnologyResearchPolicyStrategicContextJunctions.Entry = Entry;
})(CaiPersonalitiesTechnologyResearchPolicyStrategicContextJunctions || (CaiPersonalitiesTechnologyResearchPolicyStrategicContextJunctions = {}));

var CaiPersonalitiesTmsTaskGeneratorProfilesStrategicContextsJunctions$1;
(function (CaiPersonalitiesTmsTaskGeneratorProfilesStrategicContextsJunctions) {
    CaiPersonalitiesTmsTaskGeneratorProfilesStrategicContextsJunctions.KEY = new CollectionKey("cai_personalities_tms_task_generator_profiles_strategic_contexts_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._taskGeneratorProfileKey = values["task_generator_profile_key"];
            this._strategicContextKey = values["strategic_context_key"];
            this._generatorGroupKey = values["generator_group_key"];
            this._caiFactionStatusKey = values["cai_faction_status_key"];
        }
        get taskGeneratorProfileKey() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesTaskManagementSystemTaskGeneratorProfiles$1.KEY, CaiPersonalitiesTaskManagementSystemTaskGeneratorProfiles$1.Entry);
            return collection.find(entry => entry.key === this._taskGeneratorProfileKey);
        }
        get strategicContextKey() {
            const collection = this.collectionCache.getCollection(CaiStrategicContextTypes$1.KEY, CaiStrategicContextTypes$1.Entry);
            return collection.find(entry => entry.key === this._strategicContextKey);
        }
        get generatorGroupKey() {
            const collection = this.collectionCache.getCollection(CaiTaskManagementSystemTaskGeneratorGroups$1.KEY, CaiTaskManagementSystemTaskGeneratorGroups$1.Entry);
            return collection.find(entry => entry.key === this._generatorGroupKey);
        }
        get caiFactionStatusKey() {
            const collection = this.collectionCache.getCollection(CaiFactionStatuses.KEY, CaiFactionStatuses.Entry);
            return collection.find(entry => entry.factionStatus === this._caiFactionStatusKey);
        }
    }
    CaiPersonalitiesTmsTaskGeneratorProfilesStrategicContextsJunctions.Entry = Entry;
})(CaiPersonalitiesTmsTaskGeneratorProfilesStrategicContextsJunctions$1 || (CaiPersonalitiesTmsTaskGeneratorProfilesStrategicContextsJunctions$1 = {}));

var CaiPersonalitiesTmsTaskGeneratorProfileFactionStatusesJunctions;
(function (CaiPersonalitiesTmsTaskGeneratorProfileFactionStatusesJunctions) {
    CaiPersonalitiesTmsTaskGeneratorProfileFactionStatusesJunctions.KEY = new CollectionKey("cai_personalities_tms_task_generator_profile_faction_statuses_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._taskGeneratorPolicyKey = values["task_generator_policy_key"];
            this._caiActionStatusKey = values["cai_action_status_key"];
            this._taskGeneratorGroup = values["task_generator_group"];
        }
        get taskGeneratorPolicyKey() {
            const collection = this.collectionCache.getCollection(CaiPersonalitiesTaskManagementSystemTaskGeneratorProfiles$1.KEY, CaiPersonalitiesTaskManagementSystemTaskGeneratorProfiles$1.Entry);
            return collection.find(entry => entry.key === this._taskGeneratorPolicyKey);
        }
        get caiActionStatusKey() {
            const collection = this.collectionCache.getCollection(CaiFactionStatuses.KEY, CaiFactionStatuses.Entry);
            return collection.find(entry => entry.factionStatus === this._caiActionStatusKey);
        }
        get taskGeneratorGroup() {
            const collection = this.collectionCache.getCollection(CaiTaskManagementSystemTaskGeneratorGroups$1.KEY, CaiTaskManagementSystemTaskGeneratorGroups$1.Entry);
            return collection.find(entry => entry.key === this._taskGeneratorGroup);
        }
    }
    CaiPersonalitiesTmsTaskGeneratorProfileFactionStatusesJunctions.Entry = Entry;
})(CaiPersonalitiesTmsTaskGeneratorProfileFactionStatusesJunctions || (CaiPersonalitiesTmsTaskGeneratorProfileFactionStatusesJunctions = {}));

var CaiPersonalityCulturalMultipliers$1;
(function (CaiPersonalityCulturalMultipliers) {
    CaiPersonalityCulturalMultipliers.KEY = new CollectionKey("cai_personality_cultural_multipliers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._componentId = values["component_id"];
            this._source = values["source"];
            this._target = values["target"];
            this.positiveAttitudeMultiplier = values["positive_attitude_multiplier"];
            this.negativeAttitudeMultiplier = values["negative_attitude_multiplier"];
            this.attitudeBase = values["attitude_base"];
        }
        get componentId() {
            const collection = this.collectionCache.getCollection(CaiPersonalityCulturalComponents$1.KEY, CaiPersonalityCulturalComponents$1.Entry);
            return collection.find(entry => entry.id === this._componentId);
        }
        get source() {
            const collection = this.collectionCache.getCollection(Religions$1.KEY, Religions$1.Entry);
            return collection.find(entry => entry.religionKey === this._source);
        }
        get target() {
            const collection = this.collectionCache.getCollection(Religions$1.KEY, Religions$1.Entry);
            return collection.find(entry => entry.religionKey === this._target);
        }
    }
    CaiPersonalityCulturalMultipliers.Entry = Entry;
})(CaiPersonalityCulturalMultipliers$1 || (CaiPersonalityCulturalMultipliers$1 = {}));

var CaiPersonalityCulturalRelationsOverrides;
(function (CaiPersonalityCulturalRelationsOverrides) {
    CaiPersonalityCulturalRelationsOverrides.KEY = new CollectionKey("cai_personality_cultural_relations_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._componentId = values["component_id"];
            this._source = values["source"];
            this._target = values["target"];
            this.positiveAttitudeMultiplier = values["positive_attitude_multiplier"];
            this.negativeAttitudeMultiplier = values["negative_attitude_multiplier"];
            this.attitudeBase = values["attitude_base"];
        }
        get componentId() {
            const collection = this.collectionCache.getCollection(CaiPersonalityCulturalComponents$1.KEY, CaiPersonalityCulturalComponents$1.Entry);
            return collection.find(entry => entry.id === this._componentId);
        }
        get source() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._source);
        }
        get target() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._target);
        }
    }
    CaiPersonalityCulturalRelationsOverrides.Entry = Entry;
})(CaiPersonalityCulturalRelationsOverrides || (CaiPersonalityCulturalRelationsOverrides = {}));

var CaiPersonalityDealEvaluationComponentOverrides$1;
(function (CaiPersonalityDealEvaluationComponentOverrides) {
    CaiPersonalityDealEvaluationComponentOverrides.KEY = new CollectionKey("cai_personality_deal_evaluation_component_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._component = values["component"];
            this._parent = values["parent"];
        }
        get component() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDealEvaluationComponents$1.KEY, CaiPersonalityDealEvaluationComponents$1.Entry);
            return collection.find(entry => entry.id === this._component);
        }
        get parent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDealEvaluationComponents$1.KEY, CaiPersonalityDealEvaluationComponents$1.Entry);
            return collection.find(entry => entry.id === this._parent);
        }
    }
    CaiPersonalityDealEvaluationComponentOverrides.Entry = Entry;
})(CaiPersonalityDealEvaluationComponentOverrides$1 || (CaiPersonalityDealEvaluationComponentOverrides$1 = {}));

var CaiPersonalityDealEvaluationDealComponentNames$1;
(function (CaiPersonalityDealEvaluationDealComponentNames) {
    CaiPersonalityDealEvaluationDealComponentNames.KEY = new CollectionKey("cai_personality_deal_evaluation_deal_component_names");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
        }
    }
    CaiPersonalityDealEvaluationDealComponentNames.Entry = Entry;
})(CaiPersonalityDealEvaluationDealComponentNames$1 || (CaiPersonalityDealEvaluationDealComponentNames$1 = {}));

var CaiPersonalityDealEvaluationDealComponentValues$1;
(function (CaiPersonalityDealEvaluationDealComponentValues) {
    CaiPersonalityDealEvaluationDealComponentValues.KEY = new CollectionKey("cai_personality_deal_evaluation_deal_component_values");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._personalityComponent = values["personality_component"];
            this._dealComponent = values["deal_component"];
            this.bestFriendsValue = values["best_friends_value"];
            this.veryFriendlyValue = values["very_friendly_value"];
            this.friendlyValue = values["friendly_value"];
            this.neutralValue = values["neutral_value"];
            this.unfriendlyValue = values["unfriendly_value"];
            this.veryUnfriendlyValue = values["very_unfriendly_value"];
            this.bitterEnemiesValue = values["bitter_enemies_value"];
            this.lastStandBalanceFactor = values["last_stand_balance_factor"];
            this.totalWarBalanceFactor = values["total_war_balance_factor"];
            this.warBalanceFactor = values["war_balance_factor"];
            this.tensionBalanceFactor = values["tension_balance_factor"];
            this.peaceBalanceFactor = values["peace_balance_factor"];
            this.treacheryValue = values["treachery_value"];
            this.lastStandOpponentStrengthModifier = values["last_stand_opponent_strength_modifier"];
            this.totalWarOpponentStrengthModifier = values["total_war_opponent_strength_modifier"];
            this.warOpponentStrengthModifier = values["war_opponent_strength_modifier"];
            this.tensionOpponentStrengthModifier = values["tension_opponent_strength_modifier"];
            this.peaceOpponentStrengthModifier = values["peace_opponent_strength_modifier"];
            this.opponentTreacheryModifier = values["opponent_treachery_modifier"];
            this.opponentRespectModifier = values["opponent_respect_modifier"];
        }
        get personalityComponent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDealEvaluationComponents$1.KEY, CaiPersonalityDealEvaluationComponents$1.Entry);
            return collection.find(entry => entry.id === this._personalityComponent);
        }
        get dealComponent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDealEvaluationDealComponentNames$1.KEY, CaiPersonalityDealEvaluationDealComponentNames$1.Entry);
            return collection.find(entry => entry.id === this._dealComponent);
        }
    }
    CaiPersonalityDealEvaluationDealComponentValues.Entry = Entry;
})(CaiPersonalityDealEvaluationDealComponentValues$1 || (CaiPersonalityDealEvaluationDealComponentValues$1 = {}));

var CaiPersonalityDealGenerationComponentOverrides;
(function (CaiPersonalityDealGenerationComponentOverrides) {
    CaiPersonalityDealGenerationComponentOverrides.KEY = new CollectionKey("cai_personality_deal_generation_component_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._component = values["component"];
            this._parent = values["parent"];
        }
        get component() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDealGenerationComponents$1.KEY, CaiPersonalityDealGenerationComponents$1.Entry);
            return collection.find(entry => entry.id === this._component);
        }
        get parent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDealGenerationComponents$1.KEY, CaiPersonalityDealGenerationComponents$1.Entry);
            return collection.find(entry => entry.id === this._parent);
        }
    }
    CaiPersonalityDealGenerationComponentOverrides.Entry = Entry;
})(CaiPersonalityDealGenerationComponentOverrides || (CaiPersonalityDealGenerationComponentOverrides = {}));

var CaiPersonalityDealGenerationGenerators$1;
(function (CaiPersonalityDealGenerationGenerators) {
    CaiPersonalityDealGenerationGenerators.KEY = new CollectionKey("cai_personality_deal_generation_generators");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
        }
    }
    CaiPersonalityDealGenerationGenerators.Entry = Entry;
})(CaiPersonalityDealGenerationGenerators$1 || (CaiPersonalityDealGenerationGenerators$1 = {}));

var CaiPersonalityDealGenerationGeneratorPriorities$1;
(function (CaiPersonalityDealGenerationGeneratorPriorities) {
    CaiPersonalityDealGenerationGeneratorPriorities.KEY = new CollectionKey("cai_personality_deal_generation_generator_priorities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._componentKey = values["component_key"];
            this._generatorKey = values["generator_key"];
            this.lastStandPriority = values["last_stand_priority"];
            this.totalWarPriority = values["total_war_priority"];
            this.warPriority = values["war_priority"];
            this.tensionPriority = values["tension_priority"];
            this.peacePriority = values["peace_priority"];
            this.param1 = values["param1"];
            this.param2 = values["param2"];
            this.param3 = values["param3"];
            this.param4 = values["param4"];
            this.failureTimeout = values["failure_timeout"];
            this.minPaymentCap = values["min_payment_cap"];
            this.maxPaymentCap = values["max_payment_cap"];
            this.maxPaymentPct = values["max_payment_pct"];
        }
        get componentKey() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDealGenerationComponents$1.KEY, CaiPersonalityDealGenerationComponents$1.Entry);
            return collection.find(entry => entry.id === this._componentKey);
        }
        get generatorKey() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDealGenerationGenerators$1.KEY, CaiPersonalityDealGenerationGenerators$1.Entry);
            return collection.find(entry => entry.id === this._generatorKey);
        }
    }
    CaiPersonalityDealGenerationGeneratorPriorities.Entry = Entry;
})(CaiPersonalityDealGenerationGeneratorPriorities$1 || (CaiPersonalityDealGenerationGeneratorPriorities$1 = {}));

var CaiPersonalityDiplomaticComponentOverrides$1;
(function (CaiPersonalityDiplomaticComponentOverrides) {
    CaiPersonalityDiplomaticComponentOverrides.KEY = new CollectionKey("cai_personality_diplomatic_component_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._component = values["component"];
            this._parent = values["parent"];
        }
        get component() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDiplomaticComponents$1.KEY, CaiPersonalityDiplomaticComponents$1.Entry);
            return collection.find(entry => entry.id === this._component);
        }
        get parent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDiplomaticComponents$1.KEY, CaiPersonalityDiplomaticComponents$1.Entry);
            return collection.find(entry => entry.id === this._parent);
        }
    }
    CaiPersonalityDiplomaticComponentOverrides.Entry = Entry;
})(CaiPersonalityDiplomaticComponentOverrides$1 || (CaiPersonalityDiplomaticComponentOverrides$1 = {}));

var CaiPersonalityDiplomaticEventValues$1;
(function (CaiPersonalityDiplomaticEventValues) {
    CaiPersonalityDiplomaticEventValues.KEY = new CollectionKey("cai_personality_diplomatic_event_values");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._componentId = values["component_id"];
            this._eventId = values["event_id"];
            this.value = values["value"];
            this.falloff = values["falloff"];
        }
        get componentId() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDiplomaticComponents$1.KEY, CaiPersonalityDiplomaticComponents$1.Entry);
            return collection.find(entry => entry.id === this._componentId);
        }
        get eventId() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDiplomaticEvents$1.KEY, CaiPersonalityDiplomaticEvents$1.Entry);
            return collection.find(entry => entry.id === this._eventId);
        }
    }
    CaiPersonalityDiplomaticEventValues.Entry = Entry;
})(CaiPersonalityDiplomaticEventValues$1 || (CaiPersonalityDiplomaticEventValues$1 = {}));

var CaiPersonalityDiplomaticTreatyTypes;
(function (CaiPersonalityDiplomaticTreatyTypes) {
    CaiPersonalityDiplomaticTreatyTypes.KEY = new CollectionKey("cai_personality_diplomatic_treaty_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiPersonalityDiplomaticTreatyTypes.Entry = Entry;
})(CaiPersonalityDiplomaticTreatyTypes || (CaiPersonalityDiplomaticTreatyTypes = {}));

var CaiPersonalityDiplomaticTreatyValues$1;
(function (CaiPersonalityDiplomaticTreatyValues) {
    CaiPersonalityDiplomaticTreatyValues.KEY = new CollectionKey("cai_personality_diplomatic_treaty_values");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._componentId = values["component_id"];
            this.initialValue = values["initial_value"];
            this.value1 = values["value1"];
            this.turn1 = values["turn1"];
            this.value2 = values["value2"];
            this.turn2 = values["turn2"];
            this._treaty = values["treaty"];
        }
        get componentId() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDiplomaticComponents$1.KEY, CaiPersonalityDiplomaticComponents$1.Entry);
            return collection.find(entry => entry.id === this._componentId);
        }
        get treaty() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDiplomaticTreatyTypes.KEY, CaiPersonalityDiplomaticTreatyTypes.Entry);
            return collection.find(entry => entry.key === this._treaty);
        }
    }
    CaiPersonalityDiplomaticTreatyValues.Entry = Entry;
})(CaiPersonalityDiplomaticTreatyValues$1 || (CaiPersonalityDiplomaticTreatyValues$1 = {}));

var CaiPersonalityGroups;
(function (CaiPersonalityGroups) {
    CaiPersonalityGroups.KEY = new CollectionKey("cai_personality_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiPersonalityGroups.Entry = Entry;
})(CaiPersonalityGroups || (CaiPersonalityGroups = {}));

var CaiPersonalityGroupJunctions;
(function (CaiPersonalityGroupJunctions) {
    CaiPersonalityGroupJunctions.KEY = new CollectionKey("cai_personality_group_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._groupKey = values["group_key"];
            this._personalityKey = values["personality_key"];
            this.startingWeight = values["starting_weight"];
            this.weight1 = values["weight1"];
            this.turn1 = values["turn1"];
            this.weight2 = values["weight2"];
            this.turn2 = values["turn2"];
            this.weight3 = values["weight3"];
            this.turn3 = values["turn3"];
            this.weight4 = values["weight4"];
            this.turn4 = values["turn4"];
        }
        get groupKey() {
            const collection = this.collectionCache.getCollection(CaiPersonalityGroups.KEY, CaiPersonalityGroups.Entry);
            return collection.find(entry => entry.key === this._groupKey);
        }
        get personalityKey() {
            const collection = this.collectionCache.getCollection(CaiPersonalities$1.KEY, CaiPersonalities$1.Entry);
            return collection.find(entry => entry.key === this._personalityKey);
        }
    }
    CaiPersonalityGroupJunctions.Entry = Entry;
})(CaiPersonalityGroupJunctions || (CaiPersonalityGroupJunctions = {}));

var CaiPersonalityGroupOverrides;
(function (CaiPersonalityGroupOverrides) {
    CaiPersonalityGroupOverrides.KEY = new CollectionKey("cai_personality_group_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._factionKey = values["faction_key"];
            this.difficultyHandicap = values["difficulty_handicap"];
            this._campaignKey = values["campaign_key"];
            this._personalityGroup = values["personality_group"];
            this._playerFaction = values["player_faction"];
            this._playerSubculture = values["player_subculture"];
            this._playerCulture = values["player_culture"];
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get campaignKey() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaignKey);
        }
        get personalityGroup() {
            const collection = this.collectionCache.getCollection(CaiPersonalityGroups.KEY, CaiPersonalityGroups.Entry);
            return collection.find(entry => entry.key === this._personalityGroup);
        }
        get playerFaction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._playerFaction);
        }
        get playerSubculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._playerSubculture);
        }
        get playerCulture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._playerCulture);
        }
    }
    CaiPersonalityGroupOverrides.Entry = Entry;
})(CaiPersonalityGroupOverrides || (CaiPersonalityGroupOverrides = {}));

var CaiPersonalityOccupationDecisionPriorities$1;
(function (CaiPersonalityOccupationDecisionPriorities) {
    CaiPersonalityOccupationDecisionPriorities.KEY = new CollectionKey("cai_personality_occupation_decision_priorities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._policyId = values["policy_id"];
            this.option = values["option"];
            this.lastStandPriority = values["last_stand_priority"];
            this.totalWarPriority = values["total_war_priority"];
            this.warPriority = values["war_priority"];
            this.tensionPriority = values["tension_priority"];
            this.peacePriority = values["peace_priority"];
        }
        get policyId() {
            const collection = this.collectionCache.getCollection(CaiPersonalityOccupationDecisionPolicies.KEY, CaiPersonalityOccupationDecisionPolicies.Entry);
            return collection.find(entry => entry.id === this._policyId);
        }
    }
    CaiPersonalityOccupationDecisionPriorities.Entry = Entry;
})(CaiPersonalityOccupationDecisionPriorities$1 || (CaiPersonalityOccupationDecisionPriorities$1 = {}));

var CaiPersonalityReligiousRelationsOverrides;
(function (CaiPersonalityReligiousRelationsOverrides) {
    CaiPersonalityReligiousRelationsOverrides.KEY = new CollectionKey("cai_personality_religious_relations_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._componentId = values["component_id"];
            this._source = values["source"];
            this._target = values["target"];
            this.positiveAttitudeMultiplier = values["positive_attitude_multiplier"];
            this.negativeAttitudeMultiplier = values["negative_attitude_multiplier"];
            this.attitudeBase = values["attitude_base"];
        }
        get componentId() {
            const collection = this.collectionCache.getCollection(CaiPersonalityReligiousComponents.KEY, CaiPersonalityReligiousComponents.Entry);
            return collection.find(entry => entry.id === this._componentId);
        }
        get source() {
            const collection = this.collectionCache.getCollection(Religions$1.KEY, Religions$1.Entry);
            return collection.find(entry => entry.religionKey === this._source);
        }
        get target() {
            const collection = this.collectionCache.getCollection(Religions$1.KEY, Religions$1.Entry);
            return collection.find(entry => entry.religionKey === this._target);
        }
    }
    CaiPersonalityReligiousRelationsOverrides.Entry = Entry;
})(CaiPersonalityReligiousRelationsOverrides || (CaiPersonalityReligiousRelationsOverrides = {}));

var CaiPersonalityStrategicDesiredAttitudes$1;
(function (CaiPersonalityStrategicDesiredAttitudes) {
    CaiPersonalityStrategicDesiredAttitudes.KEY = new CollectionKey("cai_personality_strategic_desired_attitudes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._strategicComponent = values["strategic_component"];
            this.bestFriendsAttitude = values["best_friends_attitude"];
            this.veryFriendlyAttitude = values["very_friendly_attitude"];
            this.friendlyAttitude = values["friendly_attitude"];
            this.neutralAttitude = values["neutral_attitude"];
            this.unfriendlyAttitude = values["unfriendly_attitude"];
            this.veryUnfriendlyAttitude = values["very_unfriendly_attitude"];
            this.bitterEnemiesAttitude = values["bitter_enemies_attitude"];
            this.bestFriendsPositiveFactor = values["best_friends_positive_factor"];
            this.veryFriendlyPositiveFactor = values["very_friendly_positive_factor"];
            this.friendlyPositiveFactor = values["friendly_positive_factor"];
            this.neutralPositiveFactor = values["neutral_positive_factor"];
            this.unfriendlyPositiveFactor = values["unfriendly_positive_factor"];
            this.veryUnfriendlyPositiveFactor = values["very_unfriendly_positive_factor"];
            this.bitterEnemiesPositiveFactor = values["bitter_enemies_positive_factor"];
            this.bestFriendsNegativeFactor = values["best_friends_negative_factor"];
            this.veryFriendlyNegativeFactor = values["very_friendly_negative_factor"];
            this.friendlyNegativeFactor = values["friendly_negative_factor"];
            this.neutralNegativeFactor = values["neutral_negative_factor"];
            this.unfriendlyNegativeFactor = values["unfriendly_negative_factor"];
            this.veryUnfriendlyNegativeFactor = values["very_unfriendly_negative_factor"];
            this.bitterEnemiesNegativeFactor = values["bitter_enemies_negative_factor"];
        }
        get strategicComponent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityStrategicComponents$1.KEY, CaiPersonalityStrategicComponents$1.Entry);
            return collection.find(entry => entry.id === this._strategicComponent);
        }
    }
    CaiPersonalityStrategicDesiredAttitudes.Entry = Entry;
})(CaiPersonalityStrategicDesiredAttitudes$1 || (CaiPersonalityStrategicDesiredAttitudes$1 = {}));

var CaiPersonalityStrategicResourceValues$1;
(function (CaiPersonalityStrategicResourceValues) {
    CaiPersonalityStrategicResourceValues.KEY = new CollectionKey("cai_personality_strategic_resource_values");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._strategicComponent = values["strategic_component"];
            this._resource = values["resource"];
            this.tradeValue = values["trade_value"];
            this.tradeFalloff = values["trade_falloff"];
            this.ownershipValue = values["ownership_value"];
            this.ownershipFalloff = values["ownership_falloff"];
        }
        get strategicComponent() {
            const collection = this.collectionCache.getCollection(CaiPersonalityStrategicComponents$1.KEY, CaiPersonalityStrategicComponents$1.Entry);
            return collection.find(entry => entry.id === this._strategicComponent);
        }
        get resource() {
            const collection = this.collectionCache.getCollection(Resources$1.KEY, Resources$1.Entry);
            return collection.find(entry => entry.key === this._resource);
        }
    }
    CaiPersonalityStrategicResourceValues.Entry = Entry;
})(CaiPersonalityStrategicResourceValues$1 || (CaiPersonalityStrategicResourceValues$1 = {}));

var CaiRegionGroups;
(function (CaiRegionGroups) {
    CaiRegionGroups.KEY = new CollectionKey("cai_region_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiRegionGroups.Entry = Entry;
})(CaiRegionGroups || (CaiRegionGroups = {}));

var Regions$1;
(function (Regions) {
    Regions.KEY = new CollectionKey("regions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreen = values["onscreen"];
            this.r = values["r"];
            this.g = values["g"];
            this.b = values["b"];
            this.battleName = values["battle_name"];
            this.inEncyclopedia = !!values["in_encyclopedia"];
            this._ownerBundle = values["owner_bundle"];
            this.isSea = !!values["is_sea"];
            this.factionSwappingId = values["faction_swapping_id"];
        }
        get ownerBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._ownerBundle);
        }
    }
    Regions.Entry = Entry;
})(Regions$1 || (Regions$1 = {}));

var CaiRegionGroupsToRegionsJunctions;
(function (CaiRegionGroupsToRegionsJunctions) {
    CaiRegionGroupsToRegionsJunctions.KEY = new CollectionKey("cai_region_groups_to_regions_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._regionGroupKey = values["region_group_key"];
            this._regionKey = values["region_key"];
        }
        get regionGroupKey() {
            const collection = this.collectionCache.getCollection(CaiRegionGroups.KEY, CaiRegionGroups.Entry);
            return collection.find(entry => entry.key === this._regionGroupKey);
        }
        get regionKey() {
            const collection = this.collectionCache.getCollection(Regions$1.KEY, Regions$1.Entry);
            return collection.find(entry => entry.key === this._regionKey);
        }
    }
    CaiRegionGroupsToRegionsJunctions.Entry = Entry;
})(CaiRegionGroupsToRegionsJunctions || (CaiRegionGroupsToRegionsJunctions = {}));

var CaiRegionHints;
(function (CaiRegionHints) {
    CaiRegionHints.KEY = new CollectionKey("cai_region_hints");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiRegionHints.Entry = Entry;
})(CaiRegionHints || (CaiRegionHints = {}));

var CaiRegionHintGroups;
(function (CaiRegionHintGroups) {
    CaiRegionHintGroups.KEY = new CollectionKey("cai_region_hint_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._regionHintKey = values["region_hint_key"];
            this._regionGroupKey = values["region_group_key"];
        }
        get regionHintKey() {
            const collection = this.collectionCache.getCollection(CaiRegionHints.KEY, CaiRegionHints.Entry);
            return collection.find(entry => entry.key === this._regionHintKey);
        }
        get regionGroupKey() {
            const collection = this.collectionCache.getCollection(CaiRegionGroups.KEY, CaiRegionGroups.Entry);
            return collection.find(entry => entry.key === this._regionGroupKey);
        }
    }
    CaiRegionHintGroups.Entry = Entry;
})(CaiRegionHintGroups || (CaiRegionHintGroups = {}));

var CaiRegionHintProfilesToRegionHintGroups;
(function (CaiRegionHintProfilesToRegionHintGroups) {
    CaiRegionHintProfilesToRegionHintGroups.KEY = new CollectionKey("cai_region_hint_profiles_to_region_hint_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._regionHintProfileKey = values["region_hint_profile_key"];
            this._regionHintGroupKey = values["region_hint_group_key"];
        }
        get regionHintProfileKey() {
            const collection = this.collectionCache.getCollection(CaiRegionHintProfiles.KEY, CaiRegionHintProfiles.Entry);
            return collection.find(entry => entry.key === this._regionHintProfileKey);
        }
        get regionHintGroupKey() {
            const collection = this.collectionCache.getCollection(CaiRegionHintGroups.KEY, CaiRegionHintGroups.Entry);
            return collection.find(entry => entry.key === this._regionHintGroupKey);
        }
    }
    CaiRegionHintProfilesToRegionHintGroups.Entry = Entry;
})(CaiRegionHintProfilesToRegionHintGroups || (CaiRegionHintProfilesToRegionHintGroups = {}));

var CaiRegionHintProfileOverrides;
(function (CaiRegionHintProfileOverrides) {
    CaiRegionHintProfileOverrides.KEY = new CollectionKey("cai_region_hint_profile_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._regionHintProfileKey = values["region_hint_profile_key"];
            this._regionHintProfileParentKey = values["region_hint_profile_parent_key"];
        }
        get regionHintProfileKey() {
            const collection = this.collectionCache.getCollection(CaiRegionHintProfiles.KEY, CaiRegionHintProfiles.Entry);
            return collection.find(entry => entry.key === this._regionHintProfileKey);
        }
        get regionHintProfileParentKey() {
            const collection = this.collectionCache.getCollection(CaiRegionHintProfiles.KEY, CaiRegionHintProfiles.Entry);
            return collection.find(entry => entry.key === this._regionHintProfileParentKey);
        }
    }
    CaiRegionHintProfileOverrides.Entry = Entry;
})(CaiRegionHintProfileOverrides || (CaiRegionHintProfileOverrides = {}));

var CaiRitualCheckTypes;
(function (CaiRitualCheckTypes) {
    CaiRitualCheckTypes.KEY = new CollectionKey("cai_ritual_check_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiRitualCheckTypes.Entry = Entry;
})(CaiRitualCheckTypes || (CaiRitualCheckTypes = {}));

var RitualPayloads;
(function (RitualPayloads) {
    RitualPayloads.KEY = new CollectionKey("ritual_payloads");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.humanOnly = !!values["human_only"];
        }
    }
    RitualPayloads.Entry = Entry;
})(RitualPayloads || (RitualPayloads = {}));

var RitualCategories;
(function (RitualCategories) {
    RitualCategories.KEY = new CollectionKey("ritual_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this.triggerEvents = !!values["trigger_events"];
            this.displayName = values["display_name"];
        }
    }
    RitualCategories.Entry = Entry;
})(RitualCategories || (RitualCategories = {}));

var Tristates;
(function (Tristates) {
    Tristates.KEY = new CollectionKey("tristates");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
        }
    }
    Tristates.Entry = Entry;
})(Tristates || (Tristates = {}));

var UiInfoRitualTargetCriterias;
(function (UiInfoRitualTargetCriterias) {
    UiInfoRitualTargetCriterias.KEY = new CollectionKey("ui_info_ritual_target_criterias");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.icon = values["icon"];
            this.localisedText = values["localised_text"];
        }
    }
    UiInfoRitualTargetCriterias.Entry = Entry;
})(UiInfoRitualTargetCriterias || (UiInfoRitualTargetCriterias = {}));

var RitualFactionTargetCriterias;
(function (RitualFactionTargetCriterias) {
    RitualFactionTargetCriterias.KEY = new CollectionKey("ritual_faction_target_criterias");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._permittedFactionSet = values["permitted_faction_set"];
            this._isHumanOnly = values["is_human_only"];
            this._uiInfo = values["ui_info"];
        }
        get permittedFactionSet() {
            const collection = this.collectionCache.getCollection(FactionSets.KEY, FactionSets.Entry);
            return collection.find(entry => entry.key === this._permittedFactionSet);
        }
        get isHumanOnly() {
            const collection = this.collectionCache.getCollection(Tristates.KEY, Tristates.Entry);
            return collection.find(entry => entry.id === this._isHumanOnly);
        }
        get uiInfo() {
            const collection = this.collectionCache.getCollection(UiInfoRitualTargetCriterias.KEY, UiInfoRitualTargetCriterias.Entry);
            return collection.find(entry => entry.key === this._uiInfo);
        }
    }
    RitualFactionTargetCriterias.Entry = Entry;
})(RitualFactionTargetCriterias || (RitualFactionTargetCriterias = {}));

var RitualMilitaryForceTargetCriterias;
(function (RitualMilitaryForceTargetCriterias) {
    RitualMilitaryForceTargetCriterias.KEY = new CollectionKey("ritual_military_force_target_criterias");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._requiredSubculture = values["required_subculture"];
            this._onSea = values["on_sea"];
            this._own = values["own"];
            this._uiInfo = values["ui_info"];
        }
        get requiredSubculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._requiredSubculture);
        }
        get onSea() {
            const collection = this.collectionCache.getCollection(Tristates.KEY, Tristates.Entry);
            return collection.find(entry => entry.id === this._onSea);
        }
        get own() {
            const collection = this.collectionCache.getCollection(Tristates.KEY, Tristates.Entry);
            return collection.find(entry => entry.id === this._own);
        }
        get uiInfo() {
            const collection = this.collectionCache.getCollection(UiInfoRitualTargetCriterias.KEY, UiInfoRitualTargetCriterias.Entry);
            return collection.find(entry => entry.key === this._uiInfo);
        }
    }
    RitualMilitaryForceTargetCriterias.Entry = Entry;
})(RitualMilitaryForceTargetCriterias || (RitualMilitaryForceTargetCriterias = {}));

var CampaignCompositeScenes;
(function (CampaignCompositeScenes) {
    CampaignCompositeScenes.KEY = new CollectionKey("campaign_composite_scenes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this.filename = values["filename"];
        }
    }
    CampaignCompositeScenes.Entry = Entry;
})(CampaignCompositeScenes || (CampaignCompositeScenes = {}));

var SlotSets;
(function (SlotSets) {
    SlotSets.KEY = new CollectionKey("slot_sets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.useDiscoverabilityFeature = !!values["use_discoverability_feature"];
            this._compositeScene = values["composite_scene"];
        }
        get compositeScene() {
            const collection = this.collectionCache.getCollection(CampaignCompositeScenes.KEY, CampaignCompositeScenes.Entry);
            return collection.find(entry => entry.id === this._compositeScene);
        }
    }
    SlotSets.Entry = Entry;
})(SlotSets || (SlotSets = {}));

var RitualRegionTargetCriterias;
(function (RitualRegionTargetCriterias) {
    RitualRegionTargetCriterias.KEY = new CollectionKey("ritual_region_target_criterias");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._requiredSubculture = values["required_subculture"];
            this._requireForeignSlotSetPresent = values["require_foreign_slot_set_present"];
            this._requireSubcultureForeignSlotsPresent = values["require_subculture_foreign_slots_present"];
            this._own = values["own"];
            this._targetsRuins = values["targets_ruins"];
            this._uiInfo = values["ui_info"];
        }
        get requiredSubculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._requiredSubculture);
        }
        get requireForeignSlotSetPresent() {
            const collection = this.collectionCache.getCollection(SlotSets.KEY, SlotSets.Entry);
            return collection.find(entry => entry.key === this._requireForeignSlotSetPresent);
        }
        get requireSubcultureForeignSlotsPresent() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._requireSubcultureForeignSlotsPresent);
        }
        get own() {
            const collection = this.collectionCache.getCollection(Tristates.KEY, Tristates.Entry);
            return collection.find(entry => entry.id === this._own);
        }
        get targetsRuins() {
            const collection = this.collectionCache.getCollection(Tristates.KEY, Tristates.Entry);
            return collection.find(entry => entry.id === this._targetsRuins);
        }
        get uiInfo() {
            const collection = this.collectionCache.getCollection(UiInfoRitualTargetCriterias.KEY, UiInfoRitualTargetCriterias.Entry);
            return collection.find(entry => entry.key === this._uiInfo);
        }
    }
    RitualRegionTargetCriterias.Entry = Entry;
})(RitualRegionTargetCriterias || (RitualRegionTargetCriterias = {}));

var RitualTargets;
(function (RitualTargets) {
    RitualTargets.KEY = new CollectionKey("ritual_targets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._factionCriteria = values["faction_criteria"];
            this._militaryForceCriteria = values["military_force_criteria"];
            this._regionCriteria = values["region_criteria"];
        }
        get factionCriteria() {
            const collection = this.collectionCache.getCollection(RitualFactionTargetCriterias.KEY, RitualFactionTargetCriterias.Entry);
            return collection.find(entry => entry.key === this._factionCriteria);
        }
        get militaryForceCriteria() {
            const collection = this.collectionCache.getCollection(RitualMilitaryForceTargetCriterias.KEY, RitualMilitaryForceTargetCriterias.Entry);
            return collection.find(entry => entry.key === this._militaryForceCriteria);
        }
        get regionCriteria() {
            const collection = this.collectionCache.getCollection(RitualRegionTargetCriterias.KEY, RitualRegionTargetCriterias.Entry);
            return collection.find(entry => entry.key === this._regionCriteria);
        }
    }
    RitualTargets.Entry = Entry;
})(RitualTargets || (RitualTargets = {}));

var Rituals;
(function (Rituals) {
    Rituals.KEY = new CollectionKey("rituals");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.displayName = values["display_name"];
            this.description = values["description"];
            this.interruptable = !!values["interruptable"];
            this.castTime = values["cast_time"];
            this._completionPayload = values["completion_payload"];
            this.cooldownTime = values["cooldown_time"];
            this._category = values["category"];
            this.slaveCost = values["slave_cost"];
            this.globalCooldownTime = values["global_cooldown_time"];
            this.icon = values["icon"];
            this._startPayload = values["start_payload"];
            this.failureCooldownTime = values["failure_cooldown_time"];
            this.hostile = !!values["hostile"];
            this._expendedResources = values["expended_resources"];
            this._requiredResources = values["required_resources"];
            this._target = values["target"];
            this.delayPayloadApplication = !!values["delay_payload_application"];
        }
        get completionPayload() {
            const collection = this.collectionCache.getCollection(RitualPayloads.KEY, RitualPayloads.Entry);
            return collection.find(entry => entry.key === this._completionPayload);
        }
        get category() {
            const collection = this.collectionCache.getCollection(RitualCategories.KEY, RitualCategories.Entry);
            return collection.find(entry => entry.id === this._category);
        }
        get startPayload() {
            const collection = this.collectionCache.getCollection(RitualPayloads.KEY, RitualPayloads.Entry);
            return collection.find(entry => entry.key === this._startPayload);
        }
        get expendedResources() {
            const collection = this.collectionCache.getCollection(ResourceCosts.KEY, ResourceCosts.Entry);
            return collection.find(entry => entry.id === this._expendedResources);
        }
        get requiredResources() {
            const collection = this.collectionCache.getCollection(ResourceCosts.KEY, ResourceCosts.Entry);
            return collection.find(entry => entry.id === this._requiredResources);
        }
        get target() {
            const collection = this.collectionCache.getCollection(RitualTargets.KEY, RitualTargets.Entry);
            return collection.find(entry => entry.key === this._target);
        }
    }
    Rituals.Entry = Entry;
})(Rituals || (Rituals = {}));

var CaiRitualRitualCheckTypeJunctions;
(function (CaiRitualRitualCheckTypeJunctions) {
    CaiRitualRitualCheckTypeJunctions.KEY = new CollectionKey("cai_ritual_ritual_check_type_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._ritual = values["ritual"];
            this._ritualCheckType = values["ritual_check_type"];
        }
        get ritual() {
            const collection = this.collectionCache.getCollection(Rituals.KEY, Rituals.Entry);
            return collection.find(entry => entry.key === this._ritual);
        }
        get ritualCheckType() {
            const collection = this.collectionCache.getCollection(CaiRitualCheckTypes.KEY, CaiRitualCheckTypes.Entry);
            return collection.find(entry => entry.key === this._ritualCheckType);
        }
    }
    CaiRitualRitualCheckTypeJunctions.Entry = Entry;
})(CaiRitualRitualCheckTypeJunctions || (CaiRitualRitualCheckTypeJunctions = {}));

var CaiRitualVariables;
(function (CaiRitualVariables) {
    CaiRitualVariables.KEY = new CollectionKey("cai_ritual_variables");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.value = values["value"];
            this.description = values["description"];
        }
    }
    CaiRitualVariables.Entry = Entry;
})(CaiRitualVariables || (CaiRitualVariables = {}));

var CaiRitualWeights;
(function (CaiRitualWeights) {
    CaiRitualWeights.KEY = new CollectionKey("cai_ritual_weights");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._ritual = values["ritual"];
            this.weight = values["weight"];
        }
        get ritual() {
            const collection = this.collectionCache.getCollection(Rituals.KEY, Rituals.Entry);
            return collection.find(entry => entry.key === this._ritual);
        }
    }
    CaiRitualWeights.Entry = Entry;
})(CaiRitualWeights || (CaiRitualWeights = {}));

var CaiSiegeStrengthModifiers$1;
(function (CaiSiegeStrengthModifiers) {
    CaiSiegeStrengthModifiers.KEY = new CollectionKey("cai_siege_strength_modifiers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._subculture = values["subculture"];
            this.defenceStrengthModifier = values["defence_strength_modifier"];
            this.assaultStrengthModifier = values["assault_strength_modifier"];
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
    }
    CaiSiegeStrengthModifiers.Entry = Entry;
})(CaiSiegeStrengthModifiers$1 || (CaiSiegeStrengthModifiers$1 = {}));

var CaiStanceHints;
(function (CaiStanceHints) {
    CaiStanceHints.KEY = new CollectionKey("cai_stance_hints");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._subculture = values["subculture"];
            this._movementStance = values["movement_stance"];
            this._attackStance = values["attack_stance"];
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
        get movementStance() {
            const collection = this.collectionCache.getCollection(CampaignStances$1.KEY, CampaignStances$1.Entry);
            return collection.find(entry => entry.key === this._movementStance);
        }
        get attackStance() {
            const collection = this.collectionCache.getCollection(CampaignStances$1.KEY, CampaignStances$1.Entry);
            return collection.find(entry => entry.key === this._attackStance);
        }
    }
    CaiStanceHints.Entry = Entry;
})(CaiStanceHints || (CaiStanceHints = {}));

var CaiTaskManagementSystemTaskGenerators$1;
(function (CaiTaskManagementSystemTaskGenerators) {
    CaiTaskManagementSystemTaskGenerators.KEY = new CollectionKey("cai_task_management_system_task_generators");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CaiTaskManagementSystemTaskGenerators.Entry = Entry;
})(CaiTaskManagementSystemTaskGenerators$1 || (CaiTaskManagementSystemTaskGenerators$1 = {}));

var CaiTaskManagementSystemTaskGeneratorGroupsGeneratorsJunctions$1;
(function (CaiTaskManagementSystemTaskGeneratorGroupsGeneratorsJunctions) {
    CaiTaskManagementSystemTaskGeneratorGroupsGeneratorsJunctions.KEY = new CollectionKey("cai_task_management_system_task_generator_groups_generators_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._taskGeneratorGroupKey = values["task_generator_group_key"];
            this._taskGeneratorKey = values["task_generator_key"];
            this.priority = values["priority"];
        }
        get taskGeneratorGroupKey() {
            const collection = this.collectionCache.getCollection(CaiTaskManagementSystemTaskGeneratorGroups$1.KEY, CaiTaskManagementSystemTaskGeneratorGroups$1.Entry);
            return collection.find(entry => entry.key === this._taskGeneratorGroupKey);
        }
        get taskGeneratorKey() {
            const collection = this.collectionCache.getCollection(CaiTaskManagementSystemTaskGenerators$1.KEY, CaiTaskManagementSystemTaskGenerators$1.Entry);
            return collection.find(entry => entry.key === this._taskGeneratorKey);
        }
    }
    CaiTaskManagementSystemTaskGeneratorGroupsGeneratorsJunctions.Entry = Entry;
})(CaiTaskManagementSystemTaskGeneratorGroupsGeneratorsJunctions$1 || (CaiTaskManagementSystemTaskGeneratorGroupsGeneratorsJunctions$1 = {}));

var CaiTaskManagementSystemTaskGeneratorGroupOverrides;
(function (CaiTaskManagementSystemTaskGeneratorGroupOverrides) {
    CaiTaskManagementSystemTaskGeneratorGroupOverrides.KEY = new CollectionKey("cai_task_management_system_task_generator_group_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._taskGeneratorGroup = values["task_generator_group"];
            this._parentTaskGeneratorGroup = values["parent_task_generator_group"];
        }
        get taskGeneratorGroup() {
            const collection = this.collectionCache.getCollection(CaiTaskManagementSystemTaskGeneratorGroups$1.KEY, CaiTaskManagementSystemTaskGeneratorGroups$1.Entry);
            return collection.find(entry => entry.key === this._taskGeneratorGroup);
        }
        get parentTaskGeneratorGroup() {
            const collection = this.collectionCache.getCollection(CaiTaskManagementSystemTaskGeneratorGroups$1.KEY, CaiTaskManagementSystemTaskGeneratorGroups$1.Entry);
            return collection.find(entry => entry.key === this._parentTaskGeneratorGroup);
        }
    }
    CaiTaskManagementSystemTaskGeneratorGroupOverrides.Entry = Entry;
})(CaiTaskManagementSystemTaskGeneratorGroupOverrides || (CaiTaskManagementSystemTaskGeneratorGroupOverrides = {}));

var CaiVariables$1;
(function (CaiVariables) {
    CaiVariables.KEY = new CollectionKey("cai_variables");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.value = values["value"];
            this.description = values["description"];
        }
    }
    CaiVariables.Entry = Entry;
})(CaiVariables$1 || (CaiVariables$1 = {}));

var CaiVariablesOverides$1;
(function (CaiVariablesOverides) {
    CaiVariablesOverides.KEY = new CollectionKey("cai_variables_overides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._caiVariableKey = values["cai_variable_key"];
            this._campaignKey = values["campaign_key"];
            this.value = values["value"];
            this.optionalDifficultyLevel = values["optional_difficulty_level"];
            this.optionalCampaignType = values["optional_campaign_type"];
        }
        get caiVariableKey() {
            const collection = this.collectionCache.getCollection(CaiVariables$1.KEY, CaiVariables$1.Entry);
            return collection.find(entry => entry.key === this._caiVariableKey);
        }
        get campaignKey() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaignKey);
        }
    }
    CaiVariablesOverides.Entry = Entry;
})(CaiVariablesOverides$1 || (CaiVariablesOverides$1 = {}));

var CampaignVariables$1;
(function (CampaignVariables) {
    CampaignVariables.KEY = new CollectionKey("campaign_variables");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.variableKey = values["variable_key"];
            this.value = values["value"];
            this.description = values["description"];
        }
    }
    CampaignVariables.Entry = Entry;
})(CampaignVariables$1 || (CampaignVariables$1 = {}));

var CampaignsCampaignVariablesJunctions$1;
(function (CampaignsCampaignVariablesJunctions) {
    CampaignsCampaignVariablesJunctions.KEY = new CollectionKey("campaigns_campaign_variables_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._variableKey = values["variable_key"];
            this._campaignName = values["campaign_name"];
            this.value = values["value"];
            this.optionalDifficultyLevel = values["optional_difficulty_level"];
            this.optionalCampaignType = values["optional_campaign_type"];
        }
        get variableKey() {
            const collection = this.collectionCache.getCollection(CampaignVariables$1.KEY, CampaignVariables$1.Entry);
            return collection.find(entry => entry.variableKey === this._variableKey);
        }
        get campaignName() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaignName);
        }
    }
    CampaignsCampaignVariablesJunctions.Entry = Entry;
})(CampaignsCampaignVariablesJunctions$1 || (CampaignsCampaignVariablesJunctions$1 = {}));

var CampaignAgentSubtypeBattleTags;
(function (CampaignAgentSubtypeBattleTags) {
    CampaignAgentSubtypeBattleTags.KEY = new CollectionKey("campaign_agent_subtype_battle_tags");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._agentSubtype = values["agent_subtype"];
            this.battleTag = values["battle_tag"];
            this.attacking = !!values["attacking"];
        }
        get agentSubtype() {
            const collection = this.collectionCache.getCollection(AgentSubtypes.KEY, AgentSubtypes.Entry);
            return collection.find(entry => entry.key === this._agentSubtype);
        }
    }
    CampaignAgentSubtypeBattleTags.Entry = Entry;
})(CampaignAgentSubtypeBattleTags || (CampaignAgentSubtypeBattleTags = {}));

var CampaignFactorialCategories;
(function (CampaignFactorialCategories) {
    CampaignFactorialCategories.KEY = new CollectionKey("campaign_factorial_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignFactorialCategories.Entry = Entry;
})(CampaignFactorialCategories || (CampaignFactorialCategories = {}));

var CampaignDesignControlledFactorialCategories;
(function (CampaignDesignControlledFactorialCategories) {
    CampaignDesignControlledFactorialCategories.KEY = new CollectionKey("campaign_design_controlled_factorial_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignDesignControlledFactorialCategories.Entry = Entry;
})(CampaignDesignControlledFactorialCategories || (CampaignDesignControlledFactorialCategories = {}));

var CampaignFactorialCategoryJunctions;
(function (CampaignFactorialCategoryJunctions) {
    CampaignFactorialCategoryJunctions.KEY = new CollectionKey("campaign_factorial_category_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._codeCategory = values["code_category"];
            this._designControlledCategory = values["design_controlled_category"];
        }
        get codeCategory() {
            const collection = this.collectionCache.getCollection(CampaignFactorialCategories.KEY, CampaignFactorialCategories.Entry);
            return collection.find(entry => entry.key === this._codeCategory);
        }
        get designControlledCategory() {
            const collection = this.collectionCache.getCollection(CampaignDesignControlledFactorialCategories.KEY, CampaignDesignControlledFactorialCategories.Entry);
            return collection.find(entry => entry.key === this._designControlledCategory);
        }
    }
    CampaignFactorialCategoryJunctions.Entry = Entry;
})(CampaignFactorialCategoryJunctions || (CampaignFactorialCategoryJunctions = {}));

var CampaignFactorialUiInfos;
(function (CampaignFactorialUiInfos) {
    CampaignFactorialUiInfos.KEY = new CollectionKey("campaign_factorial_ui_infos");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.positiveName = values["positive_name"];
            this.negativeName = values["negative_name"];
            this.icon = values["icon"];
            this.negativeIcon = values["negative_icon"];
            this.effectText = values["effect_text"];
        }
    }
    CampaignFactorialUiInfos.Entry = Entry;
})(CampaignFactorialUiInfos || (CampaignFactorialUiInfos = {}));

var FactorialEffects;
(function (FactorialEffects) {
    FactorialEffects.KEY = new CollectionKey("factorial_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._category = values["category"];
            this._uiInfos = values["ui_infos"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(CampaignFactorialCategoryJunctions.KEY, CampaignFactorialCategoryJunctions.Entry);
            return collection.find(entry => entry.key === this._category);
        }
        get uiInfos() {
            const collection = this.collectionCache.getCollection(CampaignFactorialUiInfos.KEY, CampaignFactorialUiInfos.Entry);
            return collection.find(entry => entry.key === this._uiInfos);
        }
    }
    FactorialEffects.Entry = Entry;
})(FactorialEffects || (FactorialEffects = {}));

var CampaignFactorialScopes;
(function (CampaignFactorialScopes) {
    CampaignFactorialScopes.KEY = new CollectionKey("campaign_factorial_scopes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignFactorialScopes.Entry = Entry;
})(CampaignFactorialScopes || (CampaignFactorialScopes = {}));

var CampaignAgentSubtypeFactorialEffectJunctions;
(function (CampaignAgentSubtypeFactorialEffectJunctions) {
    CampaignAgentSubtypeFactorialEffectJunctions.KEY = new CollectionKey("campaign_agent_subtype_factorial_effect_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._agentSubtype = values["agent_subtype"];
            this._factorialEffect = values["factorial_effect"];
            this.value = values["value"];
            this._scope = values["scope"];
        }
        get agentSubtype() {
            const collection = this.collectionCache.getCollection(AgentSubtypes.KEY, AgentSubtypes.Entry);
            return collection.find(entry => entry.key === this._agentSubtype);
        }
        get factorialEffect() {
            const collection = this.collectionCache.getCollection(FactorialEffects.KEY, FactorialEffects.Entry);
            return collection.find(entry => entry.key === this._factorialEffect);
        }
        get scope() {
            const collection = this.collectionCache.getCollection(CampaignFactorialScopes.KEY, CampaignFactorialScopes.Entry);
            return collection.find(entry => entry.key === this._scope);
        }
    }
    CampaignAgentSubtypeFactorialEffectJunctions.Entry = Entry;
})(CampaignAgentSubtypeFactorialEffectJunctions || (CampaignAgentSubtypeFactorialEffectJunctions = {}));

var CampaignAiBehaviours$1;
(function (CampaignAiBehaviours) {
    CampaignAiBehaviours.KEY = new CollectionKey("campaign_ai_behaviours");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.behaviour = values["behaviour"];
            this.description = values["description"];
        }
    }
    CampaignAiBehaviours.Entry = Entry;
})(CampaignAiBehaviours$1 || (CampaignAiBehaviours$1 = {}));

var CampaignAiManagers$1;
(function (CampaignAiManagers) {
    CampaignAiManagers.KEY = new CollectionKey("campaign_ai_managers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.manager = values["manager"];
            this.description = values["description"];
        }
    }
    CampaignAiManagers.Entry = Entry;
})(CampaignAiManagers$1 || (CampaignAiManagers$1 = {}));

var CampaignAiManagerBehaviourJunctions$1;
(function (CampaignAiManagerBehaviourJunctions) {
    CampaignAiManagerBehaviourJunctions.KEY = new CollectionKey("campaign_ai_manager_behaviour_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._manager = values["manager"];
            this._behaviour = values["behaviour"];
            this.priority = values["priority"];
        }
        get manager() {
            const collection = this.collectionCache.getCollection(CampaignAiManagers$1.KEY, CampaignAiManagers$1.Entry);
            return collection.find(entry => entry.manager === this._manager);
        }
        get behaviour() {
            const collection = this.collectionCache.getCollection(CampaignAiBehaviours$1.KEY, CampaignAiBehaviours$1.Entry);
            return collection.find(entry => entry.behaviour === this._behaviour);
        }
    }
    CampaignAiManagerBehaviourJunctions.Entry = Entry;
})(CampaignAiManagerBehaviourJunctions$1 || (CampaignAiManagerBehaviourJunctions$1 = {}));

var CampaignAiTechnologyManagerPathJunctions$1;
(function (CampaignAiTechnologyManagerPathJunctions) {
    CampaignAiTechnologyManagerPathJunctions.KEY = new CollectionKey("campaign_ai_technology_manager_path_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._managerKey = values["manager_key"];
            this._pathKey = values["path_key"];
            this.priority = values["priority"];
        }
        get managerKey() {
            const collection = this.collectionCache.getCollection(CampaignAiTechnologyManagers$1.KEY, CampaignAiTechnologyManagers$1.Entry);
            return collection.find(entry => entry.key === this._managerKey);
        }
        get pathKey() {
            const collection = this.collectionCache.getCollection(CampaignAiTechnologyPaths$1.KEY, CampaignAiTechnologyPaths$1.Entry);
            return collection.find(entry => entry.key === this._pathKey);
        }
    }
    CampaignAiTechnologyManagerPathJunctions.Entry = Entry;
})(CampaignAiTechnologyManagerPathJunctions$1 || (CampaignAiTechnologyManagerPathJunctions$1 = {}));

var CampaignAiTechnologyPathJunctions$1;
(function (CampaignAiTechnologyPathJunctions) {
    CampaignAiTechnologyPathJunctions.KEY = new CollectionKey("campaign_ai_technology_path_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._pathKey = values["path_key"];
            this._technologyKey = values["technology_key"];
            this.priority = values["priority"];
        }
        get pathKey() {
            const collection = this.collectionCache.getCollection(CampaignAiTechnologyPaths$1.KEY, CampaignAiTechnologyPaths$1.Entry);
            return collection.find(entry => entry.key === this._pathKey);
        }
        get technologyKey() {
            const collection = this.collectionCache.getCollection(Technologies$1.KEY, Technologies$1.Entry);
            return collection.find(entry => entry.key === this._technologyKey);
        }
    }
    CampaignAiTechnologyPathJunctions.Entry = Entry;
})(CampaignAiTechnologyPathJunctions$1 || (CampaignAiTechnologyPathJunctions$1 = {}));

var CampaignAiTechnologyResearchProfiles;
(function (CampaignAiTechnologyResearchProfiles) {
    CampaignAiTechnologyResearchProfiles.KEY = new CollectionKey("campaign_ai_technology_research_profiles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignAiTechnologyResearchProfiles.Entry = Entry;
})(CampaignAiTechnologyResearchProfiles || (CampaignAiTechnologyResearchProfiles = {}));

var CampaignAmbushGroundTypes$1;
(function (CampaignAmbushGroundTypes) {
    CampaignAmbushGroundTypes.KEY = new CollectionKey("campaign_ambush_ground_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this.ambushChanceOfSuccess = values["ambush_chance_of_success"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(CampaignGroundTypes$1.KEY, CampaignGroundTypes$1.Entry);
            return collection.find(entry => entry.type === this._key);
        }
    }
    CampaignAmbushGroundTypes.Entry = Entry;
})(CampaignAmbushGroundTypes$1 || (CampaignAmbushGroundTypes$1 = {}));

var CampaignAutoresolverSkirmishEffectivenessRelativeToSpeeds;
(function (CampaignAutoresolverSkirmishEffectivenessRelativeToSpeeds) {
    CampaignAutoresolverSkirmishEffectivenessRelativeToSpeeds.KEY = new CollectionKey("campaign_autoresolver_skirmish_effectiveness_relative_to_speeds");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.relativeSpeedSkirmisherToOther = values["relative_speed_skirmisher_to_other"];
            this.proportionalEffectivenessSkirmisherToOther = values["proportional_effectiveness_skirmisher_to_other"];
        }
    }
    CampaignAutoresolverSkirmishEffectivenessRelativeToSpeeds.Entry = Entry;
})(CampaignAutoresolverSkirmishEffectivenessRelativeToSpeeds || (CampaignAutoresolverSkirmishEffectivenessRelativeToSpeeds = {}));

var CampaignMapPlayableAreas$1;
(function (CampaignMapPlayableAreas) {
    CampaignMapPlayableAreas.KEY = new CollectionKey("campaign_map_playable_areas");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._mapname = values["mapname"];
            this.index = values["index"];
            this.minx = values["minx"];
            this.maxx = values["maxx"];
            this.seaTrade = !!values["sea_trade"];
            this.onscreenName = values["onscreen_name"];
            this.mapFile = values["map_file"];
            this.overlayFile = values["overlay_file"];
            this.radarFile = values["radar_file"];
            this.meaningfulId = values["meaningful_id"];
            this.previewWidth = values["preview_width"];
            this.previewHeight = values["preview_height"];
            this.previewBorder = values["preview_border"];
            this.minimapLookupFile = values["minimap_lookup_file"];
            this.isAvailableInCustomBattle = !!values["is_available_in_custom_battle"];
            this.terrainFolder = values["terrain_folder"];
            this.maxy = values["maxy"];
            this.miny = values["miny"];
            this.campaignKey = values["campaign_key"];
            this.frontendImage = values["frontend_image"];
            this._gameExpansionKey = values["game_expansion_key"];
            this.onscreenDescription = values["onscreen_description"];
            this._video = values["video"];
            this.isMpcAvailable = !!values["is_mpc_available"];
            this.campaignOverlayLookup = values["campaign_overlay_lookup"];
            this.campaignOverlayMap = values["campaign_overlay_map"];
        }
        get mapname() {
            const collection = this.collectionCache.getCollection(CampaignMaps$1.KEY, CampaignMaps$1.Entry);
            return collection.find(entry => entry.mapname === this._mapname);
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
        get video() {
            const collection = this.collectionCache.getCollection(Videos$1.KEY, Videos$1.Entry);
            return collection.find(entry => entry.videoName === this._video);
        }
    }
    CampaignMapPlayableAreas.Entry = Entry;
})(CampaignMapPlayableAreas$1 || (CampaignMapPlayableAreas$1 = {}));

var CampaignBattlePresets$1;
(function (CampaignBattlePresets) {
    CampaignBattlePresets.KEY = new CollectionKey("campaign_battle_presets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreenName = values["onscreen_name"];
            this.description = values["description"];
            this.coordX = values["coord_x"];
            this.coordY = values["coord_y"];
            this.tileUpgrade = values["tile_upgrade"];
            this._battleType = values["battle_type"];
            this.isUniqueSettlement = !!values["is_unique_settlement"];
            this._campaignMap = values["campaign_map"];
            this.screenshotPath = values["screenshot_path"];
            this._creepOverride = values["creep_override"];
        }
        get battleType() {
            const collection = this.collectionCache.getCollection(CampaignBattleTypeEnums$1.KEY, CampaignBattleTypeEnums$1.Entry);
            return collection.find(entry => entry.key === this._battleType);
        }
        get campaignMap() {
            const collection = this.collectionCache.getCollection(CampaignMapPlayableAreas$1.KEY, CampaignMapPlayableAreas$1.Entry);
            return collection.find(entry => entry.index === this._campaignMap);
        }
        get creepOverride() {
            const collection = this.collectionCache.getCollection(DestructionZoneMaskTypes.KEY, DestructionZoneMaskTypes.Entry);
            return collection.find(entry => entry.key === this._creepOverride);
        }
    }
    CampaignBattlePresets.Entry = Entry;
})(CampaignBattlePresets$1 || (CampaignBattlePresets$1 = {}));

var CampaignBattleScenes;
(function (CampaignBattleScenes) {
    CampaignBattleScenes.KEY = new CollectionKey("campaign_battle_scenes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.colour = values["colour"];
            this._culture = values["culture"];
            this.bmd = values["bmd"];
            this.environment = values["environment"];
            this._agentSubtypeOverride = values["agent_subtype_override"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get agentSubtypeOverride() {
            const collection = this.collectionCache.getCollection(AgentSubtypes.KEY, AgentSubtypes.Entry);
            return collection.find(entry => entry.key === this._agentSubtypeOverride);
        }
    }
    CampaignBattleScenes.Entry = Entry;
})(CampaignBattleScenes || (CampaignBattleScenes = {}));

var CampaignBmdLayerGroupBmdExportTypesJunctions;
(function (CampaignBmdLayerGroupBmdExportTypesJunctions) {
    CampaignBmdLayerGroupBmdExportTypesJunctions.KEY = new CollectionKey("campaign_bmd_layer_group_bmd_export_types_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignBmdLayerGroup = values["campaign_bmd_layer_group"];
            this._bmdExportTypes = values["bmd_export_types"];
        }
        get campaignBmdLayerGroup() {
            const collection = this.collectionCache.getCollection(CampaignBmdLayerGroupIds.KEY, CampaignBmdLayerGroupIds.Entry);
            return collection.find(entry => entry.id === this._campaignBmdLayerGroup);
        }
        get bmdExportTypes() {
            const collection = this.collectionCache.getCollection(BmdExportTypes.KEY, BmdExportTypes.Entry);
            return collection.find(entry => entry.name === this._bmdExportTypes);
        }
    }
    CampaignBmdLayerGroupBmdExportTypesJunctions.Entry = Entry;
})(CampaignBmdLayerGroupBmdExportTypesJunctions || (CampaignBmdLayerGroupBmdExportTypesJunctions = {}));

var CampaignBonusValueBattleContextBattleTypeJunctions$1;
(function (CampaignBonusValueBattleContextBattleTypeJunctions) {
    CampaignBonusValueBattleContextBattleTypeJunctions.KEY = new CollectionKey("campaign_bonus_value_battle_context_battle_type_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._battleContextKey = values["battle_context_key"];
            this._battleTypeKey = values["battle_type_key"];
        }
        get battleContextKey() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueBattleContextSpecifiers$1.KEY, CampaignBonusValueBattleContextSpecifiers$1.Entry);
            return collection.find(entry => entry.key === this._battleContextKey);
        }
        get battleTypeKey() {
            const collection = this.collectionCache.getCollection(CampaignBattleTypeEnums$1.KEY, CampaignBattleTypeEnums$1.Entry);
            return collection.find(entry => entry.key === this._battleTypeKey);
        }
    }
    CampaignBonusValueBattleContextBattleTypeJunctions.Entry = Entry;
})(CampaignBonusValueBattleContextBattleTypeJunctions$1 || (CampaignBonusValueBattleContextBattleTypeJunctions$1 = {}));

var CampaignBonusValueBattleContextCultureJunctions$1;
(function (CampaignBonusValueBattleContextCultureJunctions) {
    CampaignBonusValueBattleContextCultureJunctions.KEY = new CollectionKey("campaign_bonus_value_battle_context_culture_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._battleContextKey = values["battle_context_key"];
            this._cultureKey = values["culture_key"];
        }
        get battleContextKey() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueBattleContextSpecifiers$1.KEY, CampaignBonusValueBattleContextSpecifiers$1.Entry);
            return collection.find(entry => entry.key === this._battleContextKey);
        }
        get cultureKey() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._cultureKey);
        }
    }
    CampaignBonusValueBattleContextCultureJunctions.Entry = Entry;
})(CampaignBonusValueBattleContextCultureJunctions$1 || (CampaignBonusValueBattleContextCultureJunctions$1 = {}));

var CampaignBonusValueBattleContextFactionJunctions$1;
(function (CampaignBonusValueBattleContextFactionJunctions) {
    CampaignBonusValueBattleContextFactionJunctions.KEY = new CollectionKey("campaign_bonus_value_battle_context_faction_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._battleContextKey = values["battle_context_key"];
            this._factionKey = values["faction_key"];
        }
        get battleContextKey() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueBattleContextSpecifiers$1.KEY, CampaignBonusValueBattleContextSpecifiers$1.Entry);
            return collection.find(entry => entry.key === this._battleContextKey);
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
    }
    CampaignBonusValueBattleContextFactionJunctions.Entry = Entry;
})(CampaignBonusValueBattleContextFactionJunctions$1 || (CampaignBonusValueBattleContextFactionJunctions$1 = {}));

var CampaignBonusValueBattleContextForceStatus$1;
(function (CampaignBonusValueBattleContextForceStatus) {
    CampaignBonusValueBattleContextForceStatus.KEY = new CollectionKey("campaign_bonus_value_battle_context_force_status");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignBonusValueBattleContextForceStatus.Entry = Entry;
})(CampaignBonusValueBattleContextForceStatus$1 || (CampaignBonusValueBattleContextForceStatus$1 = {}));

var CampaignBonusValueBattleContextForceStatusJunctions$1;
(function (CampaignBonusValueBattleContextForceStatusJunctions) {
    CampaignBonusValueBattleContextForceStatusJunctions.KEY = new CollectionKey("campaign_bonus_value_battle_context_force_status_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._battleContextKey = values["battle_context_key"];
            this._forceStatusKey = values["force_status_key"];
            this.isYours = !!values["is_yours"];
        }
        get battleContextKey() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueBattleContextSpecifiers$1.KEY, CampaignBonusValueBattleContextSpecifiers$1.Entry);
            return collection.find(entry => entry.key === this._battleContextKey);
        }
        get forceStatusKey() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueBattleContextForceStatus$1.KEY, CampaignBonusValueBattleContextForceStatus$1.Entry);
            return collection.find(entry => entry.key === this._forceStatusKey);
        }
    }
    CampaignBonusValueBattleContextForceStatusJunctions.Entry = Entry;
})(CampaignBonusValueBattleContextForceStatusJunctions$1 || (CampaignBonusValueBattleContextForceStatusJunctions$1 = {}));

var CampaignBonusValueBattleContextGroundTypeJunctions$1;
(function (CampaignBonusValueBattleContextGroundTypeJunctions) {
    CampaignBonusValueBattleContextGroundTypeJunctions.KEY = new CollectionKey("campaign_bonus_value_battle_context_ground_type_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._battleContextKey = values["battle_context_key"];
            this._groundTypeKey = values["ground_type_key"];
        }
        get battleContextKey() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueBattleContextSpecifiers$1.KEY, CampaignBonusValueBattleContextSpecifiers$1.Entry);
            return collection.find(entry => entry.key === this._battleContextKey);
        }
        get groundTypeKey() {
            const collection = this.collectionCache.getCollection(CampaignGroundTypes$1.KEY, CampaignGroundTypes$1.Entry);
            return collection.find(entry => entry.type === this._groundTypeKey);
        }
    }
    CampaignBonusValueBattleContextGroundTypeJunctions.Entry = Entry;
})(CampaignBonusValueBattleContextGroundTypeJunctions$1 || (CampaignBonusValueBattleContextGroundTypeJunctions$1 = {}));

var CampaignBonusValueBattleContextTerritoryStatus$1;
(function (CampaignBonusValueBattleContextTerritoryStatus) {
    CampaignBonusValueBattleContextTerritoryStatus.KEY = new CollectionKey("campaign_bonus_value_battle_context_territory_status");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignBonusValueBattleContextTerritoryStatus.Entry = Entry;
})(CampaignBonusValueBattleContextTerritoryStatus$1 || (CampaignBonusValueBattleContextTerritoryStatus$1 = {}));

var CampaignBonusValueBattleContextTerritoryStatusJunctions$1;
(function (CampaignBonusValueBattleContextTerritoryStatusJunctions) {
    CampaignBonusValueBattleContextTerritoryStatusJunctions.KEY = new CollectionKey("campaign_bonus_value_battle_context_territory_status_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._battleContextKey = values["battle_context_key"];
            this._territoryStatusKey = values["territory_status_key"];
        }
        get battleContextKey() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueBattleContextSpecifiers$1.KEY, CampaignBonusValueBattleContextSpecifiers$1.Entry);
            return collection.find(entry => entry.key === this._battleContextKey);
        }
        get territoryStatusKey() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueBattleContextTerritoryStatus$1.KEY, CampaignBonusValueBattleContextTerritoryStatus$1.Entry);
            return collection.find(entry => entry.key === this._territoryStatusKey);
        }
    }
    CampaignBonusValueBattleContextTerritoryStatusJunctions.Entry = Entry;
})(CampaignBonusValueBattleContextTerritoryStatusJunctions$1 || (CampaignBonusValueBattleContextTerritoryStatusJunctions$1 = {}));

var CampaignBonusValueIdsActionResultsAdditionalOutcomes$1;
(function (CampaignBonusValueIdsActionResultsAdditionalOutcomes) {
    CampaignBonusValueIdsActionResultsAdditionalOutcomes.KEY = new CollectionKey("campaign_bonus_value_ids_action_results_additional_outcomes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsActionResultsAdditionalOutcomes.Entry = Entry;
})(CampaignBonusValueIdsActionResultsAdditionalOutcomes$1 || (CampaignBonusValueIdsActionResultsAdditionalOutcomes$1 = {}));

var CampaignBonusValueIdsAgent$1;
(function (CampaignBonusValueIdsAgent) {
    CampaignBonusValueIdsAgent.KEY = new CollectionKey("campaign_bonus_value_ids_agent");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsAgent.Entry = Entry;
})(CampaignBonusValueIdsAgent$1 || (CampaignBonusValueIdsAgent$1 = {}));

var CampaignBonusValueIdsAgentActionRecords;
(function (CampaignBonusValueIdsAgentActionRecords) {
    CampaignBonusValueIdsAgentActionRecords.KEY = new CollectionKey("campaign_bonus_value_ids_agent_action_records");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsAgentActionRecords.Entry = Entry;
})(CampaignBonusValueIdsAgentActionRecords || (CampaignBonusValueIdsAgentActionRecords = {}));

var CampaignBonusValueIdsAgentSubtypes;
(function (CampaignBonusValueIdsAgentSubtypes) {
    CampaignBonusValueIdsAgentSubtypes.KEY = new CollectionKey("campaign_bonus_value_ids_agent_subtypes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsAgentSubtypes.Entry = Entry;
})(CampaignBonusValueIdsAgentSubtypes || (CampaignBonusValueIdsAgentSubtypes = {}));

var CampaignBonusValueIdsAttritionRecords;
(function (CampaignBonusValueIdsAttritionRecords) {
    CampaignBonusValueIdsAttritionRecords.KEY = new CollectionKey("campaign_bonus_value_ids_attrition_records");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsAttritionRecords.Entry = Entry;
})(CampaignBonusValueIdsAttritionRecords || (CampaignBonusValueIdsAttritionRecords = {}));

var CampaignBonusValueIdsBasic$1;
(function (CampaignBonusValueIdsBasic) {
    CampaignBonusValueIdsBasic.KEY = new CollectionKey("campaign_bonus_value_ids_basic");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsBasic.Entry = Entry;
})(CampaignBonusValueIdsBasic$1 || (CampaignBonusValueIdsBasic$1 = {}));

var CampaignBonusValueIdsBattlefieldDeployables$1;
(function (CampaignBonusValueIdsBattlefieldDeployables) {
    CampaignBonusValueIdsBattlefieldDeployables.KEY = new CollectionKey("campaign_bonus_value_ids_battlefield_deployables");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsBattlefieldDeployables.Entry = Entry;
})(CampaignBonusValueIdsBattlefieldDeployables$1 || (CampaignBonusValueIdsBattlefieldDeployables$1 = {}));

var CampaignBonusValueIdsBattleContexts$1;
(function (CampaignBonusValueIdsBattleContexts) {
    CampaignBonusValueIdsBattleContexts.KEY = new CollectionKey("campaign_bonus_value_ids_battle_contexts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignBonusValueIdsBattleContexts.Entry = Entry;
})(CampaignBonusValueIdsBattleContexts$1 || (CampaignBonusValueIdsBattleContexts$1 = {}));

var CampaignBonusValueIdsBattleContextArmySpecialAbilities;
(function (CampaignBonusValueIdsBattleContextArmySpecialAbilities) {
    CampaignBonusValueIdsBattleContextArmySpecialAbilities.KEY = new CollectionKey("campaign_bonus_value_ids_battle_context_army_special_abilities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignBonusValueIdsBattleContextArmySpecialAbilities.Entry = Entry;
})(CampaignBonusValueIdsBattleContextArmySpecialAbilities || (CampaignBonusValueIdsBattleContextArmySpecialAbilities = {}));

var CampaignBonusValueIdsBattleContextUnitAbilities;
(function (CampaignBonusValueIdsBattleContextUnitAbilities) {
    CampaignBonusValueIdsBattleContextUnitAbilities.KEY = new CollectionKey("campaign_bonus_value_ids_battle_context_unit_abilities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignBonusValueIdsBattleContextUnitAbilities.Entry = Entry;
})(CampaignBonusValueIdsBattleContextUnitAbilities || (CampaignBonusValueIdsBattleContextUnitAbilities = {}));

var CampaignBonusValueIdsBattleContextUnitAttributes;
(function (CampaignBonusValueIdsBattleContextUnitAttributes) {
    CampaignBonusValueIdsBattleContextUnitAttributes.KEY = new CollectionKey("campaign_bonus_value_ids_battle_context_unit_attributes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignBonusValueIdsBattleContextUnitAttributes.Entry = Entry;
})(CampaignBonusValueIdsBattleContextUnitAttributes || (CampaignBonusValueIdsBattleContextUnitAttributes = {}));

var CampaignBonusValueIdsBuildingChain$1;
(function (CampaignBonusValueIdsBuildingChain) {
    CampaignBonusValueIdsBuildingChain.KEY = new CollectionKey("campaign_bonus_value_ids_building_chain");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsBuildingChain.Entry = Entry;
})(CampaignBonusValueIdsBuildingChain$1 || (CampaignBonusValueIdsBuildingChain$1 = {}));

var CampaignBonusValueIdsBuildingSets$1;
(function (CampaignBonusValueIdsBuildingSets) {
    CampaignBonusValueIdsBuildingSets.KEY = new CollectionKey("campaign_bonus_value_ids_building_sets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsBuildingSets.Entry = Entry;
})(CampaignBonusValueIdsBuildingSets$1 || (CampaignBonusValueIdsBuildingSets$1 = {}));

var CampaignBonusValueIdsCommodity$1;
(function (CampaignBonusValueIdsCommodity) {
    CampaignBonusValueIdsCommodity.KEY = new CollectionKey("campaign_bonus_value_ids_commodity");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsCommodity.Entry = Entry;
})(CampaignBonusValueIdsCommodity$1 || (CampaignBonusValueIdsCommodity$1 = {}));

var CampaignBonusValueIdsFactions;
(function (CampaignBonusValueIdsFactions) {
    CampaignBonusValueIdsFactions.KEY = new CollectionKey("campaign_bonus_value_ids_factions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsFactions.Entry = Entry;
})(CampaignBonusValueIdsFactions || (CampaignBonusValueIdsFactions = {}));

var CampaignBonusValueIdsLoyaltyEvents;
(function (CampaignBonusValueIdsLoyaltyEvents) {
    CampaignBonusValueIdsLoyaltyEvents.KEY = new CollectionKey("campaign_bonus_value_ids_loyalty_events");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsLoyaltyEvents.Entry = Entry;
})(CampaignBonusValueIdsLoyaltyEvents || (CampaignBonusValueIdsLoyaltyEvents = {}));

var CampaignBonusValueIdsMeleeWeapon$1;
(function (CampaignBonusValueIdsMeleeWeapon) {
    CampaignBonusValueIdsMeleeWeapon.KEY = new CollectionKey("campaign_bonus_value_ids_melee_weapon");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsMeleeWeapon.Entry = Entry;
})(CampaignBonusValueIdsMeleeWeapon$1 || (CampaignBonusValueIdsMeleeWeapon$1 = {}));

var CampaignBonusValueIdsMilitaryForceAbilitys;
(function (CampaignBonusValueIdsMilitaryForceAbilitys) {
    CampaignBonusValueIdsMilitaryForceAbilitys.KEY = new CollectionKey("campaign_bonus_value_ids_military_force_abilitys");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.note = values["note"];
        }
    }
    CampaignBonusValueIdsMilitaryForceAbilitys.Entry = Entry;
})(CampaignBonusValueIdsMilitaryForceAbilitys || (CampaignBonusValueIdsMilitaryForceAbilitys = {}));

var CampaignBonusValueIdsMissileWeapon$1;
(function (CampaignBonusValueIdsMissileWeapon) {
    CampaignBonusValueIdsMissileWeapon.KEY = new CollectionKey("campaign_bonus_value_ids_missile_weapon");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsMissileWeapon.Entry = Entry;
})(CampaignBonusValueIdsMissileWeapon$1 || (CampaignBonusValueIdsMissileWeapon$1 = {}));

var CampaignBonusValueIdsNameRecords;
(function (CampaignBonusValueIdsNameRecords) {
    CampaignBonusValueIdsNameRecords.KEY = new CollectionKey("campaign_bonus_value_ids_name_records");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsNameRecords.Entry = Entry;
})(CampaignBonusValueIdsNameRecords || (CampaignBonusValueIdsNameRecords = {}));

var CampaignBonusValueIdsPooledResources;
(function (CampaignBonusValueIdsPooledResources) {
    CampaignBonusValueIdsPooledResources.KEY = new CollectionKey("campaign_bonus_value_ids_pooled_resources");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsPooledResources.Entry = Entry;
})(CampaignBonusValueIdsPooledResources || (CampaignBonusValueIdsPooledResources = {}));

var CampaignBonusValueIdsPooledResourceFactors;
(function (CampaignBonusValueIdsPooledResourceFactors) {
    CampaignBonusValueIdsPooledResourceFactors.KEY = new CollectionKey("campaign_bonus_value_ids_pooled_resource_factors");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsPooledResourceFactors.Entry = Entry;
})(CampaignBonusValueIdsPooledResourceFactors || (CampaignBonusValueIdsPooledResourceFactors = {}));

var CampaignBonusValueIdsPopulationClass$1;
(function (CampaignBonusValueIdsPopulationClass) {
    CampaignBonusValueIdsPopulationClass.KEY = new CollectionKey("campaign_bonus_value_ids_population_class");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsPopulationClass.Entry = Entry;
})(CampaignBonusValueIdsPopulationClass$1 || (CampaignBonusValueIdsPopulationClass$1 = {}));

var CampaignBonusValueIdsPopulationClassAndReligion$1;
(function (CampaignBonusValueIdsPopulationClassAndReligion) {
    CampaignBonusValueIdsPopulationClassAndReligion.KEY = new CollectionKey("campaign_bonus_value_ids_population_class_and_religion");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsPopulationClassAndReligion.Entry = Entry;
})(CampaignBonusValueIdsPopulationClassAndReligion$1 || (CampaignBonusValueIdsPopulationClassAndReligion$1 = {}));

var CampaignBonusValueIdsProjectile$1;
(function (CampaignBonusValueIdsProjectile) {
    CampaignBonusValueIdsProjectile.KEY = new CollectionKey("campaign_bonus_value_ids_projectile");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsProjectile.Entry = Entry;
})(CampaignBonusValueIdsProjectile$1 || (CampaignBonusValueIdsProjectile$1 = {}));

var CampaignBonusValueIdsProjectileShotTypeEnum$1;
(function (CampaignBonusValueIdsProjectileShotTypeEnum) {
    CampaignBonusValueIdsProjectileShotTypeEnum.KEY = new CollectionKey("campaign_bonus_value_ids_projectile_shot_type_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsProjectileShotTypeEnum.Entry = Entry;
})(CampaignBonusValueIdsProjectileShotTypeEnum$1 || (CampaignBonusValueIdsProjectileShotTypeEnum$1 = {}));

var CampaignBonusValueIdsProjectileType$1;
(function (CampaignBonusValueIdsProjectileType) {
    CampaignBonusValueIdsProjectileType.KEY = new CollectionKey("campaign_bonus_value_ids_projectile_type");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsProjectileType.Entry = Entry;
})(CampaignBonusValueIdsProjectileType$1 || (CampaignBonusValueIdsProjectileType$1 = {}));

var CampaignBonusValueIdsProvinceInitiatives;
(function (CampaignBonusValueIdsProvinceInitiatives) {
    CampaignBonusValueIdsProvinceInitiatives.KEY = new CollectionKey("campaign_bonus_value_ids_province_initiatives");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsProvinceInitiatives.Entry = Entry;
})(CampaignBonusValueIdsProvinceInitiatives || (CampaignBonusValueIdsProvinceInitiatives = {}));

var CampaignBonusValueIdsProvincialInitiativeEffectRecords$1;
(function (CampaignBonusValueIdsProvincialInitiativeEffectRecords) {
    CampaignBonusValueIdsProvincialInitiativeEffectRecords.KEY = new CollectionKey("campaign_bonus_value_ids_provincial_initiative_effect_records");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsProvincialInitiativeEffectRecords.Entry = Entry;
})(CampaignBonusValueIdsProvincialInitiativeEffectRecords$1 || (CampaignBonusValueIdsProvincialInitiativeEffectRecords$1 = {}));

var CampaignBonusValueIdsReligion$1;
(function (CampaignBonusValueIdsReligion) {
    CampaignBonusValueIdsReligion.KEY = new CollectionKey("campaign_bonus_value_ids_religion");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsReligion.Entry = Entry;
})(CampaignBonusValueIdsReligion$1 || (CampaignBonusValueIdsReligion$1 = {}));

var CampaignBonusValueIdsResource$1;
(function (CampaignBonusValueIdsResource) {
    CampaignBonusValueIdsResource.KEY = new CollectionKey("campaign_bonus_value_ids_resource");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsResource.Entry = Entry;
})(CampaignBonusValueIdsResource$1 || (CampaignBonusValueIdsResource$1 = {}));

var CampaignBonusValueIdsRituals;
(function (CampaignBonusValueIdsRituals) {
    CampaignBonusValueIdsRituals.KEY = new CollectionKey("campaign_bonus_value_ids_rituals");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsRituals.Entry = Entry;
})(CampaignBonusValueIdsRituals || (CampaignBonusValueIdsRituals = {}));

var CampaignBonusValueIdsRitualChains;
(function (CampaignBonusValueIdsRitualChains) {
    CampaignBonusValueIdsRitualChains.KEY = new CollectionKey("campaign_bonus_value_ids_ritual_chains");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsRitualChains.Entry = Entry;
})(CampaignBonusValueIdsRitualChains || (CampaignBonusValueIdsRitualChains = {}));

var CampaignBonusValueIdsSiegeItems$1;
(function (CampaignBonusValueIdsSiegeItems) {
    CampaignBonusValueIdsSiegeItems.KEY = new CollectionKey("campaign_bonus_value_ids_siege_items");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsSiegeItems.Entry = Entry;
})(CampaignBonusValueIdsSiegeItems$1 || (CampaignBonusValueIdsSiegeItems$1 = {}));

var CampaignBonusValueIdsSpecialAbilityPhases;
(function (CampaignBonusValueIdsSpecialAbilityPhases) {
    CampaignBonusValueIdsSpecialAbilityPhases.KEY = new CollectionKey("campaign_bonus_value_ids_special_ability_phases");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsSpecialAbilityPhases.Entry = Entry;
})(CampaignBonusValueIdsSpecialAbilityPhases || (CampaignBonusValueIdsSpecialAbilityPhases = {}));

var CampaignBonusValueIdsSubcultures;
(function (CampaignBonusValueIdsSubcultures) {
    CampaignBonusValueIdsSubcultures.KEY = new CollectionKey("campaign_bonus_value_ids_subcultures");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsSubcultures.Entry = Entry;
})(CampaignBonusValueIdsSubcultures || (CampaignBonusValueIdsSubcultures = {}));

var CampaignBonusValueIdsTechnologies;
(function (CampaignBonusValueIdsTechnologies) {
    CampaignBonusValueIdsTechnologies.KEY = new CollectionKey("campaign_bonus_value_ids_technologies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsTechnologies.Entry = Entry;
})(CampaignBonusValueIdsTechnologies || (CampaignBonusValueIdsTechnologies = {}));

var CampaignBonusValueIdsTechnologyCategories$1;
(function (CampaignBonusValueIdsTechnologyCategories) {
    CampaignBonusValueIdsTechnologyCategories.KEY = new CollectionKey("campaign_bonus_value_ids_technology_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsTechnologyCategories.Entry = Entry;
})(CampaignBonusValueIdsTechnologyCategories$1 || (CampaignBonusValueIdsTechnologyCategories$1 = {}));

var CampaignBonusValueIdsUnitAbility$1;
(function (CampaignBonusValueIdsUnitAbility) {
    CampaignBonusValueIdsUnitAbility.KEY = new CollectionKey("campaign_bonus_value_ids_unit_ability");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsUnitAbility.Entry = Entry;
})(CampaignBonusValueIdsUnitAbility$1 || (CampaignBonusValueIdsUnitAbility$1 = {}));

var CampaignBonusValueIdsUnitAttributes;
(function (CampaignBonusValueIdsUnitAttributes) {
    CampaignBonusValueIdsUnitAttributes.KEY = new CollectionKey("campaign_bonus_value_ids_unit_attributes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsUnitAttributes.Entry = Entry;
})(CampaignBonusValueIdsUnitAttributes || (CampaignBonusValueIdsUnitAttributes = {}));

var CampaignBonusValueIdsUnitCaste$1;
(function (CampaignBonusValueIdsUnitCaste) {
    CampaignBonusValueIdsUnitCaste.KEY = new CollectionKey("campaign_bonus_value_ids_unit_caste");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsUnitCaste.Entry = Entry;
})(CampaignBonusValueIdsUnitCaste$1 || (CampaignBonusValueIdsUnitCaste$1 = {}));

var CampaignBonusValueIdsUnitCategory$1;
(function (CampaignBonusValueIdsUnitCategory) {
    CampaignBonusValueIdsUnitCategory.KEY = new CollectionKey("campaign_bonus_value_ids_unit_category");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsUnitCategory.Entry = Entry;
})(CampaignBonusValueIdsUnitCategory$1 || (CampaignBonusValueIdsUnitCategory$1 = {}));

var CampaignBonusValueIdsUnitClass$1;
(function (CampaignBonusValueIdsUnitClass) {
    CampaignBonusValueIdsUnitClass.KEY = new CollectionKey("campaign_bonus_value_ids_unit_class");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsUnitClass.Entry = Entry;
})(CampaignBonusValueIdsUnitClass$1 || (CampaignBonusValueIdsUnitClass$1 = {}));

var CampaignBonusValueIdsUnitRecords$1;
(function (CampaignBonusValueIdsUnitRecords) {
    CampaignBonusValueIdsUnitRecords.KEY = new CollectionKey("campaign_bonus_value_ids_unit_records");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsUnitRecords.Entry = Entry;
})(CampaignBonusValueIdsUnitRecords$1 || (CampaignBonusValueIdsUnitRecords$1 = {}));

var CampaignBonusValueIdsUnitSets$1;
(function (CampaignBonusValueIdsUnitSets) {
    CampaignBonusValueIdsUnitSets.KEY = new CollectionKey("campaign_bonus_value_ids_unit_sets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsUnitSets.Entry = Entry;
})(CampaignBonusValueIdsUnitSets$1 || (CampaignBonusValueIdsUnitSets$1 = {}));

var CampaignBonusValueIdsUnitSetUnitAbilities;
(function (CampaignBonusValueIdsUnitSetUnitAbilities) {
    CampaignBonusValueIdsUnitSetUnitAbilities.KEY = new CollectionKey("campaign_bonus_value_ids_unit_set_unit_abilities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsUnitSetUnitAbilities.Entry = Entry;
})(CampaignBonusValueIdsUnitSetUnitAbilities || (CampaignBonusValueIdsUnitSetUnitAbilities = {}));

var CampaignBonusValueIdsUnitSetUnitAttributes;
(function (CampaignBonusValueIdsUnitSetUnitAttributes) {
    CampaignBonusValueIdsUnitSetUnitAttributes.KEY = new CollectionKey("campaign_bonus_value_ids_unit_set_unit_attributes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.notes = values["notes"];
        }
    }
    CampaignBonusValueIdsUnitSetUnitAttributes.Entry = Entry;
})(CampaignBonusValueIdsUnitSetUnitAttributes || (CampaignBonusValueIdsUnitSetUnitAttributes = {}));

var CampaignBonusValueIdUnitMissileWeapons;
(function (CampaignBonusValueIdUnitMissileWeapons) {
    CampaignBonusValueIdUnitMissileWeapons.KEY = new CollectionKey("campaign_bonus_value_id_unit_missile_weapons");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
        }
    }
    CampaignBonusValueIdUnitMissileWeapons.Entry = Entry;
})(CampaignBonusValueIdUnitMissileWeapons || (CampaignBonusValueIdUnitMissileWeapons = {}));

var CampaignBuildingChainSlotUnlocks;
(function (CampaignBuildingChainSlotUnlocks) {
    CampaignBuildingChainSlotUnlocks.KEY = new CollectionKey("campaign_building_chain_slot_unlocks");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._buildingChain = values["building_chain"];
            this.activeSlotCount = values["active_slot_count"];
            this.level = values["level"];
        }
        get buildingChain() {
            const collection = this.collectionCache.getCollection(BuildingChains$1.KEY, BuildingChains$1.Entry);
            return collection.find(entry => entry.key === this._buildingChain);
        }
    }
    CampaignBuildingChainSlotUnlocks.Entry = Entry;
})(CampaignBuildingChainSlotUnlocks || (CampaignBuildingChainSlotUnlocks = {}));

var CampaignBuildingLevelFactorialEffectJunctions;
(function (CampaignBuildingLevelFactorialEffectJunctions) {
    CampaignBuildingLevelFactorialEffectJunctions.KEY = new CollectionKey("campaign_building_level_factorial_effect_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._buildingLevel = values["building_level"];
            this._factorialEffect = values["factorial_effect"];
            this.value = values["value"];
            this._scope = values["scope"];
        }
        get buildingLevel() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._buildingLevel);
        }
        get factorialEffect() {
            const collection = this.collectionCache.getCollection(FactorialEffects.KEY, FactorialEffects.Entry);
            return collection.find(entry => entry.key === this._factorialEffect);
        }
        get scope() {
            const collection = this.collectionCache.getCollection(CampaignFactorialScopes.KEY, CampaignFactorialScopes.Entry);
            return collection.find(entry => entry.key === this._scope);
        }
    }
    CampaignBuildingLevelFactorialEffectJunctions.Entry = Entry;
})(CampaignBuildingLevelFactorialEffectJunctions || (CampaignBuildingLevelFactorialEffectJunctions = {}));

var CampaignCameraMapBounds;
(function (CampaignCameraMapBounds) {
    CampaignCameraMapBounds.KEY = new CollectionKey("campaign_camera_map_bounds");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaign = values["campaign"];
            this.minX = values["min_x"];
            this.minY = values["min_y"];
            this.maxX = values["max_x"];
            this.maxY = values["max_y"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
    }
    CampaignCameraMapBounds.Entry = Entry;
})(CampaignCameraMapBounds || (CampaignCameraMapBounds = {}));

var CampaignCharacterAnimStatus$1;
(function (CampaignCharacterAnimStatus) {
    CampaignCharacterAnimStatus.KEY = new CollectionKey("campaign_character_anim_status");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.status = values["status"];
        }
    }
    CampaignCharacterAnimStatus.Entry = Entry;
})(CampaignCharacterAnimStatus$1 || (CampaignCharacterAnimStatus$1 = {}));

var CampaignCharacterArtSetCampaignJunctions$1;
(function (CampaignCharacterArtSetCampaignJunctions) {
    CampaignCharacterArtSetCampaignJunctions.KEY = new CollectionKey("campaign_character_art_set_campaign_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._artSetId = values["art_set_id"];
            this._campaign = values["campaign"];
        }
        get artSetId() {
            const collection = this.collectionCache.getCollection(CampaignCharacterArtSets$1.KEY, CampaignCharacterArtSets$1.Entry);
            return collection.find(entry => entry.artSetId === this._artSetId);
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
    }
    CampaignCharacterArtSetCampaignJunctions.Entry = Entry;
})(CampaignCharacterArtSetCampaignJunctions$1 || (CampaignCharacterArtSetCampaignJunctions$1 = {}));

var CampaignCharacterAttributeEffects$1;
(function (CampaignCharacterAttributeEffects) {
    CampaignCharacterAttributeEffects.KEY = new CollectionKey("campaign_character_attribute_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._agentRecord = values["agent_record"];
            this._attributeRecord = values["attribute_record"];
            this.attributeLevel = values["attribute_level"];
            this._effectRecord = values["effect_record"];
            this._effectScope = values["effect_scope"];
            this.effectValue = values["effect_value"];
            this._cultureRecord = values["culture_record"];
            this._subcultureRecord = values["subculture_record"];
            this._factionRecord = values["faction_record"];
            this._campaignRecord = values["campaign_record"];
        }
        get agentRecord() {
            const collection = this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry);
            return collection.find(entry => entry.key === this._agentRecord);
        }
        get attributeRecord() {
            const collection = this.collectionCache.getCollection(AgentAttributes$1.KEY, AgentAttributes$1.Entry);
            return collection.find(entry => entry.key === this._attributeRecord);
        }
        get effectRecord() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effectRecord);
        }
        get effectScope() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes$1.KEY, CampaignEffectScopes$1.Entry);
            return collection.find(entry => entry.key === this._effectScope);
        }
        get cultureRecord() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._cultureRecord);
        }
        get subcultureRecord() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subcultureRecord);
        }
        get factionRecord() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._factionRecord);
        }
        get campaignRecord() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaignRecord);
        }
    }
    CampaignCharacterAttributeEffects.Entry = Entry;
})(CampaignCharacterAttributeEffects$1 || (CampaignCharacterAttributeEffects$1 = {}));

var CampaignCharacterUniformAncillaryJunctions;
(function (CampaignCharacterUniformAncillaryJunctions) {
    CampaignCharacterUniformAncillaryJunctions.KEY = new CollectionKey("campaign_character_uniform_ancillary_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._artSet = values["art_set"];
            this._ancillary = values["ancillary"];
            this._uniform = values["uniform"];
        }
        get artSet() {
            const collection = this.collectionCache.getCollection(CampaignCharacterArtSets$1.KEY, CampaignCharacterArtSets$1.Entry);
            return collection.find(entry => entry.artSetId === this._artSet);
        }
        get ancillary() {
            const collection = this.collectionCache.getCollection(Ancillaries$1.KEY, Ancillaries$1.Entry);
            return collection.find(entry => entry._key === this._ancillary);
        }
        get uniform() {
            const collection = this.collectionCache.getCollection(AgentUniforms$1.KEY, AgentUniforms$1.Entry);
            return collection.find(entry => entry.uniformName === this._uniform);
        }
    }
    CampaignCharacterUniformAncillaryJunctions.Entry = Entry;
})(CampaignCharacterUniformAncillaryJunctions || (CampaignCharacterUniformAncillaryJunctions = {}));

var CampaignClimateChangePhases;
(function (CampaignClimateChangePhases) {
    CampaignClimateChangePhases.KEY = new CollectionKey("campaign_climate_change_phases");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.campaign = values["campaign"];
            this.phase = values["phase"];
            this.roundThreshold = values["round_threshold"];
            this.humanImperiumThreshold = values["human_imperium_threshold"];
        }
    }
    CampaignClimateChangePhases.Entry = Entry;
})(CampaignClimateChangePhases || (CampaignClimateChangePhases = {}));

var CampaignCompanionArmyDetails;
(function (CampaignCompanionArmyDetails) {
    CampaignCompanionArmyDetails.KEY = new CollectionKey("campaign_companion_army_details");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._group = values["group"];
            this.armyType = values["army_type"];
        }
        get group() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._group);
        }
    }
    CampaignCompanionArmyDetails.Entry = Entry;
})(CampaignCompanionArmyDetails || (CampaignCompanionArmyDetails = {}));

var CampaignCulturalRelations;
(function (CampaignCulturalRelations) {
    CampaignCulturalRelations.KEY = new CollectionKey("campaign_cultural_relations");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._source = values["source"];
            this._target = values["target"];
            this.positiveAttitudeMultiplier = values["positive_attitude_multiplier"];
            this.negativeAttitudeMultiplier = values["negative_attitude_multiplier"];
            this.attitudeBase = values["attitude_base"];
            this._campaign = values["campaign"];
        }
        get source() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._source);
        }
        get target() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._target);
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
    }
    CampaignCulturalRelations.Entry = Entry;
})(CampaignCulturalRelations || (CampaignCulturalRelations = {}));

var CampaignDifficultyHandicapEffects$1;
(function (CampaignDifficultyHandicapEffects) {
    CampaignDifficultyHandicapEffects.KEY = new CollectionKey("campaign_difficulty_handicap_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.campaignDifficultyHandicap = values["campaign_difficulty_handicap"];
            this.human = !!values["human"];
            this._effect = values["effect"];
            this.effectValue = values["effect_value"];
            this._optionalCampaignKey = values["optional_campaign_key"];
            this._effectScope = values["effect_scope"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get optionalCampaignKey() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._optionalCampaignKey);
        }
        get effectScope() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes$1.KEY, CampaignEffectScopes$1.Entry);
            return collection.find(entry => entry.key === this._effectScope);
        }
    }
    CampaignDifficultyHandicapEffects.Entry = Entry;
})(CampaignDifficultyHandicapEffects$1 || (CampaignDifficultyHandicapEffects$1 = {}));

var CampaignEffectScopeAgentJunctions$1;
(function (CampaignEffectScopeAgentJunctions) {
    CampaignEffectScopeAgentJunctions.KEY = new CollectionKey("campaign_effect_scope_agent_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignEffectScopeKey = values["campaign_effect_scope_key"];
            this._agentKey = values["agent_key"];
        }
        get campaignEffectScopeKey() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes$1.KEY, CampaignEffectScopes$1.Entry);
            return collection.find(entry => entry.key === this._campaignEffectScopeKey);
        }
        get agentKey() {
            const collection = this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry);
            return collection.find(entry => entry.key === this._agentKey);
        }
    }
    CampaignEffectScopeAgentJunctions.Entry = Entry;
})(CampaignEffectScopeAgentJunctions$1 || (CampaignEffectScopeAgentJunctions$1 = {}));

var CampaignEffectScopeCategories;
(function (CampaignEffectScopeCategories) {
    CampaignEffectScopeCategories.KEY = new CollectionKey("campaign_effect_scope_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.nameLocalised = values["name_localised"];
            this.sortOrder = values["sort_order"];
            this.categoryIcon = values["category_icon"];
        }
    }
    CampaignEffectScopeCategories.Entry = Entry;
})(CampaignEffectScopeCategories || (CampaignEffectScopeCategories = {}));

var CampaignEffectScopeCharacterForceRelationships$1;
(function (CampaignEffectScopeCharacterForceRelationships) {
    CampaignEffectScopeCharacterForceRelationships.KEY = new CollectionKey("campaign_effect_scope_character_force_relationships");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignEffectScopeCharacterForceRelationships.Entry = Entry;
})(CampaignEffectScopeCharacterForceRelationships$1 || (CampaignEffectScopeCharacterForceRelationships$1 = {}));

var CampaignEffectScopeCharacterForceRelationshipJunctions$1;
(function (CampaignEffectScopeCharacterForceRelationshipJunctions) {
    CampaignEffectScopeCharacterForceRelationshipJunctions.KEY = new CollectionKey("campaign_effect_scope_character_force_relationship_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignEffectScopeKey = values["campaign_effect_scope_key"];
            this._forceRelationshipKey = values["force_relationship_key"];
        }
        get campaignEffectScopeKey() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes$1.KEY, CampaignEffectScopes$1.Entry);
            return collection.find(entry => entry.key === this._campaignEffectScopeKey);
        }
        get forceRelationshipKey() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopeCharacterForceRelationships$1.KEY, CampaignEffectScopeCharacterForceRelationships$1.Entry);
            return collection.find(entry => entry.key === this._forceRelationshipKey);
        }
    }
    CampaignEffectScopeCharacterForceRelationshipJunctions.Entry = Entry;
})(CampaignEffectScopeCharacterForceRelationshipJunctions$1 || (CampaignEffectScopeCharacterForceRelationshipJunctions$1 = {}));

var CampaignEffectScopeCharacterUnitRelationships$1;
(function (CampaignEffectScopeCharacterUnitRelationships) {
    CampaignEffectScopeCharacterUnitRelationships.KEY = new CollectionKey("campaign_effect_scope_character_unit_relationships");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignEffectScopeCharacterUnitRelationships.Entry = Entry;
})(CampaignEffectScopeCharacterUnitRelationships$1 || (CampaignEffectScopeCharacterUnitRelationships$1 = {}));

var CampaignEffectScopeCharacterUnitRelationshipJunctions$1;
(function (CampaignEffectScopeCharacterUnitRelationshipJunctions) {
    CampaignEffectScopeCharacterUnitRelationshipJunctions.KEY = new CollectionKey("campaign_effect_scope_character_unit_relationship_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignEffectScopeKey = values["campaign_effect_scope_key"];
            this._unitRelationshipKey = values["unit_relationship_key"];
        }
        get campaignEffectScopeKey() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes$1.KEY, CampaignEffectScopes$1.Entry);
            return collection.find(entry => entry.key === this._campaignEffectScopeKey);
        }
        get unitRelationshipKey() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopeCharacterUnitRelationships$1.KEY, CampaignEffectScopeCharacterUnitRelationships$1.Entry);
            return collection.find(entry => entry.key === this._unitRelationshipKey);
        }
    }
    CampaignEffectScopeCharacterUnitRelationshipJunctions.Entry = Entry;
})(CampaignEffectScopeCharacterUnitRelationshipJunctions$1 || (CampaignEffectScopeCharacterUnitRelationshipJunctions$1 = {}));

var CampaignEffectScopeToCategoryJunctions;
(function (CampaignEffectScopeToCategoryJunctions) {
    CampaignEffectScopeToCategoryJunctions.KEY = new CollectionKey("campaign_effect_scope_to_category_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._scope = values["scope"];
            this._category = values["category"];
        }
        get scope() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes$1.KEY, CampaignEffectScopes$1.Entry);
            return collection.find(entry => entry.key === this._scope);
        }
        get category() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopeCategories.KEY, CampaignEffectScopeCategories.Entry);
            return collection.find(entry => entry.key === this._category);
        }
    }
    CampaignEffectScopeToCategoryJunctions.Entry = Entry;
})(CampaignEffectScopeToCategoryJunctions || (CampaignEffectScopeToCategoryJunctions = {}));

var CampaignFactionFeatureForestOverrides;
(function (CampaignFactionFeatureForestOverrides) {
    CampaignFactionFeatureForestOverrides.KEY = new CollectionKey("campaign_faction_feature_forest_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaign = values["campaign"];
            this._faction = values["faction"];
            this._featureForest = values["feature_forest"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get featureForest() {
            const collection = this.collectionCache.getCollection(FactionFeatureForests.KEY, FactionFeatureForests.Entry);
            return collection.find(entry => entry.key === this._featureForest);
        }
    }
    CampaignFactionFeatureForestOverrides.Entry = Entry;
})(CampaignFactionFeatureForestOverrides || (CampaignFactionFeatureForestOverrides = {}));

var CampaignFactionReligionEffects;
(function (CampaignFactionReligionEffects) {
    CampaignFactionReligionEffects.KEY = new CollectionKey("campaign_faction_religion_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._religion = values["religion"];
            this.percentageUpperThreshold = values["percentage_upper_threshold"];
            this._effectsBundle = values["effects_bundle"];
        }
        get religion() {
            const collection = this.collectionCache.getCollection(Religions$1.KEY, Religions$1.Entry);
            return collection.find(entry => entry.religionKey === this._religion);
        }
        get effectsBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectsBundle);
        }
    }
    CampaignFactionReligionEffects.Entry = Entry;
})(CampaignFactionReligionEffects || (CampaignFactionReligionEffects = {}));

var CampaignFactorialCategoryBaseThresholds;
(function (CampaignFactorialCategoryBaseThresholds) {
    CampaignFactorialCategoryBaseThresholds.KEY = new CollectionKey("campaign_factorial_category_base_thresholds");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._category = values["category"];
            this.baseThreshold = values["base_threshold"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(CampaignFactorialCategoryJunctions.KEY, CampaignFactorialCategoryJunctions.Entry);
            return collection.find(entry => entry.key === this._category);
        }
    }
    CampaignFactorialCategoryBaseThresholds.Entry = Entry;
})(CampaignFactorialCategoryBaseThresholds || (CampaignFactorialCategoryBaseThresholds = {}));

var CampaignFeatureIds;
(function (CampaignFeatureIds) {
    CampaignFeatureIds.KEY = new CollectionKey("campaign_feature_ids");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
        }
    }
    CampaignFeatureIds.Entry = Entry;
})(CampaignFeatureIds || (CampaignFeatureIds = {}));

var CampaignFeatures;
(function (CampaignFeatures) {
    CampaignFeatures.KEY = new CollectionKey("campaign_features");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._feature = values["feature"];
            this._group = values["group"];
            this.available = !!values["available"];
        }
        get feature() {
            const collection = this.collectionCache.getCollection(CampaignFeatureIds.KEY, CampaignFeatureIds.Entry);
            return collection.find(entry => entry.id === this._feature);
        }
        get group() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._group);
        }
    }
    CampaignFeatures.Entry = Entry;
})(CampaignFeatures || (CampaignFeatures = {}));

var CampaignGroupAbandonedCulturesOverrides;
(function (CampaignGroupAbandonedCulturesOverrides) {
    CampaignGroupAbandonedCulturesOverrides.KEY = new CollectionKey("campaign_group_abandoned_cultures_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignGroup = values["campaign_group"];
            this._culture = values["culture"];
        }
        get campaignGroup() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._campaignGroup);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
    }
    CampaignGroupAbandonedCulturesOverrides.Entry = Entry;
})(CampaignGroupAbandonedCulturesOverrides || (CampaignGroupAbandonedCulturesOverrides = {}));

var CampaignGroupAgentActionCompositeScenes;
(function (CampaignGroupAgentActionCompositeScenes) {
    CampaignGroupAgentActionCompositeScenes.KEY = new CollectionKey("campaign_group_agent_action_composite_scenes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignGroup = values["campaign_group"];
            this._garrisonScene = values["garrison_scene"];
            this._characterScene = values["character_scene"];
        }
        get campaignGroup() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._campaignGroup);
        }
        get garrisonScene() {
            const collection = this.collectionCache.getCollection(CampaignCompositeScenes.KEY, CampaignCompositeScenes.Entry);
            return collection.find(entry => entry.id === this._garrisonScene);
        }
        get characterScene() {
            const collection = this.collectionCache.getCollection(CampaignCompositeScenes.KEY, CampaignCompositeScenes.Entry);
            return collection.find(entry => entry.id === this._characterScene);
        }
    }
    CampaignGroupAgentActionCompositeScenes.Entry = Entry;
})(CampaignGroupAgentActionCompositeScenes || (CampaignGroupAgentActionCompositeScenes = {}));

var CampaignGroupAgentActionForeignSlots;
(function (CampaignGroupAgentActionForeignSlots) {
    CampaignGroupAgentActionForeignSlots.KEY = new CollectionKey("campaign_group_agent_action_foreign_slots");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignGroup = values["campaign_group"];
            this._slotSet = values["slot_set"];
        }
        get campaignGroup() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._campaignGroup);
        }
        get slotSet() {
            const collection = this.collectionCache.getCollection(SlotSets.KEY, SlotSets.Entry);
            return collection.find(entry => entry.key === this._slotSet);
        }
    }
    CampaignGroupAgentActionForeignSlots.Entry = Entry;
})(CampaignGroupAgentActionForeignSlots || (CampaignGroupAgentActionForeignSlots = {}));

var PooledResourceFactors;
(function (PooledResourceFactors) {
    PooledResourceFactors.KEY = new CollectionKey("pooled_resource_factors");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.minimum = values["minimum"];
            this.maximum = values["maximum"];
            this.displayNameNegative = values["display_name_negative"];
            this.displayNamePositive = values["display_name_positive"];
        }
    }
    PooledResourceFactors.Entry = Entry;
})(PooledResourceFactors || (PooledResourceFactors = {}));

var PooledResources;
(function (PooledResources) {
    PooledResources.KEY = new CollectionKey("pooled_resources");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.displayName = values["display_name"];
            this.minimum = values["minimum"];
            this.maximum = values["maximum"];
            this.persistentFactors = !!values["persistent_factors"];
            this.positiveFactorsDisplayName = values["positive_factors_display_name"];
            this.negativeFactorsDisplayName = values["negative_factors_display_name"];
            this.description = values["description"];
            this.aiIgnored = !!values["ai_ignored"];
            this._defaultFactor = values["default_factor"];
            this.optionalIconPath = values["optional_icon_path"];
        }
        get defaultFactor() {
            const collection = this.collectionCache.getCollection(PooledResourceFactors.KEY, PooledResourceFactors.Entry);
            return collection.find(entry => entry.key === this._defaultFactor);
        }
    }
    PooledResources.Entry = Entry;
})(PooledResources || (PooledResources = {}));

var CampaignGroupCraftingInfos;
(function (CampaignGroupCraftingInfos) {
    CampaignGroupCraftingInfos.KEY = new CollectionKey("campaign_group_crafting_infos");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignGroup = values["campaign_group"];
            this._uniqueResource = values["unique_resource"];
        }
        get campaignGroup() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._campaignGroup);
        }
        get uniqueResource() {
            const collection = this.collectionCache.getCollection(PooledResources.KEY, PooledResources.Entry);
            return collection.find(entry => entry.key === this._uniqueResource);
        }
    }
    CampaignGroupCraftingInfos.Entry = Entry;
})(CampaignGroupCraftingInfos || (CampaignGroupCraftingInfos = {}));

var CampaignGroupFoodEffects;
(function (CampaignGroupFoodEffects) {
    CampaignGroupFoodEffects.KEY = new CollectionKey("campaign_group_food_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._group = values["group"];
            this._effectBundle = values["effect_bundle"];
        }
        get group() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._group);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    CampaignGroupFoodEffects.Entry = Entry;
})(CampaignGroupFoodEffects || (CampaignGroupFoodEffects = {}));

var UniqueAgentSpawnBehaviours;
(function (UniqueAgentSpawnBehaviours) {
    UniqueAgentSpawnBehaviours.KEY = new CollectionKey("unique_agent_spawn_behaviours");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
        }
    }
    UniqueAgentSpawnBehaviours.Entry = Entry;
})(UniqueAgentSpawnBehaviours || (UniqueAgentSpawnBehaviours = {}));

var UniqueAgents;
(function (UniqueAgents) {
    UniqueAgents.KEY = new CollectionKey("unique_agents");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._agentSubtype = values["agent_subtype"];
            this._forename = values["forename"];
            this._surname = values["surname"];
            this._otherName = values["other_name"];
            this._clanName = values["clan_name"];
            this._agentType = values["agent_type"];
            this._spawnBehaviour = values["spawn_behaviour"];
            this.spawnViaUi = !!values["spawn_via_ui"];
        }
        get agentSubtype() {
            const collection = this.collectionCache.getCollection(AgentSubtypes.KEY, AgentSubtypes.Entry);
            return collection.find(entry => entry.key === this._agentSubtype);
        }
        get forename() {
            const collection = this.collectionCache.getCollection(Names$1.KEY, Names$1.Entry);
            return collection.find(entry => entry.id === this._forename);
        }
        get surname() {
            const collection = this.collectionCache.getCollection(Names$1.KEY, Names$1.Entry);
            return collection.find(entry => entry.id === this._surname);
        }
        get otherName() {
            const collection = this.collectionCache.getCollection(Names$1.KEY, Names$1.Entry);
            return collection.find(entry => entry.id === this._otherName);
        }
        get clanName() {
            const collection = this.collectionCache.getCollection(Names$1.KEY, Names$1.Entry);
            return collection.find(entry => entry.id === this._clanName);
        }
        get agentType() {
            const collection = this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry);
            return collection.find(entry => entry.key === this._agentType);
        }
        get spawnBehaviour() {
            const collection = this.collectionCache.getCollection(UniqueAgentSpawnBehaviours.KEY, UniqueAgentSpawnBehaviours.Entry);
            return collection.find(entry => entry.id === this._spawnBehaviour);
        }
    }
    UniqueAgents.Entry = Entry;
})(UniqueAgents || (UniqueAgents = {}));

var CampaignGroupFoodUniqueAgentCharges;
(function (CampaignGroupFoodUniqueAgentCharges) {
    CampaignGroupFoodUniqueAgentCharges.KEY = new CollectionKey("campaign_group_food_unique_agent_charges");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignGroup = values["campaign_group"];
            this._uniqueAgent = values["unique_agent"];
            this.charges = values["charges"];
        }
        get campaignGroup() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._campaignGroup);
        }
        get uniqueAgent() {
            const collection = this.collectionCache.getCollection(UniqueAgents.KEY, UniqueAgents.Entry);
            return collection.find(entry => entry._agentSubtype === this._uniqueAgent);
        }
    }
    CampaignGroupFoodUniqueAgentCharges.Entry = Entry;
})(CampaignGroupFoodUniqueAgentCharges || (CampaignGroupFoodUniqueAgentCharges = {}));

var CdirEventsCategories;
(function (CdirEventsCategories) {
    CdirEventsCategories.KEY = new CollectionKey("cdir_events_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.categoryKey = values["category_key"];
            this.onScreenName = values["on_screen_name"];
        }
    }
    CdirEventsCategories.Entry = Entry;
})(CdirEventsCategories || (CdirEventsCategories = {}));

var Dilemmas$1;
(function (Dilemmas) {
    Dilemmas.KEY = new CollectionKey("dilemmas");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.localisedTitle = values["localised_title"];
            this.localisedDescription = values["localised_description"];
            this.uiImage = values["ui_image"];
            this.generate = !!values["generate"];
            this.prioritized = !!values["prioritized"];
            this._eventCategory = values["event_category"];
            this.soundPopupOverride = values["sound_popup_override"];
            this.soundClickOverride = values["sound_click_override"];
        }
        get eventCategory() {
            const collection = this.collectionCache.getCollection(CdirEventsCategories.KEY, CdirEventsCategories.Entry);
            return collection.find(entry => entry.categoryKey === this._eventCategory);
        }
    }
    Dilemmas.Entry = Entry;
})(Dilemmas$1 || (Dilemmas$1 = {}));

var CampaignGroupLoyaltyDilemmas;
(function (CampaignGroupLoyaltyDilemmas) {
    CampaignGroupLoyaltyDilemmas.KEY = new CollectionKey("campaign_group_loyalty_dilemmas");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignGroup = values["campaign_group"];
            this._dilemma = values["dilemma"];
        }
        get campaignGroup() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._campaignGroup);
        }
        get dilemma() {
            const collection = this.collectionCache.getCollection(Dilemmas$1.KEY, Dilemmas$1.Entry);
            return collection.find(entry => entry.key === this._dilemma);
        }
    }
    CampaignGroupLoyaltyDilemmas.Entry = Entry;
})(CampaignGroupLoyaltyDilemmas || (CampaignGroupLoyaltyDilemmas = {}));

var CampaignGroupMembers;
(function (CampaignGroupMembers) {
    CampaignGroupMembers.KEY = new CollectionKey("campaign_group_members");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._group = values["group"];
            this.priority = values["priority"];
        }
        get group() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._group);
        }
    }
    CampaignGroupMembers.Entry = Entry;
})(CampaignGroupMembers || (CampaignGroupMembers = {}));

var CampaignGroupMemberCriteriaActionResults;
(function (CampaignGroupMemberCriteriaActionResults) {
    CampaignGroupMemberCriteriaActionResults.KEY = new CollectionKey("campaign_group_member_criteria_action_results");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._member = values["member"];
            this._actionResult = values["action_result"];
        }
        get member() {
            const collection = this.collectionCache.getCollection(CampaignGroupMembers.KEY, CampaignGroupMembers.Entry);
            return collection.find(entry => entry.id === this._member);
        }
        get actionResult() {
            const collection = this.collectionCache.getCollection(ActionResults$1.KEY, ActionResults$1.Entry);
            return collection.find(entry => entry.key === this._actionResult);
        }
    }
    CampaignGroupMemberCriteriaActionResults.Entry = Entry;
})(CampaignGroupMemberCriteriaActionResults || (CampaignGroupMemberCriteriaActionResults = {}));

var CampaignGroupMemberCriteriaActorGenders;
(function (CampaignGroupMemberCriteriaActorGenders) {
    CampaignGroupMemberCriteriaActorGenders.KEY = new CollectionKey("campaign_group_member_criteria_actor_genders");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._member = values["member"];
            this._gender = values["gender"];
        }
        get member() {
            const collection = this.collectionCache.getCollection(CampaignGroupMembers.KEY, CampaignGroupMembers.Entry);
            return collection.find(entry => entry.id === this._member);
        }
        get gender() {
            const collection = this.collectionCache.getCollection(Genders$1.KEY, Genders$1.Entry);
            return collection.find(entry => entry.gender === this._gender);
        }
    }
    CampaignGroupMemberCriteriaActorGenders.Entry = Entry;
})(CampaignGroupMemberCriteriaActorGenders || (CampaignGroupMemberCriteriaActorGenders = {}));

var CampaignGroupMemberCriteriaAgentSubtypes;
(function (CampaignGroupMemberCriteriaAgentSubtypes) {
    CampaignGroupMemberCriteriaAgentSubtypes.KEY = new CollectionKey("campaign_group_member_criteria_agent_subtypes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._member = values["member"];
            this._agentSubtype = values["agent_subtype"];
        }
        get member() {
            const collection = this.collectionCache.getCollection(CampaignGroupMembers.KEY, CampaignGroupMembers.Entry);
            return collection.find(entry => entry.id === this._member);
        }
        get agentSubtype() {
            const collection = this.collectionCache.getCollection(AgentSubtypes.KEY, AgentSubtypes.Entry);
            return collection.find(entry => entry.key === this._agentSubtype);
        }
    }
    CampaignGroupMemberCriteriaAgentSubtypes.Entry = Entry;
})(CampaignGroupMemberCriteriaAgentSubtypes || (CampaignGroupMemberCriteriaAgentSubtypes = {}));

var CampaignGroupMemberCriteriaAgentTypes;
(function (CampaignGroupMemberCriteriaAgentTypes) {
    CampaignGroupMemberCriteriaAgentTypes.KEY = new CollectionKey("campaign_group_member_criteria_agent_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._member = values["member"];
            this._agentType = values["agent_type"];
        }
        get member() {
            const collection = this.collectionCache.getCollection(CampaignGroupMembers.KEY, CampaignGroupMembers.Entry);
            return collection.find(entry => entry.id === this._member);
        }
        get agentType() {
            const collection = this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry);
            return collection.find(entry => entry.key === this._agentType);
        }
    }
    CampaignGroupMemberCriteriaAgentTypes.Entry = Entry;
})(CampaignGroupMemberCriteriaAgentTypes || (CampaignGroupMemberCriteriaAgentTypes = {}));

var CampaignMapAttritionTypes$1;
(function (CampaignMapAttritionTypes) {
    CampaignMapAttritionTypes.KEY = new CollectionKey("campaign_map_attrition_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignMapAttritionTypes.Entry = Entry;
})(CampaignMapAttritionTypes$1 || (CampaignMapAttritionTypes$1 = {}));

var CampaignMapAttritionDamages$1;
(function (CampaignMapAttritionDamages) {
    CampaignMapAttritionDamages.KEY = new CollectionKey("campaign_map_attrition_damages");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.percentUnitDamage = values["percent_unit_damage"];
        }
    }
    CampaignMapAttritionDamages.Entry = Entry;
})(CampaignMapAttritionDamages$1 || (CampaignMapAttritionDamages$1 = {}));

var MessageEventLayoutTypes$1;
(function (MessageEventLayoutTypes) {
    MessageEventLayoutTypes.KEY = new CollectionKey("message_event_layout_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.type = values["Type"];
        }
    }
    MessageEventLayoutTypes.Entry = Entry;
})(MessageEventLayoutTypes$1 || (MessageEventLayoutTypes$1 = {}));

var MessageEvents$1;
(function (MessageEvents) {
    MessageEvents.KEY = new CollectionKey("message_events");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.event = values["event"];
            this._layout = values["layout"];
            this.requiresResponse = !!values["requires_response"];
            this.instantOpen = !!values["instant_open"];
            this.priority = values["priority"];
        }
        get layout() {
            const collection = this.collectionCache.getCollection(MessageEventLayoutTypes$1.KEY, MessageEventLayoutTypes$1.Entry);
            return collection.find(entry => entry.type === this._layout);
        }
    }
    MessageEvents.Entry = Entry;
})(MessageEvents$1 || (MessageEvents$1 = {}));

var CampaignMapAttritions$1;
(function (CampaignMapAttritions) {
    CampaignMapAttritions.KEY = new CollectionKey("campaign_map_attritions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._type = values["type"];
            this._damage = values["damage"];
            this.campaignMapTooltip = values["campaign_map_tooltip"];
            this.unitCardTooltip = values["unit_card_tooltip"];
            this.unitImmunityText = values["unit_immunity_text"];
            this._messageEventAssociation = values["message_event_association"];
            this.isSnow = !!values["is_snow"];
        }
        get type() {
            const collection = this.collectionCache.getCollection(CampaignMapAttritionTypes$1.KEY, CampaignMapAttritionTypes$1.Entry);
            return collection.find(entry => entry.key === this._type);
        }
        get damage() {
            const collection = this.collectionCache.getCollection(CampaignMapAttritionDamages$1.KEY, CampaignMapAttritionDamages$1.Entry);
            return collection.find(entry => entry.key === this._damage);
        }
        get messageEventAssociation() {
            const collection = this.collectionCache.getCollection(MessageEvents$1.KEY, MessageEvents$1.Entry);
            return collection.find(entry => entry.event === this._messageEventAssociation);
        }
    }
    CampaignMapAttritions.Entry = Entry;
})(CampaignMapAttritions$1 || (CampaignMapAttritions$1 = {}));

var CampaignGroupMemberCriteriaAttritionTypes;
(function (CampaignGroupMemberCriteriaAttritionTypes) {
    CampaignGroupMemberCriteriaAttritionTypes.KEY = new CollectionKey("campaign_group_member_criteria_attrition_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._member = values["member"];
            this._attritionType = values["attrition_type"];
        }
        get member() {
            const collection = this.collectionCache.getCollection(CampaignGroupMembers.KEY, CampaignGroupMembers.Entry);
            return collection.find(entry => entry.id === this._member);
        }
        get attritionType() {
            const collection = this.collectionCache.getCollection(CampaignMapAttritions$1.KEY, CampaignMapAttritions$1.Entry);
            return collection.find(entry => entry.key === this._attritionType);
        }
    }
    CampaignGroupMemberCriteriaAttritionTypes.Entry = Entry;
})(CampaignGroupMemberCriteriaAttritionTypes || (CampaignGroupMemberCriteriaAttritionTypes = {}));

var CampaignGroupMemberCriteriaCampaigns;
(function (CampaignGroupMemberCriteriaCampaigns) {
    CampaignGroupMemberCriteriaCampaigns.KEY = new CollectionKey("campaign_group_member_criteria_campaigns");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._member = values["member"];
            this._campaign = values["campaign"];
        }
        get member() {
            const collection = this.collectionCache.getCollection(CampaignGroupMembers.KEY, CampaignGroupMembers.Entry);
            return collection.find(entry => entry.id === this._member);
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
    }
    CampaignGroupMemberCriteriaCampaigns.Entry = Entry;
})(CampaignGroupMemberCriteriaCampaigns || (CampaignGroupMemberCriteriaCampaigns = {}));

var SettlementClimateTypes;
(function (SettlementClimateTypes) {
    SettlementClimateTypes.KEY = new CollectionKey("settlement_climate_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.type = values["type"];
            this.uiIconImage = values["ui_icon_image"];
            this.uiBackgroundImage = values["ui_background_image"];
            this.uiName = values["ui_name"];
            this.uiDescription = values["ui_description"];
        }
    }
    SettlementClimateTypes.Entry = Entry;
})(SettlementClimateTypes || (SettlementClimateTypes = {}));

var CampaignGroupMemberCriteriaClimates;
(function (CampaignGroupMemberCriteriaClimates) {
    CampaignGroupMemberCriteriaClimates.KEY = new CollectionKey("campaign_group_member_criteria_climates");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._member = values["member"];
            this._climate = values["climate"];
        }
        get member() {
            const collection = this.collectionCache.getCollection(CampaignGroupMembers.KEY, CampaignGroupMembers.Entry);
            return collection.find(entry => entry.id === this._member);
        }
        get climate() {
            const collection = this.collectionCache.getCollection(SettlementClimateTypes.KEY, SettlementClimateTypes.Entry);
            return collection.find(entry => entry.type === this._climate);
        }
    }
    CampaignGroupMemberCriteriaClimates.Entry = Entry;
})(CampaignGroupMemberCriteriaClimates || (CampaignGroupMemberCriteriaClimates = {}));

var CampaignGroupMemberCriteriaCultures;
(function (CampaignGroupMemberCriteriaCultures) {
    CampaignGroupMemberCriteriaCultures.KEY = new CollectionKey("campaign_group_member_criteria_cultures");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._member = values["member"];
            this._culture = values["culture"];
        }
        get member() {
            const collection = this.collectionCache.getCollection(CampaignGroupMembers.KEY, CampaignGroupMembers.Entry);
            return collection.find(entry => entry.id === this._member);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
    }
    CampaignGroupMemberCriteriaCultures.Entry = Entry;
})(CampaignGroupMemberCriteriaCultures || (CampaignGroupMemberCriteriaCultures = {}));

var SettlementOccupationOptions;
(function (SettlementOccupationOptions) {
    SettlementOccupationOptions.KEY = new CollectionKey("settlement_occupation_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.sortOrder = values["sort_order"];
        }
    }
    SettlementOccupationOptions.Entry = Entry;
})(SettlementOccupationOptions || (SettlementOccupationOptions = {}));

var CultureSettlementOccupationOptions$1;
(function (CultureSettlementOccupationOptions) {
    CultureSettlementOccupationOptions.KEY = new CollectionKey("culture_settlement_occupation_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._group = values["group"];
            this._option = values["option"];
            this._actingArmyFactionEffectBundle = values["acting_army_faction_effect_bundle"];
            this.actingArmyFactionEffectBundleTurns = values["acting_army_faction_effect_bundle_turns"];
            this._targetSettlementFactionEffectBundle = values["target_settlement_faction_effect_bundle"];
            this.targetSettlementFactionEffectBundleTurns = values["target_settlement_faction_effect_bundle_turns"];
            this._actingArmyEffectBundle = values["acting_army_effect_bundle"];
            this.actingArmyEffectBundleTurns = values["acting_army_effect_bundle_turns"];
            this.id = values["id"];
            this.tooltip = values["tooltip"];
            this.icon = values["icon"];
            this.baseLoot = values["base_loot"];
            this.buildingLootMod = values["building_loot_mod"];
            this._resourceTransaction = values["resource_transaction"];
        }
        get group() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._group);
        }
        get option() {
            const collection = this.collectionCache.getCollection(SettlementOccupationOptions.KEY, SettlementOccupationOptions.Entry);
            return collection.find(entry => entry.key === this._option);
        }
        get actingArmyFactionEffectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._actingArmyFactionEffectBundle);
        }
        get targetSettlementFactionEffectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._targetSettlementFactionEffectBundle);
        }
        get actingArmyEffectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._actingArmyEffectBundle);
        }
        get resourceTransaction() {
            const collection = this.collectionCache.getCollection(ResourceCosts.KEY, ResourceCosts.Entry);
            return collection.find(entry => entry.id === this._resourceTransaction);
        }
    }
    CultureSettlementOccupationOptions.Entry = Entry;
})(CultureSettlementOccupationOptions$1 || (CultureSettlementOccupationOptions$1 = {}));

var CampaignGroupMemberCriteriaCultureSettlementOccupationOptions;
(function (CampaignGroupMemberCriteriaCultureSettlementOccupationOptions) {
    CampaignGroupMemberCriteriaCultureSettlementOccupationOptions.KEY = new CollectionKey("campaign_group_member_criteria_culture_settlement_occupation_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._member = values["member"];
            this._cultureSettlementOccupationOption = values["culture_settlement_occupation_option"];
        }
        get member() {
            const collection = this.collectionCache.getCollection(CampaignGroupMembers.KEY, CampaignGroupMembers.Entry);
            return collection.find(entry => entry.id === this._member);
        }
        get cultureSettlementOccupationOption() {
            const collection = this.collectionCache.getCollection(CultureSettlementOccupationOptions$1.KEY, CultureSettlementOccupationOptions$1.Entry);
            return collection.find(entry => entry.id === this._cultureSettlementOccupationOption);
        }
    }
    CampaignGroupMemberCriteriaCultureSettlementOccupationOptions.Entry = Entry;
})(CampaignGroupMemberCriteriaCultureSettlementOccupationOptions || (CampaignGroupMemberCriteriaCultureSettlementOccupationOptions = {}));

var DiplomacyNegotiationAttitudes$1;
(function (DiplomacyNegotiationAttitudes) {
    DiplomacyNegotiationAttitudes.KEY = new CollectionKey("diplomacy_negotiation_attitudes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.minimumAttitude = values["minimum_attitude"];
            this.maximumAttitude = values["maximum_attitude"];
        }
    }
    DiplomacyNegotiationAttitudes.Entry = Entry;
})(DiplomacyNegotiationAttitudes$1 || (DiplomacyNegotiationAttitudes$1 = {}));

var CampaignGroupMemberCriteriaDiplomaticAttitudes;
(function (CampaignGroupMemberCriteriaDiplomaticAttitudes) {
    CampaignGroupMemberCriteriaDiplomaticAttitudes.KEY = new CollectionKey("campaign_group_member_criteria_diplomatic_attitudes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._member = values["member"];
            this._attitude = values["attitude"];
        }
        get member() {
            const collection = this.collectionCache.getCollection(CampaignGroupMembers.KEY, CampaignGroupMembers.Entry);
            return collection.find(entry => entry.id === this._member);
        }
        get attitude() {
            const collection = this.collectionCache.getCollection(DiplomacyNegotiationAttitudes$1.KEY, DiplomacyNegotiationAttitudes$1.Entry);
            return collection.find(entry => entry.key === this._attitude);
        }
    }
    CampaignGroupMemberCriteriaDiplomaticAttitudes.Entry = Entry;
})(CampaignGroupMemberCriteriaDiplomaticAttitudes || (CampaignGroupMemberCriteriaDiplomaticAttitudes = {}));

var Stances$1;
(function (Stances) {
    Stances.KEY = new CollectionKey("stances");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreen = values["onscreen"];
        }
    }
    Stances.Entry = Entry;
})(Stances$1 || (Stances$1 = {}));

var CampaignGroupMemberCriteriaDiplomaticStances;
(function (CampaignGroupMemberCriteriaDiplomaticStances) {
    CampaignGroupMemberCriteriaDiplomaticStances.KEY = new CollectionKey("campaign_group_member_criteria_diplomatic_stances");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._member = values["member"];
            this._stance = values["stance"];
        }
        get member() {
            const collection = this.collectionCache.getCollection(CampaignGroupMembers.KEY, CampaignGroupMembers.Entry);
            return collection.find(entry => entry.id === this._member);
        }
        get stance() {
            const collection = this.collectionCache.getCollection(Stances$1.KEY, Stances$1.Entry);
            return collection.find(entry => entry.key === this._stance);
        }
    }
    CampaignGroupMemberCriteriaDiplomaticStances.Entry = Entry;
})(CampaignGroupMemberCriteriaDiplomaticStances || (CampaignGroupMemberCriteriaDiplomaticStances = {}));

var CampaignGroupMemberCriteriaFactions;
(function (CampaignGroupMemberCriteriaFactions) {
    CampaignGroupMemberCriteriaFactions.KEY = new CollectionKey("campaign_group_member_criteria_factions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._member = values["member"];
            this._faction = values["faction"];
        }
        get member() {
            const collection = this.collectionCache.getCollection(CampaignGroupMembers.KEY, CampaignGroupMembers.Entry);
            return collection.find(entry => entry.id === this._member);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    CampaignGroupMemberCriteriaFactions.Entry = Entry;
})(CampaignGroupMemberCriteriaFactions || (CampaignGroupMemberCriteriaFactions = {}));

var CampaignGroupMemberCriteriaInvolvesSettlements;
(function (CampaignGroupMemberCriteriaInvolvesSettlements) {
    CampaignGroupMemberCriteriaInvolvesSettlements.KEY = new CollectionKey("campaign_group_member_criteria_involves_settlements");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._member = values["member"];
            this.involvesSettlement = !!values["involves_settlement"];
        }
        get member() {
            const collection = this.collectionCache.getCollection(CampaignGroupMembers.KEY, CampaignGroupMembers.Entry);
            return collection.find(entry => entry.id === this._member);
        }
    }
    CampaignGroupMemberCriteriaInvolvesSettlements.Entry = Entry;
})(CampaignGroupMemberCriteriaInvolvesSettlements || (CampaignGroupMemberCriteriaInvolvesSettlements = {}));

var CampaignGroupMemberCriteriaIsDead;
(function (CampaignGroupMemberCriteriaIsDead) {
    CampaignGroupMemberCriteriaIsDead.KEY = new CollectionKey("campaign_group_member_criteria_is_dead");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._member = values["member"];
            this.value = !!values["value"];
        }
        get member() {
            const collection = this.collectionCache.getCollection(CampaignGroupMembers.KEY, CampaignGroupMembers.Entry);
            return collection.find(entry => entry.id === this._member);
        }
    }
    CampaignGroupMemberCriteriaIsDead.Entry = Entry;
})(CampaignGroupMemberCriteriaIsDead || (CampaignGroupMemberCriteriaIsDead = {}));

var MinisterialPositions$1;
(function (MinisterialPositions) {
    MinisterialPositions.KEY = new CollectionKey("ministerial_positions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.ministerKey = values["minister_key"];
            this.rank = values["rank"];
            this.minimumAge = values["minimum_age"];
            this.maximumAge = values["maximum_age"];
            this.order = values["order"];
            this.cost = values["cost"];
            this.gravitasWorth = values["gravitas_worth"];
            this.minimumTermLength = values["minimum_term_length"];
            this.maximumTermLength = values["maximum_term_length"];
            this.maximumConcurrentMinisters = values["maximum_concurrent_ministers"];
            this.requiredLoyalty = values["required_loyalty"];
            this.displayEndTurnNotificationsForPost = !!values["display_end_turn_notifications_for_post"];
        }
    }
    MinisterialPositions.Entry = Entry;
})(MinisterialPositions$1 || (MinisterialPositions$1 = {}));

var CampaignGroupMemberCriteriaMinisterialPositions;
(function (CampaignGroupMemberCriteriaMinisterialPositions) {
    CampaignGroupMemberCriteriaMinisterialPositions.KEY = new CollectionKey("campaign_group_member_criteria_ministerial_positions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._member = values["member"];
            this._ministerialPosition = values["ministerial_position"];
        }
        get member() {
            const collection = this.collectionCache.getCollection(CampaignGroupMembers.KEY, CampaignGroupMembers.Entry);
            return collection.find(entry => entry.id === this._member);
        }
        get ministerialPosition() {
            const collection = this.collectionCache.getCollection(MinisterialPositions$1.KEY, MinisterialPositions$1.Entry);
            return collection.find(entry => entry.ministerKey === this._ministerialPosition);
        }
    }
    CampaignGroupMemberCriteriaMinisterialPositions.Entry = Entry;
})(CampaignGroupMemberCriteriaMinisterialPositions || (CampaignGroupMemberCriteriaMinisterialPositions = {}));

var CampaignGroupMemberCriteriaNumericRanges;
(function (CampaignGroupMemberCriteriaNumericRanges) {
    CampaignGroupMemberCriteriaNumericRanges.KEY = new CollectionKey("campaign_group_member_criteria_numeric_ranges");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._member = values["member"];
            this.minRange = values["min_range"];
            this.maxRange = values["max_range"];
        }
        get member() {
            const collection = this.collectionCache.getCollection(CampaignGroupMembers.KEY, CampaignGroupMembers.Entry);
            return collection.find(entry => entry.id === this._member);
        }
    }
    CampaignGroupMemberCriteriaNumericRanges.Entry = Entry;
})(CampaignGroupMemberCriteriaNumericRanges || (CampaignGroupMemberCriteriaNumericRanges = {}));

var CampaignGroupMemberCriteriaOnSeas;
(function (CampaignGroupMemberCriteriaOnSeas) {
    CampaignGroupMemberCriteriaOnSeas.KEY = new CollectionKey("campaign_group_member_criteria_on_seas");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._member = values["member"];
            this.onSea = !!values["on_sea"];
        }
        get member() {
            const collection = this.collectionCache.getCollection(CampaignGroupMembers.KEY, CampaignGroupMembers.Entry);
            return collection.find(entry => entry.id === this._member);
        }
    }
    CampaignGroupMemberCriteriaOnSeas.Entry = Entry;
})(CampaignGroupMemberCriteriaOnSeas || (CampaignGroupMemberCriteriaOnSeas = {}));

var CampaignGroupMemberCriteriaOriginatingCultures;
(function (CampaignGroupMemberCriteriaOriginatingCultures) {
    CampaignGroupMemberCriteriaOriginatingCultures.KEY = new CollectionKey("campaign_group_member_criteria_originating_cultures");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._member = values["member"];
            this._culture = values["culture"];
        }
        get member() {
            const collection = this.collectionCache.getCollection(CampaignGroupMembers.KEY, CampaignGroupMembers.Entry);
            return collection.find(entry => entry.id === this._member);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
    }
    CampaignGroupMemberCriteriaOriginatingCultures.Entry = Entry;
})(CampaignGroupMemberCriteriaOriginatingCultures || (CampaignGroupMemberCriteriaOriginatingCultures = {}));

var CampaignGroupMemberCriteriaOriginatingFactions;
(function (CampaignGroupMemberCriteriaOriginatingFactions) {
    CampaignGroupMemberCriteriaOriginatingFactions.KEY = new CollectionKey("campaign_group_member_criteria_originating_factions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._member = values["member"];
            this._faction = values["faction"];
        }
        get member() {
            const collection = this.collectionCache.getCollection(CampaignGroupMembers.KEY, CampaignGroupMembers.Entry);
            return collection.find(entry => entry.id === this._member);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    CampaignGroupMemberCriteriaOriginatingFactions.Entry = Entry;
})(CampaignGroupMemberCriteriaOriginatingFactions || (CampaignGroupMemberCriteriaOriginatingFactions = {}));

var CampaignGroupMemberCriteriaOriginatingSubcultures;
(function (CampaignGroupMemberCriteriaOriginatingSubcultures) {
    CampaignGroupMemberCriteriaOriginatingSubcultures.KEY = new CollectionKey("campaign_group_member_criteria_originating_subcultures");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._member = values["member"];
            this._subculture = values["subculture"];
        }
        get member() {
            const collection = this.collectionCache.getCollection(CampaignGroupMembers.KEY, CampaignGroupMembers.Entry);
            return collection.find(entry => entry.id === this._member);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
    }
    CampaignGroupMemberCriteriaOriginatingSubcultures.Entry = Entry;
})(CampaignGroupMemberCriteriaOriginatingSubcultures || (CampaignGroupMemberCriteriaOriginatingSubcultures = {}));

var CampaignGroupMemberCriteriaPooledResources;
(function (CampaignGroupMemberCriteriaPooledResources) {
    CampaignGroupMemberCriteriaPooledResources.KEY = new CollectionKey("campaign_group_member_criteria_pooled_resources");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._member = values["member"];
            this._pooledResource = values["pooled_resource"];
        }
        get member() {
            const collection = this.collectionCache.getCollection(CampaignGroupMembers.KEY, CampaignGroupMembers.Entry);
            return collection.find(entry => entry.id === this._member);
        }
        get pooledResource() {
            const collection = this.collectionCache.getCollection(PooledResources.KEY, PooledResources.Entry);
            return collection.find(entry => entry.key === this._pooledResource);
        }
    }
    CampaignGroupMemberCriteriaPooledResources.Entry = Entry;
})(CampaignGroupMemberCriteriaPooledResources || (CampaignGroupMemberCriteriaPooledResources = {}));

var CampaignGroupMemberCriteriaProduceResources;
(function (CampaignGroupMemberCriteriaProduceResources) {
    CampaignGroupMemberCriteriaProduceResources.KEY = new CollectionKey("campaign_group_member_criteria_produce_resources");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._member = values["member"];
            this._resource = values["resource"];
        }
        get member() {
            const collection = this.collectionCache.getCollection(CampaignGroupMembers.KEY, CampaignGroupMembers.Entry);
            return collection.find(entry => entry.id === this._member);
        }
        get resource() {
            const collection = this.collectionCache.getCollection(Resources$1.KEY, Resources$1.Entry);
            return collection.find(entry => entry.key === this._resource);
        }
    }
    CampaignGroupMemberCriteriaProduceResources.Entry = Entry;
})(CampaignGroupMemberCriteriaProduceResources || (CampaignGroupMemberCriteriaProduceResources = {}));

var CampaignGroupMemberCriteriaRegions;
(function (CampaignGroupMemberCriteriaRegions) {
    CampaignGroupMemberCriteriaRegions.KEY = new CollectionKey("campaign_group_member_criteria_regions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._member = values["member"];
            this._region = values["region"];
        }
        get member() {
            const collection = this.collectionCache.getCollection(CampaignGroupMembers.KEY, CampaignGroupMembers.Entry);
            return collection.find(entry => entry.id === this._member);
        }
        get region() {
            const collection = this.collectionCache.getCollection(Regions$1.KEY, Regions$1.Entry);
            return collection.find(entry => entry.key === this._region);
        }
    }
    CampaignGroupMemberCriteriaRegions.Entry = Entry;
})(CampaignGroupMemberCriteriaRegions || (CampaignGroupMemberCriteriaRegions = {}));

var CampaignGroupMemberCriteriaRegionOwnerSubcultures;
(function (CampaignGroupMemberCriteriaRegionOwnerSubcultures) {
    CampaignGroupMemberCriteriaRegionOwnerSubcultures.KEY = new CollectionKey("campaign_group_member_criteria_region_owner_subcultures");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._member = values["member"];
            this._subculture = values["subculture"];
        }
        get member() {
            const collection = this.collectionCache.getCollection(CampaignGroupMembers.KEY, CampaignGroupMembers.Entry);
            return collection.find(entry => entry.id === this._member);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
    }
    CampaignGroupMemberCriteriaRegionOwnerSubcultures.Entry = Entry;
})(CampaignGroupMemberCriteriaRegionOwnerSubcultures || (CampaignGroupMemberCriteriaRegionOwnerSubcultures = {}));

var CampaignGroupMemberCriteriaReligions;
(function (CampaignGroupMemberCriteriaReligions) {
    CampaignGroupMemberCriteriaReligions.KEY = new CollectionKey("campaign_group_member_criteria_religions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._member = values["member"];
            this._religion = values["religion"];
        }
        get member() {
            const collection = this.collectionCache.getCollection(CampaignGroupMembers.KEY, CampaignGroupMembers.Entry);
            return collection.find(entry => entry.id === this._member);
        }
        get religion() {
            const collection = this.collectionCache.getCollection(Religions$1.KEY, Religions$1.Entry);
            return collection.find(entry => entry.religionKey === this._religion);
        }
    }
    CampaignGroupMemberCriteriaReligions.Entry = Entry;
})(CampaignGroupMemberCriteriaReligions || (CampaignGroupMemberCriteriaReligions = {}));

var CampaignGroupMemberCriteriaSubcultures;
(function (CampaignGroupMemberCriteriaSubcultures) {
    CampaignGroupMemberCriteriaSubcultures.KEY = new CollectionKey("campaign_group_member_criteria_subcultures");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._member = values["member"];
            this._subculture = values["subculture"];
        }
        get member() {
            const collection = this.collectionCache.getCollection(CampaignGroupMembers.KEY, CampaignGroupMembers.Entry);
            return collection.find(entry => entry.id === this._member);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
    }
    CampaignGroupMemberCriteriaSubcultures.Entry = Entry;
})(CampaignGroupMemberCriteriaSubcultures || (CampaignGroupMemberCriteriaSubcultures = {}));

var CampaignGroupMemberCriteriaValues;
(function (CampaignGroupMemberCriteriaValues) {
    CampaignGroupMemberCriteriaValues.KEY = new CollectionKey("campaign_group_member_criteria_values");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._member = values["member"];
            this.value = values["value"];
        }
        get member() {
            const collection = this.collectionCache.getCollection(CampaignGroupMembers.KEY, CampaignGroupMembers.Entry);
            return collection.find(entry => entry.id === this._member);
        }
    }
    CampaignGroupMemberCriteriaValues.Entry = Entry;
})(CampaignGroupMemberCriteriaValues || (CampaignGroupMemberCriteriaValues = {}));

var CampaignGroupMoraleEffects;
(function (CampaignGroupMoraleEffects) {
    CampaignGroupMoraleEffects.KEY = new CollectionKey("campaign_group_morale_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.name = values["name"];
            this._group = values["group"];
            this._effectBundle = values["effect_bundle"];
        }
        get group() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._group);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    CampaignGroupMoraleEffects.Entry = Entry;
})(CampaignGroupMoraleEffects || (CampaignGroupMoraleEffects = {}));

var CampaignGroupOccupationPurchasablePrimarySlotLevels;
(function (CampaignGroupOccupationPurchasablePrimarySlotLevels) {
    CampaignGroupOccupationPurchasablePrimarySlotLevels.KEY = new CollectionKey("campaign_group_occupation_purchasable_primary_slot_levels");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignGroup = values["campaign_group"];
            this.level = values["level"];
            this._resourceCost = values["resource_cost"];
        }
        get campaignGroup() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._campaignGroup);
        }
        get resourceCost() {
            const collection = this.collectionCache.getCollection(ResourceCosts.KEY, ResourceCosts.Entry);
            return collection.find(entry => entry.id === this._resourceCost);
        }
    }
    CampaignGroupOccupationPurchasablePrimarySlotLevels.Entry = Entry;
})(CampaignGroupOccupationPurchasablePrimarySlotLevels || (CampaignGroupOccupationPurchasablePrimarySlotLevels = {}));

var PurchasableEffects;
(function (PurchasableEffects) {
    PurchasableEffects.KEY = new CollectionKey("purchasable_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
        }
    }
    PurchasableEffects.Entry = Entry;
})(PurchasableEffects || (PurchasableEffects = {}));

var CampaignGroupPendingBattlePurchasableEffects;
(function (CampaignGroupPendingBattlePurchasableEffects) {
    CampaignGroupPendingBattlePurchasableEffects.KEY = new CollectionKey("campaign_group_pending_battle_purchasable_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignGroup = values["campaign_group"];
            this._purchasableEffect = values["purchasable_effect"];
        }
        get campaignGroup() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._campaignGroup);
        }
        get purchasableEffect() {
            const collection = this.collectionCache.getCollection(PurchasableEffects.KEY, PurchasableEffects.Entry);
            return collection.find(entry => entry.id === this._purchasableEffect);
        }
    }
    CampaignGroupPendingBattlePurchasableEffects.Entry = Entry;
})(CampaignGroupPendingBattlePurchasableEffects || (CampaignGroupPendingBattlePurchasableEffects = {}));

var PlagueTypes;
(function (PlagueTypes) {
    PlagueTypes.KEY = new CollectionKey("plague_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
        }
    }
    PlagueTypes.Entry = Entry;
})(PlagueTypes || (PlagueTypes = {}));

var Plagues$1;
(function (Plagues) {
    Plagues.KEY = new CollectionKey("plagues");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
            this.grade = values["grade"];
            this.minimumSqualor = values["minimum_squalor"];
            this.infectivity = values["infectivity"];
            this.lifetime = values["lifetime"];
            this._plagueType = values["plague_type"];
        }
        get plagueType() {
            const collection = this.collectionCache.getCollection(PlagueTypes.KEY, PlagueTypes.Entry);
            return collection.find(entry => entry.id === this._plagueType);
        }
    }
    Plagues.Entry = Entry;
})(Plagues$1 || (Plagues$1 = {}));

var CampaignGroupPlagues;
(function (CampaignGroupPlagues) {
    CampaignGroupPlagues.KEY = new CollectionKey("campaign_group_plagues");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignGroup = values["campaign_group"];
            this._plague = values["plague"];
        }
        get campaignGroup() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._campaignGroup);
        }
        get plague() {
            const collection = this.collectionCache.getCollection(Plagues$1.KEY, Plagues$1.Entry);
            return collection.find(entry => entry.name === this._plague);
        }
    }
    CampaignGroupPlagues.Entry = Entry;
})(CampaignGroupPlagues || (CampaignGroupPlagues = {}));

var CampaignGroupPlagueMilitaryForceEffects;
(function (CampaignGroupPlagueMilitaryForceEffects) {
    CampaignGroupPlagueMilitaryForceEffects.KEY = new CollectionKey("campaign_group_plague_military_force_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignGroup = values["campaign_group"];
            this._plague = values["plague"];
            this._effectBundle = values["effect_bundle"];
        }
        get campaignGroup() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._campaignGroup);
        }
        get plague() {
            const collection = this.collectionCache.getCollection(Plagues$1.KEY, Plagues$1.Entry);
            return collection.find(entry => entry.name === this._plague);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    CampaignGroupPlagueMilitaryForceEffects.Entry = Entry;
})(CampaignGroupPlagueMilitaryForceEffects || (CampaignGroupPlagueMilitaryForceEffects = {}));

var CampaignGroupPlagueRegionEffects;
(function (CampaignGroupPlagueRegionEffects) {
    CampaignGroupPlagueRegionEffects.KEY = new CollectionKey("campaign_group_plague_region_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignGroup = values["campaign_group"];
            this._plague = values["plague"];
            this._effectBundle = values["effect_bundle"];
        }
        get campaignGroup() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._campaignGroup);
        }
        get plague() {
            const collection = this.collectionCache.getCollection(Plagues$1.KEY, Plagues$1.Entry);
            return collection.find(entry => entry.name === this._plague);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    CampaignGroupPlagueRegionEffects.Entry = Entry;
})(CampaignGroupPlagueRegionEffects || (CampaignGroupPlagueRegionEffects = {}));

var CampaignGroupPooledResources;
(function (CampaignGroupPooledResources) {
    CampaignGroupPooledResources.KEY = new CollectionKey("campaign_group_pooled_resources");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignGroup = values["campaign_group"];
            this._resource = values["resource"];
            this.initialAmount = values["initial_amount"];
        }
        get campaignGroup() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._campaignGroup);
        }
        get resource() {
            const collection = this.collectionCache.getCollection(PooledResources.KEY, PooledResources.Entry);
            return collection.find(entry => entry.key === this._resource);
        }
    }
    CampaignGroupPooledResources.Entry = Entry;
})(CampaignGroupPooledResources || (CampaignGroupPooledResources = {}));

var PooledResourceEffectTypes;
(function (PooledResourceEffectTypes) {
    PooledResourceEffectTypes.KEY = new CollectionKey("pooled_resource_effect_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
        }
    }
    PooledResourceEffectTypes.Entry = Entry;
})(PooledResourceEffectTypes || (PooledResourceEffectTypes = {}));

var CampaignGroupPooledResourceEffects;
(function (CampaignGroupPooledResourceEffects) {
    CampaignGroupPooledResourceEffects.KEY = new CollectionKey("campaign_group_pooled_resource_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignGroup = values["campaign_group"];
            this._effectType = values["effect_type"];
            this._effectBundle = values["effect_bundle"];
        }
        get campaignGroup() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._campaignGroup);
        }
        get effectType() {
            const collection = this.collectionCache.getCollection(PooledResourceEffectTypes.KEY, PooledResourceEffectTypes.Entry);
            return collection.find(entry => entry.id === this._effectType);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    CampaignGroupPooledResourceEffects.Entry = Entry;
})(CampaignGroupPooledResourceEffects || (CampaignGroupPooledResourceEffects = {}));

var PooledResourceFactorJunctions;
(function (PooledResourceFactorJunctions) {
    PooledResourceFactorJunctions.KEY = new CollectionKey("pooled_resource_factor_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._resource = values["resource"];
            this._factor = values["factor"];
            this.uniqueId = values["unique_id"];
        }
        get resource() {
            const collection = this.collectionCache.getCollection(PooledResources.KEY, PooledResources.Entry);
            return collection.find(entry => entry.key === this._resource);
        }
        get factor() {
            const collection = this.collectionCache.getCollection(PooledResourceFactors.KEY, PooledResourceFactors.Entry);
            return collection.find(entry => entry.key === this._factor);
        }
    }
    PooledResourceFactorJunctions.Entry = Entry;
})(PooledResourceFactorJunctions || (PooledResourceFactorJunctions = {}));

var CampaignGroupPostBattleLootedPooledResources;
(function (CampaignGroupPostBattleLootedPooledResources) {
    CampaignGroupPostBattleLootedPooledResources.KEY = new CollectionKey("campaign_group_post_battle_looted_pooled_resources");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignGroup = values["campaign_group"];
            this._resourceFactor = values["resource_factor"];
            this.exponentMultiplier = values["exponent_multiplier"];
            this.exponent = values["exponent"];
            this.baseMultiplier = values["base_multiplier"];
            this.minimum = values["minimum"];
            this.maximum = values["maximum"];
            this.baseAmount = values["base_amount"];
        }
        get campaignGroup() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._campaignGroup);
        }
        get resourceFactor() {
            const collection = this.collectionCache.getCollection(PooledResourceFactorJunctions.KEY, PooledResourceFactorJunctions.Entry);
            return collection.find(entry => entry.uniqueId === this._resourceFactor);
        }
    }
    CampaignGroupPostBattleLootedPooledResources.Entry = Entry;
})(CampaignGroupPostBattleLootedPooledResources || (CampaignGroupPostBattleLootedPooledResources = {}));

var CampaignGroupRacialSuitabilityEffects;
(function (CampaignGroupRacialSuitabilityEffects) {
    CampaignGroupRacialSuitabilityEffects.KEY = new CollectionKey("campaign_group_racial_suitability_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignGroup = values["campaign_group"];
            this._effectBundle = values["effect_bundle"];
        }
        get campaignGroup() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._campaignGroup);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    CampaignGroupRacialSuitabilityEffects.Entry = Entry;
})(CampaignGroupRacialSuitabilityEffects || (CampaignGroupRacialSuitabilityEffects = {}));

var MissionTypes$1;
(function (MissionTypes) {
    MissionTypes.KEY = new CollectionKey("mission_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    MissionTypes.Entry = Entry;
})(MissionTypes$1 || (MissionTypes$1 = {}));

var Missions$1;
(function (Missions) {
    Missions.KEY = new CollectionKey("missions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._missionType = values["mission_type"];
            this.localisedTitle = values["localised_title"];
            this.localisedDescription = values["localised_description"];
            this.uiImage = values["ui_image"];
            this.uiIcon = values["ui_icon"];
            this.generate = !!values["generate"];
            this.prioritised = !!values["prioritised"];
            this._eventCategory = values["event_category"];
            this._setPieceBattle = values["set_piece_battle"];
            this.locationX = values["location_x"];
            this.locationY = values["location_y"];
            this.questMission = !!values["quest_mission"];
            this.triggerRadius = values["trigger_radius"];
            this.questCharacter = values["quest_character"];
            this.questMissionFinal = !!values["quest_mission_final"];
            this.stickyByDefault = !!values["sticky_by_default"];
        }
        get missionType() {
            const collection = this.collectionCache.getCollection(MissionTypes$1.KEY, MissionTypes$1.Entry);
            return collection.find(entry => entry.key === this._missionType);
        }
        get eventCategory() {
            const collection = this.collectionCache.getCollection(CdirEventsCategories.KEY, CdirEventsCategories.Entry);
            return collection.find(entry => entry.categoryKey === this._eventCategory);
        }
        get setPieceBattle() {
            const collection = this.collectionCache.getCollection(BattleSetPieces.KEY, BattleSetPieces.Entry);
            return collection.find(entry => entry.battleName === this._setPieceBattle);
        }
    }
    Missions.Entry = Entry;
})(Missions$1 || (Missions$1 = {}));

var CampaignGroupRituals;
(function (CampaignGroupRituals) {
    CampaignGroupRituals.KEY = new CollectionKey("campaign_group_rituals");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignGroup = values["campaign_group"];
            this._ritual = values["ritual"];
            this._unlockMission = values["unlock_mission"];
            this.unlockTurn = values["unlock_turn"];
            this.initiallyUnlocked = !!values["initially_unlocked"];
            this.unlockText = values["unlock_text"];
        }
        get campaignGroup() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._campaignGroup);
        }
        get ritual() {
            const collection = this.collectionCache.getCollection(Rituals.KEY, Rituals.Entry);
            return collection.find(entry => entry.key === this._ritual);
        }
        get unlockMission() {
            const collection = this.collectionCache.getCollection(Missions$1.KEY, Missions$1.Entry);
            return collection.find(entry => entry.key === this._unlockMission);
        }
    }
    CampaignGroupRituals.Entry = Entry;
})(CampaignGroupRituals || (CampaignGroupRituals = {}));

var RitualChains;
(function (RitualChains) {
    RitualChains.KEY = new CollectionKey("ritual_chains");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.displayName = values["display_name"];
            this.description = values["description"];
            this._category = values["category"];
            this.ritualSitesRequired = values["ritual_sites_required"];
            this.colourR = values["colour_r"];
            this.colourG = values["colour_g"];
            this.colourB = values["colour_b"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(RitualCategories.KEY, RitualCategories.Entry);
            return collection.find(entry => entry.id === this._category);
        }
    }
    RitualChains.Entry = Entry;
})(RitualChains || (RitualChains = {}));

var CampaignGroupRitualChains;
(function (CampaignGroupRitualChains) {
    CampaignGroupRitualChains.KEY = new CollectionKey("campaign_group_ritual_chains");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignGroup = values["campaign_group"];
            this._ritualChain = values["ritual_chain"];
            this._unlockMission = values["unlock_mission"];
            this.unlockTurn = values["unlock_turn"];
            this.sharedProgress = !!values["shared_progress"];
            this.initiallyUnlocked = !!values["initially_unlocked"];
            this.unlockText = values["unlock_text"];
        }
        get campaignGroup() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._campaignGroup);
        }
        get ritualChain() {
            const collection = this.collectionCache.getCollection(RitualChains.KEY, RitualChains.Entry);
            return collection.find(entry => entry.key === this._ritualChain);
        }
        get unlockMission() {
            const collection = this.collectionCache.getCollection(Missions$1.KEY, Missions$1.Entry);
            return collection.find(entry => entry.key === this._unlockMission);
        }
    }
    CampaignGroupRitualChains.Entry = Entry;
})(CampaignGroupRitualChains || (CampaignGroupRitualChains = {}));

var CampaignGroupSettlementOccupationGiftFactions;
(function (CampaignGroupSettlementOccupationGiftFactions) {
    CampaignGroupSettlementOccupationGiftFactions.KEY = new CollectionKey("campaign_group_settlement_occupation_gift_factions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignGroup = values["campaign_group"];
            this._faction = values["faction"];
        }
        get campaignGroup() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._campaignGroup);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    CampaignGroupSettlementOccupationGiftFactions.Entry = Entry;
})(CampaignGroupSettlementOccupationGiftFactions || (CampaignGroupSettlementOccupationGiftFactions = {}));

var CampaignGroupSettlementOccupationLootedPooledResources;
(function (CampaignGroupSettlementOccupationLootedPooledResources) {
    CampaignGroupSettlementOccupationLootedPooledResources.KEY = new CollectionKey("campaign_group_settlement_occupation_looted_pooled_resources");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignGroup = values["campaign_group"];
            this._resourceFactor = values["resource_factor"];
            this.exponentMultiplier = values["exponent_multiplier"];
            this.exponent = values["exponent"];
            this.baseMultiplier = values["base_multiplier"];
            this.minimum = values["minimum"];
            this.maximum = values["maximum"];
            this.baseAmount = values["base_amount"];
        }
        get campaignGroup() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._campaignGroup);
        }
        get resourceFactor() {
            const collection = this.collectionCache.getCollection(PooledResourceFactorJunctions.KEY, PooledResourceFactorJunctions.Entry);
            return collection.find(entry => entry.uniqueId === this._resourceFactor);
        }
    }
    CampaignGroupSettlementOccupationLootedPooledResources.Entry = Entry;
})(CampaignGroupSettlementOccupationLootedPooledResources || (CampaignGroupSettlementOccupationLootedPooledResources = {}));

var CampaignGroupSettlementOccupationOptionForeignSlots;
(function (CampaignGroupSettlementOccupationOptionForeignSlots) {
    CampaignGroupSettlementOccupationOptionForeignSlots.KEY = new CollectionKey("campaign_group_settlement_occupation_option_foreign_slots");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignGroup = values["campaign_group"];
            this._foreignSlotSet = values["foreign_slot_set"];
        }
        get campaignGroup() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._campaignGroup);
        }
        get foreignSlotSet() {
            const collection = this.collectionCache.getCollection(SlotSets.KEY, SlotSets.Entry);
            return collection.find(entry => entry.key === this._foreignSlotSet);
        }
    }
    CampaignGroupSettlementOccupationOptionForeignSlots.Entry = Entry;
})(CampaignGroupSettlementOccupationOptionForeignSlots || (CampaignGroupSettlementOccupationOptionForeignSlots = {}));

var CampaignGroupUniqueAgents;
(function (CampaignGroupUniqueAgents) {
    CampaignGroupUniqueAgents.KEY = new CollectionKey("campaign_group_unique_agents");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignGroup = values["campaign_group"];
            this._uniqueAgent = values["unique_agent"];
            this.baseCharges = values["base_charges"];
        }
        get campaignGroup() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._campaignGroup);
        }
        get uniqueAgent() {
            const collection = this.collectionCache.getCollection(UniqueAgents.KEY, UniqueAgents.Entry);
            return collection.find(entry => entry._agentSubtype === this._uniqueAgent);
        }
    }
    CampaignGroupUniqueAgents.Entry = Entry;
})(CampaignGroupUniqueAgents || (CampaignGroupUniqueAgents = {}));

var CampaignHiddenSettlementOverrides;
(function (CampaignHiddenSettlementOverrides) {
    CampaignHiddenSettlementOverrides.KEY = new CollectionKey("campaign_hidden_settlement_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaign = values["campaign"];
            this._region = values["region"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
        get region() {
            const collection = this.collectionCache.getCollection(Regions$1.KEY, Regions$1.Entry);
            return collection.find(entry => entry.key === this._region);
        }
    }
    CampaignHiddenSettlementOverrides.Entry = Entry;
})(CampaignHiddenSettlementOverrides || (CampaignHiddenSettlementOverrides = {}));

var CampaignInitialLoyaltyDistribution;
(function (CampaignInitialLoyaltyDistribution) {
    CampaignInitialLoyaltyDistribution.KEY = new CollectionKey("campaign_initial_loyalty_distribution");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.roll = values["roll"];
            this.loyalty = values["loyalty"];
        }
    }
    CampaignInitialLoyaltyDistribution.Entry = Entry;
})(CampaignInitialLoyaltyDistribution || (CampaignInitialLoyaltyDistribution = {}));

var CampaignMarkerTypes;
(function (CampaignMarkerTypes) {
    CampaignMarkerTypes.KEY = new CollectionKey("campaign_marker_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this.notes = values["notes"];
        }
    }
    CampaignMarkerTypes.Entry = Entry;
})(CampaignMarkerTypes || (CampaignMarkerTypes = {}));

var CampaignInteractableMarkerInfos;
(function (CampaignInteractableMarkerInfos) {
    CampaignInteractableMarkerInfos.KEY = new CollectionKey("campaign_interactable_marker_infos");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.name = values["name"];
            this.tooltip = values["tooltip"];
            this._markerType = values["marker_type"];
        }
        get markerType() {
            const collection = this.collectionCache.getCollection(CampaignMarkerTypes.KEY, CampaignMarkerTypes.Entry);
            return collection.find(entry => entry.id === this._markerType);
        }
    }
    CampaignInteractableMarkerInfos.Entry = Entry;
})(CampaignInteractableMarkerInfos || (CampaignInteractableMarkerInfos = {}));

var CampaignLocalisedStrings$1;
(function (CampaignLocalisedStrings) {
    CampaignLocalisedStrings.KEY = new CollectionKey("campaign_localised_strings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.string = values["string"];
        }
    }
    CampaignLocalisedStrings.Entry = Entry;
})(CampaignLocalisedStrings$1 || (CampaignLocalisedStrings$1 = {}));

var CampaignMapAttritionFactionImmunities$1;
(function (CampaignMapAttritionFactionImmunities) {
    CampaignMapAttritionFactionImmunities.KEY = new CollectionKey("campaign_map_attrition_faction_immunities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._attrition = values["attrition"];
            this._faction = values["faction"];
        }
        get attrition() {
            const collection = this.collectionCache.getCollection(CampaignMapAttritions$1.KEY, CampaignMapAttritions$1.Entry);
            return collection.find(entry => entry.key === this._attrition);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    CampaignMapAttritionFactionImmunities.Entry = Entry;
})(CampaignMapAttritionFactionImmunities$1 || (CampaignMapAttritionFactionImmunities$1 = {}));

var CampaignMapAttritionUnitImmunities$1;
(function (CampaignMapAttritionUnitImmunities) {
    CampaignMapAttritionUnitImmunities.KEY = new CollectionKey("campaign_map_attrition_unit_immunities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._attrition = values["attrition"];
            this._unit = values["unit"];
        }
        get attrition() {
            const collection = this.collectionCache.getCollection(CampaignMapAttritions$1.KEY, CampaignMapAttritions$1.Entry);
            return collection.find(entry => entry.key === this._attrition);
        }
        get unit() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
    }
    CampaignMapAttritionUnitImmunities.Entry = Entry;
})(CampaignMapAttritionUnitImmunities$1 || (CampaignMapAttritionUnitImmunities$1 = {}));

var CampaignMapMasksToExcludedRegions;
(function (CampaignMapMasksToExcludedRegions) {
    CampaignMapMasksToExcludedRegions.KEY = new CollectionKey("campaign_map_masks_to_excluded_regions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._mask = values["mask"];
            this._excludedRegion = values["excluded_region"];
        }
        get mask() {
            const collection = this.collectionCache.getCollection(CampaignMapMasks.KEY, CampaignMapMasks.Entry);
            return collection.find(entry => entry.maskName === this._mask);
        }
        get excludedRegion() {
            const collection = this.collectionCache.getCollection(Regions$1.KEY, Regions$1.Entry);
            return collection.find(entry => entry.key === this._excludedRegion);
        }
    }
    CampaignMapMasksToExcludedRegions.Entry = Entry;
})(CampaignMapMasksToExcludedRegions || (CampaignMapMasksToExcludedRegions = {}));

var CampaignMapRegions$1;
(function (CampaignMapRegions) {
    CampaignMapRegions.KEY = new CollectionKey("campaign_map_regions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignMap = values["campaign_map"];
            this._region = values["region"];
        }
        get campaignMap() {
            const collection = this.collectionCache.getCollection(CampaignMaps$1.KEY, CampaignMaps$1.Entry);
            return collection.find(entry => entry.mapname === this._campaignMap);
        }
        get region() {
            const collection = this.collectionCache.getCollection(Regions$1.KEY, Regions$1.Entry);
            return collection.find(entry => entry.key === this._region);
        }
    }
    CampaignMapRegions.Entry = Entry;
})(CampaignMapRegions$1 || (CampaignMapRegions$1 = {}));

var CampaignMapRoads$1;
(function (CampaignMapRoads) {
    CampaignMapRoads.KEY = new CollectionKey("campaign_map_roads");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._campaign = values["campaign"];
            this.threshold = values["threshold"];
            this.turnsRequiredToUpgradeTo = values["turns_required_to_upgrade_to"];
            this.turnsRequiredToDowngradeFrom = values["turns_required_to_downgrade_from"];
            this.movementCost = values["movement_cost"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
    }
    CampaignMapRoads.Entry = Entry;
})(CampaignMapRoads$1 || (CampaignMapRoads$1 = {}));

var CampaignMapSettlements$1;
(function (CampaignMapSettlements) {
    CampaignMapSettlements.KEY = new CollectionKey("campaign_map_settlements");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.settlementId = values["settlement_id"];
            this._climateType = values["climate_type"];
            this.citybarHeightOffset = values["citybar_height_offset"];
        }
        get climateType() {
            const collection = this.collectionCache.getCollection(SettlementClimateTypes.KEY, SettlementClimateTypes.Entry);
            return collection.find(entry => entry.type === this._climateType);
        }
    }
    CampaignMapSettlements.Entry = Entry;
})(CampaignMapSettlements$1 || (CampaignMapSettlements$1 = {}));

var CampaignMapTooltipTexts$1;
(function (CampaignMapTooltipTexts) {
    CampaignMapTooltipTexts.KEY = new CollectionKey("campaign_map_tooltip_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.tooltipText = values["tooltip_text"];
        }
    }
    CampaignMapTooltipTexts.Entry = Entry;
})(CampaignMapTooltipTexts$1 || (CampaignMapTooltipTexts$1 = {}));

var CampaignMapTooltips$1;
(function (CampaignMapTooltips) {
    CampaignMapTooltips.KEY = new CollectionKey("campaign_map_tooltips");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._selectContext = values["select_context"];
            this._overContext = values["over_context"];
            this._tooltipLine = values["tooltip_line"];
            this._adviceLine = values["advice_line"];
            this._mainLine = values["main_line"];
        }
        get tooltipLine() {
            const collection = this.collectionCache.getCollection(CampaignMapTooltipTexts$1.KEY, CampaignMapTooltipTexts$1.Entry);
            return collection.find(entry => entry.key === this._tooltipLine);
        }
        get adviceLine() {
            const collection = this.collectionCache.getCollection(CampaignMapTooltipTexts$1.KEY, CampaignMapTooltipTexts$1.Entry);
            return collection.find(entry => entry.key === this._adviceLine);
        }
        get mainLine() {
            const collection = this.collectionCache.getCollection(CampaignMapTooltipTexts$1.KEY, CampaignMapTooltipTexts$1.Entry);
            return collection.find(entry => entry.key === this._mainLine);
        }
    }
    CampaignMapTooltips.Entry = Entry;
})(CampaignMapTooltips$1 || (CampaignMapTooltips$1 = {}));

var CampaignMapTooltipOverContexts$1;
(function (CampaignMapTooltipOverContexts) {
    CampaignMapTooltipOverContexts.KEY = new CollectionKey("campaign_map_tooltip_over_contexts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.overContexts = values["over_contexts"];
        }
    }
    CampaignMapTooltipOverContexts.Entry = Entry;
})(CampaignMapTooltipOverContexts$1 || (CampaignMapTooltipOverContexts$1 = {}));

var CampaignMapTooltipSelectContexts$1;
(function (CampaignMapTooltipSelectContexts) {
    CampaignMapTooltipSelectContexts.KEY = new CollectionKey("campaign_map_tooltip_select_contexts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.selectContext = values["select_context"];
        }
    }
    CampaignMapTooltipSelectContexts.Entry = Entry;
})(CampaignMapTooltipSelectContexts$1 || (CampaignMapTooltipSelectContexts$1 = {}));

var CampaignMapTransitionAreas$1;
(function (CampaignMapTransitionAreas) {
    CampaignMapTransitionAreas.KEY = new CollectionKey("campaign_map_transition_areas");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._mapname = values["mapname"];
            this.index = values["index"];
            this.minx = values["minx"];
            this.miny = values["miny"];
            this.maxx = values["maxx"];
            this.maxy = values["maxy"];
            this.stormChancePercentage = values["storm_chance_percentage"];
            this.onscreenName = values["onscreen_name"];
        }
    }
    CampaignMapTransitionAreas.Entry = Entry;
})(CampaignMapTransitionAreas$1 || (CampaignMapTransitionAreas$1 = {}));

var CampaignMapTransitionLinks$1;
(function (CampaignMapTransitionLinks) {
    CampaignMapTransitionLinks.KEY = new CollectionKey("campaign_map_transition_links");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.index = values["index"];
            this._startArea = values["start_area"];
            this._endArea = values["end_area"];
            this.delayChancePercentage = values["delay_chance_percentage"];
            this.turnsStartToEnd = values["turns_start_to_end"];
            this.turnsEndToStart = values["turns_end_to_start"];
        }
        get startArea() {
            const collection = this.collectionCache.getCollection(CampaignMapTransitionAreas$1.KEY, CampaignMapTransitionAreas$1.Entry);
            return collection.find(entry => entry.index === this._startArea);
        }
        get endArea() {
            const collection = this.collectionCache.getCollection(CampaignMapTransitionAreas$1.KEY, CampaignMapTransitionAreas$1.Entry);
            return collection.find(entry => entry.index === this._endArea);
        }
    }
    CampaignMapTransitionLinks.Entry = Entry;
})(CampaignMapTransitionLinks$1 || (CampaignMapTransitionLinks$1 = {}));

var RegionGroups$1;
(function (RegionGroups) {
    RegionGroups.KEY = new CollectionKey("region_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.groupKey = values["group_key"];
            this.localisedName = values["localised_name"];
            this.round = values["round"];
        }
    }
    RegionGroups.Entry = Entry;
})(RegionGroups$1 || (RegionGroups$1 = {}));

var CampaignMapWindsOfMagicAreas;
(function (CampaignMapWindsOfMagicAreas) {
    CampaignMapWindsOfMagicAreas.KEY = new CollectionKey("campaign_map_winds_of_magic_areas");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._regionGroup = values["region_group"];
            this.localisedName = values["localised_name"];
            this._campaign = values["campaign"];
        }
        get regionGroup() {
            const collection = this.collectionCache.getCollection(RegionGroups$1.KEY, RegionGroups$1.Entry);
            return collection.find(entry => entry.groupKey === this._regionGroup);
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
    }
    CampaignMapWindsOfMagicAreas.Entry = Entry;
})(CampaignMapWindsOfMagicAreas || (CampaignMapWindsOfMagicAreas = {}));

var CampaignMapWindsOfMagicStrengths;
(function (CampaignMapWindsOfMagicStrengths) {
    CampaignMapWindsOfMagicStrengths.KEY = new CollectionKey("campaign_map_winds_of_magic_strengths");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.value = values["value"];
            this.default = !!values["default"];
            this.localisedName = values["localised_name"];
            this.frequency = values["frequency"];
            this._compositeScene = values["composite_scene"];
        }
        get compositeScene() {
            const collection = this.collectionCache.getCollection(CampaignCompositeScenes.KEY, CampaignCompositeScenes.Entry);
            return collection.find(entry => entry.id === this._compositeScene);
        }
    }
    CampaignMapWindsOfMagicStrengths.Entry = Entry;
})(CampaignMapWindsOfMagicStrengths || (CampaignMapWindsOfMagicStrengths = {}));

var CampaignMapWindsOfMagicPersistentRegionStrengths;
(function (CampaignMapWindsOfMagicPersistentRegionStrengths) {
    CampaignMapWindsOfMagicPersistentRegionStrengths.KEY = new CollectionKey("campaign_map_winds_of_magic_persistent_region_strengths");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._region = values["region"];
            this._strength = values["strength"];
        }
        get region() {
            const collection = this.collectionCache.getCollection(Regions$1.KEY, Regions$1.Entry);
            return collection.find(entry => entry.key === this._region);
        }
        get strength() {
            const collection = this.collectionCache.getCollection(CampaignMapWindsOfMagicStrengths.KEY, CampaignMapWindsOfMagicStrengths.Entry);
            return collection.find(entry => entry.key === this._strength);
        }
    }
    CampaignMapWindsOfMagicPersistentRegionStrengths.Entry = Entry;
})(CampaignMapWindsOfMagicPersistentRegionStrengths || (CampaignMapWindsOfMagicPersistentRegionStrengths = {}));

var CampaignMarkers;
(function (CampaignMarkers) {
    CampaignMarkers.KEY = new CollectionKey("campaign_markers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._markerType = values["marker_type"];
            this.file = values["file"];
            this._group = values["group"];
        }
        get markerType() {
            const collection = this.collectionCache.getCollection(CampaignMarkerTypes.KEY, CampaignMarkerTypes.Entry);
            return collection.find(entry => entry.id === this._markerType);
        }
        get group() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._group);
        }
    }
    CampaignMarkers.Entry = Entry;
})(CampaignMarkers || (CampaignMarkers = {}));

var CampaignMercenaryUnitCharacterLevelRestrictions;
(function (CampaignMercenaryUnitCharacterLevelRestrictions) {
    CampaignMercenaryUnitCharacterLevelRestrictions.KEY = new CollectionKey("campaign_mercenary_unit_character_level_restrictions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unit = values["unit"];
            this.characterLevel = values["character_level"];
            this._factionOverride = values["faction_override"];
        }
        get unit() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
        get factionOverride() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._factionOverride);
        }
    }
    CampaignMercenaryUnitCharacterLevelRestrictions.Entry = Entry;
})(CampaignMercenaryUnitCharacterLevelRestrictions || (CampaignMercenaryUnitCharacterLevelRestrictions = {}));

var CampaignMountAnimationSetOverrides;
(function (CampaignMountAnimationSetOverrides) {
    CampaignMountAnimationSetOverrides.KEY = new CollectionKey("campaign_mount_animation_set_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._characterAnimationSet = values["character_animation_set"];
            this._mountUnit = values["mount_unit"];
            this._riderAnimationSet = values["rider_animation_set"];
            this.vfxFilterOverride = values["vfx_filter_override"];
        }
        get characterAnimationSet() {
            const collection = this.collectionCache.getCollection(CampaignAnimSetEnums$1.KEY, CampaignAnimSetEnums$1.Entry);
            return collection.find(entry => entry.name === this._characterAnimationSet);
        }
        get mountUnit() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._mountUnit);
        }
        get riderAnimationSet() {
            const collection = this.collectionCache.getCollection(CampaignAnimSetEnums$1.KEY, CampaignAnimSetEnums$1.Entry);
            return collection.find(entry => entry.name === this._riderAnimationSet);
        }
    }
    CampaignMountAnimationSetOverrides.Entry = Entry;
})(CampaignMountAnimationSetOverrides || (CampaignMountAnimationSetOverrides = {}));

var CampaignMovementSplineMaterials;
(function (CampaignMovementSplineMaterials) {
    CampaignMovementSplineMaterials.KEY = new CollectionKey("campaign_movement_spline_materials");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this.shaftMaterial = values["shaft_material"];
            this.headMaterial = values["head_material"];
        }
    }
    CampaignMovementSplineMaterials.Entry = Entry;
})(CampaignMovementSplineMaterials || (CampaignMovementSplineMaterials = {}));

var CampaignMpCoopGroups$1;
(function (CampaignMpCoopGroups) {
    CampaignMpCoopGroups.KEY = new CollectionKey("campaign_mp_coop_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignMpCoopGroups.Entry = Entry;
})(CampaignMpCoopGroups$1 || (CampaignMpCoopGroups$1 = {}));

var CampaignMpCoopGroupsToFactions$1;
(function (CampaignMpCoopGroupsToFactions) {
    CampaignMpCoopGroupsToFactions.KEY = new CollectionKey("campaign_mp_coop_groups_to_factions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._factionKey = values["faction_key"];
            this._mpCoopGroup = values["mp_coop_group"];
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get mpCoopGroup() {
            const collection = this.collectionCache.getCollection(CampaignMpCoopGroups$1.KEY, CampaignMpCoopGroups$1.Entry);
            return collection.find(entry => entry.key === this._mpCoopGroup);
        }
    }
    CampaignMpCoopGroupsToFactions.Entry = Entry;
})(CampaignMpCoopGroupsToFactions$1 || (CampaignMpCoopGroupsToFactions$1 = {}));

var CampaignPayloadUiDetails;
(function (CampaignPayloadUiDetails) {
    CampaignPayloadUiDetails.KEY = new CollectionKey("campaign_payload_ui_details");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.component = values["component"];
            this.description = values["description"];
            this.icon = values["icon"];
            this.comment = values["comment"];
        }
    }
    CampaignPayloadUiDetails.Entry = Entry;
})(CampaignPayloadUiDetails || (CampaignPayloadUiDetails = {}));

var CampaignPoliticsStrings$1;
(function (CampaignPoliticsStrings) {
    CampaignPoliticsStrings.KEY = new CollectionKey("campaign_politics_strings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.string = values["string"];
        }
    }
    CampaignPoliticsStrings.Entry = Entry;
})(CampaignPoliticsStrings$1 || (CampaignPoliticsStrings$1 = {}));

var CampaignPostBattleCaptiveOptionIds;
(function (CampaignPostBattleCaptiveOptionIds) {
    CampaignPostBattleCaptiveOptionIds.KEY = new CollectionKey("campaign_post_battle_captive_option_ids");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.captiveOption = values["captive_option"];
        }
    }
    CampaignPostBattleCaptiveOptionIds.Entry = Entry;
})(CampaignPostBattleCaptiveOptionIds || (CampaignPostBattleCaptiveOptionIds = {}));

var CampaignPostBattleCaptiveOptions;
(function (CampaignPostBattleCaptiveOptions) {
    CampaignPostBattleCaptiveOptions.KEY = new CollectionKey("campaign_post_battle_captive_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._captiveOption = values["captive_option"];
            this._campaignGroup = values["campaign_group"];
            this._effectBundle = values["effect_bundle"];
            this.onscreenName = values["onscreen_name"];
            this.effectBundleTurns = values["effect_bundle_turns"];
            this.iconPath = values["icon_path"];
            this.description = values["description"];
            this._resourceTransaction = values["resource_transaction"];
        }
        get captiveOption() {
            const collection = this.collectionCache.getCollection(CampaignPostBattleCaptiveOptionIds.KEY, CampaignPostBattleCaptiveOptionIds.Entry);
            return collection.find(entry => entry.captiveOption === this._captiveOption);
        }
        get campaignGroup() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._campaignGroup);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
        get resourceTransaction() {
            const collection = this.collectionCache.getCollection(ResourceCosts.KEY, ResourceCosts.Entry);
            return collection.find(entry => entry.id === this._resourceTransaction);
        }
    }
    CampaignPostBattleCaptiveOptions.Entry = Entry;
})(CampaignPostBattleCaptiveOptions || (CampaignPostBattleCaptiveOptions = {}));

var CampaignPublicOrderPopulaceEffects$1;
(function (CampaignPublicOrderPopulaceEffects) {
    CampaignPublicOrderPopulaceEffects.KEY = new CollectionKey("campaign_public_order_populace_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.populaceHappiness = values["populace_happiness"];
            this._culture = values["culture"];
            this._effectBundle = values["effect_bundle"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    CampaignPublicOrderPopulaceEffects.Entry = Entry;
})(CampaignPublicOrderPopulaceEffects$1 || (CampaignPublicOrderPopulaceEffects$1 = {}));

var CampaignRegionTransformationCompositeScenes;
(function (CampaignRegionTransformationCompositeScenes) {
    CampaignRegionTransformationCompositeScenes.KEY = new CollectionKey("campaign_region_transformation_composite_scenes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._compositeScene = values["composite_scene"];
            this._campaignGroup = values["campaign_group"];
        }
        get compositeScene() {
            const collection = this.collectionCache.getCollection(CampaignCompositeScenes.KEY, CampaignCompositeScenes.Entry);
            return collection.find(entry => entry.id === this._compositeScene);
        }
        get campaignGroup() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._campaignGroup);
        }
    }
    CampaignRegionTransformationCompositeScenes.Entry = Entry;
})(CampaignRegionTransformationCompositeScenes || (CampaignRegionTransformationCompositeScenes = {}));

var CampaignReligiousRelations;
(function (CampaignReligiousRelations) {
    CampaignReligiousRelations.KEY = new CollectionKey("campaign_religious_relations");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._source = values["source"];
            this._target = values["target"];
            this.positiveAttitudeMultiplier = values["positive_attitude_multiplier"];
            this.negativeAttitudeMultiplier = values["negative_attitude_multiplier"];
            this.attitudeBase = values["attitude_base"];
            this._campaign = values["campaign"];
        }
        get source() {
            const collection = this.collectionCache.getCollection(Religions$1.KEY, Religions$1.Entry);
            return collection.find(entry => entry.religionKey === this._source);
        }
        get target() {
            const collection = this.collectionCache.getCollection(Religions$1.KEY, Religions$1.Entry);
            return collection.find(entry => entry.religionKey === this._target);
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
    }
    CampaignReligiousRelations.Entry = Entry;
})(CampaignReligiousRelations || (CampaignReligiousRelations = {}));

var CampaignRogueArmyGroups;
(function (CampaignRogueArmyGroups) {
    CampaignRogueArmyGroups.KEY = new CollectionKey("campaign_rogue_army_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignRogueArmyGroups.Entry = Entry;
})(CampaignRogueArmyGroups || (CampaignRogueArmyGroups = {}));

var CampaignRogueArmyGroupUnits;
(function (CampaignRogueArmyGroupUnits) {
    CampaignRogueArmyGroupUnits.KEY = new CollectionKey("campaign_rogue_army_group_units");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._group = values["group"];
            this._unit = values["unit"];
            this.xp = values["xp"];
        }
        get group() {
            const collection = this.collectionCache.getCollection(CampaignRogueArmyGroups.KEY, CampaignRogueArmyGroups.Entry);
            return collection.find(entry => entry.key === this._group);
        }
        get unit() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
    }
    CampaignRogueArmyGroupUnits.Entry = Entry;
})(CampaignRogueArmyGroupUnits || (CampaignRogueArmyGroupUnits = {}));

var CampaignRogueArmyLeaders;
(function (CampaignRogueArmyLeaders) {
    CampaignRogueArmyLeaders.KEY = new CollectionKey("campaign_rogue_army_leaders");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._faction = values["faction"];
            this._agentSubtype = values["agent_subtype"];
            this.isMale = !!values["is_male"];
            this._name = values["name"];
            this._surname = values["surname"];
            this._clanName = values["clan_name"];
            this._otherName = values["other_name"];
            this._artset = values["artset"];
            this.canNaturallySpawn = !!values["can_naturally_spawn"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get agentSubtype() {
            const collection = this.collectionCache.getCollection(AgentSubtypes.KEY, AgentSubtypes.Entry);
            return collection.find(entry => entry.key === this._agentSubtype);
        }
        get name() {
            const collection = this.collectionCache.getCollection(Names$1.KEY, Names$1.Entry);
            return collection.find(entry => entry.id === this._name);
        }
        get surname() {
            const collection = this.collectionCache.getCollection(Names$1.KEY, Names$1.Entry);
            return collection.find(entry => entry.id === this._surname);
        }
        get clanName() {
            const collection = this.collectionCache.getCollection(Names$1.KEY, Names$1.Entry);
            return collection.find(entry => entry.id === this._clanName);
        }
        get otherName() {
            const collection = this.collectionCache.getCollection(Names$1.KEY, Names$1.Entry);
            return collection.find(entry => entry.id === this._otherName);
        }
        get artset() {
            const collection = this.collectionCache.getCollection(CampaignCharacterArtSets$1.KEY, CampaignCharacterArtSets$1.Entry);
            return collection.find(entry => entry.artSetId === this._artset);
        }
    }
    CampaignRogueArmyLeaders.Entry = Entry;
})(CampaignRogueArmyLeaders || (CampaignRogueArmyLeaders = {}));

var CampaignRogueArmySetups;
(function (CampaignRogueArmySetups) {
    CampaignRogueArmySetups.KEY = new CollectionKey("campaign_rogue_army_setups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._faction = values["faction"];
            this.difficultyLevel = values["difficulty_level"];
            this._group = values["group"];
            this.budget = values["budget"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get group() {
            const collection = this.collectionCache.getCollection(CampaignRogueArmyGroups.KEY, CampaignRogueArmyGroups.Entry);
            return collection.find(entry => entry.key === this._group);
        }
    }
    CampaignRogueArmySetups.Entry = Entry;
})(CampaignRogueArmySetups || (CampaignRogueArmySetups = {}));

var CampaignRogueArmySpawnGroups;
(function (CampaignRogueArmySpawnGroups) {
    CampaignRogueArmySpawnGroups.KEY = new CollectionKey("campaign_rogue_army_spawn_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._campaign = values["campaign"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
    }
    CampaignRogueArmySpawnGroups.Entry = Entry;
})(CampaignRogueArmySpawnGroups || (CampaignRogueArmySpawnGroups = {}));

var CampaignRogueArmySpawnLocations;
(function (CampaignRogueArmySpawnLocations) {
    CampaignRogueArmySpawnLocations.KEY = new CollectionKey("campaign_rogue_army_spawn_locations");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._group = values["group"];
            this.positionX = values["position_x"];
            this.positionY = values["position_y"];
            this.radius = values["radius"];
        }
        get group() {
            const collection = this.collectionCache.getCollection(CampaignRogueArmySpawnGroups.KEY, CampaignRogueArmySpawnGroups.Entry);
            return collection.find(entry => entry.key === this._group);
        }
    }
    CampaignRogueArmySpawnLocations.Entry = Entry;
})(CampaignRogueArmySpawnLocations || (CampaignRogueArmySpawnLocations = {}));

var CampaignRogueArmySpawnRegions;
(function (CampaignRogueArmySpawnRegions) {
    CampaignRogueArmySpawnRegions.KEY = new CollectionKey("campaign_rogue_army_spawn_regions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._group = values["group"];
            this._region = values["region"];
        }
        get group() {
            const collection = this.collectionCache.getCollection(CampaignRogueArmySpawnGroups.KEY, CampaignRogueArmySpawnGroups.Entry);
            return collection.find(entry => entry.key === this._group);
        }
        get region() {
            const collection = this.collectionCache.getCollection(Regions$1.KEY, Regions$1.Entry);
            return collection.find(entry => entry.key === this._region);
        }
    }
    CampaignRogueArmySpawnRegions.Entry = Entry;
})(CampaignRogueArmySpawnRegions || (CampaignRogueArmySpawnRegions = {}));

var CampaignSettlementDisplayBuildingModelIds;
(function (CampaignSettlementDisplayBuildingModelIds) {
    CampaignSettlementDisplayBuildingModelIds.KEY = new CollectionKey("campaign_settlement_display_building_model_ids");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
        }
    }
    CampaignSettlementDisplayBuildingModelIds.Entry = Entry;
})(CampaignSettlementDisplayBuildingModelIds || (CampaignSettlementDisplayBuildingModelIds = {}));

var CampaignSettlementDisplayBuildings$1;
(function (CampaignSettlementDisplayBuildings) {
    CampaignSettlementDisplayBuildings.KEY = new CollectionKey("campaign_settlement_display_buildings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._modelId = values["model_id"];
            this.buildingBmd = values["building_bmd"];
            this.portBmd = values["port_bmd"];
            this.constructionBmd = values["construction_bmd"];
            this.damagedBmd = values["damaged_bmd"];
            this.destroyedBmd = values["destroyed_bmd"];
            this.portConstructionBmd = values["port_construction_bmd"];
            this.wallBmd = values["wall_bmd"];
            this.portWalledBmd = values["port_walled_bmd"];
            this.onSeaBmd = values["on_sea_bmd"];
        }
        get modelId() {
            const collection = this.collectionCache.getCollection(CampaignSettlementDisplayBuildingModelIds.KEY, CampaignSettlementDisplayBuildingModelIds.Entry);
            return collection.find(entry => entry.id === this._modelId);
        }
    }
    CampaignSettlementDisplayBuildings.Entry = Entry;
})(CampaignSettlementDisplayBuildings$1 || (CampaignSettlementDisplayBuildings$1 = {}));

var CampaignSettlementDisplayBuildingsEnums$1;
(function (CampaignSettlementDisplayBuildingsEnums) {
    CampaignSettlementDisplayBuildingsEnums.KEY = new CollectionKey("campaign_settlement_display_buildings_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.type = values["type"];
        }
    }
    CampaignSettlementDisplayBuildingsEnums.Entry = Entry;
})(CampaignSettlementDisplayBuildingsEnums$1 || (CampaignSettlementDisplayBuildingsEnums$1 = {}));

var CampaignSettlementDisplayBuildingsOverlays;
(function (CampaignSettlementDisplayBuildingsOverlays) {
    CampaignSettlementDisplayBuildingsOverlays.KEY = new CollectionKey("campaign_settlement_display_buildings_overlays");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._modelId = values["model_id"];
            this.prefabType = values["prefab_type"];
            this.overlayBmd = values["overlay_bmd"];
        }
        get modelId() {
            const collection = this.collectionCache.getCollection(CampaignSettlementDisplayBuildingModelIds.KEY, CampaignSettlementDisplayBuildingModelIds.Entry);
            return collection.find(entry => entry.id === this._modelId);
        }
    }
    CampaignSettlementDisplayBuildingsOverlays.Entry = Entry;
})(CampaignSettlementDisplayBuildingsOverlays || (CampaignSettlementDisplayBuildingsOverlays = {}));

var CampaignSettlementDisplayBuildingCultureOverlays;
(function (CampaignSettlementDisplayBuildingCultureOverlays) {
    CampaignSettlementDisplayBuildingCultureOverlays.KEY = new CollectionKey("campaign_settlement_display_building_culture_overlays");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._culture = values["culture"];
            this.bmd = values["bmd"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
    }
    CampaignSettlementDisplayBuildingCultureOverlays.Entry = Entry;
})(CampaignSettlementDisplayBuildingCultureOverlays || (CampaignSettlementDisplayBuildingCultureOverlays = {}));

var CampaignSettlementDisplayBuildingIds$1;
(function (CampaignSettlementDisplayBuildingIds) {
    CampaignSettlementDisplayBuildingIds.KEY = new CollectionKey("campaign_settlement_display_building_ids");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._buildingLevelKey = values["building_level_key"];
            this._subCulture = values["sub_culture"];
            this._buildingModelId = values["building_model_id"];
        }
        get buildingLevelKey() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._buildingLevelKey);
        }
        get subCulture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subCulture);
        }
        get buildingModelId() {
            const collection = this.collectionCache.getCollection(CampaignSettlementDisplayBuildingModelIds.KEY, CampaignSettlementDisplayBuildingModelIds.Entry);
            return collection.find(entry => entry.id === this._buildingModelId);
        }
    }
    CampaignSettlementDisplayBuildingIds.Entry = Entry;
})(CampaignSettlementDisplayBuildingIds$1 || (CampaignSettlementDisplayBuildingIds$1 = {}));

var CampaignSettlementDisplayBuildingSiegeModels;
(function (CampaignSettlementDisplayBuildingSiegeModels) {
    CampaignSettlementDisplayBuildingSiegeModels.KEY = new CollectionKey("campaign_settlement_display_building_siege_models");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.modelBmd = values["model_bmd"];
            this.blockade = !!values["blockade"];
            this._culture = values["culture"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
    }
    CampaignSettlementDisplayBuildingSiegeModels.Entry = Entry;
})(CampaignSettlementDisplayBuildingSiegeModels || (CampaignSettlementDisplayBuildingSiegeModels = {}));

var CampaignSettlementDisplaySettlementRotations;
(function (CampaignSettlementDisplaySettlementRotations) {
    CampaignSettlementDisplaySettlementRotations.KEY = new CollectionKey("campaign_settlement_display_settlement_rotations");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._settlement = values["settlement"];
            this.rotation = values["rotation"];
        }
        get settlement() {
            const collection = this.collectionCache.getCollection(CampaignMapSettlements$1.KEY, CampaignMapSettlements$1.Entry);
            return collection.find(entry => entry.settlementId === this._settlement);
        }
    }
    CampaignSettlementDisplaySettlementRotations.Entry = Entry;
})(CampaignSettlementDisplaySettlementRotations || (CampaignSettlementDisplaySettlementRotations = {}));

var CampaignSettlementDisplaySprawlPieces$1;
(function (CampaignSettlementDisplaySprawlPieces) {
    CampaignSettlementDisplaySprawlPieces.KEY = new CollectionKey("campaign_settlement_display_sprawl_pieces");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignSettlementDisplaySprawlPieces.Entry = Entry;
})(CampaignSettlementDisplaySprawlPieces$1 || (CampaignSettlementDisplaySprawlPieces$1 = {}));

var CampaignStancesCompositeScenes;
(function (CampaignStancesCompositeScenes) {
    CampaignStancesCompositeScenes.KEY = new CollectionKey("campaign_stances_composite_scenes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._stance = values["stance"];
            this._group = values["group"];
            this._compositeScene = values["composite_scene"];
        }
        get stance() {
            const collection = this.collectionCache.getCollection(CampaignStances$1.KEY, CampaignStances$1.Entry);
            return collection.find(entry => entry.key === this._stance);
        }
        get group() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._group);
        }
        get compositeScene() {
            const collection = this.collectionCache.getCollection(CampaignCompositeScenes.KEY, CampaignCompositeScenes.Entry);
            return collection.find(entry => entry.id === this._compositeScene);
        }
    }
    CampaignStancesCompositeScenes.Entry = Entry;
})(CampaignStancesCompositeScenes || (CampaignStancesCompositeScenes = {}));

var CampaignStancesFactionsJunctions;
(function (CampaignStancesFactionsJunctions) {
    CampaignStancesFactionsJunctions.KEY = new CollectionKey("campaign_stances_factions_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._stance = values["stance"];
            this._faction = values["faction"];
        }
        get stance() {
            const collection = this.collectionCache.getCollection(CampaignStances$1.KEY, CampaignStances$1.Entry);
            return collection.find(entry => entry.key === this._stance);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    CampaignStancesFactionsJunctions.Entry = Entry;
})(CampaignStancesFactionsJunctions || (CampaignStancesFactionsJunctions = {}));

var CampaignStanceEffectsJunctions$1;
(function (CampaignStanceEffectsJunctions) {
    CampaignStanceEffectsJunctions.KEY = new CollectionKey("campaign_stance_effects_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._stance = values["stance"];
            this._effectBundle = values["effect_bundle"];
            this._culture = values["culture"];
            this._subculture = values["subculture"];
            this._faction = values["faction"];
            this._forceType = values["force_type"];
        }
        get stance() {
            const collection = this.collectionCache.getCollection(CampaignStances$1.KEY, CampaignStances$1.Entry);
            return collection.find(entry => entry.key === this._stance);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get forceType() {
            const collection = this.collectionCache.getCollection(MilitaryForceTypes.KEY, MilitaryForceTypes.Entry);
            return collection.find(entry => entry.key === this._forceType);
        }
    }
    CampaignStanceEffectsJunctions.Entry = Entry;
})(CampaignStanceEffectsJunctions$1 || (CampaignStanceEffectsJunctions$1 = {}));

var CampaignStatisticsCategories$1;
(function (CampaignStatisticsCategories) {
    CampaignStatisticsCategories.KEY = new CollectionKey("campaign_statistics_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.localisedDescription = values["localised_description"];
            this.categoryOrder = values["category_order"];
        }
    }
    CampaignStatisticsCategories.Entry = Entry;
})(CampaignStatisticsCategories$1 || (CampaignStatisticsCategories$1 = {}));

var CampaignStatisticsEnums$1;
(function (CampaignStatisticsEnums) {
    CampaignStatisticsEnums.KEY = new CollectionKey("campaign_statistics_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CampaignStatisticsEnums.Entry = Entry;
})(CampaignStatisticsEnums$1 || (CampaignStatisticsEnums$1 = {}));

var CampaignStatisticsStrings$1;
(function (CampaignStatisticsStrings) {
    CampaignStatisticsStrings.KEY = new CollectionKey("campaign_statistics_strings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignStatistic = values["campaign_statistic"];
            this.localisedDescription = values["localised_description"];
            this._campaignStatisticCategory = values["campaign_statistic_category"];
            this.statisticOrder = values["statistic_order"];
        }
        get campaignStatistic() {
            const collection = this.collectionCache.getCollection(CampaignStatisticsEnums$1.KEY, CampaignStatisticsEnums$1.Entry);
            return collection.find(entry => entry.key === this._campaignStatistic);
        }
        get campaignStatisticCategory() {
            const collection = this.collectionCache.getCollection(CampaignStatisticsCategories$1.KEY, CampaignStatisticsCategories$1.Entry);
            return collection.find(entry => entry.key === this._campaignStatisticCategory);
        }
    }
    CampaignStatisticsStrings.Entry = Entry;
})(CampaignStatisticsStrings$1 || (CampaignStatisticsStrings$1 = {}));

var CampaignStormTypes;
(function (CampaignStormTypes) {
    CampaignStormTypes.KEY = new CollectionKey("campaign_storm_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.type = values["type"];
            this.forLand = !!values["for_land"];
            this.forSea = !!values["for_sea"];
            this.canMove = !!values["can_move"];
            this.canDecay = !!values["can_decay"];
            this.canSpawnOverCharacter = !!values["can_spawn_over_character"];
            this.respectExcludedRegionsTable = !!values["respect_excluded_regions_table"];
        }
    }
    CampaignStormTypes.Entry = Entry;
})(CampaignStormTypes || (CampaignStormTypes = {}));

var CampaignStorms;
(function (CampaignStorms) {
    CampaignStorms.KEY = new CollectionKey("campaign_storms");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.displayName = values["display_name"];
            this._attrition = values["attrition"];
            this._compositeScene = values["composite_scene"];
            this.strength = values["strength"];
            this._tilingCompositeScene = values["tiling_composite_scene"];
            this._type = values["type"];
        }
        get attrition() {
            const collection = this.collectionCache.getCollection(CampaignMapAttritions$1.KEY, CampaignMapAttritions$1.Entry);
            return collection.find(entry => entry.key === this._attrition);
        }
        get compositeScene() {
            const collection = this.collectionCache.getCollection(CampaignCompositeScenes.KEY, CampaignCompositeScenes.Entry);
            return collection.find(entry => entry.id === this._compositeScene);
        }
        get tilingCompositeScene() {
            const collection = this.collectionCache.getCollection(CampaignCompositeScenes.KEY, CampaignCompositeScenes.Entry);
            return collection.find(entry => entry.id === this._tilingCompositeScene);
        }
        get type() {
            const collection = this.collectionCache.getCollection(CampaignStormTypes.KEY, CampaignStormTypes.Entry);
            return collection.find(entry => entry.type === this._type);
        }
    }
    CampaignStorms.Entry = Entry;
})(CampaignStorms || (CampaignStorms = {}));

var CampaignStormsExcludedRegions;
(function (CampaignStormsExcludedRegions) {
    CampaignStormsExcludedRegions.KEY = new CollectionKey("campaign_storms_excluded_regions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._region = values["region"];
        }
        get region() {
            const collection = this.collectionCache.getCollection(Regions$1.KEY, Regions$1.Entry);
            return collection.find(entry => entry.key === this._region);
        }
    }
    CampaignStormsExcludedRegions.Entry = Entry;
})(CampaignStormsExcludedRegions || (CampaignStormsExcludedRegions = {}));

var CampaignStormRegionDisplaySettings;
(function (CampaignStormRegionDisplaySettings) {
    CampaignStormRegionDisplaySettings.KEY = new CollectionKey("campaign_storm_region_display_settings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.region = values["region"];
            this.tilingVfxDistance = values["tiling_vfx_distance"];
            this.tilingVfxRandomJitter = values["tiling_vfx_random_jitter"];
            this.levelVfxDistance = values["level_vfx_distance"];
            this.levelVfxRandomJitter = values["level_vfx_random_jitter"];
        }
    }
    CampaignStormRegionDisplaySettings.Entry = Entry;
})(CampaignStormRegionDisplaySettings || (CampaignStormRegionDisplaySettings = {}));

var CampaignStringVariables;
(function (CampaignStringVariables) {
    CampaignStringVariables.KEY = new CollectionKey("campaign_string_variables");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.value = values["value"];
        }
    }
    CampaignStringVariables.Entry = Entry;
})(CampaignStringVariables || (CampaignStringVariables = {}));

var CampaignSubjectStrings$1;
(function (CampaignSubjectStrings) {
    CampaignSubjectStrings.KEY = new CollectionKey("campaign_subject_strings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.string = values["string"];
        }
    }
    CampaignSubjectStrings.Entry = Entry;
})(CampaignSubjectStrings$1 || (CampaignSubjectStrings$1 = {}));

var CampaignSubjects$1;
(function (CampaignSubjects) {
    CampaignSubjects.KEY = new CollectionKey("campaign_subjects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._optionalName = values["optional_name"];
            this.uiImage = values["ui_image"];
            this._flavourText = values["flavour_text"];
            this.male = !!values["male"];
        }
        get optionalName() {
            const collection = this.collectionCache.getCollection(CampaignSubjectStrings$1.KEY, CampaignSubjectStrings$1.Entry);
            return collection.find(entry => entry.key === this._optionalName);
        }
        get flavourText() {
            const collection = this.collectionCache.getCollection(CampaignSubjectStrings$1.KEY, CampaignSubjectStrings$1.Entry);
            return collection.find(entry => entry.key === this._flavourText);
        }
    }
    CampaignSubjects.Entry = Entry;
})(CampaignSubjects$1 || (CampaignSubjects$1 = {}));

var CampaignSubjectEvolutions$1;
(function (CampaignSubjectEvolutions) {
    CampaignSubjectEvolutions.KEY = new CollectionKey("campaign_subject_evolutions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._campaignSubjectKey = values["campaign_subject_key"];
            this._effectBundleKey = values["effect_bundle_key"];
            this.minTurns = values["min_turns"];
            this.maxTurns = values["max_turns"];
            this.weighting = values["weighting"];
            this._flavourText = values["flavour_text"];
        }
        get campaignSubjectKey() {
            const collection = this.collectionCache.getCollection(CampaignSubjects$1.KEY, CampaignSubjects$1.Entry);
            return collection.find(entry => entry.key === this._campaignSubjectKey);
        }
        get effectBundleKey() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundleKey);
        }
        get flavourText() {
            const collection = this.collectionCache.getCollection(CampaignSubjectStrings$1.KEY, CampaignSubjectStrings$1.Entry);
            return collection.find(entry => entry.key === this._flavourText);
        }
    }
    CampaignSubjectEvolutions.Entry = Entry;
})(CampaignSubjectEvolutions$1 || (CampaignSubjectEvolutions$1 = {}));

var CampaignSubjectEvolutionLinks$1;
(function (CampaignSubjectEvolutionLinks) {
    CampaignSubjectEvolutionLinks.KEY = new CollectionKey("campaign_subject_evolution_links");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._parent = values["parent"];
            this._child = values["child"];
        }
        get parent() {
            const collection = this.collectionCache.getCollection(CampaignSubjectEvolutions$1.KEY, CampaignSubjectEvolutions$1.Entry);
            return collection.find(entry => entry.key === this._parent);
        }
        get child() {
            const collection = this.collectionCache.getCollection(CampaignSubjectEvolutions$1.KEY, CampaignSubjectEvolutions$1.Entry);
            return collection.find(entry => entry.key === this._child);
        }
    }
    CampaignSubjectEvolutionLinks.Entry = Entry;
})(CampaignSubjectEvolutionLinks$1 || (CampaignSubjectEvolutionLinks$1 = {}));

var CampaignSubjectFactionRestrictionJunctions$1;
(function (CampaignSubjectFactionRestrictionJunctions) {
    CampaignSubjectFactionRestrictionJunctions.KEY = new CollectionKey("campaign_subject_faction_restriction_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignSubjectKey = values["campaign_subject_key"];
            this._factionKey = values["faction_key"];
        }
        get campaignSubjectKey() {
            const collection = this.collectionCache.getCollection(CampaignSubjects$1.KEY, CampaignSubjects$1.Entry);
            return collection.find(entry => entry.key === this._campaignSubjectKey);
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
    }
    CampaignSubjectFactionRestrictionJunctions.Entry = Entry;
})(CampaignSubjectFactionRestrictionJunctions$1 || (CampaignSubjectFactionRestrictionJunctions$1 = {}));

var CampaignTreeIds;
(function (CampaignTreeIds) {
    CampaignTreeIds.KEY = new CollectionKey("campaign_tree_ids");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.treeId = values["tree_id"];
            this.colourR = values["colour_r"];
            this.colourG = values["colour_g"];
            this.colourB = values["colour_b"];
            this.canBeRemoved = !!values["can_be_removed"];
            this.season = values["season"];
        }
    }
    CampaignTreeIds.Entry = Entry;
})(CampaignTreeIds || (CampaignTreeIds = {}));

var CampaignTreeTypes;
(function (CampaignTreeTypes) {
    CampaignTreeTypes.KEY = new CollectionKey("campaign_tree_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.treeType = values["tree_type"];
            this._gameExpansionKey = values["game_expansion_key"];
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
    }
    CampaignTreeTypes.Entry = Entry;
})(CampaignTreeTypes || (CampaignTreeTypes = {}));

var CampaignTreeTypeCultures;
(function (CampaignTreeTypeCultures) {
    CampaignTreeTypeCultures.KEY = new CollectionKey("campaign_tree_type_cultures");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._treeType = values["tree_type"];
            this._culture = values["culture"];
        }
        get treeType() {
            const collection = this.collectionCache.getCollection(CampaignTreeTypes.KEY, CampaignTreeTypes.Entry);
            return collection.find(entry => entry.treeType === this._treeType);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
    }
    CampaignTreeTypeCultures.Entry = Entry;
})(CampaignTreeTypeCultures || (CampaignTreeTypeCultures = {}));

var CampaignTreeVariants;
(function (CampaignTreeVariants) {
    CampaignTreeVariants.KEY = new CollectionKey("campaign_tree_variants");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._treeId = values["tree_id"];
            this._treeType = values["tree_type"];
            this.treeRigid = values["tree_rigid"];
            this._treeAudio = values["tree_audio"];
        }
        get treeId() {
            const collection = this.collectionCache.getCollection(CampaignTreeIds.KEY, CampaignTreeIds.Entry);
            return collection.find(entry => entry.treeId === this._treeId);
        }
        get treeType() {
            const collection = this.collectionCache.getCollection(CampaignTreeTypes.KEY, CampaignTreeTypes.Entry);
            return collection.find(entry => entry.treeType === this._treeType);
        }
        get treeAudio() {
            const collection = this.collectionCache.getCollection(AudioCampaignTreeTypes.KEY, AudioCampaignTreeTypes.Entry);
            return collection.find(entry => entry.key === this._treeAudio);
        }
    }
    CampaignTreeVariants.Entry = Entry;
})(CampaignTreeVariants || (CampaignTreeVariants = {}));

var CampaignTunnellingExcludedRegions;
(function (CampaignTunnellingExcludedRegions) {
    CampaignTunnellingExcludedRegions.KEY = new CollectionKey("campaign_tunnelling_excluded_regions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignGroup = values["campaign_group"];
        }
        get campaignGroup() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._campaignGroup);
        }
    }
    CampaignTunnellingExcludedRegions.Entry = Entry;
})(CampaignTunnellingExcludedRegions || (CampaignTunnellingExcludedRegions = {}));

var CampaignUnitStatBonuses$1;
(function (CampaignUnitStatBonuses) {
    CampaignUnitStatBonuses.KEY = new CollectionKey("campaign_unit_stat_bonuses");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.bonus = values["bonus"];
            this.level = values["level"];
            this.threshold = values["threshold"];
            this.description = values["description"];
            this.iconPath = values["icon_path"];
            this.upgradeCostNew = values["upgrade_cost_new"];
            this.upgradeCostFromPreviousLevel = values["upgrade_cost_from_previous_level"];
        }
    }
    CampaignUnitStatBonuses.Entry = Entry;
})(CampaignUnitStatBonuses$1 || (CampaignUnitStatBonuses$1 = {}));

var CampaignVfxCampaignVfxEventIds$1;
(function (CampaignVfxCampaignVfxEventIds) {
    CampaignVfxCampaignVfxEventIds.KEY = new CollectionKey("campaign_vfx_campaign_vfx_event_ids");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.campaignVfxEvent = values["campaign_vfx_event"];
        }
    }
    CampaignVfxCampaignVfxEventIds.Entry = Entry;
})(CampaignVfxCampaignVfxEventIds$1 || (CampaignVfxCampaignVfxEventIds$1 = {}));

var CampaignVfxDescriptions$1;
(function (CampaignVfxDescriptions) {
    CampaignVfxDescriptions.KEY = new CollectionKey("campaign_vfx_descriptions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._vfx = values["vfx"];
            this.xOffset = values["x_offset"];
            this.yOffset = values["y_offset"];
            this.zOffset = values["z_offset"];
            this.oneShot = !!values["one_shot"];
        }
        get vfx() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._vfx);
        }
    }
    CampaignVfxDescriptions.Entry = Entry;
})(CampaignVfxDescriptions$1 || (CampaignVfxDescriptions$1 = {}));

var CampaignVfxLookups$1;
(function (CampaignVfxLookups) {
    CampaignVfxLookups.KEY = new CollectionKey("campaign_vfx_lookups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._vfxEvent = values["vfx_event"];
            this._vfxDescription = values["vfx_description"];
            this._factionFilter = values["faction_filter"];
            this._cultureFilter = values["culture_filter"];
            this._agentFilter = values["agent_filter"];
        }
        get vfxEvent() {
            const collection = this.collectionCache.getCollection(CampaignVfxCampaignVfxEventIds$1.KEY, CampaignVfxCampaignVfxEventIds$1.Entry);
            return collection.find(entry => entry.campaignVfxEvent === this._vfxEvent);
        }
        get vfxDescription() {
            const collection = this.collectionCache.getCollection(CampaignVfxDescriptions$1.KEY, CampaignVfxDescriptions$1.Entry);
            return collection.find(entry => entry.key === this._vfxDescription);
        }
        get factionFilter() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._factionFilter);
        }
        get cultureFilter() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._cultureFilter);
        }
        get agentFilter() {
            const collection = this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry);
            return collection.find(entry => entry.key === this._agentFilter);
        }
    }
    CampaignVfxLookups.Entry = Entry;
})(CampaignVfxLookups$1 || (CampaignVfxLookups$1 = {}));

var Pdlc$1;
(function (Pdlc) {
    Pdlc.KEY = new CollectionKey("pdlc");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["ID"];
            this.steamId = values["SteamID"];
            this.description = values["description"];
            this.releaseOrder = values["release_order"];
            this._gameExpansionKey = values["game_expansion_key"];
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
    }
    Pdlc.Entry = Entry;
})(Pdlc$1 || (Pdlc$1 = {}));

var CampaignVideos;
(function (CampaignVideos) {
    CampaignVideos.KEY = new CollectionKey("campaign_videos");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._videoName = values["video_name"];
            this.localisedTitle = values["localised_title"];
            this._culture = values["culture"];
            this.campaignLocked = !!values["campaign_locked"];
            this.stillPath = values["still_path"];
            this.sort = values["sort"];
            this._pdlc = values["pdlc"];
        }
        get videoName() {
            const collection = this.collectionCache.getCollection(Videos$1.KEY, Videos$1.Entry);
            return collection.find(entry => entry.videoName === this._videoName);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get pdlc() {
            const collection = this.collectionCache.getCollection(Pdlc$1.KEY, Pdlc$1.Entry);
            return collection.find(entry => entry.id === this._pdlc);
        }
    }
    CampaignVideos.Entry = Entry;
})(CampaignVideos || (CampaignVideos = {}));

var CapturePointTypes$1;
(function (CapturePointTypes) {
    CapturePointTypes.KEY = new CollectionKey("capture_point_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreenName = values["onscreen_name"];
            this.iconName = values["icon_name"];
            this.visibilitySpottingRange = values["visibility_spotting_range"];
        }
    }
    CapturePointTypes.Entry = Entry;
})(CapturePointTypes$1 || (CapturePointTypes$1 = {}));

var CdirCampaignJunctions$1;
(function (CdirCampaignJunctions) {
    CdirCampaignJunctions.KEY = new CollectionKey("cdir_campaign_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._campaign = values["campaign"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
    }
    CdirCampaignJunctions.Entry = Entry;
})(CdirCampaignJunctions$1 || (CdirCampaignJunctions$1 = {}));

var CdirFactionJunctions$1;
(function (CdirFactionJunctions) {
    CdirFactionJunctions.KEY = new CollectionKey("cdir_faction_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._faction = values["faction"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    CdirFactionJunctions.Entry = Entry;
})(CdirFactionJunctions$1 || (CdirFactionJunctions$1 = {}));

var CdirConfigValues$1;
(function (CdirConfigValues) {
    CdirConfigValues.KEY = new CollectionKey("cdir_config_values");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CdirConfigValues.Entry = Entry;
})(CdirConfigValues$1 || (CdirConfigValues$1 = {}));

var CdirConfigs$1;
(function (CdirConfigs) {
    CdirConfigs.KEY = new CollectionKey("cdir_configs");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignKey = values["campaign_key"];
            this._factionKey = values["faction_key"];
            this._cdirConfigKey = values["cdir_config_key"];
            this.value = values["value"];
        }
        get campaignKey() {
            const collection = this.collectionCache.getCollection(CdirCampaignJunctions$1.KEY, CdirCampaignJunctions$1.Entry);
            return collection.find(entry => entry.key === this._campaignKey);
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(CdirFactionJunctions$1.KEY, CdirFactionJunctions$1.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get cdirConfigKey() {
            const collection = this.collectionCache.getCollection(CdirConfigValues$1.KEY, CdirConfigValues$1.Entry);
            return collection.find(entry => entry.key === this._cdirConfigKey);
        }
    }
    CdirConfigs.Entry = Entry;
})(CdirConfigs$1 || (CdirConfigs$1 = {}));

var CdirDesires$1;
(function (CdirDesires) {
    CdirDesires.KEY = new CollectionKey("cdir_desires");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CdirDesires.Entry = Entry;
})(CdirDesires$1 || (CdirDesires$1 = {}));

var CdirDesirePriorities$1;
(function (CdirDesirePriorities) {
    CdirDesirePriorities.KEY = new CollectionKey("cdir_desire_priorities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignKey = values["campaign_key"];
            this._desireKey = values["desire_key"];
            this.priority = values["priority"];
        }
        get campaignKey() {
            const collection = this.collectionCache.getCollection(CdirCampaignJunctions$1.KEY, CdirCampaignJunctions$1.Entry);
            return collection.find(entry => entry.key === this._campaignKey);
        }
        get desireKey() {
            const collection = this.collectionCache.getCollection(CdirDesires$1.KEY, CdirDesires$1.Entry);
            return collection.find(entry => entry.key === this._desireKey);
        }
    }
    CdirDesirePriorities.Entry = Entry;
})(CdirDesirePriorities$1 || (CdirDesirePriorities$1 = {}));

var CdirEventsDilemmaChoices$1;
(function (CdirEventsDilemmaChoices) {
    CdirEventsDilemmaChoices.KEY = new CollectionKey("cdir_events_dilemma_choices");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.choiceKey = values["choice_key"];
        }
    }
    CdirEventsDilemmaChoices.Entry = Entry;
})(CdirEventsDilemmaChoices$1 || (CdirEventsDilemmaChoices$1 = {}));

var CdirEventsDilemmaChoiceDetails$1;
(function (CdirEventsDilemmaChoiceDetails) {
    CdirEventsDilemmaChoiceDetails.KEY = new CollectionKey("cdir_events_dilemma_choice_details");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._dilemmaKey = values["dilemma_key"];
            this._choiceKey = values["choice_key"];
            this.localisedChoiceLabel = values["localised_choice_label"];
            this.localisedChoiceTitle = values["localised_choice_title"];
        }
        get dilemmaKey() {
            const collection = this.collectionCache.getCollection(Dilemmas$1.KEY, Dilemmas$1.Entry);
            return collection.find(entry => entry.key === this._dilemmaKey);
        }
        get choiceKey() {
            const collection = this.collectionCache.getCollection(CdirEventsDilemmaChoices$1.KEY, CdirEventsDilemmaChoices$1.Entry);
            return collection.find(entry => entry.choiceKey === this._choiceKey);
        }
    }
    CdirEventsDilemmaChoiceDetails.Entry = Entry;
})(CdirEventsDilemmaChoiceDetails$1 || (CdirEventsDilemmaChoiceDetails$1 = {}));

var CdirEventsDilemmaFollowupDilemmas$1;
(function (CdirEventsDilemmaFollowupDilemmas) {
    CdirEventsDilemmaFollowupDilemmas.KEY = new CollectionKey("cdir_events_dilemma_followup_dilemmas");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._dilemmaKey = values["dilemma_key"];
            this._choiceKey = values["choice_key"];
            this._followupDilemmaKey = values["followup_dilemma_key"];
        }
        get dilemmaKey() {
            const collection = this.collectionCache.getCollection(Dilemmas$1.KEY, Dilemmas$1.Entry);
            return collection.find(entry => entry.key === this._dilemmaKey);
        }
        get choiceKey() {
            const collection = this.collectionCache.getCollection(CdirEventsDilemmaChoices$1.KEY, CdirEventsDilemmaChoices$1.Entry);
            return collection.find(entry => entry.choiceKey === this._choiceKey);
        }
        get followupDilemmaKey() {
            const collection = this.collectionCache.getCollection(Dilemmas$1.KEY, Dilemmas$1.Entry);
            return collection.find(entry => entry.key === this._followupDilemmaKey);
        }
    }
    CdirEventsDilemmaFollowupDilemmas.Entry = Entry;
})(CdirEventsDilemmaFollowupDilemmas$1 || (CdirEventsDilemmaFollowupDilemmas$1 = {}));

var CdirEventsDilemmaFollowupMissions$1;
(function (CdirEventsDilemmaFollowupMissions) {
    CdirEventsDilemmaFollowupMissions.KEY = new CollectionKey("cdir_events_dilemma_followup_missions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._dilemmaKey = values["dilemma_key"];
            this._choiceKey = values["choice_key"];
            this._followupMissionKey = values["followup_mission_key"];
        }
        get dilemmaKey() {
            const collection = this.collectionCache.getCollection(Dilemmas$1.KEY, Dilemmas$1.Entry);
            return collection.find(entry => entry.key === this._dilemmaKey);
        }
        get choiceKey() {
            const collection = this.collectionCache.getCollection(CdirEventsDilemmaChoices$1.KEY, CdirEventsDilemmaChoices$1.Entry);
            return collection.find(entry => entry.choiceKey === this._choiceKey);
        }
        get followupMissionKey() {
            const collection = this.collectionCache.getCollection(Missions$1.KEY, Missions$1.Entry);
            return collection.find(entry => entry.key === this._followupMissionKey);
        }
    }
    CdirEventsDilemmaFollowupMissions.Entry = Entry;
})(CdirEventsDilemmaFollowupMissions$1 || (CdirEventsDilemmaFollowupMissions$1 = {}));

var Incidents$1;
(function (Incidents) {
    Incidents.KEY = new CollectionKey("incidents");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.uiImage = values["ui_image"];
            this.generate = !!values["generate"];
            this.prioritised = !!values["prioritised"];
            this.localisedTitle = values["localised_title"];
            this.localisedDescription = values["localised_description"];
            this._eventCategory = values["event_category"];
        }
        get eventCategory() {
            const collection = this.collectionCache.getCollection(CdirEventsCategories.KEY, CdirEventsCategories.Entry);
            return collection.find(entry => entry.categoryKey === this._eventCategory);
        }
    }
    Incidents.Entry = Entry;
})(Incidents$1 || (Incidents$1 = {}));

var CdirEventsDilemmaIncidents$1;
(function (CdirEventsDilemmaIncidents) {
    CdirEventsDilemmaIncidents.KEY = new CollectionKey("cdir_events_dilemma_incidents");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._dilemmaKey = values["dilemma_key"];
            this._choiceKey = values["choice_key"];
            this._incidentKey = values["incident_key"];
        }
        get dilemmaKey() {
            const collection = this.collectionCache.getCollection(Dilemmas$1.KEY, Dilemmas$1.Entry);
            return collection.find(entry => entry.key === this._dilemmaKey);
        }
        get choiceKey() {
            const collection = this.collectionCache.getCollection(CdirEventsDilemmaChoices$1.KEY, CdirEventsDilemmaChoices$1.Entry);
            return collection.find(entry => entry.choiceKey === this._choiceKey);
        }
        get incidentKey() {
            const collection = this.collectionCache.getCollection(Incidents$1.KEY, Incidents$1.Entry);
            return collection.find(entry => entry.key === this._incidentKey);
        }
    }
    CdirEventsDilemmaIncidents.Entry = Entry;
})(CdirEventsDilemmaIncidents$1 || (CdirEventsDilemmaIncidents$1 = {}));

var CdirEventsDilemmaOptions$1;
(function (CdirEventsDilemmaOptions) {
    CdirEventsDilemmaOptions.KEY = new CollectionKey("cdir_events_dilemma_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.optionKey = values["option_key"];
        }
    }
    CdirEventsDilemmaOptions.Entry = Entry;
})(CdirEventsDilemmaOptions$1 || (CdirEventsDilemmaOptions$1 = {}));

var CdirEventsOptions;
(function (CdirEventsOptions) {
    CdirEventsOptions.KEY = new CollectionKey("cdir_events_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.optionKey = values["option_key"];
            this.notes = values["notes"];
        }
    }
    CdirEventsOptions.Entry = Entry;
})(CdirEventsOptions || (CdirEventsOptions = {}));

var CdirEventsDilemmaOptionJunctions$1;
(function (CdirEventsDilemmaOptionJunctions) {
    CdirEventsDilemmaOptionJunctions.KEY = new CollectionKey("cdir_events_dilemma_option_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._dilemmaKey = values["dilemma_key"];
            this._optionKey = values["option_key"];
            this.value = values["value"];
        }
        get dilemmaKey() {
            const collection = this.collectionCache.getCollection(Dilemmas$1.KEY, Dilemmas$1.Entry);
            return collection.find(entry => entry.key === this._dilemmaKey);
        }
        get optionKey() {
            const collection = this.collectionCache.getCollection(CdirEventsOptions.KEY, CdirEventsOptions.Entry);
            return collection.find(entry => entry.optionKey === this._optionKey);
        }
    }
    CdirEventsDilemmaOptionJunctions.Entry = Entry;
})(CdirEventsDilemmaOptionJunctions$1 || (CdirEventsDilemmaOptionJunctions$1 = {}));

var CdirEventsPayloads$1;
(function (CdirEventsPayloads) {
    CdirEventsPayloads.KEY = new CollectionKey("cdir_events_payloads");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.payloadKey = values["payload_key"];
            this._effectBundleKey = values["effect_bundle_key"];
        }
        get effectBundleKey() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundleKey);
        }
    }
    CdirEventsPayloads.Entry = Entry;
})(CdirEventsPayloads$1 || (CdirEventsPayloads$1 = {}));

var CdirEventsDilemmaPayloads$1;
(function (CdirEventsDilemmaPayloads) {
    CdirEventsDilemmaPayloads.KEY = new CollectionKey("cdir_events_dilemma_payloads");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._dilemmaKey = values["dilemma_key"];
            this._choiceKey = values["choice_key"];
            this._payloadKey = values["payload_key"];
            this.value = values["value"];
        }
        get dilemmaKey() {
            const collection = this.collectionCache.getCollection(Dilemmas$1.KEY, Dilemmas$1.Entry);
            return collection.find(entry => entry.key === this._dilemmaKey);
        }
        get choiceKey() {
            const collection = this.collectionCache.getCollection(CdirEventsDilemmaChoices$1.KEY, CdirEventsDilemmaChoices$1.Entry);
            return collection.find(entry => entry.choiceKey === this._choiceKey);
        }
        get payloadKey() {
            const collection = this.collectionCache.getCollection(CdirEventsPayloads$1.KEY, CdirEventsPayloads$1.Entry);
            return collection.find(entry => entry.payloadKey === this._payloadKey);
        }
    }
    CdirEventsDilemmaPayloads.Entry = Entry;
})(CdirEventsDilemmaPayloads$1 || (CdirEventsDilemmaPayloads$1 = {}));

var CdirEventsIncidentFollowupDilemmas$1;
(function (CdirEventsIncidentFollowupDilemmas) {
    CdirEventsIncidentFollowupDilemmas.KEY = new CollectionKey("cdir_events_incident_followup_dilemmas");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._incidentKey = values["incident_key"];
            this._followupDliemmaKey = values["followup_dliemma_key"];
        }
        get incidentKey() {
            const collection = this.collectionCache.getCollection(Incidents$1.KEY, Incidents$1.Entry);
            return collection.find(entry => entry.key === this._incidentKey);
        }
        get followupDliemmaKey() {
            const collection = this.collectionCache.getCollection(Dilemmas$1.KEY, Dilemmas$1.Entry);
            return collection.find(entry => entry.key === this._followupDliemmaKey);
        }
    }
    CdirEventsIncidentFollowupDilemmas.Entry = Entry;
})(CdirEventsIncidentFollowupDilemmas$1 || (CdirEventsIncidentFollowupDilemmas$1 = {}));

var CdirEventsIncidentFollowupIncidents$1;
(function (CdirEventsIncidentFollowupIncidents) {
    CdirEventsIncidentFollowupIncidents.KEY = new CollectionKey("cdir_events_incident_followup_incidents");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._incidentKey = values["incident_key"];
            this._followupIncidentKey = values["followup_incident_key"];
        }
        get incidentKey() {
            const collection = this.collectionCache.getCollection(Incidents$1.KEY, Incidents$1.Entry);
            return collection.find(entry => entry.key === this._incidentKey);
        }
        get followupIncidentKey() {
            const collection = this.collectionCache.getCollection(Incidents$1.KEY, Incidents$1.Entry);
            return collection.find(entry => entry.key === this._followupIncidentKey);
        }
    }
    CdirEventsIncidentFollowupIncidents.Entry = Entry;
})(CdirEventsIncidentFollowupIncidents$1 || (CdirEventsIncidentFollowupIncidents$1 = {}));

var CdirEventsIncidentFollowupMissions$1;
(function (CdirEventsIncidentFollowupMissions) {
    CdirEventsIncidentFollowupMissions.KEY = new CollectionKey("cdir_events_incident_followup_missions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._incidentKey = values["incident_key"];
            this._followupMissionKey = values["followup_mission_key"];
        }
        get incidentKey() {
            const collection = this.collectionCache.getCollection(Incidents$1.KEY, Incidents$1.Entry);
            return collection.find(entry => entry.key === this._incidentKey);
        }
        get followupMissionKey() {
            const collection = this.collectionCache.getCollection(Missions$1.KEY, Missions$1.Entry);
            return collection.find(entry => entry.key === this._followupMissionKey);
        }
    }
    CdirEventsIncidentFollowupMissions.Entry = Entry;
})(CdirEventsIncidentFollowupMissions$1 || (CdirEventsIncidentFollowupMissions$1 = {}));

var CdirEventsIncidentOptions$1;
(function (CdirEventsIncidentOptions) {
    CdirEventsIncidentOptions.KEY = new CollectionKey("cdir_events_incident_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.optionKey = values["option_key"];
        }
    }
    CdirEventsIncidentOptions.Entry = Entry;
})(CdirEventsIncidentOptions$1 || (CdirEventsIncidentOptions$1 = {}));

var CdirEventsIncidentOptionJunctions$1;
(function (CdirEventsIncidentOptionJunctions) {
    CdirEventsIncidentOptionJunctions.KEY = new CollectionKey("cdir_events_incident_option_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._incidentKey = values["incident_key"];
            this._optionKey = values["option_key"];
            this.value = values["value"];
        }
        get incidentKey() {
            const collection = this.collectionCache.getCollection(Incidents$1.KEY, Incidents$1.Entry);
            return collection.find(entry => entry.key === this._incidentKey);
        }
        get optionKey() {
            const collection = this.collectionCache.getCollection(CdirEventsOptions.KEY, CdirEventsOptions.Entry);
            return collection.find(entry => entry.optionKey === this._optionKey);
        }
    }
    CdirEventsIncidentOptionJunctions.Entry = Entry;
})(CdirEventsIncidentOptionJunctions$1 || (CdirEventsIncidentOptionJunctions$1 = {}));

var CdirEventsIncidentPayloads$1;
(function (CdirEventsIncidentPayloads) {
    CdirEventsIncidentPayloads.KEY = new CollectionKey("cdir_events_incident_payloads");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._incidentKey = values["incident_key"];
            this._payloadKey = values["payload_key"];
            this.value = values["value"];
        }
        get incidentKey() {
            const collection = this.collectionCache.getCollection(Incidents$1.KEY, Incidents$1.Entry);
            return collection.find(entry => entry.key === this._incidentKey);
        }
        get payloadKey() {
            const collection = this.collectionCache.getCollection(CdirEventsPayloads$1.KEY, CdirEventsPayloads$1.Entry);
            return collection.find(entry => entry.payloadKey === this._payloadKey);
        }
    }
    CdirEventsIncidentPayloads.Entry = Entry;
})(CdirEventsIncidentPayloads$1 || (CdirEventsIncidentPayloads$1 = {}));

var CdirEventsMissionStatuses$1;
(function (CdirEventsMissionStatuses) {
    CdirEventsMissionStatuses.KEY = new CollectionKey("cdir_events_mission_statuses");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.statusKey = values["status_key"];
        }
    }
    CdirEventsMissionStatuses.Entry = Entry;
})(CdirEventsMissionStatuses$1 || (CdirEventsMissionStatuses$1 = {}));

var CdirEventsMissionFollowupDilemmas$1;
(function (CdirEventsMissionFollowupDilemmas) {
    CdirEventsMissionFollowupDilemmas.KEY = new CollectionKey("cdir_events_mission_followup_dilemmas");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._missionKey = values["mission_key"];
            this._statusKey = values["status_key"];
            this._followupDilemmaKey = values["followup_dilemma_key"];
        }
        get missionKey() {
            const collection = this.collectionCache.getCollection(Missions$1.KEY, Missions$1.Entry);
            return collection.find(entry => entry.key === this._missionKey);
        }
        get statusKey() {
            const collection = this.collectionCache.getCollection(CdirEventsMissionStatuses$1.KEY, CdirEventsMissionStatuses$1.Entry);
            return collection.find(entry => entry.statusKey === this._statusKey);
        }
        get followupDilemmaKey() {
            const collection = this.collectionCache.getCollection(Dilemmas$1.KEY, Dilemmas$1.Entry);
            return collection.find(entry => entry.key === this._followupDilemmaKey);
        }
    }
    CdirEventsMissionFollowupDilemmas.Entry = Entry;
})(CdirEventsMissionFollowupDilemmas$1 || (CdirEventsMissionFollowupDilemmas$1 = {}));

var CdirEventsMissionFollowupMissions$1;
(function (CdirEventsMissionFollowupMissions) {
    CdirEventsMissionFollowupMissions.KEY = new CollectionKey("cdir_events_mission_followup_missions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._missionKey = values["mission_key"];
            this._statusKey = values["status_key"];
            this._followupMissionKey = values["followup_mission_key"];
        }
        get missionKey() {
            const collection = this.collectionCache.getCollection(Missions$1.KEY, Missions$1.Entry);
            return collection.find(entry => entry.key === this._missionKey);
        }
        get statusKey() {
            const collection = this.collectionCache.getCollection(CdirEventsMissionStatuses$1.KEY, CdirEventsMissionStatuses$1.Entry);
            return collection.find(entry => entry.statusKey === this._statusKey);
        }
        get followupMissionKey() {
            const collection = this.collectionCache.getCollection(Missions$1.KEY, Missions$1.Entry);
            return collection.find(entry => entry.key === this._followupMissionKey);
        }
    }
    CdirEventsMissionFollowupMissions.Entry = Entry;
})(CdirEventsMissionFollowupMissions$1 || (CdirEventsMissionFollowupMissions$1 = {}));

var CdirEventsMissionIncidents$1;
(function (CdirEventsMissionIncidents) {
    CdirEventsMissionIncidents.KEY = new CollectionKey("cdir_events_mission_incidents");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._missionKey = values["mission_key"];
            this._statusKey = values["status_key"];
            this._incidentKey = values["incident_key"];
        }
        get missionKey() {
            const collection = this.collectionCache.getCollection(Missions$1.KEY, Missions$1.Entry);
            return collection.find(entry => entry.key === this._missionKey);
        }
        get statusKey() {
            const collection = this.collectionCache.getCollection(CdirEventsMissionStatuses$1.KEY, CdirEventsMissionStatuses$1.Entry);
            return collection.find(entry => entry.statusKey === this._statusKey);
        }
        get incidentKey() {
            const collection = this.collectionCache.getCollection(Incidents$1.KEY, Incidents$1.Entry);
            return collection.find(entry => entry.key === this._incidentKey);
        }
    }
    CdirEventsMissionIncidents.Entry = Entry;
})(CdirEventsMissionIncidents$1 || (CdirEventsMissionIncidents$1 = {}));

var MissionIssuers$1;
(function (MissionIssuers) {
    MissionIssuers.KEY = new CollectionKey("mission_issuers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.issuerKey = values["issuer_key"];
            this.iconPath = values["icon_path"];
            this.onScreenName = values["on_screen_name"];
        }
    }
    MissionIssuers.Entry = Entry;
})(MissionIssuers$1 || (MissionIssuers$1 = {}));

var CdirEventsMissionIssuerJunctions$1;
(function (CdirEventsMissionIssuerJunctions) {
    CdirEventsMissionIssuerJunctions.KEY = new CollectionKey("cdir_events_mission_issuer_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._missionKey = values["mission_key"];
            this._issuerKey = values["issuer_key"];
        }
        get missionKey() {
            const collection = this.collectionCache.getCollection(Missions$1.KEY, Missions$1.Entry);
            return collection.find(entry => entry.key === this._missionKey);
        }
        get issuerKey() {
            const collection = this.collectionCache.getCollection(MissionIssuers$1.KEY, MissionIssuers$1.Entry);
            return collection.find(entry => entry.issuerKey === this._issuerKey);
        }
    }
    CdirEventsMissionIssuerJunctions.Entry = Entry;
})(CdirEventsMissionIssuerJunctions$1 || (CdirEventsMissionIssuerJunctions$1 = {}));

var CdirEventsMissionOptions$1;
(function (CdirEventsMissionOptions) {
    CdirEventsMissionOptions.KEY = new CollectionKey("cdir_events_mission_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.optionKey = values["option_key"];
        }
    }
    CdirEventsMissionOptions.Entry = Entry;
})(CdirEventsMissionOptions$1 || (CdirEventsMissionOptions$1 = {}));

var CdirEventsMissionOptionJunctions$1;
(function (CdirEventsMissionOptionJunctions) {
    CdirEventsMissionOptionJunctions.KEY = new CollectionKey("cdir_events_mission_option_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._missionKey = values["mission_key"];
            this._optionKey = values["option_key"];
            this.value = values["value"];
            this._gameExpansionKey = values["game_expansion_key"];
        }
        get missionKey() {
            const collection = this.collectionCache.getCollection(Missions$1.KEY, Missions$1.Entry);
            return collection.find(entry => entry.key === this._missionKey);
        }
        get optionKey() {
            const collection = this.collectionCache.getCollection(CdirEventsOptions.KEY, CdirEventsOptions.Entry);
            return collection.find(entry => entry.optionKey === this._optionKey);
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
    }
    CdirEventsMissionOptionJunctions.Entry = Entry;
})(CdirEventsMissionOptionJunctions$1 || (CdirEventsMissionOptionJunctions$1 = {}));

var CdirEventsMissionPayloads$1;
(function (CdirEventsMissionPayloads) {
    CdirEventsMissionPayloads.KEY = new CollectionKey("cdir_events_mission_payloads");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._missionKey = values["mission_key"];
            this._statusKey = values["status_key"];
            this._payloadKey = values["payload_key"];
            this.value = values["value"];
        }
        get missionKey() {
            const collection = this.collectionCache.getCollection(Missions$1.KEY, Missions$1.Entry);
            return collection.find(entry => entry.key === this._missionKey);
        }
        get statusKey() {
            const collection = this.collectionCache.getCollection(CdirEventsMissionStatuses$1.KEY, CdirEventsMissionStatuses$1.Entry);
            return collection.find(entry => entry.statusKey === this._statusKey);
        }
        get payloadKey() {
            const collection = this.collectionCache.getCollection(CdirEventsPayloads$1.KEY, CdirEventsPayloads$1.Entry);
            return collection.find(entry => entry.payloadKey === this._payloadKey);
        }
    }
    CdirEventsMissionPayloads.Entry = Entry;
})(CdirEventsMissionPayloads$1 || (CdirEventsMissionPayloads$1 = {}));

var CdirMilitaryGeneratorTemplates$1;
(function (CdirMilitaryGeneratorTemplates) {
    CdirMilitaryGeneratorTemplates.KEY = new CollectionKey("cdir_military_generator_templates");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._gameExpansionKey = values["game_expansion_key"];
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
    }
    CdirMilitaryGeneratorTemplates.Entry = Entry;
})(CdirMilitaryGeneratorTemplates$1 || (CdirMilitaryGeneratorTemplates$1 = {}));

var CdirMilitaryGeneratorTemplatePriorities$1;
(function (CdirMilitaryGeneratorTemplatePriorities) {
    CdirMilitaryGeneratorTemplatePriorities.KEY = new CollectionKey("cdir_military_generator_template_priorities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._configKey = values["config_key"];
            this._templateKey = values["template_key"];
            this.priority = values["priority"];
            this.leaderOnly = !!values["leader_only"];
        }
        get configKey() {
            const collection = this.collectionCache.getCollection(CdirMilitaryGeneratorConfigs$1.KEY, CdirMilitaryGeneratorConfigs$1.Entry);
            return collection.find(entry => entry.key === this._configKey);
        }
        get templateKey() {
            const collection = this.collectionCache.getCollection(CdirMilitaryGeneratorTemplates$1.KEY, CdirMilitaryGeneratorTemplates$1.Entry);
            return collection.find(entry => entry.key === this._templateKey);
        }
    }
    CdirMilitaryGeneratorTemplatePriorities.Entry = Entry;
})(CdirMilitaryGeneratorTemplatePriorities$1 || (CdirMilitaryGeneratorTemplatePriorities$1 = {}));

var CdirMilitaryGeneratorTemplateRatios$1;
(function (CdirMilitaryGeneratorTemplateRatios) {
    CdirMilitaryGeneratorTemplateRatios.KEY = new CollectionKey("cdir_military_generator_template_ratios");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._templateKey = values["template_key"];
            this._unitGroupKey = values["unit_group_key"];
            this.ratio = values["ratio"];
        }
        get templateKey() {
            const collection = this.collectionCache.getCollection(CdirMilitaryGeneratorTemplates$1.KEY, CdirMilitaryGeneratorTemplates$1.Entry);
            return collection.find(entry => entry.key === this._templateKey);
        }
        get unitGroupKey() {
            const collection = this.collectionCache.getCollection(CdirMilitaryGeneratorUnitGroups$1.KEY, CdirMilitaryGeneratorUnitGroups$1.Entry);
            return collection.find(entry => entry.key === this._unitGroupKey);
        }
    }
    CdirMilitaryGeneratorTemplateRatios.Entry = Entry;
})(CdirMilitaryGeneratorTemplateRatios$1 || (CdirMilitaryGeneratorTemplateRatios$1 = {}));

var CdirMilitaryGeneratorUnitQualities$1;
(function (CdirMilitaryGeneratorUnitQualities) {
    CdirMilitaryGeneratorUnitQualities.KEY = new CollectionKey("cdir_military_generator_unit_qualities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._groupKey = values["group_key"];
            this._unitKey = values["unit_key"];
            this.quality = values["quality"];
        }
        get groupKey() {
            const collection = this.collectionCache.getCollection(CdirMilitaryGeneratorUnitGroups$1.KEY, CdirMilitaryGeneratorUnitGroups$1.Entry);
            return collection.find(entry => entry.key === this._groupKey);
        }
        get unitKey() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unitKey);
        }
    }
    CdirMilitaryGeneratorUnitQualities.Entry = Entry;
})(CdirMilitaryGeneratorUnitQualities$1 || (CdirMilitaryGeneratorUnitQualities$1 = {}));

var CharacterExperienceSkillTiers$1;
(function (CharacterExperienceSkillTiers) {
    CharacterExperienceSkillTiers.KEY = new CollectionKey("character_experience_skill_tiers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._agentKey = values["agent_key"];
            this.skillRank = values["skill_rank"];
            this.experienceThreshold = values["experience_threshold"];
            this.skillPoints = values["skill_points"];
            this._optionalCampaignKey = values["optional_campaign_key"];
            this.forArmy = !!values["for_army"];
            this.forNavy = !!values["for_navy"];
        }
        get agentKey() {
            const collection = this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry);
            return collection.find(entry => entry.key === this._agentKey);
        }
        get optionalCampaignKey() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._optionalCampaignKey);
        }
    }
    CharacterExperienceSkillTiers.Entry = Entry;
})(CharacterExperienceSkillTiers$1 || (CharacterExperienceSkillTiers$1 = {}));

var CharacterSkillsToQuestAncillaries;
(function (CharacterSkillsToQuestAncillaries) {
    CharacterSkillsToQuestAncillaries.KEY = new CollectionKey("character_skills_to_quest_ancillaries");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._skill = values["skill"];
            this._ancillary = values["ancillary"];
            this.useQuestForPrefix = !!values["use_quest_for_prefix"];
        }
        get skill() {
            const collection = this.collectionCache.getCollection(CharacterSkills$1.KEY, CharacterSkills$1.Entry);
            return collection.find(entry => entry.key === this._skill);
        }
        get ancillary() {
            const collection = this.collectionCache.getCollection(Ancillaries$1.KEY, Ancillaries$1.Entry);
            return collection.find(entry => entry._key === this._ancillary);
        }
    }
    CharacterSkillsToQuestAncillaries.Entry = Entry;
})(CharacterSkillsToQuestAncillaries || (CharacterSkillsToQuestAncillaries = {}));

var CharacterSkillCategories;
(function (CharacterSkillCategories) {
    CharacterSkillCategories.KEY = new CollectionKey("character_skill_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.minIndent = values["min_indent"];
            this.maxIndent = values["max_indent"];
            this.order = values["order"];
            this.colR = values["col_r"];
            this.colG = values["col_g"];
            this.colB = values["col_b"];
            this._agentSubtypeOverride = values["agent_subtype_override"];
        }
        get agentSubtypeOverride() {
            const collection = this.collectionCache.getCollection(AgentSubtypes.KEY, AgentSubtypes.Entry);
            return collection.find(entry => entry.key === this._agentSubtypeOverride);
        }
    }
    CharacterSkillCategories.Entry = Entry;
})(CharacterSkillCategories || (CharacterSkillCategories = {}));

var CharacterSkillLevelDetails$1;
(function (CharacterSkillLevelDetails) {
    CharacterSkillLevelDetails.KEY = new CollectionKey("character_skill_level_details");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.level = values["level"];
            this._skillKey = values["skill_key"];
            this._factionKey = values["faction_key"];
            this._campaignKey = values["campaign_key"];
            this._subcultureKey = values["subculture_key"];
            this.localisedName = values["localised_name"];
            this.localisedDescription = values["localised_description"];
            this.imagePath = values["image_path"];
            this.unlockedAtRank = values["unlocked_at_rank"];
        }
        get skillKey() {
            const collection = this.collectionCache.getCollection(CharacterSkills$1.KEY, CharacterSkills$1.Entry);
            return collection.find(entry => entry.key === this._skillKey);
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get campaignKey() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaignKey);
        }
        get subcultureKey() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subcultureKey);
        }
    }
    CharacterSkillLevelDetails.Entry = Entry;
})(CharacterSkillLevelDetails$1 || (CharacterSkillLevelDetails$1 = {}));

var CharacterSkillLevelToAncillariesJunctions;
(function (CharacterSkillLevelToAncillariesJunctions) {
    CharacterSkillLevelToAncillariesJunctions.KEY = new CollectionKey("character_skill_level_to_ancillaries_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._skill = values["skill"];
            this._grantedAncillary = values["granted_ancillary"];
            this.level = values["level"];
        }
        get skill() {
            const collection = this.collectionCache.getCollection(CharacterSkills$1.KEY, CharacterSkills$1.Entry);
            return collection.find(entry => entry.key === this._skill);
        }
        get grantedAncillary() {
            const collection = this.collectionCache.getCollection(Ancillaries$1.KEY, Ancillaries$1.Entry);
            return collection.find(entry => entry._key === this._grantedAncillary);
        }
    }
    CharacterSkillLevelToAncillariesJunctions.Entry = Entry;
})(CharacterSkillLevelToAncillariesJunctions || (CharacterSkillLevelToAncillariesJunctions = {}));

var CharacterSkillLevelToDilemmasJunctions;
(function (CharacterSkillLevelToDilemmasJunctions) {
    CharacterSkillLevelToDilemmasJunctions.KEY = new CollectionKey("character_skill_level_to_dilemmas_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._characterSkillKey = values["character_skill_key"];
            this.level = values["level"];
            this._dilemmaKey = values["dilemma_key"];
            this.randomSelection = !!values["random_selection"];
        }
        get characterSkillKey() {
            const collection = this.collectionCache.getCollection(CharacterSkills$1.KEY, CharacterSkills$1.Entry);
            return collection.find(entry => entry.key === this._characterSkillKey);
        }
        get dilemmaKey() {
            const collection = this.collectionCache.getCollection(Dilemmas$1.KEY, Dilemmas$1.Entry);
            return collection.find(entry => entry.key === this._dilemmaKey);
        }
    }
    CharacterSkillLevelToDilemmasJunctions.Entry = Entry;
})(CharacterSkillLevelToDilemmasJunctions || (CharacterSkillLevelToDilemmasJunctions = {}));

var CharacterSkillLevelToEffectsJunctions$1;
(function (CharacterSkillLevelToEffectsJunctions) {
    CharacterSkillLevelToEffectsJunctions.KEY = new CollectionKey("character_skill_level_to_effects_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._characterSkillKey = values["character_skill_key"];
            this.level = values["level"];
            this._effectKey = values["effect_key"];
            this.value = values["value"];
            this.isFactionwide = !!values["is_factionwide"];
            this._effectScope = values["effect_scope"];
        }
        get characterSkillKey() {
            const collection = this.collectionCache.getCollection(CharacterSkills$1.KEY, CharacterSkills$1.Entry);
            return collection.find(entry => entry.key === this._characterSkillKey);
        }
        get effectKey() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effectKey);
        }
        get effectScope() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes$1.KEY, CampaignEffectScopes$1.Entry);
            return collection.find(entry => entry.key === this._effectScope);
        }
    }
    CharacterSkillLevelToEffectsJunctions.Entry = Entry;
})(CharacterSkillLevelToEffectsJunctions$1 || (CharacterSkillLevelToEffectsJunctions$1 = {}));

var CharacterSkillLevelToIncidentsJunctions;
(function (CharacterSkillLevelToIncidentsJunctions) {
    CharacterSkillLevelToIncidentsJunctions.KEY = new CollectionKey("character_skill_level_to_incidents_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._characterSkillKey = values["character_skill_key"];
            this.level = values["level"];
            this._incidentKey = values["incident_key"];
            this.randomSelection = !!values["random_selection"];
        }
        get characterSkillKey() {
            const collection = this.collectionCache.getCollection(CharacterSkills$1.KEY, CharacterSkills$1.Entry);
            return collection.find(entry => entry.key === this._characterSkillKey);
        }
        get incidentKey() {
            const collection = this.collectionCache.getCollection(Incidents$1.KEY, Incidents$1.Entry);
            return collection.find(entry => entry.key === this._incidentKey);
        }
    }
    CharacterSkillLevelToIncidentsJunctions.Entry = Entry;
})(CharacterSkillLevelToIncidentsJunctions || (CharacterSkillLevelToIncidentsJunctions = {}));

var CharacterSkillLevelToMissionsJunctions;
(function (CharacterSkillLevelToMissionsJunctions) {
    CharacterSkillLevelToMissionsJunctions.KEY = new CollectionKey("character_skill_level_to_missions_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._characterSkillKey = values["character_skill_key"];
            this.level = values["level"];
            this._missionKey = values["mission_key"];
            this.randomSelection = !!values["random_selection"];
        }
        get characterSkillKey() {
            const collection = this.collectionCache.getCollection(CharacterSkills$1.KEY, CharacterSkills$1.Entry);
            return collection.find(entry => entry.key === this._characterSkillKey);
        }
        get missionKey() {
            const collection = this.collectionCache.getCollection(Missions$1.KEY, Missions$1.Entry);
            return collection.find(entry => entry.key === this._missionKey);
        }
    }
    CharacterSkillLevelToMissionsJunctions.Entry = Entry;
})(CharacterSkillLevelToMissionsJunctions || (CharacterSkillLevelToMissionsJunctions = {}));

var CharacterSkillNodeSets$1;
(function (CharacterSkillNodeSets) {
    CharacterSkillNodeSets.KEY = new CollectionKey("character_skill_node_sets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._factionKey = values["faction_key"];
            this._campaignKey = values["campaign_key"];
            this._agentKey = values["agent_key"];
            this.encTitle = values["enc_title"];
            this._subculture = values["subculture"];
            this.forArmy = !!values["for_army"];
            this.forNavy = !!values["for_navy"];
            this._agentSubtypeKey = values["agent_subtype_key"];
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get campaignKey() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaignKey);
        }
        get agentKey() {
            const collection = this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry);
            return collection.find(entry => entry.key === this._agentKey);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
        get agentSubtypeKey() {
            const collection = this.collectionCache.getCollection(AgentSubtypes.KEY, AgentSubtypes.Entry);
            return collection.find(entry => entry.key === this._agentSubtypeKey);
        }
    }
    CharacterSkillNodeSets.Entry = Entry;
})(CharacterSkillNodeSets$1 || (CharacterSkillNodeSets$1 = {}));

var CharacterSkillNodes$1;
(function (CharacterSkillNodes) {
    CharacterSkillNodes.KEY = new CollectionKey("character_skill_nodes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._characterSkillNodeSetKey = values["character_skill_node_set_key"];
            this._characterSkillKey = values["character_skill_key"];
            this._factionKey = values["faction_key"];
            this._campaignKey = values["campaign_key"];
            this.tier = values["tier"];
            this.indent = values["indent"];
            this._subculture = values["subculture"];
            this.pointsOnCreation = values["points_on_creation"];
            this.requiredNumParents = values["required_num_parents"];
            this.visibleInUi = !!values["visible_in_ui"];
        }
        get characterSkillNodeSetKey() {
            const collection = this.collectionCache.getCollection(CharacterSkillNodeSets$1.KEY, CharacterSkillNodeSets$1.Entry);
            return collection.find(entry => entry.key === this._characterSkillNodeSetKey);
        }
        get characterSkillKey() {
            const collection = this.collectionCache.getCollection(CharacterSkills$1.KEY, CharacterSkills$1.Entry);
            return collection.find(entry => entry.key === this._characterSkillKey);
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get campaignKey() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaignKey);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
    }
    CharacterSkillNodes.Entry = Entry;
})(CharacterSkillNodes$1 || (CharacterSkillNodes$1 = {}));

var CharacterSkillNodesSkillLocks;
(function (CharacterSkillNodesSkillLocks) {
    CharacterSkillNodesSkillLocks.KEY = new CollectionKey("character_skill_nodes_skill_locks");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._characterSkillNode = values["character_skill_node"];
            this._characterSkill = values["character_skill"];
            this.level = values["level"];
        }
        get characterSkillNode() {
            const collection = this.collectionCache.getCollection(CharacterSkillNodes$1.KEY, CharacterSkillNodes$1.Entry);
            return collection.find(entry => entry.key === this._characterSkillNode);
        }
        get characterSkill() {
            const collection = this.collectionCache.getCollection(CharacterSkills$1.KEY, CharacterSkills$1.Entry);
            return collection.find(entry => entry.key === this._characterSkill);
        }
    }
    CharacterSkillNodesSkillLocks.Entry = Entry;
})(CharacterSkillNodesSkillLocks || (CharacterSkillNodesSkillLocks = {}));

var CharacterSkillNodeAncillaryLocks;
(function (CharacterSkillNodeAncillaryLocks) {
    CharacterSkillNodeAncillaryLocks.KEY = new CollectionKey("character_skill_node_ancillary_locks");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._characterSkillNode = values["character_skill_node"];
            this._ancillaryLock = values["ancillary_lock"];
        }
        get characterSkillNode() {
            const collection = this.collectionCache.getCollection(CharacterSkillNodes$1.KEY, CharacterSkillNodes$1.Entry);
            return collection.find(entry => entry.key === this._characterSkillNode);
        }
        get ancillaryLock() {
            const collection = this.collectionCache.getCollection(Ancillaries$1.KEY, Ancillaries$1.Entry);
            return collection.find(entry => entry._key === this._ancillaryLock);
        }
    }
    CharacterSkillNodeAncillaryLocks.Entry = Entry;
})(CharacterSkillNodeAncillaryLocks || (CharacterSkillNodeAncillaryLocks = {}));

var CharacterSkillNodeLinkTypes;
(function (CharacterSkillNodeLinkTypes) {
    CharacterSkillNodeLinkTypes.KEY = new CollectionKey("character_skill_node_link_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.linkType = values["link_type"];
        }
    }
    CharacterSkillNodeLinkTypes.Entry = Entry;
})(CharacterSkillNodeLinkTypes || (CharacterSkillNodeLinkTypes = {}));

var CharacterSkillNodeLinks$1;
(function (CharacterSkillNodeLinks) {
    CharacterSkillNodeLinks.KEY = new CollectionKey("character_skill_node_links");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._parentKey = values["parent_key"];
            this._childKey = values["child_key"];
            this.initialDescentTiers = values["initial_descent_tiers"];
            this.parentLinkPosition = values["parent_link_position"];
            this.childLinkPosition = values["child_link_position"];
            this.parentLinkPositionOffset = values["parent_link_position_offset"];
            this.childLinkPositionOffset = values["child_link_position_offset"];
            this._linkType = values["link_type"];
        }
        get parentKey() {
            const collection = this.collectionCache.getCollection(CharacterSkillNodes$1.KEY, CharacterSkillNodes$1.Entry);
            return collection.find(entry => entry.key === this._parentKey);
        }
        get childKey() {
            const collection = this.collectionCache.getCollection(CharacterSkillNodes$1.KEY, CharacterSkillNodes$1.Entry);
            return collection.find(entry => entry.key === this._childKey);
        }
        get linkType() {
            const collection = this.collectionCache.getCollection(CharacterSkillNodeLinkTypes.KEY, CharacterSkillNodeLinkTypes.Entry);
            return collection.find(entry => entry.linkType === this._linkType);
        }
    }
    CharacterSkillNodeLinks.Entry = Entry;
})(CharacterSkillNodeLinks$1 || (CharacterSkillNodeLinks$1 = {}));

var CharacterSkillUtilizationHintsJunctions;
(function (CharacterSkillUtilizationHintsJunctions) {
    CharacterSkillUtilizationHintsJunctions.KEY = new CollectionKey("character_skill_utilization_hints_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this._hint = values["hint"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(CharacterSkills$1.KEY, CharacterSkills$1.Entry);
            return collection.find(entry => entry.key === this._key);
        }
        get hint() {
            const collection = this.collectionCache.getCollection(CharacterSkillUtilizationHints.KEY, CharacterSkillUtilizationHints.Entry);
            return collection.find(entry => entry.key === this._hint);
        }
    }
    CharacterSkillUtilizationHintsJunctions.Entry = Entry;
})(CharacterSkillUtilizationHintsJunctions || (CharacterSkillUtilizationHintsJunctions = {}));

var CharacterTraitLevels$1;
(function (CharacterTraitLevels) {
    CharacterTraitLevels.KEY = new CollectionKey("character_trait_levels");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreenName = values["onscreen_name"];
            this._trait = values["trait"];
            this.level = values["level"];
            this.thresholdPoints = values["threshold_points"];
            this.colourText = values["colour_text"];
            this.explanationText = values["explanation_text"];
            this.removalText = values["removal_text"];
        }
        get trait() {
            const collection = this.collectionCache.getCollection(CharacterTraits$1.KEY, CharacterTraits$1.Entry);
            return collection.find(entry => entry._key === this._trait);
        }
    }
    CharacterTraitLevels.Entry = Entry;
})(CharacterTraitLevels$1 || (CharacterTraitLevels$1 = {}));

var ChatShortcuts$1;
(function (ChatShortcuts) {
    ChatShortcuts.KEY = new CollectionKey("chat_shortcuts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.description = values["description"];
            this._gameArea = values["game_area"];
        }
    }
    ChatShortcuts.Entry = Entry;
})(ChatShortcuts$1 || (ChatShortcuts$1 = {}));

var ClimbingLaddersMeshesDefinitions;
(function (ClimbingLaddersMeshesDefinitions) {
    ClimbingLaddersMeshesDefinitions.KEY = new CollectionKey("climbing_ladders_meshes_definitions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._factionKey = values["faction_key"];
            this._variantName = values["variant_name"];
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get variantName() {
            const collection = this.collectionCache.getCollection(Variants$1.KEY, Variants$1.Entry);
            return collection.find(entry => entry.variantName === this._variantName);
        }
    }
    ClimbingLaddersMeshesDefinitions.Entry = Entry;
})(ClimbingLaddersMeshesDefinitions || (ClimbingLaddersMeshesDefinitions = {}));

var CombatPotentialsTypes;
(function (CombatPotentialsTypes) {
    CombatPotentialsTypes.KEY = new CollectionKey("combat_potentials_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.combatPotentialTypeKey = values["combat_potential_type_key"];
        }
    }
    CombatPotentialsTypes.Entry = Entry;
})(CombatPotentialsTypes || (CombatPotentialsTypes = {}));

var CombatPotentialsAdjustmentTypes;
(function (CombatPotentialsAdjustmentTypes) {
    CombatPotentialsAdjustmentTypes.KEY = new CollectionKey("combat_potentials_adjustment_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.combatPotentialAdjustmentType = values["combat_potential_adjustment_type"];
        }
    }
    CombatPotentialsAdjustmentTypes.Entry = Entry;
})(CombatPotentialsAdjustmentTypes || (CombatPotentialsAdjustmentTypes = {}));

var CombatPotentialsAdjustmentsForBannersJunctions;
(function (CombatPotentialsAdjustmentsForBannersJunctions) {
    CombatPotentialsAdjustmentsForBannersJunctions.KEY = new CollectionKey("combat_potentials_adjustments_for_banners_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._combatPotentialType = values["combat_potential_type"];
            this._combatPotentialAdjustmentType = values["combat_potential_adjustment_type"];
            this._banner = values["banner"];
            this.absoluteAdjustment = values["absolute_adjustment"];
            this.relativeAdjustment = values["relative_adjustment"];
        }
        get combatPotentialType() {
            const collection = this.collectionCache.getCollection(CombatPotentialsTypes.KEY, CombatPotentialsTypes.Entry);
            return collection.find(entry => entry.combatPotentialTypeKey === this._combatPotentialType);
        }
        get combatPotentialAdjustmentType() {
            const collection = this.collectionCache.getCollection(CombatPotentialsAdjustmentTypes.KEY, CombatPotentialsAdjustmentTypes.Entry);
            return collection.find(entry => entry.combatPotentialAdjustmentType === this._combatPotentialAdjustmentType);
        }
        get banner() {
            const collection = this.collectionCache.getCollection(Banners.KEY, Banners.Entry);
            return collection.find(entry => entry.banner === this._banner);
        }
    }
    CombatPotentialsAdjustmentsForBannersJunctions.Entry = Entry;
})(CombatPotentialsAdjustmentsForBannersJunctions || (CombatPotentialsAdjustmentsForBannersJunctions = {}));

var CommanderUnitPermissions$1;
(function (CommanderUnitPermissions) {
    CommanderUnitPermissions.KEY = new CollectionKey("commander_unit_permissions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unitKey = values["unit_key"];
            this._factionKey = values["faction_key"];
            this._cultureKey = values["culture_key"];
            this._subcultureKey = values["subculture_key"];
        }
        get unitKey() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unitKey);
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get cultureKey() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._cultureKey);
        }
        get subcultureKey() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subcultureKey);
        }
    }
    CommanderUnitPermissions.Entry = Entry;
})(CommanderUnitPermissions$1 || (CommanderUnitPermissions$1 = {}));

var ConfederationEffectBundles;
(function (ConfederationEffectBundles) {
    ConfederationEffectBundles.KEY = new CollectionKey("confederation_effect_bundles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._culture = values["culture"];
            this._effectBundle = values["effect_bundle"];
            this.turns = values["turns"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    ConfederationEffectBundles.Entry = Entry;
})(ConfederationEffectBundles || (ConfederationEffectBundles = {}));

var CultureCampaignDestructionCompositeSceneJunctions;
(function (CultureCampaignDestructionCompositeSceneJunctions) {
    CultureCampaignDestructionCompositeSceneJunctions.KEY = new CollectionKey("culture_campaign_destruction_composite_scene_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._culture = values["culture"];
            this._compositeScene = values["composite_scene"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get compositeScene() {
            const collection = this.collectionCache.getCollection(CampaignCompositeScenes.KEY, CampaignCompositeScenes.Entry);
            return collection.find(entry => entry.id === this._compositeScene);
        }
    }
    CultureCampaignDestructionCompositeSceneJunctions.Entry = Entry;
})(CultureCampaignDestructionCompositeSceneJunctions || (CultureCampaignDestructionCompositeSceneJunctions = {}));

var CulturePackIds;
(function (CulturePackIds) {
    CulturePackIds.KEY = new CollectionKey("culture_pack_ids");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
        }
    }
    CulturePackIds.Entry = Entry;
})(CulturePackIds || (CulturePackIds = {}));

var CulturePacks;
(function (CulturePacks) {
    CulturePacks.KEY = new CollectionKey("culture_packs");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._id = values["id"];
            this._subculture = values["subculture"];
        }
        get id() {
            const collection = this.collectionCache.getCollection(CulturePackIds.KEY, CulturePackIds.Entry);
            return collection.find(entry => entry.id === this._id);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
    }
    CulturePacks.Entry = Entry;
})(CulturePacks || (CulturePacks = {}));

var CultureToBattleAnimationTables;
(function (CultureToBattleAnimationTables) {
    CultureToBattleAnimationTables.KEY = new CollectionKey("culture_to_battle_animation_tables");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._culturePack = values["culture_pack"];
            this._battleAnimationsTable = values["battle_animations_table"];
        }
        get culturePack() {
            const collection = this.collectionCache.getCollection(CulturePackIds.KEY, CulturePackIds.Entry);
            return collection.find(entry => entry.id === this._culturePack);
        }
        get battleAnimationsTable() {
            const collection = this.collectionCache.getCollection(BattleAnimationsTable$1.KEY, BattleAnimationsTable$1.Entry);
            return collection.find(entry => entry.key === this._battleAnimationsTable);
        }
    }
    CultureToBattleAnimationTables.Entry = Entry;
})(CultureToBattleAnimationTables || (CultureToBattleAnimationTables = {}));

var CursorMouseEvents$1;
(function (CursorMouseEvents) {
    CursorMouseEvents.KEY = new CollectionKey("cursor_mouse_events");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    CursorMouseEvents.Entry = Entry;
})(CursorMouseEvents$1 || (CursorMouseEvents$1 = {}));

var CursorTransitions$1;
(function (CursorTransitions) {
    CursorTransitions.KEY = new CollectionKey("cursor_transitions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._initiatingCursor = values["initiating_cursor"];
            this._resultingCursor = values["resulting_cursor"];
            this._mouseEvent = values["mouse_event"];
        }
        get initiatingCursor() {
            const collection = this.collectionCache.getCollection(Cursors$1.KEY, Cursors$1.Entry);
            return collection.find(entry => entry.key === this._initiatingCursor);
        }
        get resultingCursor() {
            const collection = this.collectionCache.getCollection(Cursors$1.KEY, Cursors$1.Entry);
            return collection.find(entry => entry.key === this._resultingCursor);
        }
        get mouseEvent() {
            const collection = this.collectionCache.getCollection(CursorMouseEvents$1.KEY, CursorMouseEvents$1.Entry);
            return collection.find(entry => entry.key === this._mouseEvent);
        }
    }
    CursorTransitions.Entry = Entry;
})(CursorTransitions$1 || (CursorTransitions$1 = {}));

var CursusHonorumLevelRequirements$1;
(function (CursusHonorumLevelRequirements) {
    CursusHonorumLevelRequirements.KEY = new CollectionKey("cursus_honorum_level_requirements");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._subcultureKey = values["subculture_key"];
            this.level = values["level"];
            this.rank = values["rank"];
            this.age = values["age"];
            this._factionKey = values["faction_key"];
        }
        get subcultureKey() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subcultureKey);
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
    }
    CursusHonorumLevelRequirements.Entry = Entry;
})(CursusHonorumLevelRequirements$1 || (CursusHonorumLevelRequirements$1 = {}));

var CursusHonorumTraitJunctions$1;
(function (CursusHonorumTraitJunctions) {
    CursusHonorumTraitJunctions.KEY = new CollectionKey("cursus_honorum_trait_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._subcultureKey = values["subculture_key"];
            this._traitInfoKey = values["trait_info_key"];
            this._factionKey = values["faction_key"];
        }
        get subcultureKey() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subcultureKey);
        }
        get traitInfoKey() {
            const collection = this.collectionCache.getCollection(TraitInfo$1.KEY, TraitInfo$1.Entry);
            return collection.find(entry => entry.trait === this._traitInfoKey);
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
    }
    CursusHonorumTraitJunctions.Entry = Entry;
})(CursusHonorumTraitJunctions$1 || (CursusHonorumTraitJunctions$1 = {}));

var CustomBattleFactions;
(function (CustomBattleFactions) {
    CustomBattleFactions.KEY = new CollectionKey("custom_battle_factions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._factionKey = values["faction_key"];
            this.sortOrder = values["sort_order"];
            this.cultureSortOrder = values["culture_sort_order"];
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
    }
    CustomBattleFactions.Entry = Entry;
})(CustomBattleFactions || (CustomBattleFactions = {}));

var CustomLoadingScreens;
(function (CustomLoadingScreens) {
    CustomLoadingScreens.KEY = new CollectionKey("custom_loading_screens");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.layoutName = values["layout_name"];
        }
    }
    CustomLoadingScreens.Entry = Entry;
})(CustomLoadingScreens || (CustomLoadingScreens = {}));

var CustomLoadingScreenComponents;
(function (CustomLoadingScreenComponents) {
    CustomLoadingScreenComponents.KEY = new CollectionKey("custom_loading_screen_components");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._customLoadingScreenKey = values["custom_loading_screen_key"];
            this.componentId = values["component_id"];
            this.imagePath = values["image_path"];
            this.localisedText = values["localised_text"];
        }
        get customLoadingScreenKey() {
            const collection = this.collectionCache.getCollection(CustomLoadingScreens.KEY, CustomLoadingScreens.Entry);
            return collection.find(entry => entry.key === this._customLoadingScreenKey);
        }
    }
    CustomLoadingScreenComponents.Entry = Entry;
})(CustomLoadingScreenComponents || (CustomLoadingScreenComponents = {}));

var DavePermissions$1;
(function (DavePermissions) {
    DavePermissions.KEY = new CollectionKey("dave_permissions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.permission = values["permission"];
        }
    }
    DavePermissions.Entry = Entry;
})(DavePermissions$1 || (DavePermissions$1 = {}));

var TExcPackCategories$1;
(function (TExcPackCategories) {
    TExcPackCategories.KEY = new CollectionKey("TExc_PackCategories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.packCategory = values["pack_category"];
            this.scriptName = values["script_name"];
            this.packFile = values["pack_file"];
            this.localisationFile = values["localisation_file"];
            this.locked = !!values["locked"];
            this.lockedBy = values["locked_by"];
        }
    }
    TExcPackCategories.Entry = Entry;
})(TExcPackCategories$1 || (TExcPackCategories$1 = {}));

var TExcImplementedTables$1;
(function (TExcImplementedTables) {
    TExcImplementedTables.KEY = new CollectionKey("TExc_ImplementedTables");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.tableName = values["table_name"];
            this.designer = values["Designer"];
            this.implemented = !!values["Implemented"];
            this.implementer = values["Implementer"];
            this.modified = !!values["Modified"];
            this._destinationPack = values["destination_pack"];
        }
        get destinationPack() {
            const collection = this.collectionCache.getCollection(TExcPackCategories$1.KEY, TExcPackCategories$1.Entry);
            return collection.find(entry => entry.packCategory === this._destinationPack);
        }
    }
    TExcImplementedTables.Entry = Entry;
})(TExcImplementedTables$1 || (TExcImplementedTables$1 = {}));

var DaveRestrictedTables$1;
(function (DaveRestrictedTables) {
    DaveRestrictedTables.KEY = new CollectionKey("dave_restricted_tables");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._tableName = values["table_name"];
        }
        get tableName() {
            const collection = this.collectionCache.getCollection(TExcImplementedTables$1.KEY, TExcImplementedTables$1.Entry);
            return collection.find(entry => entry.tableName === this._tableName);
        }
    }
    DaveRestrictedTables.Entry = Entry;
})(DaveRestrictedTables$1 || (DaveRestrictedTables$1 = {}));

var DaveUserTablePermissions$1;
(function (DaveUserTablePermissions) {
    DaveUserTablePermissions.KEY = new CollectionKey("dave_user_table_permissions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.userName = values["user_name"];
            this._tableName = values["table_name"];
            this._permission = values["permission"];
        }
        get tableName() {
            const collection = this.collectionCache.getCollection(TExcImplementedTables$1.KEY, TExcImplementedTables$1.Entry);
            return collection.find(entry => entry.tableName === this._tableName);
        }
        get permission() {
            const collection = this.collectionCache.getCollection(DavePermissions$1.KEY, DavePermissions$1.Entry);
            return collection.find(entry => entry.permission === this._permission);
        }
    }
    DaveUserTablePermissions.Entry = Entry;
})(DaveUserTablePermissions$1 || (DaveUserTablePermissions$1 = {}));

var DeathTypes$1;
(function (DeathTypes) {
    DeathTypes.KEY = new CollectionKey("death_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.localisedDescription = values["localised_description"];
        }
    }
    DeathTypes.Entry = Entry;
})(DeathTypes$1 || (DeathTypes$1 = {}));

var ModelsDeployables$1;
(function (ModelsDeployables) {
    ModelsDeployables.KEY = new CollectionKey("models_deployables");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.modelFile = values["model_file"];
            this.logicFile = values["logic_file"];
            this.displayPath = values["display_path"];
        }
    }
    ModelsDeployables.Entry = Entry;
})(ModelsDeployables$1 || (ModelsDeployables$1 = {}));

var DeployablesCategories;
(function (DeployablesCategories) {
    DeployablesCategories.KEY = new CollectionKey("deployables_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.deployableCategory = values["deployable_category"];
        }
    }
    DeployablesCategories.Entry = Entry;
})(DeployablesCategories || (DeployablesCategories = {}));

var Deployables$1;
(function (Deployables) {
    Deployables.KEY = new CollectionKey("deployables");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.name = values["name"];
            this._model = values["model"];
            this._model2 = values["model_2"];
            this.number = values["number"];
            this.spacingX = values["spacing_x"];
            this.spacingY = values["spacing_y"];
            this.minRows = values["min_rows"];
            this.minColumns = values["min_columns"];
            this.randomOffset = values["random_offset"];
            this.hitpoints = values["hitpoints"];
            this.killChance = values["kill_chance"];
            this.value = values["value"];
            this.iconName = values["icon_name"];
            this.description = values["description"];
            this.tooltip = values["tooltip"];
            this.recruitmentCap = values["recruitment_cap"];
            this.maxRows = values["max_rows"];
            this.ignitionThreshold = values["ignition_threshold"];
            this._category = values["category"];
            this._explosion = values["explosion"];
            this._underConstructionEffect = values["under_construction_effect"];
            this._audioMaterial = values["audio_material"];
            this.customBattleEnabled = !!values["custom_battle_enabled"];
        }
        get model() {
            const collection = this.collectionCache.getCollection(ModelsDeployables$1.KEY, ModelsDeployables$1.Entry);
            return collection.find(entry => entry.key === this._model);
        }
        get model2() {
            const collection = this.collectionCache.getCollection(ModelsDeployables$1.KEY, ModelsDeployables$1.Entry);
            return collection.find(entry => entry.key === this._model2);
        }
        get category() {
            const collection = this.collectionCache.getCollection(DeployablesCategories.KEY, DeployablesCategories.Entry);
            return collection.find(entry => entry.deployableCategory === this._category);
        }
        get explosion() {
            const collection = this.collectionCache.getCollection(ProjectilesExplosions$1.KEY, ProjectilesExplosions$1.Entry);
            return collection.find(entry => entry.key === this._explosion);
        }
        get underConstructionEffect() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._underConstructionEffect);
        }
        get audioMaterial() {
            const collection = this.collectionCache.getCollection(AudioMaterials.KEY, AudioMaterials.Entry);
            return collection.find(entry => entry.key === this._audioMaterial);
        }
    }
    Deployables.Entry = Entry;
})(Deployables$1 || (Deployables$1 = {}));

var DeployablesAbilities;
(function (DeployablesAbilities) {
    DeployablesAbilities.KEY = new CollectionKey("deployables_abilities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.abilityKey = values["ability_key"];
            this._deployable = values["deployable"];
            this.uniqueId = values["unique_id"];
            this.numUses = values["num_uses"];
            this.rechargeTime = values["recharge_time"];
            this.windUpTime = values["wind_up_time"];
            this.dragGround = !!values["drag_ground"];
            this.clickGround = !!values["click_ground"];
            this.interceptDistance = values["intercept_distance"];
        }
        get deployable() {
            const collection = this.collectionCache.getCollection(Deployables$1.KEY, Deployables$1.Entry);
            return collection.find(entry => entry.key === this._deployable);
        }
    }
    DeployablesAbilities.Entry = Entry;
})(DeployablesAbilities || (DeployablesAbilities = {}));

var DeployablesCustomBattles$1;
(function (DeployablesCustomBattles) {
    DeployablesCustomBattles.KEY = new CollectionKey("deployables_custom_battles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._deployable = values["deployable"];
            this.cap = values["cap"];
            this.probability = values["probability"];
        }
        get deployable() {
            const collection = this.collectionCache.getCollection(Deployables$1.KEY, Deployables$1.Entry);
            return collection.find(entry => entry.key === this._deployable);
        }
    }
    DeployablesCustomBattles.Entry = Entry;
})(DeployablesCustomBattles$1 || (DeployablesCustomBattles$1 = {}));

var DeploymentAreaDisplays;
(function (DeploymentAreaDisplays) {
    DeploymentAreaDisplays.KEY = new CollectionKey("deployment_area_displays");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._vfx = values["vfx"];
            this.vfxStepSize = values["vfx_step_size"];
            this.splineHeight = values["spline_height"];
            this.material = values["material"];
        }
        get vfx() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._vfx);
        }
    }
    DeploymentAreaDisplays.Entry = Entry;
})(DeploymentAreaDisplays || (DeploymentAreaDisplays = {}));

var DilemmaToCampaignSubjectJunctions$1;
(function (DilemmaToCampaignSubjectJunctions) {
    DilemmaToCampaignSubjectJunctions.KEY = new CollectionKey("dilemma_to_campaign_subject_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._dilemmaKey = values["dilemma_key"];
            this._campaignSubjectKey = values["campaign_subject_key"];
            this.weighting = values["weighting"];
        }
        get dilemmaKey() {
            const collection = this.collectionCache.getCollection(Dilemmas$1.KEY, Dilemmas$1.Entry);
            return collection.find(entry => entry.key === this._dilemmaKey);
        }
        get campaignSubjectKey() {
            const collection = this.collectionCache.getCollection(CampaignSubjects$1.KEY, CampaignSubjects$1.Entry);
            return collection.find(entry => entry.key === this._campaignSubjectKey);
        }
    }
    DilemmaToCampaignSubjectJunctions.Entry = Entry;
})(DilemmaToCampaignSubjectJunctions$1 || (DilemmaToCampaignSubjectJunctions$1 = {}));

var DiplomacyComponents;
(function (DiplomacyComponents) {
    DiplomacyComponents.KEY = new CollectionKey("diplomacy_components");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.component = values["component"];
        }
    }
    DiplomacyComponents.Entry = Entry;
})(DiplomacyComponents || (DiplomacyComponents = {}));

var DiplomacyCurrentTreatiesToDiplomaticOptions$1;
(function (DiplomacyCurrentTreatiesToDiplomaticOptions) {
    DiplomacyCurrentTreatiesToDiplomaticOptions.KEY = new CollectionKey("diplomacy_current_treaties_to_diplomatic_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._currentTreatyKey = values["current_treaty_key"];
            this._diplomaticOptionKey = values["diplomatic_option_key"];
            this.canBeCancelled = !!values["can_be_cancelled"];
        }
        get currentTreatyKey() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings$1.KEY, DiplomacyStrings$1.Entry);
            return collection.find(entry => entry.key === this._currentTreatyKey);
        }
        get diplomaticOptionKey() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings$1.KEY, DiplomacyStrings$1.Entry);
            return collection.find(entry => entry.key === this._diplomaticOptionKey);
        }
    }
    DiplomacyCurrentTreatiesToDiplomaticOptions.Entry = Entry;
})(DiplomacyCurrentTreatiesToDiplomaticOptions$1 || (DiplomacyCurrentTreatiesToDiplomaticOptions$1 = {}));

var DiplomacyKeys$1;
(function (DiplomacyKeys) {
    DiplomacyKeys.KEY = new CollectionKey("diplomacy_keys");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    DiplomacyKeys.Entry = Entry;
})(DiplomacyKeys$1 || (DiplomacyKeys$1 = {}));

var DiplomacyKeyGroups;
(function (DiplomacyKeyGroups) {
    DiplomacyKeyGroups.KEY = new CollectionKey("diplomacy_key_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.groupId = values["group_id"];
        }
    }
    DiplomacyKeyGroups.Entry = Entry;
})(DiplomacyKeyGroups || (DiplomacyKeyGroups = {}));

var DiplomacyKeysToDiplomacyKeyGroups;
(function (DiplomacyKeysToDiplomacyKeyGroups) {
    DiplomacyKeysToDiplomacyKeyGroups.KEY = new CollectionKey("diplomacy_keys_to_diplomacy_key_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this._group = values["group"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(DiplomacyKeys$1.KEY, DiplomacyKeys$1.Entry);
            return collection.find(entry => entry.key === this._key);
        }
        get group() {
            const collection = this.collectionCache.getCollection(DiplomacyKeyGroups.KEY, DiplomacyKeyGroups.Entry);
            return collection.find(entry => entry.groupId === this._group);
        }
    }
    DiplomacyKeysToDiplomacyKeyGroups.Entry = Entry;
})(DiplomacyKeysToDiplomacyKeyGroups || (DiplomacyKeysToDiplomacyKeyGroups = {}));

var DiplomacyNegotiationStringOptions$1;
(function (DiplomacyNegotiationStringOptions) {
    DiplomacyNegotiationStringOptions.KEY = new CollectionKey("diplomacy_negotiation_string_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this._string = values["string"];
            this.option = values["option"];
            this._group = values["group"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(DiplomacyKeyGroups.KEY, DiplomacyKeyGroups.Entry);
            return collection.find(entry => entry.groupId === this._key);
        }
        get string() {
            const collection = this.collectionCache.getCollection(DiplomacyStrings$1.KEY, DiplomacyStrings$1.Entry);
            return collection.find(entry => entry.key === this._string);
        }
        get group() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._group);
        }
    }
    DiplomacyNegotiationStringOptions.Entry = Entry;
})(DiplomacyNegotiationStringOptions$1 || (DiplomacyNegotiationStringOptions$1 = {}));

var DiplomaticActions;
(function (DiplomaticActions) {
    DiplomaticActions.KEY = new CollectionKey("diplomatic_actions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.category = values["category"];
            this.sortOrder = values["sort_order"];
        }
    }
    DiplomaticActions.Entry = Entry;
})(DiplomaticActions || (DiplomaticActions = {}));

var DiplomaticActionFactionRestrictions$1;
(function (DiplomaticActionFactionRestrictions) {
    DiplomaticActionFactionRestrictions.KEY = new CollectionKey("diplomatic_action_faction_restrictions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._faction = values["faction"];
            this.canMakeVassals = !!values["can_make_vassals"];
            this.canMakeClientStates = !!values["can_make_client_states"];
            this.canMakeConfederations = !!values["can_make_confederations"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    DiplomaticActionFactionRestrictions.Entry = Entry;
})(DiplomaticActionFactionRestrictions$1 || (DiplomaticActionFactionRestrictions$1 = {}));

var DiplomaticActionSubcultureRestrictions$1;
(function (DiplomaticActionSubcultureRestrictions) {
    DiplomaticActionSubcultureRestrictions.KEY = new CollectionKey("diplomatic_action_subculture_restrictions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._subculture = values["subculture"];
            this.canMakeVassals = !!values["can_make_vassals"];
            this.canMakeClientStates = !!values["can_make_client_states"];
            this.canMakeConfederations = !!values["can_make_confederations"];
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
    }
    DiplomaticActionSubcultureRestrictions.Entry = Entry;
})(DiplomaticActionSubcultureRestrictions$1 || (DiplomaticActionSubcultureRestrictions$1 = {}));

var DiplomaticRelationsAttitudes$1;
(function (DiplomaticRelationsAttitudes) {
    DiplomaticRelationsAttitudes.KEY = new CollectionKey("diplomatic_relations_attitudes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.attitude = values["attitude"];
            this.value = values["value"];
        }
    }
    DiplomaticRelationsAttitudes.Entry = Entry;
})(DiplomaticRelationsAttitudes$1 || (DiplomaticRelationsAttitudes$1 = {}));

var DiplomaticRelationsReligion$1;
(function (DiplomaticRelationsReligion) {
    DiplomaticRelationsReligion.KEY = new CollectionKey("diplomatic_relations_religion");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._religionA = values["religion_A"];
            this._religionB = values["religion_B"];
            this.relationsModifier = values["relations_modifier"];
            this.religiousUnhappinessModifier = values["religious_unhappiness_modifier"];
        }
        get religionA() {
            const collection = this.collectionCache.getCollection(Religions$1.KEY, Religions$1.Entry);
            return collection.find(entry => entry.religionKey === this._religionA);
        }
    }
    DiplomaticRelationsReligion.Entry = Entry;
})(DiplomaticRelationsReligion$1 || (DiplomaticRelationsReligion$1 = {}));

var EffectsAdditionalTooltipDetails;
(function (EffectsAdditionalTooltipDetails) {
    EffectsAdditionalTooltipDetails.KEY = new CollectionKey("effects_additional_tooltip_details");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this.localisedDescription = values["localised_description"];
            this.iconPath = values["icon_path"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
    }
    EffectsAdditionalTooltipDetails.Entry = Entry;
})(EffectsAdditionalTooltipDetails || (EffectsAdditionalTooltipDetails = {}));

var EffectBonusValueAgentActionRecordJunctions;
(function (EffectBonusValueAgentActionRecordJunctions) {
    EffectBonusValueAgentActionRecordJunctions.KEY = new CollectionKey("effect_bonus_value_agent_action_record_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._agentActionRecord = values["agent_action_record"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsAgentActionRecords.KEY, CampaignBonusValueIdsAgentActionRecords.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get agentActionRecord() {
            const collection = this.collectionCache.getCollection(AgentActions$1.KEY, AgentActions$1.Entry);
            return collection.find(entry => entry.uniqueId === this._agentActionRecord);
        }
    }
    EffectBonusValueAgentActionRecordJunctions.Entry = Entry;
})(EffectBonusValueAgentActionRecordJunctions || (EffectBonusValueAgentActionRecordJunctions = {}));

var EffectBonusValueAgentJunction$1;
(function (EffectBonusValueAgentJunction) {
    EffectBonusValueAgentJunction.KEY = new CollectionKey("effect_bonus_value_agent_junction");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._agent = values["agent"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsAgent$1.KEY, CampaignBonusValueIdsAgent$1.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get agent() {
            const collection = this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry);
            return collection.find(entry => entry.key === this._agent);
        }
    }
    EffectBonusValueAgentJunction.Entry = Entry;
})(EffectBonusValueAgentJunction$1 || (EffectBonusValueAgentJunction$1 = {}));

var EffectBonusValueAgentSubtypeJunctions;
(function (EffectBonusValueAgentSubtypeJunctions) {
    EffectBonusValueAgentSubtypeJunctions.KEY = new CollectionKey("effect_bonus_value_agent_subtype_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._subtype = values["subtype"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsAgentSubtypes.KEY, CampaignBonusValueIdsAgentSubtypes.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get subtype() {
            const collection = this.collectionCache.getCollection(AgentSubtypes.KEY, AgentSubtypes.Entry);
            return collection.find(entry => entry.key === this._subtype);
        }
    }
    EffectBonusValueAgentSubtypeJunctions.Entry = Entry;
})(EffectBonusValueAgentSubtypeJunctions || (EffectBonusValueAgentSubtypeJunctions = {}));

var EffectBonusValueAttritionRecordJunctions;
(function (EffectBonusValueAttritionRecordJunctions) {
    EffectBonusValueAttritionRecordJunctions.KEY = new CollectionKey("effect_bonus_value_attrition_record_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._attritionRecord = values["attrition_record"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsAttritionRecords.KEY, CampaignBonusValueIdsAttritionRecords.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get attritionRecord() {
            const collection = this.collectionCache.getCollection(CampaignMapAttritions$1.KEY, CampaignMapAttritions$1.Entry);
            return collection.find(entry => entry.key === this._attritionRecord);
        }
    }
    EffectBonusValueAttritionRecordJunctions.Entry = Entry;
})(EffectBonusValueAttritionRecordJunctions || (EffectBonusValueAttritionRecordJunctions = {}));

var EffectBonusValueBasicJunction$1;
(function (EffectBonusValueBasicJunction) {
    EffectBonusValueBasicJunction.KEY = new CollectionKey("effect_bonus_value_basic_junction");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsBasic$1.KEY, CampaignBonusValueIdsBasic$1.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
    }
    EffectBonusValueBasicJunction.Entry = Entry;
})(EffectBonusValueBasicJunction$1 || (EffectBonusValueBasicJunction$1 = {}));

var EffectBonusValueBattlefieldDeployablesJunctions$1;
(function (EffectBonusValueBattlefieldDeployablesJunctions) {
    EffectBonusValueBattlefieldDeployablesJunctions.KEY = new CollectionKey("effect_bonus_value_battlefield_deployables_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._battlefieldDeployable = values["battlefield_deployable"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsBattlefieldDeployables$1.KEY, CampaignBonusValueIdsBattlefieldDeployables$1.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get battlefieldDeployable() {
            const collection = this.collectionCache.getCollection(Deployables$1.KEY, Deployables$1.Entry);
            return collection.find(entry => entry.key === this._battlefieldDeployable);
        }
    }
    EffectBonusValueBattlefieldDeployablesJunctions.Entry = Entry;
})(EffectBonusValueBattlefieldDeployablesJunctions$1 || (EffectBonusValueBattlefieldDeployablesJunctions$1 = {}));

var EffectBonusValueBattleContextArmySpecialAbilityJunctions;
(function (EffectBonusValueBattleContextArmySpecialAbilityJunctions) {
    EffectBonusValueBattleContextArmySpecialAbilityJunctions.KEY = new CollectionKey("effect_bonus_value_battle_context_army_special_ability_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._battleContextArmySpecialAbility = values["battle_context_army_special_ability"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsBattleContextArmySpecialAbilities.KEY, CampaignBonusValueIdsBattleContextArmySpecialAbilities.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get battleContextArmySpecialAbility() {
            const collection = this.collectionCache.getCollection(BattleContextArmySpecialAbilityJunctions.KEY, BattleContextArmySpecialAbilityJunctions.Entry);
            return collection.find(entry => entry.key === this._battleContextArmySpecialAbility);
        }
    }
    EffectBonusValueBattleContextArmySpecialAbilityJunctions.Entry = Entry;
})(EffectBonusValueBattleContextArmySpecialAbilityJunctions || (EffectBonusValueBattleContextArmySpecialAbilityJunctions = {}));

var EffectBonusValueBattleContextJunctions$1;
(function (EffectBonusValueBattleContextJunctions) {
    EffectBonusValueBattleContextJunctions.KEY = new CollectionKey("effect_bonus_value_battle_context_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effectKey = values["effect_key"];
            this._bonusValueId = values["bonus_value_id"];
            this._battleContextKey = values["battle_context_key"];
        }
        get effectKey() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effectKey);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsBattleContexts$1.KEY, CampaignBonusValueIdsBattleContexts$1.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get battleContextKey() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueBattleContextSpecifiers$1.KEY, CampaignBonusValueBattleContextSpecifiers$1.Entry);
            return collection.find(entry => entry.key === this._battleContextKey);
        }
    }
    EffectBonusValueBattleContextJunctions.Entry = Entry;
})(EffectBonusValueBattleContextJunctions$1 || (EffectBonusValueBattleContextJunctions$1 = {}));

var EffectBonusValueBattleContextUnitAbilityJunctions;
(function (EffectBonusValueBattleContextUnitAbilityJunctions) {
    EffectBonusValueBattleContextUnitAbilityJunctions.KEY = new CollectionKey("effect_bonus_value_battle_context_unit_ability_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effectKey = values["effect_key"];
            this._bonusValueId = values["bonus_value_id"];
            this._battleContextUnitAbility = values["battle_context_unit_ability"];
        }
        get effectKey() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effectKey);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsBattleContextUnitAbilities.KEY, CampaignBonusValueIdsBattleContextUnitAbilities.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get battleContextUnitAbility() {
            const collection = this.collectionCache.getCollection(BattleContextUnitAbilityJunctions.KEY, BattleContextUnitAbilityJunctions.Entry);
            return collection.find(entry => entry.key === this._battleContextUnitAbility);
        }
    }
    EffectBonusValueBattleContextUnitAbilityJunctions.Entry = Entry;
})(EffectBonusValueBattleContextUnitAbilityJunctions || (EffectBonusValueBattleContextUnitAbilityJunctions = {}));

var EffectBonusValueBattleContextUnitAttributeJunctions;
(function (EffectBonusValueBattleContextUnitAttributeJunctions) {
    EffectBonusValueBattleContextUnitAttributeJunctions.KEY = new CollectionKey("effect_bonus_value_battle_context_unit_attribute_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._battleContextUnitAttribute = values["battle_context_unit_attribute"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsBattleContextUnitAttributes.KEY, CampaignBonusValueIdsBattleContextUnitAttributes.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get battleContextUnitAttribute() {
            const collection = this.collectionCache.getCollection(BattleContextUnitAttributeJunctions.KEY, BattleContextUnitAttributeJunctions.Entry);
            return collection.find(entry => entry.key === this._battleContextUnitAttribute);
        }
    }
    EffectBonusValueBattleContextUnitAttributeJunctions.Entry = Entry;
})(EffectBonusValueBattleContextUnitAttributeJunctions || (EffectBonusValueBattleContextUnitAttributeJunctions = {}));

var EffectBonusValueBuildingChainJunctions$1;
(function (EffectBonusValueBuildingChainJunctions) {
    EffectBonusValueBuildingChainJunctions.KEY = new CollectionKey("effect_bonus_value_building_chain_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._buildingChain = values["building_chain"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsBuildingChain$1.KEY, CampaignBonusValueIdsBuildingChain$1.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get buildingChain() {
            const collection = this.collectionCache.getCollection(BuildingChains$1.KEY, BuildingChains$1.Entry);
            return collection.find(entry => entry.key === this._buildingChain);
        }
    }
    EffectBonusValueBuildingChainJunctions.Entry = Entry;
})(EffectBonusValueBuildingChainJunctions$1 || (EffectBonusValueBuildingChainJunctions$1 = {}));

var EffectBonusValueBuildingSetJunctions$1;
(function (EffectBonusValueBuildingSetJunctions) {
    EffectBonusValueBuildingSetJunctions.KEY = new CollectionKey("effect_bonus_value_building_set_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._buildingSet = values["building_set"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsBuildingSets$1.KEY, CampaignBonusValueIdsBuildingSets$1.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get buildingSet() {
            const collection = this.collectionCache.getCollection(BuildingSets$1.KEY, BuildingSets$1.Entry);
            return collection.find(entry => entry.key === this._buildingSet);
        }
    }
    EffectBonusValueBuildingSetJunctions.Entry = Entry;
})(EffectBonusValueBuildingSetJunctions$1 || (EffectBonusValueBuildingSetJunctions$1 = {}));

var EffectBonusValueCommodityJunction$1;
(function (EffectBonusValueCommodityJunction) {
    EffectBonusValueCommodityJunction.KEY = new CollectionKey("effect_bonus_value_commodity_junction");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._commodity = values["commodity"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsCommodity$1.KEY, CampaignBonusValueIdsCommodity$1.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get commodity() {
            const collection = this.collectionCache.getCollection(Commodities$1.KEY, Commodities$1.Entry);
            return collection.find(entry => entry._key === this._commodity);
        }
    }
    EffectBonusValueCommodityJunction.Entry = Entry;
})(EffectBonusValueCommodityJunction$1 || (EffectBonusValueCommodityJunction$1 = {}));

var EffectBonusValueFactionJunctions;
(function (EffectBonusValueFactionJunctions) {
    EffectBonusValueFactionJunctions.KEY = new CollectionKey("effect_bonus_value_faction_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._faction = values["faction"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsFactions.KEY, CampaignBonusValueIdsFactions.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    EffectBonusValueFactionJunctions.Entry = Entry;
})(EffectBonusValueFactionJunctions || (EffectBonusValueFactionJunctions = {}));

var EffectBonusValueIdsUnitSets$1;
(function (EffectBonusValueIdsUnitSets) {
    EffectBonusValueIdsUnitSets.KEY = new CollectionKey("effect_bonus_value_ids_unit_sets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._unitSet = values["unit_set"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsUnitSets$1.KEY, CampaignBonusValueIdsUnitSets$1.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get unitSet() {
            const collection = this.collectionCache.getCollection(UnitSets$1.KEY, UnitSets$1.Entry);
            return collection.find(entry => entry.key === this._unitSet);
        }
    }
    EffectBonusValueIdsUnitSets.Entry = Entry;
})(EffectBonusValueIdsUnitSets$1 || (EffectBonusValueIdsUnitSets$1 = {}));

var EffectBonusValueIdActionResultsAdditionalOutcomesJunctions$1;
(function (EffectBonusValueIdActionResultsAdditionalOutcomesJunctions) {
    EffectBonusValueIdActionResultsAdditionalOutcomesJunctions.KEY = new CollectionKey("effect_bonus_value_id_action_results_additional_outcomes_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._actionResultsAdditionalOutcomeRecord = values["action_results_additional_outcome_record"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsActionResultsAdditionalOutcomes$1.KEY, CampaignBonusValueIdsActionResultsAdditionalOutcomes$1.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get actionResultsAdditionalOutcomeRecord() {
            const collection = this.collectionCache.getCollection(ActionResultsAdditionalOutcomes$1.KEY, ActionResultsAdditionalOutcomes$1.Entry);
            return collection.find(entry => entry.key === this._actionResultsAdditionalOutcomeRecord);
        }
    }
    EffectBonusValueIdActionResultsAdditionalOutcomesJunctions.Entry = Entry;
})(EffectBonusValueIdActionResultsAdditionalOutcomesJunctions$1 || (EffectBonusValueIdActionResultsAdditionalOutcomesJunctions$1 = {}));

var LoyaltyFactors$1;
(function (LoyaltyFactors) {
    LoyaltyFactors.KEY = new CollectionKey("loyalty_factors");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.minimumValue = values["minimum_value"];
            this.maximumValue = values["maximum_value"];
            this.localisedNegativeName = values["localised_negative_name"];
            this.localisedPositiveName = values["localised_positive_name"];
        }
    }
    LoyaltyFactors.Entry = Entry;
})(LoyaltyFactors$1 || (LoyaltyFactors$1 = {}));

var LoyaltyEventEffects;
(function (LoyaltyEventEffects) {
    LoyaltyEventEffects.KEY = new CollectionKey("loyalty_event_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.event = values["event"];
            this._loyaltyFactor = values["loyalty_factor"];
            this.percentageChance = values["percentage_chance"];
            this.loyaltyChange = values["loyalty_change"];
            this.threshold = values["threshold"];
        }
        get loyaltyFactor() {
            const collection = this.collectionCache.getCollection(LoyaltyFactors$1.KEY, LoyaltyFactors$1.Entry);
            return collection.find(entry => entry.key === this._loyaltyFactor);
        }
    }
    LoyaltyEventEffects.Entry = Entry;
})(LoyaltyEventEffects || (LoyaltyEventEffects = {}));

var EffectBonusValueLoyaltyEventJunctions;
(function (EffectBonusValueLoyaltyEventJunctions) {
    EffectBonusValueLoyaltyEventJunctions.KEY = new CollectionKey("effect_bonus_value_loyalty_event_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._loyalltyEvent = values["loyallty_event"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsLoyaltyEvents.KEY, CampaignBonusValueIdsLoyaltyEvents.Entry);
            return collection.find(entry => entry.id === this._bonusValueId);
        }
        get loyalltyEvent() {
            const collection = this.collectionCache.getCollection(LoyaltyEventEffects.KEY, LoyaltyEventEffects.Entry);
            return collection.find(entry => entry.event === this._loyalltyEvent);
        }
    }
    EffectBonusValueLoyaltyEventJunctions.Entry = Entry;
})(EffectBonusValueLoyaltyEventJunctions || (EffectBonusValueLoyaltyEventJunctions = {}));

var UnitStatLocalisations;
(function (UnitStatLocalisations) {
    UnitStatLocalisations.KEY = new CollectionKey("unit_stat_localisations");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.statKey = values["stat_key"];
            this.onscreenName = values["onscreen_name"];
            this.tooltipText = values["tooltip_text"];
        }
    }
    UnitStatLocalisations.Entry = Entry;
})(UnitStatLocalisations || (UnitStatLocalisations = {}));

var ModifiableUnitStats;
(function (ModifiableUnitStats) {
    ModifiableUnitStats.KEY = new CollectionKey("modifiable_unit_stats");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.statKey = values["stat_key"];
            this._localisation = values["localisation"];
        }
        get localisation() {
            const collection = this.collectionCache.getCollection(UnitStatLocalisations.KEY, UnitStatLocalisations.Entry);
            return collection.find(entry => entry.statKey === this._localisation);
        }
    }
    ModifiableUnitStats.Entry = Entry;
})(ModifiableUnitStats || (ModifiableUnitStats = {}));

var UnitStatModifiersHowEnums$1;
(function (UnitStatModifiersHowEnums) {
    UnitStatModifiersHowEnums.KEY = new CollectionKey("unit_stat_modifiers_how_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    UnitStatModifiersHowEnums.Entry = Entry;
})(UnitStatModifiersHowEnums$1 || (UnitStatModifiersHowEnums$1 = {}));

var UnitStatModifiers$1;
(function (UnitStatModifiers) {
    UnitStatModifiers.KEY = new CollectionKey("unit_stat_modifiers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._stat = values["stat"];
            this._how = values["how"];
        }
        get stat() {
            const collection = this.collectionCache.getCollection(ModifiableUnitStats.KEY, ModifiableUnitStats.Entry);
            return collection.find(entry => entry.statKey === this._stat);
        }
        get how() {
            const collection = this.collectionCache.getCollection(UnitStatModifiersHowEnums$1.KEY, UnitStatModifiersHowEnums$1.Entry);
            return collection.find(entry => entry.key === this._how);
        }
    }
    UnitStatModifiers.Entry = Entry;
})(UnitStatModifiers$1 || (UnitStatModifiers$1 = {}));

var EffectBonusValueMeleeWeaponJunction$1;
(function (EffectBonusValueMeleeWeaponJunction) {
    EffectBonusValueMeleeWeaponJunction.KEY = new CollectionKey("effect_bonus_value_melee_weapon_junction");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._meleeWeapon = values["melee_weapon"];
            this._statModifier = values["stat_modifier"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get meleeWeapon() {
            const collection = this.collectionCache.getCollection(UnitMeleeWeaponsEnum$1.KEY, UnitMeleeWeaponsEnum$1.Entry);
            return collection.find(entry => entry.key === this._meleeWeapon);
        }
        get statModifier() {
            const collection = this.collectionCache.getCollection(UnitStatModifiers$1.KEY, UnitStatModifiers$1.Entry);
            return collection.find(entry => entry.key === this._statModifier);
        }
    }
    EffectBonusValueMeleeWeaponJunction.Entry = Entry;
})(EffectBonusValueMeleeWeaponJunction$1 || (EffectBonusValueMeleeWeaponJunction$1 = {}));

var EffectBonusValueMilitaryForceAbilityJunctions;
(function (EffectBonusValueMilitaryForceAbilityJunctions) {
    EffectBonusValueMilitaryForceAbilityJunctions.KEY = new CollectionKey("effect_bonus_value_military_force_ability_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._forceAbility = values["force_ability"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsMilitaryForceAbilitys.KEY, CampaignBonusValueIdsMilitaryForceAbilitys.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get forceAbility() {
            const collection = this.collectionCache.getCollection(ArmySpecialAbilities.KEY, ArmySpecialAbilities.Entry);
            return collection.find(entry => entry.armySpecialAbility === this._forceAbility);
        }
    }
    EffectBonusValueMilitaryForceAbilityJunctions.Entry = Entry;
})(EffectBonusValueMilitaryForceAbilityJunctions || (EffectBonusValueMilitaryForceAbilityJunctions = {}));

var UnitMissileWeaponJunctions;
(function (UnitMissileWeaponJunctions) {
    UnitMissileWeaponJunctions.KEY = new CollectionKey("unit_missile_weapon_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unit = values["unit"];
            this._missileWeapon = values["missile_weapon"];
            this.id = values["id"];
        }
        get unit() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
        get missileWeapon() {
            const collection = this.collectionCache.getCollection(MissileWeapons$1.KEY, MissileWeapons$1.Entry);
            return collection.find(entry => entry.key === this._missileWeapon);
        }
    }
    UnitMissileWeaponJunctions.Entry = Entry;
})(UnitMissileWeaponJunctions || (UnitMissileWeaponJunctions = {}));

var EffectBonusValueMissileWeaponJunctions;
(function (EffectBonusValueMissileWeaponJunctions) {
    EffectBonusValueMissileWeaponJunctions.KEY = new CollectionKey("effect_bonus_value_missile_weapon_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._missileWeaponJunction = values["missile_weapon_junction"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdUnitMissileWeapons.KEY, CampaignBonusValueIdUnitMissileWeapons.Entry);
            return collection.find(entry => entry.id === this._bonusValueId);
        }
        get missileWeaponJunction() {
            const collection = this.collectionCache.getCollection(UnitMissileWeaponJunctions.KEY, UnitMissileWeaponJunctions.Entry);
            return collection.find(entry => entry.id === this._missileWeaponJunction);
        }
    }
    EffectBonusValueMissileWeaponJunctions.Entry = Entry;
})(EffectBonusValueMissileWeaponJunctions || (EffectBonusValueMissileWeaponJunctions = {}));

var EffectBonusValueNameRecordJunctions;
(function (EffectBonusValueNameRecordJunctions) {
    EffectBonusValueNameRecordJunctions.KEY = new CollectionKey("effect_bonus_value_name_record_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._nameRecord = values["name_record"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsNameRecords.KEY, CampaignBonusValueIdsNameRecords.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get nameRecord() {
            const collection = this.collectionCache.getCollection(Names$1.KEY, Names$1.Entry);
            return collection.find(entry => entry.id === this._nameRecord);
        }
    }
    EffectBonusValueNameRecordJunctions.Entry = Entry;
})(EffectBonusValueNameRecordJunctions || (EffectBonusValueNameRecordJunctions = {}));

var EffectBonusValuePooledResourceFactorJunctions;
(function (EffectBonusValuePooledResourceFactorJunctions) {
    EffectBonusValuePooledResourceFactorJunctions.KEY = new CollectionKey("effect_bonus_value_pooled_resource_factor_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._resourceFactor = values["resource_factor"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsPooledResourceFactors.KEY, CampaignBonusValueIdsPooledResourceFactors.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get resourceFactor() {
            const collection = this.collectionCache.getCollection(PooledResourceFactorJunctions.KEY, PooledResourceFactorJunctions.Entry);
            return collection.find(entry => entry.uniqueId === this._resourceFactor);
        }
    }
    EffectBonusValuePooledResourceFactorJunctions.Entry = Entry;
})(EffectBonusValuePooledResourceFactorJunctions || (EffectBonusValuePooledResourceFactorJunctions = {}));

var EffectBonusValuePooledResourceJunctions;
(function (EffectBonusValuePooledResourceJunctions) {
    EffectBonusValuePooledResourceJunctions.KEY = new CollectionKey("effect_bonus_value_pooled_resource_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._pooledResource = values["pooled_resource"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsPooledResources.KEY, CampaignBonusValueIdsPooledResources.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get pooledResource() {
            const collection = this.collectionCache.getCollection(PooledResources.KEY, PooledResources.Entry);
            return collection.find(entry => entry.key === this._pooledResource);
        }
    }
    EffectBonusValuePooledResourceJunctions.Entry = Entry;
})(EffectBonusValuePooledResourceJunctions || (EffectBonusValuePooledResourceJunctions = {}));

var PopulationClasses$1;
(function (PopulationClasses) {
    PopulationClasses.KEY = new CollectionKey("population_classes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.populationClass = values["population_class"];
        }
    }
    PopulationClasses.Entry = Entry;
})(PopulationClasses$1 || (PopulationClasses$1 = {}));

var EffectBonusValuePopulationClassAndReligionJunction$1;
(function (EffectBonusValuePopulationClassAndReligionJunction) {
    EffectBonusValuePopulationClassAndReligionJunction.KEY = new CollectionKey("effect_bonus_value_population_class_and_religion_junction");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._populationClass = values["population_class"];
            this._religion = values["religion"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsPopulationClassAndReligion$1.KEY, CampaignBonusValueIdsPopulationClassAndReligion$1.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get populationClass() {
            const collection = this.collectionCache.getCollection(PopulationClasses$1.KEY, PopulationClasses$1.Entry);
            return collection.find(entry => entry.populationClass === this._populationClass);
        }
        get religion() {
            const collection = this.collectionCache.getCollection(Religions$1.KEY, Religions$1.Entry);
            return collection.find(entry => entry.religionKey === this._religion);
        }
    }
    EffectBonusValuePopulationClassAndReligionJunction.Entry = Entry;
})(EffectBonusValuePopulationClassAndReligionJunction$1 || (EffectBonusValuePopulationClassAndReligionJunction$1 = {}));

var EffectBonusValuePopulationClassJunction$1;
(function (EffectBonusValuePopulationClassJunction) {
    EffectBonusValuePopulationClassJunction.KEY = new CollectionKey("effect_bonus_value_population_class_junction");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._populationClass = values["population_class"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsPopulationClass$1.KEY, CampaignBonusValueIdsPopulationClass$1.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get populationClass() {
            const collection = this.collectionCache.getCollection(PopulationClasses$1.KEY, PopulationClasses$1.Entry);
            return collection.find(entry => entry.populationClass === this._populationClass);
        }
    }
    EffectBonusValuePopulationClassJunction.Entry = Entry;
})(EffectBonusValuePopulationClassJunction$1 || (EffectBonusValuePopulationClassJunction$1 = {}));

var EffectBonusValueProjectileJunctions$1;
(function (EffectBonusValueProjectileJunctions) {
    EffectBonusValueProjectileJunctions.KEY = new CollectionKey("effect_bonus_value_projectile_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._projectile = values["projectile"];
            this._bonusValue = values["bonus_value"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get projectile() {
            const collection = this.collectionCache.getCollection(Projectiles$1.KEY, Projectiles$1.Entry);
            return collection.find(entry => entry.key === this._projectile);
        }
        get bonusValue() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsProjectile$1.KEY, CampaignBonusValueIdsProjectile$1.Entry);
            return collection.find(entry => entry.key === this._bonusValue);
        }
    }
    EffectBonusValueProjectileJunctions.Entry = Entry;
})(EffectBonusValueProjectileJunctions$1 || (EffectBonusValueProjectileJunctions$1 = {}));

var ProvincialInitiativeRecords$1;
(function (ProvincialInitiativeRecords) {
    ProvincialInitiativeRecords.KEY = new CollectionKey("provincial_initiative_records");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.localisedName = values["localised_name"];
            this._effectBundle = values["effect_bundle"];
            this.order = values["order"];
            this.iconPath = values["icon_path"];
            this._campaignVfxId = values["campaign_vfx_id"];
            this._religionRestriction = values["religion_restriction"];
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
        get campaignVfxId() {
            const collection = this.collectionCache.getCollection(CampaignVfxCampaignVfxEventIds$1.KEY, CampaignVfxCampaignVfxEventIds$1.Entry);
            return collection.find(entry => entry.campaignVfxEvent === this._campaignVfxId);
        }
        get religionRestriction() {
            const collection = this.collectionCache.getCollection(Religions$1.KEY, Religions$1.Entry);
            return collection.find(entry => entry.religionKey === this._religionRestriction);
        }
    }
    ProvincialInitiativeRecords.Entry = Entry;
})(ProvincialInitiativeRecords$1 || (ProvincialInitiativeRecords$1 = {}));

var EffectBonusValueProvinceInitiativeJunctions;
(function (EffectBonusValueProvinceInitiativeJunctions) {
    EffectBonusValueProvinceInitiativeJunctions.KEY = new CollectionKey("effect_bonus_value_province_initiative_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._provinceInitiative = values["province_initiative"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsProvinceInitiatives.KEY, CampaignBonusValueIdsProvinceInitiatives.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get provinceInitiative() {
            const collection = this.collectionCache.getCollection(ProvincialInitiativeRecords$1.KEY, ProvincialInitiativeRecords$1.Entry);
            return collection.find(entry => entry.key === this._provinceInitiative);
        }
    }
    EffectBonusValueProvinceInitiativeJunctions.Entry = Entry;
})(EffectBonusValueProvinceInitiativeJunctions || (EffectBonusValueProvinceInitiativeJunctions = {}));

var EffectBonusValueProvincialInitiativeEffectRecordJunctions$1;
(function (EffectBonusValueProvincialInitiativeEffectRecordJunctions) {
    EffectBonusValueProvincialInitiativeEffectRecordJunctions.KEY = new CollectionKey("effect_bonus_value_provincial_initiative_effect_record_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._effectBonusWillModify = values["effect_bonus_will_modify"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsProvincialInitiativeEffectRecords$1.KEY, CampaignBonusValueIdsProvincialInitiativeEffectRecords$1.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get effectBonusWillModify() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effectBonusWillModify);
        }
    }
    EffectBonusValueProvincialInitiativeEffectRecordJunctions.Entry = Entry;
})(EffectBonusValueProvincialInitiativeEffectRecordJunctions$1 || (EffectBonusValueProvincialInitiativeEffectRecordJunctions$1 = {}));

var EffectBonusValueReligionJunction$1;
(function (EffectBonusValueReligionJunction) {
    EffectBonusValueReligionJunction.KEY = new CollectionKey("effect_bonus_value_religion_junction");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._religion = values["religion"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsReligion$1.KEY, CampaignBonusValueIdsReligion$1.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get religion() {
            const collection = this.collectionCache.getCollection(Religions$1.KEY, Religions$1.Entry);
            return collection.find(entry => entry.religionKey === this._religion);
        }
    }
    EffectBonusValueReligionJunction.Entry = Entry;
})(EffectBonusValueReligionJunction$1 || (EffectBonusValueReligionJunction$1 = {}));

var EffectBonusValueResourceJunction$1;
(function (EffectBonusValueResourceJunction) {
    EffectBonusValueResourceJunction.KEY = new CollectionKey("effect_bonus_value_resource_junction");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._resource = values["resource"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get resource() {
            const collection = this.collectionCache.getCollection(Resources$1.KEY, Resources$1.Entry);
            return collection.find(entry => entry.key === this._resource);
        }
    }
    EffectBonusValueResourceJunction.Entry = Entry;
})(EffectBonusValueResourceJunction$1 || (EffectBonusValueResourceJunction$1 = {}));

var EffectBonusValueRitualChainsJunctions;
(function (EffectBonusValueRitualChainsJunctions) {
    EffectBonusValueRitualChainsJunctions.KEY = new CollectionKey("effect_bonus_value_ritual_chains_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._ritualChain = values["ritual_chain"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsRitualChains.KEY, CampaignBonusValueIdsRitualChains.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get ritualChain() {
            const collection = this.collectionCache.getCollection(RitualChains.KEY, RitualChains.Entry);
            return collection.find(entry => entry.key === this._ritualChain);
        }
    }
    EffectBonusValueRitualChainsJunctions.Entry = Entry;
})(EffectBonusValueRitualChainsJunctions || (EffectBonusValueRitualChainsJunctions = {}));

var EffectBonusValueRitualJunctions;
(function (EffectBonusValueRitualJunctions) {
    EffectBonusValueRitualJunctions.KEY = new CollectionKey("effect_bonus_value_ritual_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._ritual = values["ritual"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsRituals.KEY, CampaignBonusValueIdsRituals.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get ritual() {
            const collection = this.collectionCache.getCollection(Rituals.KEY, Rituals.Entry);
            return collection.find(entry => entry.key === this._ritual);
        }
    }
    EffectBonusValueRitualJunctions.Entry = Entry;
})(EffectBonusValueRitualJunctions || (EffectBonusValueRitualJunctions = {}));

var EffectBonusValueShotTypeJunctions$1;
(function (EffectBonusValueShotTypeJunctions) {
    EffectBonusValueShotTypeJunctions.KEY = new CollectionKey("effect_bonus_value_shot_type_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._shotType = values["shot_type"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsProjectileShotTypeEnum$1.KEY, CampaignBonusValueIdsProjectileShotTypeEnum$1.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get shotType() {
            const collection = this.collectionCache.getCollection(ProjectileShotTypeEnum$1.KEY, ProjectileShotTypeEnum$1.Entry);
            return collection.find(entry => entry.key === this._shotType);
        }
    }
    EffectBonusValueShotTypeJunctions.Entry = Entry;
})(EffectBonusValueShotTypeJunctions$1 || (EffectBonusValueShotTypeJunctions$1 = {}));

var EffectBonusValueSiegeItemJunctions$1;
(function (EffectBonusValueSiegeItemJunctions) {
    EffectBonusValueSiegeItemJunctions.KEY = new CollectionKey("effect_bonus_value_siege_item_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._siegeItem = values["siege_item"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsSiegeItems$1.KEY, CampaignBonusValueIdsSiegeItems$1.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get siegeItem() {
            const collection = this.collectionCache.getCollection(BattlefieldDeployableSiegeItems$1.KEY, BattlefieldDeployableSiegeItems$1.Entry);
            return collection.find(entry => entry.key === this._siegeItem);
        }
    }
    EffectBonusValueSiegeItemJunctions.Entry = Entry;
})(EffectBonusValueSiegeItemJunctions$1 || (EffectBonusValueSiegeItemJunctions$1 = {}));

var EffectBonusValueSpecialAbilityPhaseRecordJunctions;
(function (EffectBonusValueSpecialAbilityPhaseRecordJunctions) {
    EffectBonusValueSpecialAbilityPhaseRecordJunctions.KEY = new CollectionKey("effect_bonus_value_special_ability_phase_record_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._specialAbilityPhase = values["special_ability_phase"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsSpecialAbilityPhases.KEY, CampaignBonusValueIdsSpecialAbilityPhases.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get specialAbilityPhase() {
            const collection = this.collectionCache.getCollection(SpecialAbilityPhases$1.KEY, SpecialAbilityPhases$1.Entry);
            return collection.find(entry => entry.id === this._specialAbilityPhase);
        }
    }
    EffectBonusValueSpecialAbilityPhaseRecordJunctions.Entry = Entry;
})(EffectBonusValueSpecialAbilityPhaseRecordJunctions || (EffectBonusValueSpecialAbilityPhaseRecordJunctions = {}));

var EffectBonusValueSubcultureJunctions;
(function (EffectBonusValueSubcultureJunctions) {
    EffectBonusValueSubcultureJunctions.KEY = new CollectionKey("effect_bonus_value_subculture_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._subculture = values["subculture"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsSubcultures.KEY, CampaignBonusValueIdsSubcultures.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
    }
    EffectBonusValueSubcultureJunctions.Entry = Entry;
})(EffectBonusValueSubcultureJunctions || (EffectBonusValueSubcultureJunctions = {}));

var TechnologyCategories$1;
(function (TechnologyCategories) {
    TechnologyCategories.KEY = new CollectionKey("technology_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.position = values["position"];
        }
    }
    TechnologyCategories.Entry = Entry;
})(TechnologyCategories$1 || (TechnologyCategories$1 = {}));

var EffectBonusValueTechnologyCategoryJunctions$1;
(function (EffectBonusValueTechnologyCategoryJunctions) {
    EffectBonusValueTechnologyCategoryJunctions.KEY = new CollectionKey("effect_bonus_value_technology_category_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._technologyCategory = values["technology_category"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsTechnologyCategories$1.KEY, CampaignBonusValueIdsTechnologyCategories$1.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get technologyCategory() {
            const collection = this.collectionCache.getCollection(TechnologyCategories$1.KEY, TechnologyCategories$1.Entry);
            return collection.find(entry => entry.key === this._technologyCategory);
        }
    }
    EffectBonusValueTechnologyCategoryJunctions.Entry = Entry;
})(EffectBonusValueTechnologyCategoryJunctions$1 || (EffectBonusValueTechnologyCategoryJunctions$1 = {}));

var EffectBonusValueTechnologyJunctions;
(function (EffectBonusValueTechnologyJunctions) {
    EffectBonusValueTechnologyJunctions.KEY = new CollectionKey("effect_bonus_value_technology_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._technology = values["technology"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsTechnologies.KEY, CampaignBonusValueIdsTechnologies.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get technology() {
            const collection = this.collectionCache.getCollection(Technologies$1.KEY, Technologies$1.Entry);
            return collection.find(entry => entry.key === this._technology);
        }
    }
    EffectBonusValueTechnologyJunctions.Entry = Entry;
})(EffectBonusValueTechnologyJunctions || (EffectBonusValueTechnologyJunctions = {}));

var EffectBonusValueUnitAbilityJunctions$1;
(function (EffectBonusValueUnitAbilityJunctions) {
    EffectBonusValueUnitAbilityJunctions.KEY = new CollectionKey("effect_bonus_value_unit_ability_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._unitAbility = values["unit_ability"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsUnitAbility$1.KEY, CampaignBonusValueIdsUnitAbility$1.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get unitAbility() {
            const collection = this.collectionCache.getCollection(UnitAbilities$1.KEY, UnitAbilities$1.Entry);
            return collection.find(entry => entry.key === this._unitAbility);
        }
    }
    EffectBonusValueUnitAbilityJunctions.Entry = Entry;
})(EffectBonusValueUnitAbilityJunctions$1 || (EffectBonusValueUnitAbilityJunctions$1 = {}));

var EffectBonusValueUnitAttributeJunctions;
(function (EffectBonusValueUnitAttributeJunctions) {
    EffectBonusValueUnitAttributeJunctions.KEY = new CollectionKey("effect_bonus_value_unit_attribute_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._unitAttribute = values["unit_attribute"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsUnitAttributes.KEY, CampaignBonusValueIdsUnitAttributes.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get unitAttribute() {
            const collection = this.collectionCache.getCollection(UnitAttributes$1.KEY, UnitAttributes$1.Entry);
            return collection.find(entry => entry.key === this._unitAttribute);
        }
    }
    EffectBonusValueUnitAttributeJunctions.Entry = Entry;
})(EffectBonusValueUnitAttributeJunctions || (EffectBonusValueUnitAttributeJunctions = {}));

var EffectBonusValueUnitCasteJunctions$1;
(function (EffectBonusValueUnitCasteJunctions) {
    EffectBonusValueUnitCasteJunctions.KEY = new CollectionKey("effect_bonus_value_unit_caste_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._caste = values["caste"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsUnitCaste$1.KEY, CampaignBonusValueIdsUnitCaste$1.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get caste() {
            const collection = this.collectionCache.getCollection(UnitCastes$1.KEY, UnitCastes$1.Entry);
            return collection.find(entry => entry.caste === this._caste);
        }
    }
    EffectBonusValueUnitCasteJunctions.Entry = Entry;
})(EffectBonusValueUnitCasteJunctions$1 || (EffectBonusValueUnitCasteJunctions$1 = {}));

var EffectBonusValueUnitCasteStatModifiersJunctions$1;
(function (EffectBonusValueUnitCasteStatModifiersJunctions) {
    EffectBonusValueUnitCasteStatModifiersJunctions.KEY = new CollectionKey("effect_bonus_value_unit_caste_stat_modifiers_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._caste = values["caste"];
            this._statModifier = values["stat_modifier"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get caste() {
            const collection = this.collectionCache.getCollection(UnitCastes$1.KEY, UnitCastes$1.Entry);
            return collection.find(entry => entry.caste === this._caste);
        }
        get statModifier() {
            const collection = this.collectionCache.getCollection(UnitStatModifiers$1.KEY, UnitStatModifiers$1.Entry);
            return collection.find(entry => entry.key === this._statModifier);
        }
    }
    EffectBonusValueUnitCasteStatModifiersJunctions.Entry = Entry;
})(EffectBonusValueUnitCasteStatModifiersJunctions$1 || (EffectBonusValueUnitCasteStatModifiersJunctions$1 = {}));

var EffectBonusValueUnitCategoryJunction$1;
(function (EffectBonusValueUnitCategoryJunction) {
    EffectBonusValueUnitCategoryJunction.KEY = new CollectionKey("effect_bonus_value_unit_category_junction");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._unitCategory = values["unit_category"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsUnitCategory$1.KEY, CampaignBonusValueIdsUnitCategory$1.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get unitCategory() {
            const collection = this.collectionCache.getCollection(UnitCategory$1.KEY, UnitCategory$1.Entry);
            return collection.find(entry => entry.key === this._unitCategory);
        }
    }
    EffectBonusValueUnitCategoryJunction.Entry = Entry;
})(EffectBonusValueUnitCategoryJunction$1 || (EffectBonusValueUnitCategoryJunction$1 = {}));

var EffectBonusValueUnitCategoryStatModifiersJunctions$1;
(function (EffectBonusValueUnitCategoryStatModifiersJunctions) {
    EffectBonusValueUnitCategoryStatModifiersJunctions.KEY = new CollectionKey("effect_bonus_value_unit_category_stat_modifiers_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._category = values["category"];
            this._statModifier = values["stat_modifier"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get category() {
            const collection = this.collectionCache.getCollection(UnitCategory$1.KEY, UnitCategory$1.Entry);
            return collection.find(entry => entry.key === this._category);
        }
        get statModifier() {
            const collection = this.collectionCache.getCollection(UnitStatModifiers$1.KEY, UnitStatModifiers$1.Entry);
            return collection.find(entry => entry.key === this._statModifier);
        }
    }
    EffectBonusValueUnitCategoryStatModifiersJunctions.Entry = Entry;
})(EffectBonusValueUnitCategoryStatModifiersJunctions$1 || (EffectBonusValueUnitCategoryStatModifiersJunctions$1 = {}));

var EffectBonusValueUnitClassJunction$1;
(function (EffectBonusValueUnitClassJunction) {
    EffectBonusValueUnitClassJunction.KEY = new CollectionKey("effect_bonus_value_unit_class_junction");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._unitClass = values["unit_class"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsUnitClass$1.KEY, CampaignBonusValueIdsUnitClass$1.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get unitClass() {
            const collection = this.collectionCache.getCollection(UnitClass$1.KEY, UnitClass$1.Entry);
            return collection.find(entry => entry.key === this._unitClass);
        }
    }
    EffectBonusValueUnitClassJunction.Entry = Entry;
})(EffectBonusValueUnitClassJunction$1 || (EffectBonusValueUnitClassJunction$1 = {}));

var EffectBonusValueUnitClassStatModifiersJunctions$1;
(function (EffectBonusValueUnitClassStatModifiersJunctions) {
    EffectBonusValueUnitClassStatModifiersJunctions.KEY = new CollectionKey("effect_bonus_value_unit_class_stat_modifiers_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._class = values["class"];
            this._statModifier = values["stat_modifier"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get class() {
            const collection = this.collectionCache.getCollection(UnitClass$1.KEY, UnitClass$1.Entry);
            return collection.find(entry => entry.key === this._class);
        }
        get statModifier() {
            const collection = this.collectionCache.getCollection(UnitStatModifiers$1.KEY, UnitStatModifiers$1.Entry);
            return collection.find(entry => entry.key === this._statModifier);
        }
    }
    EffectBonusValueUnitClassStatModifiersJunctions.Entry = Entry;
})(EffectBonusValueUnitClassStatModifiersJunctions$1 || (EffectBonusValueUnitClassStatModifiersJunctions$1 = {}));

var EffectBonusValueUnitRecordJunctions$1;
(function (EffectBonusValueUnitRecordJunctions) {
    EffectBonusValueUnitRecordJunctions.KEY = new CollectionKey("effect_bonus_value_unit_record_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._unitRecordKey = values["unit_record_key"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsUnitRecords$1.KEY, CampaignBonusValueIdsUnitRecords$1.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get unitRecordKey() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unitRecordKey);
        }
    }
    EffectBonusValueUnitRecordJunctions.Entry = Entry;
})(EffectBonusValueUnitRecordJunctions$1 || (EffectBonusValueUnitRecordJunctions$1 = {}));

var UnitSetUnitAbilityJunctions;
(function (UnitSetUnitAbilityJunctions) {
    UnitSetUnitAbilityJunctions.KEY = new CollectionKey("unit_set_unit_ability_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._unitSet = values["unit_set"];
            this._unitAbility = values["unit_ability"];
        }
        get unitSet() {
            const collection = this.collectionCache.getCollection(UnitSets$1.KEY, UnitSets$1.Entry);
            return collection.find(entry => entry.key === this._unitSet);
        }
        get unitAbility() {
            const collection = this.collectionCache.getCollection(UnitAbilities$1.KEY, UnitAbilities$1.Entry);
            return collection.find(entry => entry.key === this._unitAbility);
        }
    }
    UnitSetUnitAbilityJunctions.Entry = Entry;
})(UnitSetUnitAbilityJunctions || (UnitSetUnitAbilityJunctions = {}));

var EffectBonusValueUnitSetUnitAbilityJunctions;
(function (EffectBonusValueUnitSetUnitAbilityJunctions) {
    EffectBonusValueUnitSetUnitAbilityJunctions.KEY = new CollectionKey("effect_bonus_value_unit_set_unit_ability_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._unitSetAbility = values["unit_set_ability"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsUnitSetUnitAbilities.KEY, CampaignBonusValueIdsUnitSetUnitAbilities.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get unitSetAbility() {
            const collection = this.collectionCache.getCollection(UnitSetUnitAbilityJunctions.KEY, UnitSetUnitAbilityJunctions.Entry);
            return collection.find(entry => entry.key === this._unitSetAbility);
        }
    }
    EffectBonusValueUnitSetUnitAbilityJunctions.Entry = Entry;
})(EffectBonusValueUnitSetUnitAbilityJunctions || (EffectBonusValueUnitSetUnitAbilityJunctions = {}));

var UnitSetUnitAttributeJunctions;
(function (UnitSetUnitAttributeJunctions) {
    UnitSetUnitAttributeJunctions.KEY = new CollectionKey("unit_set_unit_attribute_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._unitSet = values["unit_set"];
            this._unitAttribute = values["unit_attribute"];
        }
        get unitSet() {
            const collection = this.collectionCache.getCollection(UnitSets$1.KEY, UnitSets$1.Entry);
            return collection.find(entry => entry.key === this._unitSet);
        }
        get unitAttribute() {
            const collection = this.collectionCache.getCollection(UnitAttributes$1.KEY, UnitAttributes$1.Entry);
            return collection.find(entry => entry.key === this._unitAttribute);
        }
    }
    UnitSetUnitAttributeJunctions.Entry = Entry;
})(UnitSetUnitAttributeJunctions || (UnitSetUnitAttributeJunctions = {}));

var EffectBonusValueUnitSetUnitAttributeJunctions;
(function (EffectBonusValueUnitSetUnitAttributeJunctions) {
    EffectBonusValueUnitSetUnitAttributeJunctions.KEY = new CollectionKey("effect_bonus_value_unit_set_unit_attribute_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._bonusValueId = values["bonus_value_id"];
            this._unitSetAttribute = values["unit_set_attribute"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get bonusValueId() {
            const collection = this.collectionCache.getCollection(CampaignBonusValueIdsUnitSetUnitAttributes.KEY, CampaignBonusValueIdsUnitSetUnitAttributes.Entry);
            return collection.find(entry => entry.key === this._bonusValueId);
        }
        get unitSetAttribute() {
            const collection = this.collectionCache.getCollection(UnitSetUnitAttributeJunctions.KEY, UnitSetUnitAttributeJunctions.Entry);
            return collection.find(entry => entry.key === this._unitSetAttribute);
        }
    }
    EffectBonusValueUnitSetUnitAttributeJunctions.Entry = Entry;
})(EffectBonusValueUnitSetUnitAttributeJunctions || (EffectBonusValueUnitSetUnitAttributeJunctions = {}));

var EffectBonusValueUnitStatModifiersJunctions$1;
(function (EffectBonusValueUnitStatModifiersJunctions) {
    EffectBonusValueUnitStatModifiersJunctions.KEY = new CollectionKey("effect_bonus_value_unit_stat_modifiers_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this._statModifier = values["stat_modifier"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get statModifier() {
            const collection = this.collectionCache.getCollection(UnitStatModifiers$1.KEY, UnitStatModifiers$1.Entry);
            return collection.find(entry => entry.key === this._statModifier);
        }
    }
    EffectBonusValueUnitStatModifiersJunctions.Entry = Entry;
})(EffectBonusValueUnitStatModifiersJunctions$1 || (EffectBonusValueUnitStatModifiersJunctions$1 = {}));

var EffectBundlesToEffectsJunctions$1;
(function (EffectBundlesToEffectsJunctions) {
    EffectBundlesToEffectsJunctions.KEY = new CollectionKey("effect_bundles_to_effects_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effectBundleKey = values["effect_bundle_key"];
            this._effectKey = values["effect_key"];
            this.value = values["value"];
            this._effectScope = values["effect_scope"];
            this._advancementStage = values["advancement_stage"];
        }
        get effectBundleKey() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundleKey);
        }
        get effectKey() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effectKey);
        }
        get effectScope() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes$1.KEY, CampaignEffectScopes$1.Entry);
            return collection.find(entry => entry.key === this._effectScope);
        }
        get advancementStage() {
            const collection = this.collectionCache.getCollection(EffectBundleAdvancementStages$1.KEY, EffectBundleAdvancementStages$1.Entry);
            return collection.find(entry => entry.key === this._advancementStage);
        }
    }
    EffectBundlesToEffectsJunctions.Entry = Entry;
})(EffectBundlesToEffectsJunctions$1 || (EffectBundlesToEffectsJunctions$1 = {}));

var ElectorCounts;
(function (ElectorCounts) {
    ElectorCounts.KEY = new CollectionKey("elector_counts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._ministerialKey = values["ministerial_key"];
            this._capitalRegion = values["capital_region"];
            this._ancillaryReward = values["ancillary_reward"];
            this._unitReward = values["unit_reward"];
            this.mapPosX = values["map_pos_x"];
            this.mapPosY = values["map_pos_y"];
        }
        get ministerialKey() {
            const collection = this.collectionCache.getCollection(MinisterialPositions$1.KEY, MinisterialPositions$1.Entry);
            return collection.find(entry => entry.ministerKey === this._ministerialKey);
        }
        get capitalRegion() {
            const collection = this.collectionCache.getCollection(Regions$1.KEY, Regions$1.Entry);
            return collection.find(entry => entry.key === this._capitalRegion);
        }
        get ancillaryReward() {
            const collection = this.collectionCache.getCollection(Ancillaries$1.KEY, Ancillaries$1.Entry);
            return collection.find(entry => entry._key === this._ancillaryReward);
        }
        get unitReward() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unitReward);
        }
    }
    ElectorCounts.Entry = Entry;
})(ElectorCounts || (ElectorCounts = {}));

var ElectorCountRegionToCapitalRegionJunctions;
(function (ElectorCountRegionToCapitalRegionJunctions) {
    ElectorCountRegionToCapitalRegionJunctions.KEY = new CollectionKey("elector_count_region_to_capital_region_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._region = values["region"];
            this._capitalRegion = values["capital_region"];
        }
        get region() {
            const collection = this.collectionCache.getCollection(Regions$1.KEY, Regions$1.Entry);
            return collection.find(entry => entry.key === this._region);
        }
        get capitalRegion() {
            const collection = this.collectionCache.getCollection(Regions$1.KEY, Regions$1.Entry);
            return collection.find(entry => entry.key === this._capitalRegion);
        }
    }
    ElectorCountRegionToCapitalRegionJunctions.Entry = Entry;
})(ElectorCountRegionToCapitalRegionJunctions || (ElectorCountRegionToCapitalRegionJunctions = {}));

var EncyclopediaPages$1;
(function (EncyclopediaPages) {
    EncyclopediaPages.KEY = new CollectionKey("encyclopedia_pages");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.pageKey = values["page_key"];
            this.title = values["title"];
            this.template = values["template"];
        }
    }
    EncyclopediaPages.Entry = Entry;
})(EncyclopediaPages$1 || (EncyclopediaPages$1 = {}));

var EncyclopediaBlocks$1;
(function (EncyclopediaBlocks) {
    EncyclopediaBlocks.KEY = new CollectionKey("encyclopedia_blocks");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.blockKey = values["block_key"];
            this._pageKey = values["page_key"];
            this.order = values["order"];
            this.heading = values["heading"];
            this.class = values["class"];
            this.content = values["content"];
            this.image = values["image"];
            this.imageClass = values["image_class"];
            this.video = values["video"];
        }
        get pageKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaPages$1.KEY, EncyclopediaPages$1.Entry);
            return collection.find(entry => entry.pageKey === this._pageKey);
        }
    }
    EncyclopediaBlocks.Entry = Entry;
})(EncyclopediaBlocks$1 || (EncyclopediaBlocks$1 = {}));

var EncyclopediaAgentManualBlockLinks$1;
(function (EncyclopediaAgentManualBlockLinks) {
    EncyclopediaAgentManualBlockLinks.KEY = new CollectionKey("encyclopedia_agent_manual_block_links");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._agentKey = values["agent_key"];
            this._blockKey = values["block_key"];
        }
        get agentKey() {
            const collection = this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry);
            return collection.find(entry => entry.key === this._agentKey);
        }
        get blockKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaBlocks$1.KEY, EncyclopediaBlocks$1.Entry);
            return collection.find(entry => entry.blockKey === this._blockKey);
        }
    }
    EncyclopediaAgentManualBlockLinks.Entry = Entry;
})(EncyclopediaAgentManualBlockLinks$1 || (EncyclopediaAgentManualBlockLinks$1 = {}));

var EncyclopediaAgentManualPageLinks$1;
(function (EncyclopediaAgentManualPageLinks) {
    EncyclopediaAgentManualPageLinks.KEY = new CollectionKey("encyclopedia_agent_manual_page_links");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._agentKey = values["agent_key"];
            this._pageKey = values["page_key"];
        }
        get agentKey() {
            const collection = this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry);
            return collection.find(entry => entry.key === this._agentKey);
        }
        get pageKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaPages$1.KEY, EncyclopediaPages$1.Entry);
            return collection.find(entry => entry.pageKey === this._pageKey);
        }
    }
    EncyclopediaAgentManualPageLinks.Entry = Entry;
})(EncyclopediaAgentManualPageLinks$1 || (EncyclopediaAgentManualPageLinks$1 = {}));

var EncyclopediaBuildingRedirects$1;
(function (EncyclopediaBuildingRedirects) {
    EncyclopediaBuildingRedirects.KEY = new CollectionKey("encyclopedia_building_redirects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._building = values["building"];
            this._redirectBuilding = values["redirect_building"];
        }
        get building() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._building);
        }
        get redirectBuilding() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._redirectBuilding);
        }
    }
    EncyclopediaBuildingRedirects.Entry = Entry;
})(EncyclopediaBuildingRedirects$1 || (EncyclopediaBuildingRedirects$1 = {}));

var EncyclopediaFactionGroups$1;
(function (EncyclopediaFactionGroups) {
    EncyclopediaFactionGroups.KEY = new CollectionKey("encyclopedia_faction_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.groupId = values["group_id"];
        }
    }
    EncyclopediaFactionGroups.Entry = Entry;
})(EncyclopediaFactionGroups$1 || (EncyclopediaFactionGroups$1 = {}));

var EncyclopediaFactionGroupings$1;
(function (EncyclopediaFactionGroupings) {
    EncyclopediaFactionGroupings.KEY = new CollectionKey("encyclopedia_faction_groupings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._faction = values["faction"];
            this._group = values["group"];
            this.order = values["order"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get group() {
            const collection = this.collectionCache.getCollection(EncyclopediaFactionGroups$1.KEY, EncyclopediaFactionGroups$1.Entry);
            return collection.find(entry => entry.groupId === this._group);
        }
    }
    EncyclopediaFactionGroupings.Entry = Entry;
})(EncyclopediaFactionGroupings$1 || (EncyclopediaFactionGroupings$1 = {}));

var EncyclopediaFactionIconicUnits$1;
(function (EncyclopediaFactionIconicUnits) {
    EncyclopediaFactionIconicUnits.KEY = new CollectionKey("encyclopedia_faction_iconic_units");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._mainUnitKey = values["main_unit_key"];
            this._factionKey = values["faction_key"];
        }
        get mainUnitKey() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._mainUnitKey);
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
    }
    EncyclopediaFactionIconicUnits.Entry = Entry;
})(EncyclopediaFactionIconicUnits$1 || (EncyclopediaFactionIconicUnits$1 = {}));

var EncyclopediaGlossaryPages$1;
(function (EncyclopediaGlossaryPages) {
    EncyclopediaGlossaryPages.KEY = new CollectionKey("encyclopedia_glossary_pages");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.pageKey = values["page_key"];
            this.title = values["title"];
            this.template = values["template"];
        }
    }
    EncyclopediaGlossaryPages.Entry = Entry;
})(EncyclopediaGlossaryPages$1 || (EncyclopediaGlossaryPages$1 = {}));

var EncyclopediaGlossaryBlocks$1;
(function (EncyclopediaGlossaryBlocks) {
    EncyclopediaGlossaryBlocks.KEY = new CollectionKey("encyclopedia_glossary_blocks");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.blockKey = values["block_key"];
            this._pageKey = values["page_key"];
            this.order = values["order"];
            this.heading = values["heading"];
            this.class = values["class"];
            this.content = values["content"];
            this.image = values["image"];
            this.imageClass = values["image_class"];
            this.video = values["video"];
        }
        get pageKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaGlossaryPages$1.KEY, EncyclopediaGlossaryPages$1.Entry);
            return collection.find(entry => entry.pageKey === this._pageKey);
        }
    }
    EncyclopediaGlossaryBlocks.Entry = Entry;
})(EncyclopediaGlossaryBlocks$1 || (EncyclopediaGlossaryBlocks$1 = {}));

var EncyclopediaGlossaryPageLinkages$1;
(function (EncyclopediaGlossaryPageLinkages) {
    EncyclopediaGlossaryPageLinkages.KEY = new CollectionKey("encyclopedia_glossary_page_linkages");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._pageKey = values["page_key"];
            this._parentKey = values["parent_key"];
            this._nextKey = values["next_key"];
        }
        get pageKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaGlossaryPages$1.KEY, EncyclopediaGlossaryPages$1.Entry);
            return collection.find(entry => entry.pageKey === this._pageKey);
        }
        get parentKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaGlossaryPages$1.KEY, EncyclopediaGlossaryPages$1.Entry);
            return collection.find(entry => entry.pageKey === this._parentKey);
        }
        get nextKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaGlossaryPages$1.KEY, EncyclopediaGlossaryPages$1.Entry);
            return collection.find(entry => entry.pageKey === this._nextKey);
        }
    }
    EncyclopediaGlossaryPageLinkages.Entry = Entry;
})(EncyclopediaGlossaryPageLinkages$1 || (EncyclopediaGlossaryPageLinkages$1 = {}));

var EncyclopediaHistoricalInfoPages$1;
(function (EncyclopediaHistoricalInfoPages) {
    EncyclopediaHistoricalInfoPages.KEY = new CollectionKey("encyclopedia_historical_info_pages");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.pageKey = values["page_key"];
            this.title = values["title"];
            this.template = values["template"];
        }
    }
    EncyclopediaHistoricalInfoPages.Entry = Entry;
})(EncyclopediaHistoricalInfoPages$1 || (EncyclopediaHistoricalInfoPages$1 = {}));

var EncyclopediaHistoricalInfoBlocks$1;
(function (EncyclopediaHistoricalInfoBlocks) {
    EncyclopediaHistoricalInfoBlocks.KEY = new CollectionKey("encyclopedia_historical_info_blocks");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.blockKey = values["block_key"];
            this._pageKey = values["page_key"];
            this.order = values["order"];
            this.heading = values["heading"];
            this.class = values["class"];
            this.content = values["content"];
            this.image = values["image"];
            this.imageClass = values["image_class"];
            this.video = values["video"];
        }
        get pageKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaHistoricalInfoPages$1.KEY, EncyclopediaHistoricalInfoPages$1.Entry);
            return collection.find(entry => entry.pageKey === this._pageKey);
        }
    }
    EncyclopediaHistoricalInfoBlocks.Entry = Entry;
})(EncyclopediaHistoricalInfoBlocks$1 || (EncyclopediaHistoricalInfoBlocks$1 = {}));

var EncyclopediaHistoricalInfoPageLinkages$1;
(function (EncyclopediaHistoricalInfoPageLinkages) {
    EncyclopediaHistoricalInfoPageLinkages.KEY = new CollectionKey("encyclopedia_historical_info_page_linkages");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._pageKey = values["page_key"];
            this._parentKey = values["parent_key"];
            this._nextKey = values["next_key"];
        }
        get pageKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaHistoricalInfoPages$1.KEY, EncyclopediaHistoricalInfoPages$1.Entry);
            return collection.find(entry => entry.pageKey === this._pageKey);
        }
        get parentKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaHistoricalInfoPages$1.KEY, EncyclopediaHistoricalInfoPages$1.Entry);
            return collection.find(entry => entry.pageKey === this._parentKey);
        }
        get nextKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaHistoricalInfoPages$1.KEY, EncyclopediaHistoricalInfoPages$1.Entry);
            return collection.find(entry => entry.pageKey === this._nextKey);
        }
    }
    EncyclopediaHistoricalInfoPageLinkages.Entry = Entry;
})(EncyclopediaHistoricalInfoPageLinkages$1 || (EncyclopediaHistoricalInfoPageLinkages$1 = {}));

var EncyclopediaIndexPages$1;
(function (EncyclopediaIndexPages) {
    EncyclopediaIndexPages.KEY = new CollectionKey("encyclopedia_index_pages");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.pageKey = values["page_key"];
            this._annotation = values["annotation"];
        }
        get annotation() {
            const collection = this.collectionCache.getCollection(EncyclopediaBlocks$1.KEY, EncyclopediaBlocks$1.Entry);
            return collection.find(entry => entry.blockKey === this._annotation);
        }
    }
    EncyclopediaIndexPages.Entry = Entry;
})(EncyclopediaIndexPages$1 || (EncyclopediaIndexPages$1 = {}));

var EncyclopediaMultiplayerPages$1;
(function (EncyclopediaMultiplayerPages) {
    EncyclopediaMultiplayerPages.KEY = new CollectionKey("encyclopedia_multiplayer_pages");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.pageKey = values["page_key"];
            this.title = values["title"];
            this.template = values["template"];
        }
    }
    EncyclopediaMultiplayerPages.Entry = Entry;
})(EncyclopediaMultiplayerPages$1 || (EncyclopediaMultiplayerPages$1 = {}));

var EncyclopediaMultiplayerBlocks$1;
(function (EncyclopediaMultiplayerBlocks) {
    EncyclopediaMultiplayerBlocks.KEY = new CollectionKey("encyclopedia_multiplayer_blocks");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.blockKey = values["block_key"];
            this._pageKey = values["page_key"];
            this.order = values["order"];
            this.heading = values["heading"];
            this.class = values["class"];
            this.content = values["content"];
            this.image = values["image"];
            this.imageClass = values["image_class"];
            this.video = values["video"];
        }
        get pageKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaMultiplayerPages$1.KEY, EncyclopediaMultiplayerPages$1.Entry);
            return collection.find(entry => entry.pageKey === this._pageKey);
        }
    }
    EncyclopediaMultiplayerBlocks.Entry = Entry;
})(EncyclopediaMultiplayerBlocks$1 || (EncyclopediaMultiplayerBlocks$1 = {}));

var EncyclopediaMultiplayerPageLinkages$1;
(function (EncyclopediaMultiplayerPageLinkages) {
    EncyclopediaMultiplayerPageLinkages.KEY = new CollectionKey("encyclopedia_multiplayer_page_linkages");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._pageKey = values["page_key"];
            this._parentKey = values["parent_key"];
            this._nextKey = values["next_key"];
        }
        get pageKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaMultiplayerPages$1.KEY, EncyclopediaMultiplayerPages$1.Entry);
            return collection.find(entry => entry.pageKey === this._pageKey);
        }
        get parentKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaMultiplayerPages$1.KEY, EncyclopediaMultiplayerPages$1.Entry);
            return collection.find(entry => entry.pageKey === this._parentKey);
        }
        get nextKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaMultiplayerPages$1.KEY, EncyclopediaMultiplayerPages$1.Entry);
            return collection.find(entry => entry.pageKey === this._nextKey);
        }
    }
    EncyclopediaMultiplayerPageLinkages.Entry = Entry;
})(EncyclopediaMultiplayerPageLinkages$1 || (EncyclopediaMultiplayerPageLinkages$1 = {}));

var EncyclopediaPageLinkages$1;
(function (EncyclopediaPageLinkages) {
    EncyclopediaPageLinkages.KEY = new CollectionKey("encyclopedia_page_linkages");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._pageKey = values["page_key"];
            this._parentKey = values["parent_key"];
            this._nextKey = values["next_key"];
        }
        get pageKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaPages$1.KEY, EncyclopediaPages$1.Entry);
            return collection.find(entry => entry.pageKey === this._pageKey);
        }
        get parentKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaPages$1.KEY, EncyclopediaPages$1.Entry);
            return collection.find(entry => entry.pageKey === this._parentKey);
        }
        get nextKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaPages$1.KEY, EncyclopediaPages$1.Entry);
            return collection.find(entry => entry.pageKey === this._nextKey);
        }
    }
    EncyclopediaPageLinkages.Entry = Entry;
})(EncyclopediaPageLinkages$1 || (EncyclopediaPageLinkages$1 = {}));

var EncyclopediaPageRelatedLinks$1;
(function (EncyclopediaPageRelatedLinks) {
    EncyclopediaPageRelatedLinks.KEY = new CollectionKey("encyclopedia_page_related_links");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._pageKey = values["page_key"];
            this._target = values["target"];
        }
        get pageKey() {
            const collection = this.collectionCache.getCollection(EncyclopediaPages$1.KEY, EncyclopediaPages$1.Entry);
            return collection.find(entry => entry.pageKey === this._pageKey);
        }
        get target() {
            const collection = this.collectionCache.getCollection(EncyclopediaPages$1.KEY, EncyclopediaPages$1.Entry);
            return collection.find(entry => entry.pageKey === this._target);
        }
    }
    EncyclopediaPageRelatedLinks.Entry = Entry;
})(EncyclopediaPageRelatedLinks$1 || (EncyclopediaPageRelatedLinks$1 = {}));

var EncyclopediaProjectileShotTypeLinks$1;
(function (EncyclopediaProjectileShotTypeLinks) {
    EncyclopediaProjectileShotTypeLinks.KEY = new CollectionKey("encyclopedia_projectile_shot_type_links");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._shotType = values["shot_type"];
            this._manualPage = values["manual_page"];
            this._manualBlock = values["manual_block"];
        }
        get shotType() {
            const collection = this.collectionCache.getCollection(ProjectileShotTypeEnum$1.KEY, ProjectileShotTypeEnum$1.Entry);
            return collection.find(entry => entry.key === this._shotType);
        }
        get manualPage() {
            const collection = this.collectionCache.getCollection(EncyclopediaPages$1.KEY, EncyclopediaPages$1.Entry);
            return collection.find(entry => entry.pageKey === this._manualPage);
        }
        get manualBlock() {
            const collection = this.collectionCache.getCollection(EncyclopediaBlocks$1.KEY, EncyclopediaBlocks$1.Entry);
            return collection.find(entry => entry.blockKey === this._manualBlock);
        }
    }
    EncyclopediaProjectileShotTypeLinks.Entry = Entry;
})(EncyclopediaProjectileShotTypeLinks$1 || (EncyclopediaProjectileShotTypeLinks$1 = {}));

var EncyclopediaSettings$1;
(function (EncyclopediaSettings) {
    EncyclopediaSettings.KEY = new CollectionKey("encyclopedia_settings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.value = values["value"];
        }
    }
    EncyclopediaSettings.Entry = Entry;
})(EncyclopediaSettings$1 || (EncyclopediaSettings$1 = {}));

var EncyclopediaTemplateStrings$1;
(function (EncyclopediaTemplateStrings) {
    EncyclopediaTemplateStrings.KEY = new CollectionKey("encyclopedia_template_strings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.stringKey = values["string_key"];
            this.text = values["text"];
        }
    }
    EncyclopediaTemplateStrings.Entry = Entry;
})(EncyclopediaTemplateStrings$1 || (EncyclopediaTemplateStrings$1 = {}));

var EncyclopediaTriggers$1;
(function (EncyclopediaTriggers) {
    EncyclopediaTriggers.KEY = new CollectionKey("encyclopedia_triggers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.componentKey = values["component_key"];
            this.url = values["url"];
        }
    }
    EncyclopediaTriggers.Entry = Entry;
})(EncyclopediaTriggers$1 || (EncyclopediaTriggers$1 = {}));

var EncyclopediaTutorialSections$1;
(function (EncyclopediaTutorialSections) {
    EncyclopediaTutorialSections.KEY = new CollectionKey("encyclopedia_tutorial_sections");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.section = values["section"];
            this.name = values["name"];
        }
    }
    EncyclopediaTutorialSections.Entry = Entry;
})(EncyclopediaTutorialSections$1 || (EncyclopediaTutorialSections$1 = {}));

var EncyclopediaTutorialVideos$1;
(function (EncyclopediaTutorialVideos) {
    EncyclopediaTutorialVideos.KEY = new CollectionKey("encyclopedia_tutorial_videos");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.title = values["title"];
            this._section = values["section"];
            this.file = values["file"];
            this.description = values["description"];
        }
        get section() {
            const collection = this.collectionCache.getCollection(EncyclopediaTutorialSections$1.KEY, EncyclopediaTutorialSections$1.Entry);
            return collection.find(entry => entry.section === this._section);
        }
    }
    EncyclopediaTutorialVideos.Entry = Entry;
})(EncyclopediaTutorialVideos$1 || (EncyclopediaTutorialVideos$1 = {}));

var Languages$1;
(function (Languages) {
    Languages.KEY = new CollectionKey("languages");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.fullName = values["full_name"];
        }
    }
    Languages.Entry = Entry;
})(Languages$1 || (Languages$1 = {}));

var EncyclopediaTutorialVideosDefaultSubtitles$1;
(function (EncyclopediaTutorialVideosDefaultSubtitles) {
    EncyclopediaTutorialVideosDefaultSubtitles.KEY = new CollectionKey("encyclopedia_tutorial_videos_default_subtitles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._video = values["video"];
            this._language = values["language"];
        }
        get video() {
            const collection = this.collectionCache.getCollection(EncyclopediaTutorialVideos$1.KEY, EncyclopediaTutorialVideos$1.Entry);
            return collection.find(entry => entry.key === this._video);
        }
        get language() {
            const collection = this.collectionCache.getCollection(Languages$1.KEY, Languages$1.Entry);
            return collection.find(entry => entry.key === this._language);
        }
    }
    EncyclopediaTutorialVideosDefaultSubtitles.Entry = Entry;
})(EncyclopediaTutorialVideosDefaultSubtitles$1 || (EncyclopediaTutorialVideosDefaultSubtitles$1 = {}));

var EncyclopediaTutorialVideoSubtitles$1;
(function (EncyclopediaTutorialVideoSubtitles) {
    EncyclopediaTutorialVideoSubtitles.KEY = new CollectionKey("encyclopedia_tutorial_video_subtitles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this.subtitleNumber = values["subtitle_number"];
            this.timecodeIn = values["timecode_in"];
            this.timecodeOut = values["timecode_out"];
            this.text = values["text"];
            this.line = values["line"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(EncyclopediaTutorialVideos$1.KEY, EncyclopediaTutorialVideos$1.Entry);
            return collection.find(entry => entry.key === this._key);
        }
    }
    EncyclopediaTutorialVideoSubtitles.Entry = Entry;
})(EncyclopediaTutorialVideoSubtitles$1 || (EncyclopediaTutorialVideoSubtitles$1 = {}));

var EncyclopediaUnitAbilitiesLinks$1;
(function (EncyclopediaUnitAbilitiesLinks) {
    EncyclopediaUnitAbilitiesLinks.KEY = new CollectionKey("encyclopedia_unit_abilities_links");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unitAbility = values["unit_ability"];
            this._manualPage = values["manual_page"];
            this._manualBlock = values["manual_block"];
        }
        get unitAbility() {
            const collection = this.collectionCache.getCollection(UnitAbilities$1.KEY, UnitAbilities$1.Entry);
            return collection.find(entry => entry.key === this._unitAbility);
        }
        get manualPage() {
            const collection = this.collectionCache.getCollection(EncyclopediaPages$1.KEY, EncyclopediaPages$1.Entry);
            return collection.find(entry => entry.pageKey === this._manualPage);
        }
        get manualBlock() {
            const collection = this.collectionCache.getCollection(EncyclopediaBlocks$1.KEY, EncyclopediaBlocks$1.Entry);
            return collection.find(entry => entry.blockKey === this._manualBlock);
        }
    }
    EncyclopediaUnitAbilitiesLinks.Entry = Entry;
})(EncyclopediaUnitAbilitiesLinks$1 || (EncyclopediaUnitAbilitiesLinks$1 = {}));

var EncyclopediaUnitAttributesLinks$1;
(function (EncyclopediaUnitAttributesLinks) {
    EncyclopediaUnitAttributesLinks.KEY = new CollectionKey("encyclopedia_unit_attributes_links");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unitAttribute = values["unit_attribute"];
            this._manualPage = values["manual_page"];
            this._manualBlock = values["manual_block"];
        }
        get unitAttribute() {
            const collection = this.collectionCache.getCollection(UnitAttributes$1.KEY, UnitAttributes$1.Entry);
            return collection.find(entry => entry.key === this._unitAttribute);
        }
        get manualPage() {
            const collection = this.collectionCache.getCollection(EncyclopediaPages$1.KEY, EncyclopediaPages$1.Entry);
            return collection.find(entry => entry.pageKey === this._manualPage);
        }
        get manualBlock() {
            const collection = this.collectionCache.getCollection(EncyclopediaBlocks$1.KEY, EncyclopediaBlocks$1.Entry);
            return collection.find(entry => entry.blockKey === this._manualBlock);
        }
    }
    EncyclopediaUnitAttributesLinks.Entry = Entry;
})(EncyclopediaUnitAttributesLinks$1 || (EncyclopediaUnitAttributesLinks$1 = {}));

var EncyclopediaUnitRedirects$1;
(function (EncyclopediaUnitRedirects) {
    EncyclopediaUnitRedirects.KEY = new CollectionKey("encyclopedia_unit_redirects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unit = values["unit"];
            this._redirectUnit = values["redirect_unit"];
        }
        get unit() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
        get redirectUnit() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._redirectUnit);
        }
    }
    EncyclopediaUnitRedirects.Entry = Entry;
})(EncyclopediaUnitRedirects$1 || (EncyclopediaUnitRedirects$1 = {}));

var EncyclopediaUrls$1;
(function (EncyclopediaUrls) {
    EncyclopediaUrls.KEY = new CollectionKey("encyclopedia_urls");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.type = values["type"];
            this.url = values["url"];
        }
    }
    EncyclopediaUrls.Entry = Entry;
})(EncyclopediaUrls$1 || (EncyclopediaUrls$1 = {}));

var Events$1;
(function (Events) {
    Events.KEY = new CollectionKey("events");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.dynamic = !!values["dynamic"];
            this.onscreenName = values["onscreen_name"];
            this.eventText = values["event_text"];
        }
    }
    Events.Entry = Entry;
})(Events$1 || (Events$1 = {}));

var EventsEffectsJunct$1;
(function (EventsEffectsJunct) {
    EventsEffectsJunct.KEY = new CollectionKey("events_effects_junct");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._event = values["event"];
            this._effect = values["effect"];
            this.value = values["value"];
        }
        get event() {
            const collection = this.collectionCache.getCollection(Events$1.KEY, Events$1.Entry);
            return collection.find(entry => entry.key === this._event);
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
    }
    EventsEffectsJunct.Entry = Entry;
})(EventsEffectsJunct$1 || (EventsEffectsJunct$1 = {}));

var EventFeedCategories;
(function (EventFeedCategories) {
    EventFeedCategories.KEY = new CollectionKey("event_feed_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.category = values["category"];
            this.categoryTitle = values["category_title"];
        }
    }
    EventFeedCategories.Entry = Entry;
})(EventFeedCategories || (EventFeedCategories = {}));

var EventFeedSubcategories;
(function (EventFeedSubcategories) {
    EventFeedSubcategories.KEY = new CollectionKey("event_feed_subcategories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.subcategory = values["subcategory"];
            this._category = values["category"];
            this.subcategoryTitle = values["subcategory_title"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(EventFeedCategories.KEY, EventFeedCategories.Entry);
            return collection.find(entry => entry.category === this._category);
        }
    }
    EventFeedSubcategories.Entry = Entry;
})(EventFeedSubcategories || (EventFeedSubcategories = {}));

var EventFeedEvents;
(function (EventFeedEvents) {
    EventFeedEvents.KEY = new CollectionKey("event_feed_events");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.event = values["event"];
            this._subcategory = values["subcategory"];
            this.suppressInStartpos = !!values["suppress_in_startpos"];
        }
        get subcategory() {
            const collection = this.collectionCache.getCollection(EventFeedSubcategories.KEY, EventFeedSubcategories.Entry);
            return collection.find(entry => entry.subcategory === this._subcategory);
        }
    }
    EventFeedEvents.Entry = Entry;
})(EventFeedEvents || (EventFeedEvents = {}));

var EventFeedGroups;
(function (EventFeedGroups) {
    EventFeedGroups.KEY = new CollectionKey("event_feed_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.group = values["group"];
        }
    }
    EventFeedGroups.Entry = Entry;
})(EventFeedGroups || (EventFeedGroups = {}));

var EventFeedGroupMembers;
(function (EventFeedGroupMembers) {
    EventFeedGroupMembers.KEY = new CollectionKey("event_feed_group_members");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._group = values["group"];
            this.member = values["member"];
        }
        get group() {
            const collection = this.collectionCache.getCollection(EventFeedGroups.KEY, EventFeedGroups.Entry);
            return collection.find(entry => entry.group === this._group);
        }
    }
    EventFeedGroupMembers.Entry = Entry;
})(EventFeedGroupMembers || (EventFeedGroupMembers = {}));

var EventFeedStrings;
(function (EventFeedStrings) {
    EventFeedStrings.KEY = new CollectionKey("event_feed_strings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.text = values["text"];
        }
    }
    EventFeedStrings.Entry = Entry;
})(EventFeedStrings || (EventFeedStrings = {}));

var EventFeedMessageEvents;
(function (EventFeedMessageEvents) {
    EventFeedMessageEvents.KEY = new CollectionKey("event_feed_message_events");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._event = values["event"];
            this._target = values["target"];
            this._group = values["group"];
            this._secondaryDetail = values["secondary_detail"];
            this._flavourText = values["flavour_text"];
            this.image = values["image"];
            this._layout = values["layout"];
            this._layoutData = values["layout_data"];
            this.soundEvent = values["sound_event"];
            this._contextLocated = values["context_located"];
            this.overrideIcon = values["override_icon"];
        }
        get event() {
            const collection = this.collectionCache.getCollection(EventFeedEvents.KEY, EventFeedEvents.Entry);
            return collection.find(entry => entry.event === this._event);
        }
        get target() {
            const collection = this.collectionCache.getCollection(EventFeedGroups.KEY, EventFeedGroups.Entry);
            return collection.find(entry => entry.group === this._target);
        }
        get group() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._group);
        }
        get secondaryDetail() {
            const collection = this.collectionCache.getCollection(EventFeedStrings.KEY, EventFeedStrings.Entry);
            return collection.find(entry => entry.key === this._secondaryDetail);
        }
        get flavourText() {
            const collection = this.collectionCache.getCollection(EventFeedStrings.KEY, EventFeedStrings.Entry);
            return collection.find(entry => entry.key === this._flavourText);
        }
        get layout() {
            const collection = this.collectionCache.getCollection(MessageEventLayoutTypes$1.KEY, MessageEventLayoutTypes$1.Entry);
            return collection.find(entry => entry.type === this._layout);
        }
        get layoutData() {
            const collection = this.collectionCache.getCollection(EventFeedGroups.KEY, EventFeedGroups.Entry);
            return collection.find(entry => entry.group === this._layoutData);
        }
        get contextLocated() {
            const collection = this.collectionCache.getCollection(EventFeedGroups.KEY, EventFeedGroups.Entry);
            return collection.find(entry => entry.group === this._contextLocated);
        }
    }
    EventFeedMessageEvents.Entry = Entry;
})(EventFeedMessageEvents || (EventFeedMessageEvents = {}));

var EventFeedSummaryEvents;
(function (EventFeedSummaryEvents) {
    EventFeedSummaryEvents.KEY = new CollectionKey("event_feed_summary_events");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._event = values["event"];
            this.title = values["title"];
            this.icon = values["icon"];
        }
        get event() {
            const collection = this.collectionCache.getCollection(EventFeedEvents.KEY, EventFeedEvents.Entry);
            return collection.find(entry => entry.event === this._event);
        }
    }
    EventFeedSummaryEvents.Entry = Entry;
})(EventFeedSummaryEvents || (EventFeedSummaryEvents = {}));

var EventFeedTargetedEvents;
(function (EventFeedTargetedEvents) {
    EventFeedTargetedEvents.KEY = new CollectionKey("event_feed_targeted_events");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._event = values["event"];
            this._target = values["target"];
            this.persistent = !!values["persistent"];
            this.instantOpen = !!values["instant_open"];
            this.title = values["title"];
            this._primaryDetail = values["primary_detail"];
            this.icon = values["icon"];
            this._located = values["located"];
            this._targetCriteria = values["target_criteria"];
        }
        get event() {
            const collection = this.collectionCache.getCollection(EventFeedEvents.KEY, EventFeedEvents.Entry);
            return collection.find(entry => entry.event === this._event);
        }
        get target() {
            const collection = this.collectionCache.getCollection(EventFeedGroups.KEY, EventFeedGroups.Entry);
            return collection.find(entry => entry.group === this._target);
        }
        get primaryDetail() {
            const collection = this.collectionCache.getCollection(EventFeedStrings.KEY, EventFeedStrings.Entry);
            return collection.find(entry => entry.key === this._primaryDetail);
        }
        get located() {
            const collection = this.collectionCache.getCollection(EventFeedGroups.KEY, EventFeedGroups.Entry);
            return collection.find(entry => entry.group === this._located);
        }
        get targetCriteria() {
            const collection = this.collectionCache.getCollection(EventFeedGroups.KEY, EventFeedGroups.Entry);
            return collection.find(entry => entry.group === this._targetCriteria);
        }
    }
    EventFeedTargetedEvents.Entry = Entry;
})(EventFeedTargetedEvents || (EventFeedTargetedEvents = {}));

var ExperienceTriggersTargets$1;
(function (ExperienceTriggersTargets) {
    ExperienceTriggersTargets.KEY = new CollectionKey("experience_triggers_targets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    ExperienceTriggersTargets.Entry = Entry;
})(ExperienceTriggersTargets$1 || (ExperienceTriggersTargets$1 = {}));

var ExperienceTriggers$1;
(function (ExperienceTriggers) {
    ExperienceTriggers.KEY = new CollectionKey("experience_triggers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.triggerKey = values["trigger_key"];
            this._event = values["event"];
            this.experiencePoints = values["experience_points"];
            this.condition = values["condition"];
            this.localisedDescription = values["localised_description"];
            this._target = values["target"];
            this.gravitasPoints = values["gravitas_points"];
        }
        get event() {
            const collection = this.collectionCache.getCollection(TriggerEvents$1.KEY, TriggerEvents$1.Entry);
            return collection.find(entry => entry.event === this._event);
        }
        get target() {
            const collection = this.collectionCache.getCollection(ExperienceTriggersTargets$1.KEY, ExperienceTriggersTargets$1.Entry);
            return collection.find(entry => entry.key === this._target);
        }
    }
    ExperienceTriggers.Entry = Entry;
})(ExperienceTriggers$1 || (ExperienceTriggers$1 = {}));

var FactionwideRecruitmentUnitExclusionsSets;
(function (FactionwideRecruitmentUnitExclusionsSets) {
    FactionwideRecruitmentUnitExclusionsSets.KEY = new CollectionKey("factionwide_recruitment_unit_exclusions_sets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.set = values["set"];
        }
    }
    FactionwideRecruitmentUnitExclusionsSets.Entry = Entry;
})(FactionwideRecruitmentUnitExclusionsSets || (FactionwideRecruitmentUnitExclusionsSets = {}));

var FactionwideRecruitmentUnitExclusionsUnitsSetsJunctions;
(function (FactionwideRecruitmentUnitExclusionsUnitsSetsJunctions) {
    FactionwideRecruitmentUnitExclusionsUnitsSetsJunctions.KEY = new CollectionKey("factionwide_recruitment_unit_exclusions_units_sets_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._set = values["set"];
            this._unit = values["unit"];
        }
        get set() {
            const collection = this.collectionCache.getCollection(FactionwideRecruitmentUnitExclusionsSets.KEY, FactionwideRecruitmentUnitExclusionsSets.Entry);
            return collection.find(entry => entry.set === this._set);
        }
        get unit() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
    }
    FactionwideRecruitmentUnitExclusionsUnitsSetsJunctions.Entry = Entry;
})(FactionwideRecruitmentUnitExclusionsUnitsSetsJunctions || (FactionwideRecruitmentUnitExclusionsUnitsSetsJunctions = {}));

var FactionAgentPermittedSubtypes;
(function (FactionAgentPermittedSubtypes) {
    FactionAgentPermittedSubtypes.KEY = new CollectionKey("faction_agent_permitted_subtypes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._faction = values["faction"];
            this._agent = values["agent"];
            this._subtype = values["subtype"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get agent() {
            const collection = this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry);
            return collection.find(entry => entry.key === this._agent);
        }
        get subtype() {
            const collection = this.collectionCache.getCollection(AgentSubtypes.KEY, AgentSubtypes.Entry);
            return collection.find(entry => entry.key === this._subtype);
        }
    }
    FactionAgentPermittedSubtypes.Entry = Entry;
})(FactionAgentPermittedSubtypes || (FactionAgentPermittedSubtypes = {}));

var FactionBanners$1;
(function (FactionBanners) {
    FactionBanners.KEY = new CollectionKey("faction_banners");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this.symbol = values["symbol"];
            this.primaryRed = values["primary_red"];
            this.primaryGreen = values["primary_green"];
            this.primaryBlue = values["primary_blue"];
            this.secondaryRed = values["secondary_red"];
            this.secondaryGreen = values["secondary_green"];
            this.secondaryBlue = values["secondary_blue"];
            this.tertiaryRed = values["tertiary_red"];
            this.tertiaryGreen = values["tertiary_green"];
            this.tertiaryBlue = values["tertiary_blue"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._key);
        }
    }
    FactionBanners.Entry = Entry;
})(FactionBanners$1 || (FactionBanners$1 = {}));

var FactionFactionwideRecruitmentUnitExclusionsSetJunctions;
(function (FactionFactionwideRecruitmentUnitExclusionsSetJunctions) {
    FactionFactionwideRecruitmentUnitExclusionsSetJunctions.KEY = new CollectionKey("faction_factionwide_recruitment_unit_exclusions_set_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._faction = values["faction"];
            this._set = values["set"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get set() {
            const collection = this.collectionCache.getCollection(FactionwideRecruitmentUnitExclusionsSets.KEY, FactionwideRecruitmentUnitExclusionsSets.Entry);
            return collection.find(entry => entry.set === this._set);
        }
    }
    FactionFactionwideRecruitmentUnitExclusionsSetJunctions.Entry = Entry;
})(FactionFactionwideRecruitmentUnitExclusionsSetJunctions || (FactionFactionwideRecruitmentUnitExclusionsSetJunctions = {}));

var FactionFeatures;
(function (FactionFeatures) {
    FactionFeatures.KEY = new CollectionKey("faction_features");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    FactionFeatures.Entry = Entry;
})(FactionFeatures || (FactionFeatures = {}));

var FactionFeatureSetMilitaryForceTypes;
(function (FactionFeatureSetMilitaryForceTypes) {
    FactionFeatureSetMilitaryForceTypes.KEY = new CollectionKey("faction_feature_set_military_force_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._defaultArmy = values["default_army"];
            this._defaultNavy = values["default_navy"];
            this._seaLockedSpecialist = values["sea_locked_specialist"];
        }
        get defaultArmy() {
            const collection = this.collectionCache.getCollection(MilitaryForceTypes.KEY, MilitaryForceTypes.Entry);
            return collection.find(entry => entry.key === this._defaultArmy);
        }
        get defaultNavy() {
            const collection = this.collectionCache.getCollection(MilitaryForceTypes.KEY, MilitaryForceTypes.Entry);
            return collection.find(entry => entry.key === this._defaultNavy);
        }
        get seaLockedSpecialist() {
            const collection = this.collectionCache.getCollection(MilitaryForceTypes.KEY, MilitaryForceTypes.Entry);
            return collection.find(entry => entry.key === this._seaLockedSpecialist);
        }
    }
    FactionFeatureSetMilitaryForceTypes.Entry = Entry;
})(FactionFeatureSetMilitaryForceTypes || (FactionFeatureSetMilitaryForceTypes = {}));

var FactionFeatureTrees;
(function (FactionFeatureTrees) {
    FactionFeatureTrees.KEY = new CollectionKey("faction_feature_trees");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    FactionFeatureTrees.Entry = Entry;
})(FactionFeatureTrees || (FactionFeatureTrees = {}));

var FeatureSets;
(function (FeatureSets) {
    FeatureSets.KEY = new CollectionKey("feature_sets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.priority = values["priority"];
            this._militaryForceTypes = values["military_force_types"];
        }
        get militaryForceTypes() {
            const collection = this.collectionCache.getCollection(FactionFeatureSetMilitaryForceTypes.KEY, FactionFeatureSetMilitaryForceTypes.Entry);
            return collection.find(entry => entry.key === this._militaryForceTypes);
        }
    }
    FeatureSets.Entry = Entry;
})(FeatureSets || (FeatureSets = {}));

var FeatureSetTransitionHandlers;
(function (FeatureSetTransitionHandlers) {
    FeatureSetTransitionHandlers.KEY = new CollectionKey("feature_set_transition_handlers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    FeatureSetTransitionHandlers.Entry = Entry;
})(FeatureSetTransitionHandlers || (FeatureSetTransitionHandlers = {}));

var FeatureSetTransitions;
(function (FeatureSetTransitions) {
    FeatureSetTransitions.KEY = new CollectionKey("feature_set_transitions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._from = values["from"];
            this._to = values["to"];
            this._handler = values["handler"];
        }
        get from() {
            const collection = this.collectionCache.getCollection(FeatureSets.KEY, FeatureSets.Entry);
            return collection.find(entry => entry.key === this._from);
        }
        get to() {
            const collection = this.collectionCache.getCollection(FeatureSets.KEY, FeatureSets.Entry);
            return collection.find(entry => entry.key === this._to);
        }
        get handler() {
            const collection = this.collectionCache.getCollection(FeatureSetTransitionHandlers.KEY, FeatureSetTransitionHandlers.Entry);
            return collection.find(entry => entry.key === this._handler);
        }
    }
    FeatureSetTransitions.Entry = Entry;
})(FeatureSetTransitions || (FeatureSetTransitions = {}));

var FactionFeatureTreeToTransitions;
(function (FactionFeatureTreeToTransitions) {
    FactionFeatureTreeToTransitions.KEY = new CollectionKey("faction_feature_tree_to_transitions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._featureTree = values["feature_tree"];
            this._transition = values["transition"];
        }
        get featureTree() {
            const collection = this.collectionCache.getCollection(FactionFeatureTrees.KEY, FactionFeatureTrees.Entry);
            return collection.find(entry => entry.key === this._featureTree);
        }
        get transition() {
            const collection = this.collectionCache.getCollection(FeatureSetTransitions.KEY, FeatureSetTransitions.Entry);
            return collection.find(entry => entry.key === this._transition);
        }
    }
    FactionFeatureTreeToTransitions.Entry = Entry;
})(FactionFeatureTreeToTransitions || (FactionFeatureTreeToTransitions = {}));

var FactionGroups$1;
(function (FactionGroups) {
    FactionGroups.KEY = new CollectionKey("faction_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.nameLocalised = values["name_localised"];
            this.uiIcon = values["ui_icon"];
            this._effectBundle = values["effect_bundle"];
            this.descriptionLocalised = values["description_localised"];
            this.order = values["order"];
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    FactionGroups.Entry = Entry;
})(FactionGroups$1 || (FactionGroups$1 = {}));

var PoliticalParties$1;
(function (PoliticalParties) {
    PoliticalParties.KEY = new CollectionKey("political_parties");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.nameLocalised = values["name_localised"];
            this.playable = !!values["playable"];
            this._effectBundle = values["effect_bundle"];
            this.descriptionLocalised = values["description_localised"];
            this.initialPower = values["initial_power"];
            this.campaignKey = values["campaign_key"];
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    PoliticalParties.Entry = Entry;
})(PoliticalParties$1 || (PoliticalParties$1 = {}));

var FactionPoliticalPartiesJunctions$1;
(function (FactionPoliticalPartiesJunctions) {
    FactionPoliticalPartiesJunctions.KEY = new CollectionKey("faction_political_parties_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._factionKey = values["faction_key"];
            this._politicalPartyKey = values["political_party_key"];
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get politicalPartyKey() {
            const collection = this.collectionCache.getCollection(PoliticalParties$1.KEY, PoliticalParties$1.Entry);
            return collection.find(entry => entry.key === this._politicalPartyKey);
        }
    }
    FactionPoliticalPartiesJunctions.Entry = Entry;
})(FactionPoliticalPartiesJunctions$1 || (FactionPoliticalPartiesJunctions$1 = {}));

var FactionRebellionUnitsJunctions$1;
(function (FactionRebellionUnitsJunctions) {
    FactionRebellionUnitsJunctions.KEY = new CollectionKey("faction_rebellion_units_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._factionKey = values["faction_key"];
            this._unitKey = values["unit_key"];
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get unitKey() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unitKey);
        }
    }
    FactionRebellionUnitsJunctions.Entry = Entry;
})(FactionRebellionUnitsJunctions$1 || (FactionRebellionUnitsJunctions$1 = {}));

var FactionResourceConsumptions$1;
(function (FactionResourceConsumptions) {
    FactionResourceConsumptions.KEY = new CollectionKey("faction_resource_consumptions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.numberOfRegions = values["number_of_regions"];
            this.resourceConsumption = values["resource_consumption"];
        }
    }
    FactionResourceConsumptions.Entry = Entry;
})(FactionResourceConsumptions$1 || (FactionResourceConsumptions$1 = {}));

var FactionSetItems;
(function (FactionSetItems) {
    FactionSetItems.KEY = new CollectionKey("faction_set_items");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._set = values["set"];
            this._faction = values["faction"];
            this._subculture = values["subculture"];
            this._culture = values["culture"];
            this.remove = !!values["remove"];
        }
        get set() {
            const collection = this.collectionCache.getCollection(FactionSets.KEY, FactionSets.Entry);
            return collection.find(entry => entry.key === this._set);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
    }
    FactionSetItems.Entry = Entry;
})(FactionSetItems || (FactionSetItems = {}));

var FactionToFactionGroupsJunctions$1;
(function (FactionToFactionGroupsJunctions) {
    FactionToFactionGroupsJunctions.KEY = new CollectionKey("faction_to_faction_groups_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._factionKey = values["faction_key"];
            this._factionGroupKey = values["faction_group_key"];
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get factionGroupKey() {
            const collection = this.collectionCache.getCollection(FactionGroups$1.KEY, FactionGroups$1.Entry);
            return collection.find(entry => entry.key === this._factionGroupKey);
        }
    }
    FactionToFactionGroupsJunctions.Entry = Entry;
})(FactionToFactionGroupsJunctions$1 || (FactionToFactionGroupsJunctions$1 = {}));

var MercenaryPools$1;
(function (MercenaryPools) {
    MercenaryPools.KEY = new CollectionKey("mercenary_pools");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    MercenaryPools.Entry = Entry;
})(MercenaryPools$1 || (MercenaryPools$1 = {}));

var FactionToMercenarySetJunctions$1;
(function (FactionToMercenarySetJunctions) {
    FactionToMercenarySetJunctions.KEY = new CollectionKey("faction_to_mercenary_set_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._faction = values["faction"];
            this._mercenarySet = values["mercenary_set"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get mercenarySet() {
            const collection = this.collectionCache.getCollection(MercenaryPools$1.KEY, MercenaryPools$1.Entry);
            return collection.find(entry => entry.key === this._mercenarySet);
        }
    }
    FactionToMercenarySetJunctions.Entry = Entry;
})(FactionToMercenarySetJunctions$1 || (FactionToMercenarySetJunctions$1 = {}));

var FactionUniformColours$1;
(function (FactionUniformColours) {
    FactionUniformColours.KEY = new CollectionKey("faction_uniform_colours");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._factionName = values["faction_name"];
            this.primaryColourR = values["primary_colour_r"];
            this.primaryColourG = values["primary_colour_g"];
            this.primaryColourB = values["primary_colour_b"];
            this.secondaryColourR = values["secondary_colour_r"];
            this.secondaryColourG = values["secondary_colour_g"];
            this.secondaryColourB = values["secondary_colour_b"];
            this.tertiaryColourR = values["tertiary_colour_r"];
            this.tertiaryColourG = values["tertiary_colour_g"];
            this.tertiaryColourB = values["tertiary_colour_b"];
        }
        get factionName() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._factionName);
        }
    }
    FactionUniformColours.Entry = Entry;
})(FactionUniformColours$1 || (FactionUniformColours$1 = {}));

var FameLevels$1;
(function (FameLevels) {
    FameLevels.KEY = new CollectionKey("fame_levels");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.level = values["level"];
            this.playerPrestige = values["player_prestige"];
            this.aiPrestige = values["ai_prestige"];
            this.armyCap = values["army_cap"];
            this.navyCap = values["navy_cap"];
            this.provinceInitiativeCap = values["province_initiative_cap"];
            this._campaign = values["campaign"];
            this._descriptionLookup = values["description_lookup"];
            this._effectBundle = values["effect_bundle"];
            this._titleLookup = values["title_lookup"];
            this._tooltipLookup = values["tooltip_lookup"];
            this.key = values["key"];
            this.allAgentsCap = values["all_agents_cap"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
        get descriptionLookup() {
            const collection = this.collectionCache.getCollection(CampaignLocalisedStrings$1.KEY, CampaignLocalisedStrings$1.Entry);
            return collection.find(entry => entry.key === this._descriptionLookup);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
        get titleLookup() {
            const collection = this.collectionCache.getCollection(CampaignLocalisedStrings$1.KEY, CampaignLocalisedStrings$1.Entry);
            return collection.find(entry => entry.key === this._titleLookup);
        }
        get tooltipLookup() {
            const collection = this.collectionCache.getCollection(CampaignLocalisedStrings$1.KEY, CampaignLocalisedStrings$1.Entry);
            return collection.find(entry => entry.key === this._tooltipLookup);
        }
    }
    FameLevels.Entry = Entry;
})(FameLevels$1 || (FameLevels$1 = {}));

var FameLevelAgentRecordJunctions;
(function (FameLevelAgentRecordJunctions) {
    FameLevelAgentRecordJunctions.KEY = new CollectionKey("fame_level_agent_record_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._fameLevel = values["fame_level"];
            this._agent = values["agent"];
            this.cap = values["cap"];
        }
        get fameLevel() {
            const collection = this.collectionCache.getCollection(FameLevels$1.KEY, FameLevels$1.Entry);
            return collection.find(entry => entry.key === this._fameLevel);
        }
        get agent() {
            const collection = this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry);
            return collection.find(entry => entry.key === this._agent);
        }
    }
    FameLevelAgentRecordJunctions.Entry = Entry;
})(FameLevelAgentRecordJunctions || (FameLevelAgentRecordJunctions = {}));

var FamilyRelationshipTypes$1;
(function (FamilyRelationshipTypes) {
    FamilyRelationshipTypes.KEY = new CollectionKey("family_relationship_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.relationshipType = values["relationship_type"];
        }
    }
    FamilyRelationshipTypes.Entry = Entry;
})(FamilyRelationshipTypes$1 || (FamilyRelationshipTypes$1 = {}));

var FamousBattlePools$1;
(function (FamousBattlePools) {
    FamousBattlePools.KEY = new CollectionKey("famous_battle_pools");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.poolId = values["pool_id"];
            this.poolPosX = values["pool_posX"];
            this.poolPosY = values["pool_posY"];
            this.poolRadius = values["pool_radius"];
            this.battleName = values["battle_name"];
            this._campaign = values["campaign"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
    }
    FamousBattlePools.Entry = Entry;
})(FamousBattlePools$1 || (FamousBattlePools$1 = {}));

var FeatureSetToFactionFeatures;
(function (FeatureSetToFactionFeatures) {
    FeatureSetToFactionFeatures.KEY = new CollectionKey("feature_set_to_faction_features");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._featureSet = values["feature_set"];
            this._feature = values["feature"];
        }
        get featureSet() {
            const collection = this.collectionCache.getCollection(FeatureSets.KEY, FeatureSets.Entry);
            return collection.find(entry => entry.key === this._featureSet);
        }
        get feature() {
            const collection = this.collectionCache.getCollection(FactionFeatures.KEY, FactionFeatures.Entry);
            return collection.find(entry => entry.key === this._feature);
        }
    }
    FeatureSetToFactionFeatures.Entry = Entry;
})(FeatureSetToFactionFeatures || (FeatureSetToFactionFeatures = {}));

var FeatureTreeToFeatureForests;
(function (FeatureTreeToFeatureForests) {
    FeatureTreeToFeatureForests.KEY = new CollectionKey("feature_tree_to_feature_forests");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._tree = values["tree"];
            this._forest = values["forest"];
            this._startingFeatureSet = values["starting_feature_set"];
        }
        get tree() {
            const collection = this.collectionCache.getCollection(FactionFeatureTrees.KEY, FactionFeatureTrees.Entry);
            return collection.find(entry => entry.key === this._tree);
        }
        get forest() {
            const collection = this.collectionCache.getCollection(FactionFeatureForests.KEY, FactionFeatureForests.Entry);
            return collection.find(entry => entry.key === this._forest);
        }
        get startingFeatureSet() {
            const collection = this.collectionCache.getCollection(FeatureSets.KEY, FeatureSets.Entry);
            return collection.find(entry => entry.key === this._startingFeatureSet);
        }
    }
    FeatureTreeToFeatureForests.Entry = Entry;
})(FeatureTreeToFeatureForests || (FeatureTreeToFeatureForests = {}));

var FertilityLevels;
(function (FertilityLevels) {
    FertilityLevels.KEY = new CollectionKey("fertility_levels");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaign = values["campaign"];
            this.level = values["level"];
            this.localisedName = values["localised_name"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
    }
    FertilityLevels.Entry = Entry;
})(FertilityLevels || (FertilityLevels = {}));

var FontNames$1;
(function (FontNames) {
    FontNames.KEY = new CollectionKey("font_names");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.fontName = values["font_name"];
        }
    }
    FontNames.Entry = Entry;
})(FontNames$1 || (FontNames$1 = {}));

var Fonts$1;
(function (Fonts) {
    Fonts.KEY = new CollectionKey("fonts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this.size = values["size"];
            this.bold = !!values["bold"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(FontNames$1.KEY, FontNames$1.Entry);
            return collection.find(entry => entry.fontName === this._key);
        }
    }
    Fonts.Entry = Entry;
})(Fonts$1 || (Fonts$1 = {}));

var FoodFactors;
(function (FoodFactors) {
    FoodFactors.KEY = new CollectionKey("food_factors");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.textToDisplay = values["text_to_display"];
        }
    }
    FoodFactors.Entry = Entry;
})(FoodFactors || (FoodFactors = {}));

var Formations$1;
(function (Formations) {
    Formations.KEY = new CollectionKey("formations");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.formation = values["formation"];
            this.isNaval = !!values["is_naval"];
            this.isArmy = !!values["is_army"];
            this.name = values["name"];
            this.tooltip = values["tooltip"];
            this.description = values["description"];
            this.iconName = values["icon_name"];
            this.order = values["order"];
        }
    }
    Formations.Entry = Entry;
})(Formations$1 || (Formations$1 = {}));

var FormationsToSubcultures$1;
(function (FormationsToSubcultures) {
    FormationsToSubcultures.KEY = new CollectionKey("formations_to_subcultures");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._formation = values["formation"];
            this._subCulture = values["sub_culture"];
        }
        get formation() {
            const collection = this.collectionCache.getCollection(Formations$1.KEY, Formations$1.Entry);
            return collection.find(entry => entry.formation === this._formation);
        }
        get subCulture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subCulture);
        }
    }
    FormationsToSubcultures.Entry = Entry;
})(FormationsToSubcultures$1 || (FormationsToSubcultures$1 = {}));

var FrontendFactions;
(function (FrontendFactions) {
    FrontendFactions.KEY = new CollectionKey("frontend_factions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._faction = values["faction"];
            this.localisedMechanics = values["localised_mechanics"];
            this.localisedPlaystyle = values["localised_playstyle"];
            this._video = values["video"];
            this.localisedInfo = values["localised_info"];
            this.sortOrder = values["sort_order"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get video() {
            const collection = this.collectionCache.getCollection(Videos$1.KEY, Videos$1.Entry);
            return collection.find(entry => entry.videoName === this._video);
        }
    }
    FrontendFactions.Entry = Entry;
})(FrontendFactions || (FrontendFactions = {}));

var FrontendFactionLeaders$1;
(function (FrontendFactionLeaders) {
    FrontendFactionLeaders.KEY = new CollectionKey("frontend_faction_leaders");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.uniform = values["uniform"];
            this.xOffset = values["x_offset"];
            this.yOffset = values["y_offset"];
            this.key = values["key"];
            this.characterImage = values["character_image"];
            this._preludeBattle = values["prelude_battle"];
            this.localisedDescription = values["localised_description"];
            this.localisedActionPoints = values["localised_action_points"];
            this._gameExpansionKey = values["game_expansion_key"];
            this._video = values["video"];
            this.loadingScreenText = values["loading_screen_text"];
            this.loadingScreenImage = values["loading_screen_image"];
            this._loadingScreenIntroVideo = values["loading_screen_intro_video"];
            this.overrideForceLocationX = values["override_force_location_x"];
            this.overrideForceLocationY = values["override_force_location_y"];
            this._voiceover = values["voiceover"];
            this.showFullIntroOption = !!values["show_full_intro_option"];
            this.difficulty = values["difficulty"];
            this.startposMap = values["startpos_map"];
        }
        get preludeBattle() {
            const collection = this.collectionCache.getCollection(Battles$1.KEY, Battles$1.Entry);
            return collection.find(entry => entry.key === this._preludeBattle);
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
        get video() {
            const collection = this.collectionCache.getCollection(Videos$1.KEY, Videos$1.Entry);
            return collection.find(entry => entry.videoName === this._video);
        }
        get loadingScreenIntroVideo() {
            const collection = this.collectionCache.getCollection(Videos$1.KEY, Videos$1.Entry);
            return collection.find(entry => entry.videoName === this._loadingScreenIntroVideo);
        }
        get voiceover() {
            const collection = this.collectionCache.getCollection(AudioVoActors$1.KEY, AudioVoActors$1.Entry);
            return collection.find(entry => entry.key === this._voiceover);
        }
    }
    FrontendFactionLeaders.Entry = Entry;
})(FrontendFactionLeaders$1 || (FrontendFactionLeaders$1 = {}));

var FrontendFactionEffectGroups;
(function (FrontendFactionEffectGroups) {
    FrontendFactionEffectGroups.KEY = new CollectionKey("frontend_faction_effect_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.groupKey = values["group_key"];
            this._factionLeader = values["faction_leader"];
            this._campaign = values["campaign"];
            this.uiSection = values["ui_section"];
        }
        get factionLeader() {
            const collection = this.collectionCache.getCollection(FrontendFactionLeaders$1.KEY, FrontendFactionLeaders$1.Entry);
            return collection.find(entry => entry.key === this._factionLeader);
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
    }
    FrontendFactionEffectGroups.Entry = Entry;
})(FrontendFactionEffectGroups || (FrontendFactionEffectGroups = {}));

var FrontendFactionEffectJunctions;
(function (FrontendFactionEffectJunctions) {
    FrontendFactionEffectJunctions.KEY = new CollectionKey("frontend_faction_effect_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._group = values["group"];
            this._effect = values["effect"];
            this.value = values["value"];
            this._scope = values["scope"];
        }
        get group() {
            const collection = this.collectionCache.getCollection(FrontendFactionEffectGroups.KEY, FrontendFactionEffectGroups.Entry);
            return collection.find(entry => entry.groupKey === this._group);
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get scope() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes$1.KEY, CampaignEffectScopes$1.Entry);
            return collection.find(entry => entry.key === this._scope);
        }
    }
    FrontendFactionEffectJunctions.Entry = Entry;
})(FrontendFactionEffectJunctions || (FrontendFactionEffectJunctions = {}));

var FrontendFactionGroups;
(function (FrontendFactionGroups) {
    FrontendFactionGroups.KEY = new CollectionKey("frontend_faction_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.localisedName = values["localised_name"];
            this.localisedDescription = values["localised_description"];
            this.iconPath = values["icon_path"];
            this.sortOrder = values["sort_order"];
        }
    }
    FrontendFactionGroups.Entry = Entry;
})(FrontendFactionGroups || (FrontendFactionGroups = {}));

var FrontendFactionGroupsToFactions;
(function (FrontendFactionGroupsToFactions) {
    FrontendFactionGroupsToFactions.KEY = new CollectionKey("frontend_faction_groups_to_factions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._factionKey = values["faction_key"];
            this._factionGroup = values["faction_group"];
            this.sortOrder = values["sort_order"];
            this.isMajorFaction = !!values["is_major_faction"];
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get factionGroup() {
            const collection = this.collectionCache.getCollection(FrontendFactionGroups.KEY, FrontendFactionGroups.Entry);
            return collection.find(entry => entry.key === this._factionGroup);
        }
    }
    FrontendFactionGroupsToFactions.Entry = Entry;
})(FrontendFactionGroupsToFactions || (FrontendFactionGroupsToFactions = {}));

var FrontendFactionTopUnits;
(function (FrontendFactionTopUnits) {
    FrontendFactionTopUnits.KEY = new CollectionKey("frontend_faction_top_units");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._faction = values["faction"];
            this._unit = values["unit"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get unit() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
    }
    FrontendFactionTopUnits.Entry = Entry;
})(FrontendFactionTopUnits || (FrontendFactionTopUnits = {}));

var GameAreaEnums$1;
(function (GameAreaEnums) {
    GameAreaEnums.KEY = new CollectionKey("game_area_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    GameAreaEnums.Entry = Entry;
})(GameAreaEnums$1 || (GameAreaEnums$1 = {}));

var GeomanticWebLinks;
(function (GeomanticWebLinks) {
    GeomanticWebLinks.KEY = new CollectionKey("geomantic_web_links");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.linkStrength = values["link_strength"];
            this._beamNormalCompositeScene = values["beam_normal_composite_scene"];
            this._circleCompositeScene = values["circle_composite_scene"];
            this._underpoweredCircleCompositeScene = values["underpowered_circle_composite_scene"];
            this._fadingBeamNormalCompositeScene = values["fading_beam_normal_composite_scene"];
            this._beamShortCompositeScene = values["beam_short_composite_scene"];
            this._fadingBeamShortCompositeScene = values["fading_beam_short_composite_scene"];
        }
        get beamNormalCompositeScene() {
            const collection = this.collectionCache.getCollection(CampaignCompositeScenes.KEY, CampaignCompositeScenes.Entry);
            return collection.find(entry => entry.id === this._beamNormalCompositeScene);
        }
        get circleCompositeScene() {
            const collection = this.collectionCache.getCollection(CampaignCompositeScenes.KEY, CampaignCompositeScenes.Entry);
            return collection.find(entry => entry.id === this._circleCompositeScene);
        }
        get underpoweredCircleCompositeScene() {
            const collection = this.collectionCache.getCollection(CampaignCompositeScenes.KEY, CampaignCompositeScenes.Entry);
            return collection.find(entry => entry.id === this._underpoweredCircleCompositeScene);
        }
        get fadingBeamNormalCompositeScene() {
            const collection = this.collectionCache.getCollection(CampaignCompositeScenes.KEY, CampaignCompositeScenes.Entry);
            return collection.find(entry => entry.id === this._fadingBeamNormalCompositeScene);
        }
        get beamShortCompositeScene() {
            const collection = this.collectionCache.getCollection(CampaignCompositeScenes.KEY, CampaignCompositeScenes.Entry);
            return collection.find(entry => entry.id === this._beamShortCompositeScene);
        }
        get fadingBeamShortCompositeScene() {
            const collection = this.collectionCache.getCollection(CampaignCompositeScenes.KEY, CampaignCompositeScenes.Entry);
            return collection.find(entry => entry.id === this._fadingBeamShortCompositeScene);
        }
    }
    GeomanticWebLinks.Entry = Entry;
})(GeomanticWebLinks || (GeomanticWebLinks = {}));

var GovernmentTypes$1;
(function (GovernmentTypes) {
    GovernmentTypes.KEY = new CollectionKey("government_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.governmentType = values["government_type"];
            this.onscreen = values["onscreen"];
            this.electedMinisters = !!values["elected_ministers"];
            this.hereditaryMinisters = !!values["hereditary_ministers"];
            this.rank = values["rank"];
            this._activeUpperClass = values["active_upper_class"];
            this._activeLowerClass = values["active_lower_class"];
        }
        get activeUpperClass() {
            const collection = this.collectionCache.getCollection(PopulationClasses$1.KEY, PopulationClasses$1.Entry);
            return collection.find(entry => entry.populationClass === this._activeUpperClass);
        }
    }
    GovernmentTypes.Entry = Entry;
})(GovernmentTypes$1 || (GovernmentTypes$1 = {}));

var GovernmentTypesToEffects$1;
(function (GovernmentTypesToEffects) {
    GovernmentTypesToEffects.KEY = new CollectionKey("government_types_to_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._govType = values["gov_type"];
            this._effect = values["effect"];
            this.value = values["value"];
            this._effectScope = values["effect_scope"];
        }
        get govType() {
            const collection = this.collectionCache.getCollection(GovernmentTypes$1.KEY, GovernmentTypes$1.Entry);
            return collection.find(entry => entry.governmentType === this._govType);
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get effectScope() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes$1.KEY, CampaignEffectScopes$1.Entry);
            return collection.find(entry => entry.key === this._effectScope);
        }
    }
    GovernmentTypesToEffects.Entry = Entry;
})(GovernmentTypesToEffects$1 || (GovernmentTypesToEffects$1 = {}));

var Governorships$1;
(function (Governorships) {
    Governorships.KEY = new CollectionKey("governorships");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.governorship = values["governorship"];
            this.onscreen = values["onscreen"];
        }
    }
    Governorships.Entry = Entry;
})(Governorships$1 || (Governorships$1 = {}));

var GraphicsSettings;
(function (GraphicsSettings) {
    GraphicsSettings.KEY = new CollectionKey("graphics_settings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.displayName = values["display_name"];
            this.displayDescription = values["display_description"];
        }
    }
    GraphicsSettings.Entry = Entry;
})(GraphicsSettings || (GraphicsSettings = {}));

var GraphicsSettingsOptions;
(function (GraphicsSettingsOptions) {
    GraphicsSettingsOptions.KEY = new CollectionKey("graphics_settings_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.displayText = values["display_text"];
        }
    }
    GraphicsSettingsOptions.Entry = Entry;
})(GraphicsSettingsOptions || (GraphicsSettingsOptions = {}));

var GraphicsSettingsToGraphicsOptionsJunctions;
(function (GraphicsSettingsToGraphicsOptionsJunctions) {
    GraphicsSettingsToGraphicsOptionsJunctions.KEY = new CollectionKey("graphics_settings_to_graphics_options_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._setting = values["setting"];
            this._option = values["option"];
            this.order = values["order"];
        }
        get setting() {
            const collection = this.collectionCache.getCollection(GraphicsSettings.KEY, GraphicsSettings.Entry);
            return collection.find(entry => entry.key === this._setting);
        }
        get option() {
            const collection = this.collectionCache.getCollection(GraphicsSettingsOptions.KEY, GraphicsSettingsOptions.Entry);
            return collection.find(entry => entry.key === this._option);
        }
    }
    GraphicsSettingsToGraphicsOptionsJunctions.Entry = Entry;
})(GraphicsSettingsToGraphicsOptionsJunctions || (GraphicsSettingsToGraphicsOptionsJunctions = {}));

var GroundTypeToStatEffects$1;
(function (GroundTypeToStatEffects) {
    GroundTypeToStatEffects.KEY = new CollectionKey("ground_type_to_stat_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._groundType = values["ground_type"];
            this._affectedStat = values["affected_stat"];
            this.multiplier = values["multiplier"];
            this._affectedGroup = values["affected_group"];
        }
        get groundType() {
            const collection = this.collectionCache.getCollection(GroundTypes$1.KEY, GroundTypes$1.Entry);
            return collection.find(entry => entry.type === this._groundType);
        }
        get affectedStat() {
            const collection = this.collectionCache.getCollection(ModifiableUnitStats.KEY, ModifiableUnitStats.Entry);
            return collection.find(entry => entry.statKey === this._affectedStat);
        }
        get affectedGroup() {
            const collection = this.collectionCache.getCollection(GroundTypeStatEffectGroups.KEY, GroundTypeStatEffectGroups.Entry);
            return collection.find(entry => entry.groupName === this._affectedGroup);
        }
    }
    GroundTypeToStatEffects.Entry = Entry;
})(GroundTypeToStatEffects$1 || (GroundTypeToStatEffects$1 = {}));

var GroundTypeToTextureGroups;
(function (GroundTypeToTextureGroups) {
    GroundTypeToTextureGroups.KEY = new CollectionKey("ground_type_to_texture_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.textureGroup = values["texture_group"];
            this._groundType = values["ground_type"];
        }
        get groundType() {
            const collection = this.collectionCache.getCollection(GroundTypes$1.KEY, GroundTypes$1.Entry);
            return collection.find(entry => entry.type === this._groundType);
        }
    }
    GroundTypeToTextureGroups.Entry = Entry;
})(GroundTypeToTextureGroups || (GroundTypeToTextureGroups = {}));

var HelpPageIndexRecords;
(function (HelpPageIndexRecords) {
    HelpPageIndexRecords.KEY = new CollectionKey("help_page_index_records");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.text = values["text"];
            this.displayOrder = values["display_order"];
            this.insetLevel = values["inset_level"];
            this.isBattle = !!values["is_battle"];
        }
    }
    HelpPageIndexRecords.Entry = Entry;
})(HelpPageIndexRecords || (HelpPageIndexRecords = {}));

var HelpPageStrings;
(function (HelpPageStrings) {
    HelpPageStrings.KEY = new CollectionKey("help_page_strings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.text = values["text"];
            this.useOnLoadingScreen = !!values["use_on_loading_screen"];
        }
    }
    HelpPageStrings.Entry = Entry;
})(HelpPageStrings || (HelpPageStrings = {}));

var HistoricalBattlesUiLocations$1;
(function (HistoricalBattlesUiLocations) {
    HistoricalBattlesUiLocations.KEY = new CollectionKey("historical_battles_ui_locations");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this.x = values["x"];
            this.y = values["y"];
            this.heightPercent = values["height_percent"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(Battles$1.KEY, Battles$1.Entry);
            return collection.find(entry => entry.key === this._key);
        }
    }
    HistoricalBattlesUiLocations.Entry = Entry;
})(HistoricalBattlesUiLocations$1 || (HistoricalBattlesUiLocations$1 = {}));

var HistoricalCharacters$1;
(function (HistoricalCharacters) {
    HistoricalCharacters.KEY = new CollectionKey("historical_characters");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._gender = values["gender"];
            this._agentType = values["agent_type"];
            this._faction = values["faction"];
            this.spawningWindowStart = values["spawning_window_start"];
            this.spawningWindowEnd = values["spawning_window_end"];
            this._nameKey = values["name_key"];
            this._surnameKey = values["surname_key"];
            this._artSetId = values["art_set_id"];
            this._clanNameKey = values["clan_name_key"];
            this._otherNameKey = values["other_name_key"];
        }
        get gender() {
            const collection = this.collectionCache.getCollection(Genders$1.KEY, Genders$1.Entry);
            return collection.find(entry => entry.gender === this._gender);
        }
        get agentType() {
            const collection = this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry);
            return collection.find(entry => entry.key === this._agentType);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get nameKey() {
            const collection = this.collectionCache.getCollection(Names$1.KEY, Names$1.Entry);
            return collection.find(entry => entry.id === this._nameKey);
        }
        get surnameKey() {
            const collection = this.collectionCache.getCollection(Names$1.KEY, Names$1.Entry);
            return collection.find(entry => entry.id === this._surnameKey);
        }
        get artSetId() {
            const collection = this.collectionCache.getCollection(CampaignCharacterArtSets$1.KEY, CampaignCharacterArtSets$1.Entry);
            return collection.find(entry => entry.artSetId === this._artSetId);
        }
        get clanNameKey() {
            const collection = this.collectionCache.getCollection(Names$1.KEY, Names$1.Entry);
            return collection.find(entry => entry.id === this._clanNameKey);
        }
        get otherNameKey() {
            const collection = this.collectionCache.getCollection(Names$1.KEY, Names$1.Entry);
            return collection.find(entry => entry.id === this._otherNameKey);
        }
    }
    HistoricalCharacters.Entry = Entry;
})(HistoricalCharacters$1 || (HistoricalCharacters$1 = {}));

var HistoricalCharacterTraits$1;
(function (HistoricalCharacterTraits) {
    HistoricalCharacterTraits.KEY = new CollectionKey("historical_character_traits");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._character = values["character"];
            this._trait = values["trait"];
        }
        get character() {
            const collection = this.collectionCache.getCollection(HistoricalCharacters$1.KEY, HistoricalCharacters$1.Entry);
            return collection.find(entry => entry.key === this._character);
        }
        get trait() {
            const collection = this.collectionCache.getCollection(CharacterTraitLevels$1.KEY, CharacterTraitLevels$1.Entry);
            return collection.find(entry => entry.key === this._trait);
        }
    }
    HistoricalCharacterTraits.Entry = Entry;
})(HistoricalCharacterTraits$1 || (HistoricalCharacterTraits$1 = {}));

var HonourFactors$1;
(function (HonourFactors) {
    HonourFactors.KEY = new CollectionKey("honour_factors");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.minimumValue = values["minimum_value"];
            this.maximumValue = values["maximum_value"];
            this.localisedNegativeName = values["localised_negative_name"];
            this.localisedPositiveName = values["localised_positive_name"];
        }
    }
    HonourFactors.Entry = Entry;
})(HonourFactors$1 || (HonourFactors$1 = {}));

var HonourEffects$1;
(function (HonourEffects) {
    HonourEffects.KEY = new CollectionKey("honour_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._factor = values["factor"];
            this.value = values["value"];
            this.appliesToAi = !!values["applies_to_ai"];
        }
        get factor() {
            const collection = this.collectionCache.getCollection(HonourFactors$1.KEY, HonourFactors$1.Entry);
            return collection.find(entry => entry.key === this._factor);
        }
    }
    HonourEffects.Entry = Entry;
})(HonourEffects$1 || (HonourEffects$1 = {}));

var InterfactionLoyaltyFactors;
(function (InterfactionLoyaltyFactors) {
    InterfactionLoyaltyFactors.KEY = new CollectionKey("interfaction_loyalty_factors");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.minimumValue = values["minimum_value"];
            this.maximumValue = values["maximum_value"];
            this.localisedNegativeName = values["localised_negative_name"];
            this.localisedPositiveName = values["localised_positive_name"];
        }
    }
    InterfactionLoyaltyFactors.Entry = Entry;
})(InterfactionLoyaltyFactors || (InterfactionLoyaltyFactors = {}));

var IntrigueActionsIncidentsJunctions;
(function (IntrigueActionsIncidentsJunctions) {
    IntrigueActionsIncidentsJunctions.KEY = new CollectionKey("intrigue_actions_incidents_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._targetCulture = values["target_culture"];
            this._incident = values["incident"];
            this.isPositive = !!values["is_positive"];
            this.weight = values["weight"];
            this.key = values["key"];
            this._sourceCulture = values["source_culture"];
        }
        get targetCulture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._targetCulture);
        }
        get incident() {
            const collection = this.collectionCache.getCollection(Incidents$1.KEY, Incidents$1.Entry);
            return collection.find(entry => entry.key === this._incident);
        }
        get sourceCulture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._sourceCulture);
        }
    }
    IntrigueActionsIncidentsJunctions.Entry = Entry;
})(IntrigueActionsIncidentsJunctions || (IntrigueActionsIncidentsJunctions = {}));

var LabSettings;
(function (LabSettings) {
    LabSettings.KEY = new CollectionKey("lab_settings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.localisedName = values["localised_name"];
            this.localisedTooltip = values["localised_tooltip"];
            this.minValue = values["min_value"];
            this.maxValue = values["max_value"];
            this.stepSize = values["step_size"];
            this.sortOrder = values["sort_order"];
            this.displayAsPercentage = !!values["display_as_percentage"];
            this.defaultValue = values["default_value"];
        }
    }
    LabSettings.Entry = Entry;
})(LabSettings || (LabSettings = {}));

var LandUnitsAdditionalPersonalitiesGroupsJunctions;
(function (LandUnitsAdditionalPersonalitiesGroupsJunctions) {
    LandUnitsAdditionalPersonalitiesGroupsJunctions.KEY = new CollectionKey("land_units_additional_personalities_groups_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._group = values["group"];
            this._battlePersonality = values["battle_personality"];
        }
        get group() {
            const collection = this.collectionCache.getCollection(LandUnitsAdditionalPersonalitiesGroups.KEY, LandUnitsAdditionalPersonalitiesGroups.Entry);
            return collection.find(entry => entry.key === this._group);
        }
        get battlePersonality() {
            const collection = this.collectionCache.getCollection(BattlePersonalities$1.KEY, BattlePersonalities$1.Entry);
            return collection.find(entry => entry.key === this._battlePersonality);
        }
    }
    LandUnitsAdditionalPersonalitiesGroupsJunctions.Entry = Entry;
})(LandUnitsAdditionalPersonalitiesGroupsJunctions || (LandUnitsAdditionalPersonalitiesGroupsJunctions = {}));

var LandUnitsToDeployablesAbilitiesJunctions;
(function (LandUnitsToDeployablesAbilitiesJunctions) {
    LandUnitsToDeployablesAbilitiesJunctions.KEY = new CollectionKey("land_units_to_deployables_abilities_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._landUnit = values["land_unit"];
            this._deployableAbility = values["deployable_ability"];
        }
        get landUnit() {
            const collection = this.collectionCache.getCollection(LandUnits$1.KEY, LandUnits$1.Entry);
            return collection.find(entry => entry.key === this._landUnit);
        }
        get deployableAbility() {
            const collection = this.collectionCache.getCollection(DeployablesAbilities.KEY, DeployablesAbilities.Entry);
            return collection.find(entry => entry.abilityKey === this._deployableAbility);
        }
    }
    LandUnitsToDeployablesAbilitiesJunctions.Entry = Entry;
})(LandUnitsToDeployablesAbilitiesJunctions || (LandUnitsToDeployablesAbilitiesJunctions = {}));

var LandUnitsToUnitAbilitesJunctions$1;
(function (LandUnitsToUnitAbilitesJunctions) {
    LandUnitsToUnitAbilitesJunctions.KEY = new CollectionKey("land_units_to_unit_abilites_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._landUnit = values["land_unit"];
            this._ability = values["ability"];
        }
        get landUnit() {
            const collection = this.collectionCache.getCollection(LandUnits$1.KEY, LandUnits$1.Entry);
            return collection.find(entry => entry.key === this._landUnit);
        }
        get ability() {
            const collection = this.collectionCache.getCollection(UnitAbilities$1.KEY, UnitAbilities$1.Entry);
            return collection.find(entry => entry.key === this._ability);
        }
    }
    LandUnitsToUnitAbilitesJunctions.Entry = Entry;
})(LandUnitsToUnitAbilitesJunctions$1 || (LandUnitsToUnitAbilitesJunctions$1 = {}));

var LoadingScreenQuotesCategories;
(function (LoadingScreenQuotesCategories) {
    LoadingScreenQuotesCategories.KEY = new CollectionKey("loading_screen_quotes_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.category = values["category"];
            this.categoryWeighting = values["category_weighting"];
        }
    }
    LoadingScreenQuotesCategories.Entry = Entry;
})(LoadingScreenQuotesCategories || (LoadingScreenQuotesCategories = {}));

var LoadingScreenQuotes;
(function (LoadingScreenQuotes) {
    LoadingScreenQuotes.KEY = new CollectionKey("loading_screen_quotes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.title = values["title"];
            this.image = values["image"];
            this.bulletpoints = values["bulletpoints"];
            this.description = values["description"];
            this._category = values["category"];
            this._gameExpansionKey = values["game_expansion_key"];
            this.maxDisplays = values["max_displays"];
            this.weighting = values["weighting"];
            this.firstShownWeighting = values["first_shown_weighting"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(LoadingScreenQuotesCategories.KEY, LoadingScreenQuotesCategories.Entry);
            return collection.find(entry => entry.category === this._category);
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
    }
    LoadingScreenQuotes.Entry = Entry;
})(LoadingScreenQuotes || (LoadingScreenQuotes = {}));

var LoadingScreenQuotesToCampaigns;
(function (LoadingScreenQuotesToCampaigns) {
    LoadingScreenQuotesToCampaigns.KEY = new CollectionKey("loading_screen_quotes_to_campaigns");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._loadingQuote = values["loading_quote"];
            this._campaign = values["campaign"];
        }
        get loadingQuote() {
            const collection = this.collectionCache.getCollection(LoadingScreenQuotes.KEY, LoadingScreenQuotes.Entry);
            return collection.find(entry => entry.key === this._loadingQuote);
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(CampaignMapPlayableAreas$1.KEY, CampaignMapPlayableAreas$1.Entry);
            return collection.find(entry => entry._mapname === this._campaign);
        }
    }
    LoadingScreenQuotesToCampaigns.Entry = Entry;
})(LoadingScreenQuotesToCampaigns || (LoadingScreenQuotesToCampaigns = {}));

var LoadingScreenQuotesToCultures;
(function (LoadingScreenQuotesToCultures) {
    LoadingScreenQuotesToCultures.KEY = new CollectionKey("loading_screen_quotes_to_cultures");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._loadingQuote = values["loading_quote"];
            this._culture = values["culture"];
        }
        get loadingQuote() {
            const collection = this.collectionCache.getCollection(LoadingScreenQuotes.KEY, LoadingScreenQuotes.Entry);
            return collection.find(entry => entry.key === this._loadingQuote);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
    }
    LoadingScreenQuotesToCultures.Entry = Entry;
})(LoadingScreenQuotesToCultures || (LoadingScreenQuotesToCultures = {}));

var LoadingScreenQuotesToQuestBattles;
(function (LoadingScreenQuotesToQuestBattles) {
    LoadingScreenQuotesToQuestBattles.KEY = new CollectionKey("loading_screen_quotes_to_quest_battles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._quote = values["quote"];
            this._questBattle = values["quest_battle"];
        }
        get quote() {
            const collection = this.collectionCache.getCollection(LoadingScreenQuotes.KEY, LoadingScreenQuotes.Entry);
            return collection.find(entry => entry.key === this._quote);
        }
        get questBattle() {
            const collection = this.collectionCache.getCollection(BattleSetPieces.KEY, BattleSetPieces.Entry);
            return collection.find(entry => entry.battleName === this._questBattle);
        }
    }
    LoadingScreenQuotesToQuestBattles.Entry = Entry;
})(LoadingScreenQuotesToQuestBattles || (LoadingScreenQuotesToQuestBattles = {}));

var LoadingScreenQuotesToUnits;
(function (LoadingScreenQuotesToUnits) {
    LoadingScreenQuotesToUnits.KEY = new CollectionKey("loading_screen_quotes_to_units");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._quote = values["quote"];
            this._unit = values["unit"];
        }
        get quote() {
            const collection = this.collectionCache.getCollection(LoadingScreenQuotes.KEY, LoadingScreenQuotes.Entry);
            return collection.find(entry => entry.key === this._quote);
        }
        get unit() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
    }
    LoadingScreenQuotesToUnits.Entry = Entry;
})(LoadingScreenQuotesToUnits || (LoadingScreenQuotesToUnits = {}));

var UiTextReplacements;
(function (UiTextReplacements) {
    UiTextReplacements.KEY = new CollectionKey("ui_text_replacements");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.localisedText = values["localised_text"];
        }
    }
    UiTextReplacements.Entry = Entry;
})(UiTextReplacements || (UiTextReplacements = {}));

var LoadingScreenTexts;
(function (LoadingScreenTexts) {
    LoadingScreenTexts.KEY = new CollectionKey("loading_screen_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._textLookup = values["text_lookup"];
            this.isBattleOnly = !!values["is_battle_only"];
            this.isCampaignOnly = !!values["is_campaign_only"];
        }
        get textLookup() {
            const collection = this.collectionCache.getCollection(UiTextReplacements.KEY, UiTextReplacements.Entry);
            return collection.find(entry => entry.key === this._textLookup);
        }
    }
    LoadingScreenTexts.Entry = Entry;
})(LoadingScreenTexts || (LoadingScreenTexts = {}));

var LoyaltyEffects$1;
(function (LoyaltyEffects) {
    LoyaltyEffects.KEY = new CollectionKey("loyalty_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._factor = values["factor"];
            this.value = values["value"];
            this.appliesToAi = !!values["applies_to_ai"];
        }
        get factor() {
            const collection = this.collectionCache.getCollection(LoyaltyFactors$1.KEY, LoyaltyFactors$1.Entry);
            return collection.find(entry => entry.key === this._factor);
        }
    }
    LoyaltyEffects.Entry = Entry;
})(LoyaltyEffects$1 || (LoyaltyEffects$1 = {}));

var MercenaryPoolTypeEnums$1;
(function (MercenaryPoolTypeEnums) {
    MercenaryPoolTypeEnums.KEY = new CollectionKey("mercenary_pool_type_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.poolType = values["pool_type"];
        }
    }
    MercenaryPoolTypeEnums.Entry = Entry;
})(MercenaryPoolTypeEnums$1 || (MercenaryPoolTypeEnums$1 = {}));

var MercenaryPoolModifiers$1;
(function (MercenaryPoolModifiers) {
    MercenaryPoolModifiers.KEY = new CollectionKey("mercenary_pool_modifiers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._poolType = values["pool_type"];
            this.cultureOriginMatch = !!values["culture_origin_match"];
            this.minPoolCulturePercentage = values["min_pool_culture_percentage"];
            this.replenishmentModifier = values["replenishment_modifier"];
            this.costModifier = values["cost_modifier"];
            this.key = values["key"];
        }
        get poolType() {
            const collection = this.collectionCache.getCollection(MercenaryPoolTypeEnums$1.KEY, MercenaryPoolTypeEnums$1.Entry);
            return collection.find(entry => entry.poolType === this._poolType);
        }
    }
    MercenaryPoolModifiers.Entry = Entry;
})(MercenaryPoolModifiers$1 || (MercenaryPoolModifiers$1 = {}));

var MercenaryUnitGroups$1;
(function (MercenaryUnitGroups) {
    MercenaryUnitGroups.KEY = new CollectionKey("mercenary_unit_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._unitRecord = values["unit_record"];
            this.maxCount = values["max_count"];
            this.maxReplenishPerTurn = values["max_replenish_per_turn"];
            this.chanceToReplenish = values["chance_to_replenish"];
            this.usePartialReplenishment = !!values["use_partial_replenishment"];
            this.replenishmentReason = values["replenishment_reason"];
        }
        get unitRecord() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unitRecord);
        }
    }
    MercenaryUnitGroups.Entry = Entry;
})(MercenaryUnitGroups$1 || (MercenaryUnitGroups$1 = {}));

var MercenaryPoolToGroupsJunctions$1;
(function (MercenaryPoolToGroupsJunctions) {
    MercenaryPoolToGroupsJunctions.KEY = new CollectionKey("mercenary_pool_to_groups_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._pool = values["pool"];
            this._group = values["group"];
            this.initialUnitCount = values["initial_unit_count"];
            this._factionRequirement = values["faction_requirement"];
            this._subcultureRequirement = values["subculture_requirement"];
            this._techRequirement = values["tech_requirement"];
            this._gameExpansionKey = values["game_expansion_key"];
        }
        get pool() {
            const collection = this.collectionCache.getCollection(MercenaryPools$1.KEY, MercenaryPools$1.Entry);
            return collection.find(entry => entry.key === this._pool);
        }
        get group() {
            const collection = this.collectionCache.getCollection(MercenaryUnitGroups$1.KEY, MercenaryUnitGroups$1.Entry);
            return collection.find(entry => entry.key === this._group);
        }
        get factionRequirement() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._factionRequirement);
        }
        get subcultureRequirement() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subcultureRequirement);
        }
        get techRequirement() {
            const collection = this.collectionCache.getCollection(Technologies$1.KEY, Technologies$1.Entry);
            return collection.find(entry => entry.key === this._techRequirement);
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
    }
    MercenaryPoolToGroupsJunctions.Entry = Entry;
})(MercenaryPoolToGroupsJunctions$1 || (MercenaryPoolToGroupsJunctions$1 = {}));

var MessageEventText$1;
(function (MessageEventText) {
    MessageEventText.KEY = new CollectionKey("message_event_text");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.text = values["text"];
        }
    }
    MessageEventText.Entry = Entry;
})(MessageEventText$1 || (MessageEventText$1 = {}));

var MessageEventStrings$1;
(function (MessageEventStrings) {
    MessageEventStrings.KEY = new CollectionKey("message_event_strings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._event = values["event"];
            this._culture = values["culture"];
            this.title = values["title"];
            this._text = values["text"];
            this.image = values["image"];
            this.icon = values["icon"];
            this.soundEvent = values["sound_event"];
            this._optionalCampaignKey = values["optional_campaign_key"];
            this._optionalSubculture = values["optional_subculture"];
        }
        get event() {
            const collection = this.collectionCache.getCollection(MessageEvents$1.KEY, MessageEvents$1.Entry);
            return collection.find(entry => entry.event === this._event);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get text() {
            const collection = this.collectionCache.getCollection(MessageEventText$1.KEY, MessageEventText$1.Entry);
            return collection.find(entry => entry.key === this._text);
        }
        get optionalCampaignKey() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._optionalCampaignKey);
        }
        get optionalSubculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._optionalSubculture);
        }
    }
    MessageEventStrings.Entry = Entry;
})(MessageEventStrings$1 || (MessageEventStrings$1 = {}));

var MilitaryForceLegacyNames$1;
(function (MilitaryForceLegacyNames) {
    MilitaryForceLegacyNames.KEY = new CollectionKey("military_force_legacy_names");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._subculture = values["subculture"];
            this.localisedName = values["localised_name"];
            this.forArmy = !!values["for_army"];
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
    }
    MilitaryForceLegacyNames.Entry = Entry;
})(MilitaryForceLegacyNames$1 || (MilitaryForceLegacyNames$1 = {}));

var MilitaryForceTypeConversions;
(function (MilitaryForceTypeConversions) {
    MilitaryForceTypeConversions.KEY = new CollectionKey("military_force_type_conversions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._from = values["from"];
            this._to = values["to"];
            this.automatic = !!values["automatic"];
        }
        get from() {
            const collection = this.collectionCache.getCollection(MilitaryForceTypes.KEY, MilitaryForceTypes.Entry);
            return collection.find(entry => entry.key === this._from);
        }
        get to() {
            const collection = this.collectionCache.getCollection(MilitaryForceTypes.KEY, MilitaryForceTypes.Entry);
            return collection.find(entry => entry.key === this._to);
        }
    }
    MilitaryForceTypeConversions.Entry = Entry;
})(MilitaryForceTypeConversions || (MilitaryForceTypeConversions = {}));

var MilitaryForceTypeFeatures;
(function (MilitaryForceTypeFeatures) {
    MilitaryForceTypeFeatures.KEY = new CollectionKey("military_force_type_features");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.description = values["description"];
        }
    }
    MilitaryForceTypeFeatures.Entry = Entry;
})(MilitaryForceTypeFeatures || (MilitaryForceTypeFeatures = {}));

var MilitaryForceTypeFeatureJunctions;
(function (MilitaryForceTypeFeatureJunctions) {
    MilitaryForceTypeFeatureJunctions.KEY = new CollectionKey("military_force_type_feature_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._forceType = values["force_type"];
            this._feature = values["feature"];
        }
        get forceType() {
            const collection = this.collectionCache.getCollection(MilitaryForceTypes.KEY, MilitaryForceTypes.Entry);
            return collection.find(entry => entry.key === this._forceType);
        }
        get feature() {
            const collection = this.collectionCache.getCollection(MilitaryForceTypeFeatures.KEY, MilitaryForceTypeFeatures.Entry);
            return collection.find(entry => entry.key === this._feature);
        }
    }
    MilitaryForceTypeFeatureJunctions.Entry = Entry;
})(MilitaryForceTypeFeatureJunctions || (MilitaryForceTypeFeatureJunctions = {}));

var SlotTemplates$1;
(function (SlotTemplates) {
    SlotTemplates.KEY = new CollectionKey("slot_templates");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._resource = values["resource"];
        }
        get resource() {
            const collection = this.collectionCache.getCollection(Resources$1.KEY, Resources$1.Entry);
            return collection.find(entry => entry.key === this._resource);
        }
    }
    SlotTemplates.Entry = Entry;
})(SlotTemplates$1 || (SlotTemplates$1 = {}));

var SlotTypes$1;
(function (SlotTypes) {
    SlotTypes.KEY = new CollectionKey("slot_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.canDestroy = !!values["can_destroy"];
            this.canConvert = !!values["can_convert"];
        }
    }
    SlotTypes.Entry = Entry;
})(SlotTypes$1 || (SlotTypes$1 = {}));

var MilitaryForceTypeHordeDetails;
(function (MilitaryForceTypeHordeDetails) {
    MilitaryForceTypeHordeDetails.KEY = new CollectionKey("military_force_type_horde_details");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._forceType = values["force_type"];
            this._primarySlotTemplate = values["primary_slot_template"];
            this._primarySlotType = values["primary_slot_type"];
            this._secondarySlotTemplate = values["secondary_slot_template"];
            this._secondarySlotType = values["secondary_slot_type"];
        }
        get forceType() {
            const collection = this.collectionCache.getCollection(MilitaryForceTypes.KEY, MilitaryForceTypes.Entry);
            return collection.find(entry => entry.key === this._forceType);
        }
        get primarySlotTemplate() {
            const collection = this.collectionCache.getCollection(SlotTemplates$1.KEY, SlotTemplates$1.Entry);
            return collection.find(entry => entry.key === this._primarySlotTemplate);
        }
        get primarySlotType() {
            const collection = this.collectionCache.getCollection(SlotTypes$1.KEY, SlotTypes$1.Entry);
            return collection.find(entry => entry.key === this._primarySlotType);
        }
        get secondarySlotTemplate() {
            const collection = this.collectionCache.getCollection(SlotTemplates$1.KEY, SlotTemplates$1.Entry);
            return collection.find(entry => entry.key === this._secondarySlotTemplate);
        }
        get secondarySlotType() {
            const collection = this.collectionCache.getCollection(SlotTypes$1.KEY, SlotTypes$1.Entry);
            return collection.find(entry => entry.key === this._secondarySlotType);
        }
    }
    MilitaryForceTypeHordeDetails.Entry = Entry;
})(MilitaryForceTypeHordeDetails || (MilitaryForceTypeHordeDetails = {}));

var MinisterialEffectivenessModifiers$1;
(function (MinisterialEffectivenessModifiers) {
    MinisterialEffectivenessModifiers.KEY = new CollectionKey("ministerial_effectiveness_modifiers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.leaderMinisterLevel = values["leader_minister_level"];
            this._governmentType = values["government_type"];
            this.effectivenessBonus = values["effectiveness_bonus"];
        }
        get governmentType() {
            const collection = this.collectionCache.getCollection(GovernmentTypes$1.KEY, GovernmentTypes$1.Entry);
            return collection.find(entry => entry.governmentType === this._governmentType);
        }
    }
    MinisterialEffectivenessModifiers.Entry = Entry;
})(MinisterialEffectivenessModifiers$1 || (MinisterialEffectivenessModifiers$1 = {}));

var MinisterialPositionsStrings$1;
(function (MinisterialPositionsStrings) {
    MinisterialPositionsStrings.KEY = new CollectionKey("ministerial_positions_strings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onScreen = values["on_screen"];
        }
    }
    MinisterialPositionsStrings.Entry = Entry;
})(MinisterialPositionsStrings$1 || (MinisterialPositionsStrings$1 = {}));

var MinisterialPositionsCultureDetails;
(function (MinisterialPositionsCultureDetails) {
    MinisterialPositionsCultureDetails.KEY = new CollectionKey("ministerial_positions_culture_details");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._ministerialPositionKey = values["ministerial_position_key"];
            this._localisedStringKey = values["localised_string_key"];
            this._cultureKey = values["culture_key"];
            this._subcultureKey = values["subculture_key"];
            this._factionKey = values["faction_key"];
            this.uniqueId = values["unique_id"];
            this.xCoordinate = values["x_coordinate"];
            this.yCoordinate = values["y_coordinate"];
            this._localisedDescriptionKey = values["localised_description_key"];
        }
        get ministerialPositionKey() {
            const collection = this.collectionCache.getCollection(MinisterialPositions$1.KEY, MinisterialPositions$1.Entry);
            return collection.find(entry => entry.ministerKey === this._ministerialPositionKey);
        }
        get localisedStringKey() {
            const collection = this.collectionCache.getCollection(MinisterialPositionsStrings$1.KEY, MinisterialPositionsStrings$1.Entry);
            return collection.find(entry => entry.key === this._localisedStringKey);
        }
        get cultureKey() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._cultureKey);
        }
        get subcultureKey() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subcultureKey);
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get localisedDescriptionKey() {
            const collection = this.collectionCache.getCollection(MinisterialPositionsStrings$1.KEY, MinisterialPositionsStrings$1.Entry);
            return collection.find(entry => entry.key === this._localisedDescriptionKey);
        }
    }
    MinisterialPositionsCultureDetails.Entry = Entry;
})(MinisterialPositionsCultureDetails || (MinisterialPositionsCultureDetails = {}));

var MinisterialPositionsToGovernorships$1;
(function (MinisterialPositionsToGovernorships) {
    MinisterialPositionsToGovernorships.KEY = new CollectionKey("ministerial_positions_to_governorships");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._ministerialPosition = values["ministerial_position"];
            this._governorship = values["governorship"];
        }
        get ministerialPosition() {
            const collection = this.collectionCache.getCollection(MinisterialPositions$1.KEY, MinisterialPositions$1.Entry);
            return collection.find(entry => entry.ministerKey === this._ministerialPosition);
        }
        get governorship() {
            const collection = this.collectionCache.getCollection(Governorships$1.KEY, Governorships$1.Entry);
            return collection.find(entry => entry.governorship === this._governorship);
        }
    }
    MinisterialPositionsToGovernorships.Entry = Entry;
})(MinisterialPositionsToGovernorships$1 || (MinisterialPositionsToGovernorships$1 = {}));

var MinisterialPositionsToRegionRestrictions;
(function (MinisterialPositionsToRegionRestrictions) {
    MinisterialPositionsToRegionRestrictions.KEY = new CollectionKey("ministerial_positions_to_region_restrictions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._ministerialPosition = values["ministerial_position"];
            this._requiredRegion = values["required_region"];
        }
        get ministerialPosition() {
            const collection = this.collectionCache.getCollection(MinisterialPositions$1.KEY, MinisterialPositions$1.Entry);
            return collection.find(entry => entry.ministerKey === this._ministerialPosition);
        }
        get requiredRegion() {
            const collection = this.collectionCache.getCollection(Regions$1.KEY, Regions$1.Entry);
            return collection.find(entry => entry.key === this._requiredRegion);
        }
    }
    MinisterialPositionsToRegionRestrictions.Entry = Entry;
})(MinisterialPositionsToRegionRestrictions || (MinisterialPositionsToRegionRestrictions = {}));

var MinisterialPositionEffectBundles;
(function (MinisterialPositionEffectBundles) {
    MinisterialPositionEffectBundles.KEY = new CollectionKey("ministerial_position_effect_bundles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaignGroup = values["campaign_group"];
            this._effectBundle = values["effect_bundle"];
        }
        get campaignGroup() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._campaignGroup);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    MinisterialPositionEffectBundles.Entry = Entry;
})(MinisterialPositionEffectBundles || (MinisterialPositionEffectBundles = {}));

var MinisterialPositionToRequiredBuildingJunctions;
(function (MinisterialPositionToRequiredBuildingJunctions) {
    MinisterialPositionToRequiredBuildingJunctions.KEY = new CollectionKey("ministerial_position_to_required_building_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._ministerialPosition = values["ministerial_position"];
            this._requiredBuilding = values["required_building"];
            this.localisedRequirementDescription = values["localised_requirement_description"];
        }
        get ministerialPosition() {
            const collection = this.collectionCache.getCollection(MinisterialPositions$1.KEY, MinisterialPositions$1.Entry);
            return collection.find(entry => entry.ministerKey === this._ministerialPosition);
        }
        get requiredBuilding() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._requiredBuilding);
        }
    }
    MinisterialPositionToRequiredBuildingJunctions.Entry = Entry;
})(MinisterialPositionToRequiredBuildingJunctions || (MinisterialPositionToRequiredBuildingJunctions = {}));

var MinisterialPosititionToSubtypeRestrictions;
(function (MinisterialPosititionToSubtypeRestrictions) {
    MinisterialPosititionToSubtypeRestrictions.KEY = new CollectionKey("ministerial_positition_to_subtype_restrictions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._ministerialPosition = values["ministerial_position"];
            this._agentSubtype = values["agent_subtype"];
            this.localisedRestrictionReason = values["localised_restriction_reason"];
        }
        get ministerialPosition() {
            const collection = this.collectionCache.getCollection(MinisterialPositions$1.KEY, MinisterialPositions$1.Entry);
            return collection.find(entry => entry.ministerKey === this._ministerialPosition);
        }
        get agentSubtype() {
            const collection = this.collectionCache.getCollection(AgentSubtypes.KEY, AgentSubtypes.Entry);
            return collection.find(entry => entry.key === this._agentSubtype);
        }
    }
    MinisterialPosititionToSubtypeRestrictions.Entry = Entry;
})(MinisterialPosititionToSubtypeRestrictions || (MinisterialPosititionToSubtypeRestrictions = {}));

var MissileWeaponsToProjectiles$1;
(function (MissileWeaponsToProjectiles) {
    MissileWeaponsToProjectiles.KEY = new CollectionKey("missile_weapons_to_projectiles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._missileWeapon = values["missile_weapon"];
            this._projectile = values["projectile"];
        }
        get missileWeapon() {
            const collection = this.collectionCache.getCollection(MissileWeapons$1.KEY, MissileWeapons$1.Entry);
            return collection.find(entry => entry.key === this._missileWeapon);
        }
        get projectile() {
            const collection = this.collectionCache.getCollection(Projectiles$1.KEY, Projectiles$1.Entry);
            return collection.find(entry => entry.key === this._projectile);
        }
    }
    MissileWeaponsToProjectiles.Entry = Entry;
})(MissileWeaponsToProjectiles$1 || (MissileWeaponsToProjectiles$1 = {}));

var MissionCategoryAgeMultipliers;
(function (MissionCategoryAgeMultipliers) {
    MissionCategoryAgeMultipliers.KEY = new CollectionKey("mission_category_age_multipliers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._category = values["category"];
            this.key = values["key"];
            this.turnThreshold = values["turn_threshold"];
            this.multiplier = values["multiplier"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(CdirEventsCategories.KEY, CdirEventsCategories.Entry);
            return collection.find(entry => entry.categoryKey === this._category);
        }
    }
    MissionCategoryAgeMultipliers.Entry = Entry;
})(MissionCategoryAgeMultipliers || (MissionCategoryAgeMultipliers = {}));

var MissionCategoryThresholds;
(function (MissionCategoryThresholds) {
    MissionCategoryThresholds.KEY = new CollectionKey("mission_category_thresholds");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.name = values["name"];
            this._category = values["category"];
            this._effectBundle = values["effect_bundle"];
            this.thresholdWeight = values["threshold_weight"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(CdirEventsCategories.KEY, CdirEventsCategories.Entry);
            return collection.find(entry => entry.categoryKey === this._category);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    MissionCategoryThresholds.Entry = Entry;
})(MissionCategoryThresholds || (MissionCategoryThresholds = {}));

var MissionCategoryThresholdValidSubcultures;
(function (MissionCategoryThresholdValidSubcultures) {
    MissionCategoryThresholdValidSubcultures.KEY = new CollectionKey("mission_category_threshold_valid_subcultures");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._threshold = values["threshold"];
            this._subculture = values["subculture"];
        }
        get threshold() {
            const collection = this.collectionCache.getCollection(MissionCategoryThresholds.KEY, MissionCategoryThresholds.Entry);
            return collection.find(entry => entry.key === this._threshold);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
    }
    MissionCategoryThresholdValidSubcultures.Entry = Entry;
})(MissionCategoryThresholdValidSubcultures || (MissionCategoryThresholdValidSubcultures = {}));

var MissionGroupsToMissions;
(function (MissionGroupsToMissions) {
    MissionGroupsToMissions.KEY = new CollectionKey("mission_groups_to_missions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._mission = values["mission"];
            this._group = values["group"];
            this.order = values["order"];
        }
        get mission() {
            const collection = this.collectionCache.getCollection(Missions$1.KEY, Missions$1.Entry);
            return collection.find(entry => entry.key === this._mission);
        }
        get group() {
            const collection = this.collectionCache.getCollection(MissionGroups.KEY, MissionGroups.Entry);
            return collection.find(entry => entry.groupKey === this._group);
        }
    }
    MissionGroupsToMissions.Entry = Entry;
})(MissionGroupsToMissions || (MissionGroupsToMissions = {}));

var MissionText$1;
(function (MissionText) {
    MissionText.KEY = new CollectionKey("mission_text");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.text = values["text"];
        }
    }
    MissionText.Entry = Entry;
})(MissionText$1 || (MissionText$1 = {}));

var MissionWeights;
(function (MissionWeights) {
    MissionWeights.KEY = new CollectionKey("mission_weights");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._missionKey = values["mission_key"];
            this.weight = values["weight"];
        }
        get missionKey() {
            const collection = this.collectionCache.getCollection(Missions$1.KEY, Missions$1.Entry);
            return collection.find(entry => entry.key === this._missionKey);
        }
    }
    MissionWeights.Entry = Entry;
})(MissionWeights || (MissionWeights = {}));

var ModelsArtillery$1;
(function (ModelsArtillery) {
    ModelsArtillery.KEY = new CollectionKey("models_artillery");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.modelFile = values["model_file"];
            this.logicFile = values["logic_file"];
        }
    }
    ModelsArtillery.Entry = Entry;
})(ModelsArtillery$1 || (ModelsArtillery$1 = {}));

var ModelsFoot$1;
(function (ModelsFoot) {
    ModelsFoot.KEY = new CollectionKey("models_foot");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    ModelsFoot.Entry = Entry;
})(ModelsFoot$1 || (ModelsFoot$1 = {}));

var ModelsMount$1;
(function (ModelsMount) {
    ModelsMount.KEY = new CollectionKey("models_mount");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    ModelsMount.Entry = Entry;
})(ModelsMount$1 || (ModelsMount$1 = {}));

var MortuaryCultCategories;
(function (MortuaryCultCategories) {
    MortuaryCultCategories.KEY = new CollectionKey("mortuary_cult_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.localisedName = values["localised_name"];
            this.localisedDescription = values["localised_description"];
            this.showOrder = values["show_order"];
            this.craftButtonText = values["craft_button_text"];
            this.localisedButtonDescription = values["localised_button_description"];
        }
    }
    MortuaryCultCategories.Entry = Entry;
})(MortuaryCultCategories || (MortuaryCultCategories = {}));

var MortuaryCultCategoriesToRituals;
(function (MortuaryCultCategoriesToRituals) {
    MortuaryCultCategoriesToRituals.KEY = new CollectionKey("mortuary_cult_categories_to_rituals");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._mortuaryCategory = values["mortuary_category"];
            this._ritual = values["ritual"];
        }
        get mortuaryCategory() {
            const collection = this.collectionCache.getCollection(MortuaryCultCategories.KEY, MortuaryCultCategories.Entry);
            return collection.find(entry => entry.key === this._mortuaryCategory);
        }
        get ritual() {
            const collection = this.collectionCache.getCollection(Rituals.KEY, Rituals.Entry);
            return collection.find(entry => entry.key === this._ritual);
        }
    }
    MortuaryCultCategoriesToRituals.Entry = Entry;
})(MortuaryCultCategoriesToRituals || (MortuaryCultCategoriesToRituals = {}));

var MountableArtilleryUnits$1;
(function (MountableArtilleryUnits) {
    MountableArtilleryUnits.KEY = new CollectionKey("mountable_artillery_units");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unitKey = values["unit_key"];
        }
        get unitKey() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unitKey);
        }
    }
    MountableArtilleryUnits.Entry = Entry;
})(MountableArtilleryUnits$1 || (MountableArtilleryUnits$1 = {}));

var MountableArtilleryUnitsCustomBattles$1;
(function (MountableArtilleryUnitsCustomBattles) {
    MountableArtilleryUnitsCustomBattles.KEY = new CollectionKey("mountable_artillery_units_custom_battles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._mountableArtillery = values["mountable_artillery"];
            this.cap = values["cap"];
            this.probability = values["probability"];
            this._faction = values["faction"];
        }
        get mountableArtillery() {
            const collection = this.collectionCache.getCollection(MountableArtilleryUnits$1.KEY, MountableArtilleryUnits$1.Entry);
            return collection.find(entry => entry._unitKey === this._mountableArtillery);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    MountableArtilleryUnitsCustomBattles.Entry = Entry;
})(MountableArtilleryUnitsCustomBattles$1 || (MountableArtilleryUnitsCustomBattles$1 = {}));

var MovementTypes$1;
(function (MovementTypes) {
    MovementTypes.KEY = new CollectionKey("movement_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.type = values["type"];
        }
    }
    MovementTypes.Entry = Entry;
})(MovementTypes$1 || (MovementTypes$1 = {}));

var MpBudgetSizes$1;
(function (MpBudgetSizes) {
    MpBudgetSizes.KEY = new CollectionKey("mp_budget_sizes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    MpBudgetSizes.Entry = Entry;
})(MpBudgetSizes$1 || (MpBudgetSizes$1 = {}));

var MpBudgets$1;
(function (MpBudgets) {
    MpBudgets.KEY = new CollectionKey("mp_budgets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._budgetSizeKey = values["budget_size_key"];
            this.land = !!values["land"];
            this.siegeDefender = !!values["siege_defender"];
            this.budget = values["budget"];
        }
        get budgetSizeKey() {
            const collection = this.collectionCache.getCollection(MpBudgetSizes$1.KEY, MpBudgetSizes$1.Entry);
            return collection.find(entry => entry.key === this._budgetSizeKey);
        }
    }
    MpBudgets.Entry = Entry;
})(MpBudgets$1 || (MpBudgets$1 = {}));

var MpForceGenCompositions;
(function (MpForceGenCompositions) {
    MpForceGenCompositions.KEY = new CollectionKey("mp_force_gen_compositions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.generalPct = values["general_pct"];
            this.unitsPct = values["units_pct"];
            this.upgradePct = values["upgrade_pct"];
        }
    }
    MpForceGenCompositions.Entry = Entry;
})(MpForceGenCompositions || (MpForceGenCompositions = {}));

var MpForceGenTemplateJunctions$1;
(function (MpForceGenTemplateJunctions) {
    MpForceGenTemplateJunctions.KEY = new CollectionKey("mp_force_gen_template_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._templateKey = values["template_key"];
            this._configKey = values["config_key"];
            this.isDefender = !!values["is_defender"];
            this._battleType = values["battle_type"];
            this._composition = values["composition"];
        }
        get templateKey() {
            const collection = this.collectionCache.getCollection(MpForceGenTemplates$1.KEY, MpForceGenTemplates$1.Entry);
            return collection.find(entry => entry.key === this._templateKey);
        }
        get configKey() {
            const collection = this.collectionCache.getCollection(CdirMilitaryGeneratorConfigs$1.KEY, CdirMilitaryGeneratorConfigs$1.Entry);
            return collection.find(entry => entry.key === this._configKey);
        }
        get battleType() {
            const collection = this.collectionCache.getCollection(CampaignBattleTypeEnums$1.KEY, CampaignBattleTypeEnums$1.Entry);
            return collection.find(entry => entry.key === this._battleType);
        }
        get composition() {
            const collection = this.collectionCache.getCollection(MpForceGenCompositions.KEY, MpForceGenCompositions.Entry);
            return collection.find(entry => entry.key === this._composition);
        }
    }
    MpForceGenTemplateJunctions.Entry = Entry;
})(MpForceGenTemplateJunctions$1 || (MpForceGenTemplateJunctions$1 = {}));

var UiColours;
(function (UiColours) {
    UiColours.KEY = new CollectionKey("ui_colours");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.red = values["red"];
            this.green = values["green"];
            this.blue = values["blue"];
            this.description = values["description"];
            this.showInUied = !!values["show_in_uied"];
        }
    }
    UiColours.Entry = Entry;
})(UiColours || (UiColours = {}));

var NakaiTemples;
(function (NakaiTemples) {
    NakaiTemples.KEY = new CollectionKey("nakai_temples");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.localisedName = values["localised_name"];
            this.lore = values["lore"];
            this.image = values["image"];
            this._colour = values["colour"];
            this._cultureSettlementOccupationOption = values["culture_settlement_occupation_option"];
        }
        get colour() {
            const collection = this.collectionCache.getCollection(UiColours.KEY, UiColours.Entry);
            return collection.find(entry => entry.key === this._colour);
        }
        get cultureSettlementOccupationOption() {
            const collection = this.collectionCache.getCollection(CultureSettlementOccupationOptions$1.KEY, CultureSettlementOccupationOptions$1.Entry);
            return collection.find(entry => entry.id === this._cultureSettlementOccupationOption);
        }
    }
    NakaiTemples.Entry = Entry;
})(NakaiTemples || (NakaiTemples = {}));

var NakaiTempleLevels;
(function (NakaiTempleLevels) {
    NakaiTempleLevels.KEY = new CollectionKey("nakai_temple_levels");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._nakaiTemple = values["nakai_temple"];
            this.level = values["level"];
            this._factionSpawned = values["faction_spawned"];
            this._building = values["building"];
            this.minBuildingCount = values["min_building_count"];
            this._effectBundle = values["effect_bundle"];
            this.key = values["key"];
            this._secondaryBuilding = values["secondary_building"];
        }
        get nakaiTemple() {
            const collection = this.collectionCache.getCollection(NakaiTemples.KEY, NakaiTemples.Entry);
            return collection.find(entry => entry.key === this._nakaiTemple);
        }
        get factionSpawned() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._factionSpawned);
        }
        get building() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._building);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
        get secondaryBuilding() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._secondaryBuilding);
        }
    }
    NakaiTempleLevels.Entry = Entry;
})(NakaiTempleLevels || (NakaiTempleLevels = {}));

var NameOrders$1;
(function (NameOrders) {
    NameOrders.KEY = new CollectionKey("name_orders");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._type = values["type"];
            this.order = values["order"];
            this._nameGroup = values["name_group"];
        }
        get type() {
            const collection = this.collectionCache.getCollection(NameTypes$1.KEY, NameTypes$1.Entry);
            return collection.find(entry => entry.key === this._type);
        }
        get nameGroup() {
            const collection = this.collectionCache.getCollection(NamesGroups$1.KEY, NamesGroups$1.Entry);
            return collection.find(entry => entry.key === this._nameGroup);
        }
    }
    NameOrders.Entry = Entry;
})(NameOrders$1 || (NameOrders$1 = {}));

var NameOrderOverrides$1;
(function (NameOrderOverrides) {
    NameOrderOverrides.KEY = new CollectionKey("name_order_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._type = values["type"];
            this.order = values["order"];
            this._faction = values["faction"];
        }
        get type() {
            const collection = this.collectionCache.getCollection(NameTypes$1.KEY, NameTypes$1.Entry);
            return collection.find(entry => entry.key === this._type);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    NameOrderOverrides.Entry = Entry;
})(NameOrderOverrides$1 || (NameOrderOverrides$1 = {}));

var NavalEffects$1;
(function (NavalEffects) {
    NavalEffects.KEY = new CollectionKey("naval_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._effectName = values["effect_name"];
        }
        get effectName() {
            const collection = this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry);
            return collection.find(entry => entry.key === this._effectName);
        }
    }
    NavalEffects.Entry = Entry;
})(NavalEffects$1 || (NavalEffects$1 = {}));

var NavalOarEnums$1;
(function (NavalOarEnums) {
    NavalOarEnums.KEY = new CollectionKey("naval_oar_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    NavalOarEnums.Entry = Entry;
})(NavalOarEnums$1 || (NavalOarEnums$1 = {}));

var NavalRammingEvents$1;
(function (NavalRammingEvents) {
    NavalRammingEvents.KEY = new CollectionKey("naval_ramming_events");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._rammingShip = values["ramming_ship"];
            this._rammedShip = values["rammed_ship"];
            this.baseDamage = values["base_damage"];
        }
        get rammingShip() {
            const collection = this.collectionCache.getCollection(UnitCategory$1.KEY, UnitCategory$1.Entry);
            return collection.find(entry => entry.key === this._rammingShip);
        }
        get rammedShip() {
            const collection = this.collectionCache.getCollection(UnitCategory$1.KEY, UnitCategory$1.Entry);
            return collection.find(entry => entry.key === this._rammedShip);
        }
    }
    NavalRammingEvents.Entry = Entry;
})(NavalRammingEvents$1 || (NavalRammingEvents$1 = {}));

var NavalUnitsToUnitAbilitesJunctions$1;
(function (NavalUnitsToUnitAbilitesJunctions) {
    NavalUnitsToUnitAbilitesJunctions.KEY = new CollectionKey("naval_units_to_unit_abilites_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._navalUnit = values["naval_unit"];
            this._ability = values["ability"];
        }
        get navalUnit() {
            const collection = this.collectionCache.getCollection(NavalUnits$1.KEY, NavalUnits$1.Entry);
            return collection.find(entry => entry.key === this._navalUnit);
        }
        get ability() {
            const collection = this.collectionCache.getCollection(UnitAbilities$1.KEY, UnitAbilities$1.Entry);
            return collection.find(entry => entry.key === this._ability);
        }
    }
    NavalUnitsToUnitAbilitesJunctions.Entry = Entry;
})(NavalUnitsToUnitAbilitesJunctions$1 || (NavalUnitsToUnitAbilitesJunctions$1 = {}));

var NewContentAlerts;
(function (NewContentAlerts) {
    NewContentAlerts.KEY = new CollectionKey("new_content_alerts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.releaseOrder = values["release_order"];
            this.showOrder = values["show_order"];
            this.header = values["header"];
            this.description = values["description"];
            this.imagePath = values["image_path"];
            this.buttonUrl = values["button_url"];
        }
    }
    NewContentAlerts.Entry = Entry;
})(NewContentAlerts || (NewContentAlerts = {}));

var PoliticalActions$1;
(function (PoliticalActions) {
    PoliticalActions.KEY = new CollectionKey("political_actions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.politicalActionKey = values["political_action_key"];
            this.onscreenDescription = values["onscreen_description"];
            this.icon = values["icon"];
            this.baseCostPercentage = values["base_cost_percentage"];
            this.minimumCost = values["minimum_cost"];
            this.rankMultiplier = values["rank_multiplier"];
            this.onscreenName = values["onscreen_name"];
        }
    }
    PoliticalActions.Entry = Entry;
})(PoliticalActions$1 || (PoliticalActions$1 = {}));

var PoliticalActionsDilemmaJunctions$1;
(function (PoliticalActionsDilemmaJunctions) {
    PoliticalActionsDilemmaJunctions.KEY = new CollectionKey("political_actions_dilemma_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._politiicalAction = values["politiical_action"];
            this._dilemma = values["dilemma"];
            this.weighting = values["weighting"];
            this.optimalOutcome = !!values["optimal_outcome"];
        }
        get politiicalAction() {
            const collection = this.collectionCache.getCollection(PoliticalActions$1.KEY, PoliticalActions$1.Entry);
            return collection.find(entry => entry.politicalActionKey === this._politiicalAction);
        }
        get dilemma() {
            const collection = this.collectionCache.getCollection(Dilemmas$1.KEY, Dilemmas$1.Entry);
            return collection.find(entry => entry.key === this._dilemma);
        }
    }
    PoliticalActionsDilemmaJunctions.Entry = Entry;
})(PoliticalActionsDilemmaJunctions$1 || (PoliticalActionsDilemmaJunctions$1 = {}));

var PoliticalActionsIncidentsJunctions$1;
(function (PoliticalActionsIncidentsJunctions) {
    PoliticalActionsIncidentsJunctions.KEY = new CollectionKey("political_actions_incidents_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._politicalAction = values["political_action"];
            this._incident = values["incident"];
            this.weighting = values["weighting"];
            this.optimalOutcome = !!values["optimal_outcome"];
        }
        get politicalAction() {
            const collection = this.collectionCache.getCollection(PoliticalActions$1.KEY, PoliticalActions$1.Entry);
            return collection.find(entry => entry.politicalActionKey === this._politicalAction);
        }
        get incident() {
            const collection = this.collectionCache.getCollection(Incidents$1.KEY, Incidents$1.Entry);
            return collection.find(entry => entry.key === this._incident);
        }
    }
    PoliticalActionsIncidentsJunctions.Entry = Entry;
})(PoliticalActionsIncidentsJunctions$1 || (PoliticalActionsIncidentsJunctions$1 = {}));

var PoliticalActionsMissionJunctions$1;
(function (PoliticalActionsMissionJunctions) {
    PoliticalActionsMissionJunctions.KEY = new CollectionKey("political_actions_mission_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._politicalAction = values["political_action"];
            this._mission = values["mission"];
            this.weighting = values["weighting"];
            this.optimalOutcome = !!values["optimal_outcome"];
        }
        get politicalAction() {
            const collection = this.collectionCache.getCollection(PoliticalActions$1.KEY, PoliticalActions$1.Entry);
            return collection.find(entry => entry.politicalActionKey === this._politicalAction);
        }
        get mission() {
            const collection = this.collectionCache.getCollection(Missions$1.KEY, Missions$1.Entry);
            return collection.find(entry => entry.key === this._mission);
        }
    }
    PoliticalActionsMissionJunctions.Entry = Entry;
})(PoliticalActionsMissionJunctions$1 || (PoliticalActionsMissionJunctions$1 = {}));

var PoliticalPartiesFrontendLeadersJunctions;
(function (PoliticalPartiesFrontendLeadersJunctions) {
    PoliticalPartiesFrontendLeadersJunctions.KEY = new CollectionKey("political_parties_frontend_leaders_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._politicalParty = values["political_party"];
            this._frontendLeader = values["frontend_leader"];
        }
        get politicalParty() {
            const collection = this.collectionCache.getCollection(PoliticalParties$1.KEY, PoliticalParties$1.Entry);
            return collection.find(entry => entry.key === this._politicalParty);
        }
        get frontendLeader() {
            const collection = this.collectionCache.getCollection(FrontendFactionLeaders$1.KEY, FrontendFactionLeaders$1.Entry);
            return collection.find(entry => entry.key === this._frontendLeader);
        }
    }
    PoliticalPartiesFrontendLeadersJunctions.Entry = Entry;
})(PoliticalPartiesFrontendLeadersJunctions || (PoliticalPartiesFrontendLeadersJunctions = {}));

var PooledResourceInfluenceOverrides;
(function (PooledResourceInfluenceOverrides) {
    PooledResourceInfluenceOverrides.KEY = new CollectionKey("pooled_resource_influence_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._faction = values["faction"];
            this._pooledResource = values["pooled_resource"];
            this._pooledResourceFactor = values["pooled_resource_factor"];
            this.influenceToPooledResourceConversionFactor = values["influence_to_pooled_resource_conversion_factor"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get pooledResource() {
            const collection = this.collectionCache.getCollection(PooledResources.KEY, PooledResources.Entry);
            return collection.find(entry => entry.key === this._pooledResource);
        }
        get pooledResourceFactor() {
            const collection = this.collectionCache.getCollection(PooledResourceFactors.KEY, PooledResourceFactors.Entry);
            return collection.find(entry => entry.key === this._pooledResourceFactor);
        }
    }
    PooledResourceInfluenceOverrides.Entry = Entry;
})(PooledResourceInfluenceOverrides || (PooledResourceInfluenceOverrides = {}));

var PrefabTypes;
(function (PrefabTypes) {
    PrefabTypes.KEY = new CollectionKey("prefab_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.prefabType = values["prefab_type"];
            this._culture = values["culture"];
            this.value = values["value"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
    }
    PrefabTypes.Entry = Entry;
})(PrefabTypes || (PrefabTypes = {}));

var PreBattleSpeechTypesEnum$1;
(function (PreBattleSpeechTypesEnum) {
    PreBattleSpeechTypesEnum.KEY = new CollectionKey("pre_battle_speech_types_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.index = values["index"];
            this.description = values["description"];
        }
    }
    PreBattleSpeechTypesEnum.Entry = Entry;
})(PreBattleSpeechTypesEnum$1 || (PreBattleSpeechTypesEnum$1 = {}));

var PreBattleSpeeches$1;
(function (PreBattleSpeeches) {
    PreBattleSpeeches.KEY = new CollectionKey("pre_battle_speeches");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.text = values["text"];
            this._type = values["type"];
            this._parameter = values["parameter"];
        }
        get type() {
            const collection = this.collectionCache.getCollection(PreBattleSpeechTypesEnum$1.KEY, PreBattleSpeechTypesEnum$1.Entry);
            return collection.find(entry => entry.index === this._type);
        }
        get parameter() {
            const collection = this.collectionCache.getCollection(PreBattleSpeechParametersEnum$1.KEY, PreBattleSpeechParametersEnum$1.Entry);
            return collection.find(entry => entry.key === this._parameter);
        }
    }
    PreBattleSpeeches.Entry = Entry;
})(PreBattleSpeeches$1 || (PreBattleSpeeches$1 = {}));

var ProjectileCategoryEnum$1;
(function (ProjectileCategoryEnum) {
    ProjectileCategoryEnum.KEY = new CollectionKey("projectile_category_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    ProjectileCategoryEnum.Entry = Entry;
})(ProjectileCategoryEnum$1 || (ProjectileCategoryEnum$1 = {}));

var ProjectileIncendiaryEnum$1;
(function (ProjectileIncendiaryEnum) {
    ProjectileIncendiaryEnum.KEY = new CollectionKey("projectile_incendiary_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    ProjectileIncendiaryEnum.Entry = Entry;
})(ProjectileIncendiaryEnum$1 || (ProjectileIncendiaryEnum$1 = {}));

var ProjectileTrajectorySightEnum$1;
(function (ProjectileTrajectorySightEnum) {
    ProjectileTrajectorySightEnum.KEY = new CollectionKey("projectile_trajectory_sight_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    ProjectileTrajectorySightEnum.Entry = Entry;
})(ProjectileTrajectorySightEnum$1 || (ProjectileTrajectorySightEnum$1 = {}));

var PrologueChapters$1;
(function (PrologueChapters) {
    PrologueChapters.KEY = new CollectionKey("prologue_chapters");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.number = values["number"];
            this.title = values["title"];
            this.description = values["description"];
            this.isBattle = !!values["is_battle"];
            this._battleKey = values["battle_key"];
            this._campaignKey = values["campaign_key"];
            this.subtitle = values["subtitle"];
            this.banner = values["banner"];
            this.campaignFactionKey = values["campaign_faction_key"];
        }
        get battleKey() {
            const collection = this.collectionCache.getCollection(Battles$1.KEY, Battles$1.Entry);
            return collection.find(entry => entry.key === this._battleKey);
        }
        get campaignKey() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaignKey);
        }
    }
    PrologueChapters.Entry = Entry;
})(PrologueChapters$1 || (PrologueChapters$1 = {}));

var SotekTooltipTypes;
(function (SotekTooltipTypes) {
    SotekTooltipTypes.KEY = new CollectionKey("sotek_tooltip_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.type = values["type"];
        }
    }
    SotekTooltipTypes.Entry = Entry;
})(SotekTooltipTypes || (SotekTooltipTypes = {}));

var ProphecyOfSotekStages;
(function (ProphecyOfSotekStages) {
    ProphecyOfSotekStages.KEY = new CollectionKey("prophecy_of_sotek_stages");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.stage = values["stage"];
            this._effectBundle = values["effect_bundle"];
            this.localisedName = values["localised_name"];
            this.localisedDescription = values["localised_description"];
            this.order = values["order"];
            this._tooltipType = values["tooltip_type"];
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
        get tooltipType() {
            const collection = this.collectionCache.getCollection(SotekTooltipTypes.KEY, SotekTooltipTypes.Entry);
            return collection.find(entry => entry.type === this._tooltipType);
        }
    }
    ProphecyOfSotekStages.Entry = Entry;
})(ProphecyOfSotekStages || (ProphecyOfSotekStages = {}));

var ProphecyOfSotekStagesToMissions;
(function (ProphecyOfSotekStagesToMissions) {
    ProphecyOfSotekStagesToMissions.KEY = new CollectionKey("prophecy_of_sotek_stages_to_missions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._stage = values["stage"];
            this._mission = values["mission"];
            this.order = values["order"];
        }
        get stage() {
            const collection = this.collectionCache.getCollection(ProphecyOfSotekStages.KEY, ProphecyOfSotekStages.Entry);
            return collection.find(entry => entry.stage === this._stage);
        }
        get mission() {
            const collection = this.collectionCache.getCollection(Missions$1.KEY, Missions$1.Entry);
            return collection.find(entry => entry.key === this._mission);
        }
    }
    ProphecyOfSotekStagesToMissions.Entry = Entry;
})(ProphecyOfSotekStagesToMissions || (ProphecyOfSotekStagesToMissions = {}));

var Provinces$1;
(function (Provinces) {
    Provinces.KEY = new CollectionKey("provinces");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreen = values["onscreen"];
        }
    }
    Provinces.Entry = Entry;
})(Provinces$1 || (Provinces$1 = {}));

var ProvincesToRegionGroupsJunctions;
(function (ProvincesToRegionGroupsJunctions) {
    ProvincesToRegionGroupsJunctions.KEY = new CollectionKey("provinces_to_region_groups_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._regionGroup = values["region_group"];
            this._province = values["province"];
        }
        get regionGroup() {
            const collection = this.collectionCache.getCollection(RegionGroups$1.KEY, RegionGroups$1.Entry);
            return collection.find(entry => entry.groupKey === this._regionGroup);
        }
        get province() {
            const collection = this.collectionCache.getCollection(Provinces$1.KEY, Provinces$1.Entry);
            return collection.find(entry => entry.key === this._province);
        }
    }
    ProvincesToRegionGroupsJunctions.Entry = Entry;
})(ProvincesToRegionGroupsJunctions || (ProvincesToRegionGroupsJunctions = {}));

var ProvinceToMercenarySetJunctions$1;
(function (ProvinceToMercenarySetJunctions) {
    ProvinceToMercenarySetJunctions.KEY = new CollectionKey("province_to_mercenary_set_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._province = values["province"];
            this._mercenarySet = values["mercenary_set"];
        }
        get province() {
            const collection = this.collectionCache.getCollection(Provinces$1.KEY, Provinces$1.Entry);
            return collection.find(entry => entry.key === this._province);
        }
        get mercenarySet() {
            const collection = this.collectionCache.getCollection(MercenaryPools$1.KEY, MercenaryPools$1.Entry);
            return collection.find(entry => entry.key === this._mercenarySet);
        }
    }
    ProvinceToMercenarySetJunctions.Entry = Entry;
})(ProvinceToMercenarySetJunctions$1 || (ProvinceToMercenarySetJunctions$1 = {}));

var ProvincialInitiativesToSubcultureJunctions$1;
(function (ProvincialInitiativesToSubcultureJunctions) {
    ProvincialInitiativesToSubcultureJunctions.KEY = new CollectionKey("provincial_initiatives_to_subculture_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._provincialInitiativeKey = values["provincial_initiative_key"];
            this._subculture = values["subculture"];
        }
        get provincialInitiativeKey() {
            const collection = this.collectionCache.getCollection(ProvincialInitiativeRecords$1.KEY, ProvincialInitiativeRecords$1.Entry);
            return collection.find(entry => entry.key === this._provincialInitiativeKey);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
    }
    ProvincialInitiativesToSubcultureJunctions.Entry = Entry;
})(ProvincialInitiativesToSubcultureJunctions$1 || (ProvincialInitiativesToSubcultureJunctions$1 = {}));

var ProvincialInitiativeStrengthLevels;
(function (ProvincialInitiativeStrengthLevels) {
    ProvincialInitiativeStrengthLevels.KEY = new CollectionKey("provincial_initiative_strength_levels");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._initiativeRecord = values["initiative_record"];
            this.strength = values["strength"];
            this._effectBundle = values["effect_bundle"];
        }
        get initiativeRecord() {
            const collection = this.collectionCache.getCollection(ProvincialInitiativeRecords$1.KEY, ProvincialInitiativeRecords$1.Entry);
            return collection.find(entry => entry.key === this._initiativeRecord);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    ProvincialInitiativeStrengthLevels.Entry = Entry;
})(ProvincialInitiativeStrengthLevels || (ProvincialInitiativeStrengthLevels = {}));

var ProvincialInitiativeStrengthProvinceToProvinceJunctions;
(function (ProvincialInitiativeStrengthProvinceToProvinceJunctions) {
    ProvincialInitiativeStrengthProvinceToProvinceJunctions.KEY = new CollectionKey("provincial_initiative_strength_province_to_province_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._province1 = values["province1"];
            this._province2 = values["province2"];
        }
        get province1() {
            const collection = this.collectionCache.getCollection(Provinces$1.KEY, Provinces$1.Entry);
            return collection.find(entry => entry.key === this._province1);
        }
        get province2() {
            const collection = this.collectionCache.getCollection(Provinces$1.KEY, Provinces$1.Entry);
            return collection.find(entry => entry.key === this._province2);
        }
    }
    ProvincialInitiativeStrengthProvinceToProvinceJunctions.Entry = Entry;
})(ProvincialInitiativeStrengthProvinceToProvinceJunctions || (ProvincialInitiativeStrengthProvinceToProvinceJunctions = {}));

var PurchasableEffectLevels;
(function (PurchasableEffectLevels) {
    PurchasableEffectLevels.KEY = new CollectionKey("purchasable_effect_levels");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effect = values["effect"];
            this.level = values["level"];
            this._resourceCost = values["resource_cost"];
            this._effectBundle = values["effect_bundle"];
        }
        get effect() {
            const collection = this.collectionCache.getCollection(PurchasableEffects.KEY, PurchasableEffects.Entry);
            return collection.find(entry => entry.id === this._effect);
        }
        get resourceCost() {
            const collection = this.collectionCache.getCollection(ResourceCosts.KEY, ResourceCosts.Entry);
            return collection.find(entry => entry.id === this._resourceCost);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    PurchasableEffectLevels.Entry = Entry;
})(PurchasableEffectLevels || (PurchasableEffectLevels = {}));

var QuotesPeople$1;
(function (QuotesPeople) {
    QuotesPeople.KEY = new CollectionKey("quotes_people");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.quotePersonKey = values["quote_person_key"];
            this.quotePersonOnscreen = values["quote_person_onscreen"];
        }
    }
    QuotesPeople.Entry = Entry;
})(QuotesPeople$1 || (QuotesPeople$1 = {}));

var Quotes$1;
(function (Quotes) {
    Quotes.KEY = new CollectionKey("quotes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.quoteOnscreen = values["quote_onscreen"];
            this._quotePerson = values["quote_person"];
            this.key = values["key"];
        }
        get quotePerson() {
            const collection = this.collectionCache.getCollection(QuotesPeople$1.KEY, QuotesPeople$1.Entry);
            return collection.find(entry => entry.quotePersonKey === this._quotePerson);
        }
    }
    Quotes.Entry = Entry;
})(Quotes$1 || (Quotes$1 = {}));

var RandomLocalisationStrings$1;
(function (RandomLocalisationStrings) {
    RandomLocalisationStrings.KEY = new CollectionKey("random_localisation_strings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.string = values["string"];
        }
    }
    RandomLocalisationStrings.Entry = Entry;
})(RandomLocalisationStrings$1 || (RandomLocalisationStrings$1 = {}));

var RandomUnlocalisedStrings;
(function (RandomUnlocalisedStrings) {
    RandomUnlocalisedStrings.KEY = new CollectionKey("random_unlocalised_strings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.string = values["string"];
        }
    }
    RandomUnlocalisedStrings.Entry = Entry;
})(RandomUnlocalisedStrings || (RandomUnlocalisedStrings = {}));

var RegionsToRegionGroupsJunctions$1;
(function (RegionsToRegionGroupsJunctions) {
    RegionsToRegionGroupsJunctions.KEY = new CollectionKey("regions_to_region_groups_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._regionGroup = values["region_group"];
            this._region = values["region"];
        }
        get regionGroup() {
            const collection = this.collectionCache.getCollection(RegionGroups$1.KEY, RegionGroups$1.Entry);
            return collection.find(entry => entry.groupKey === this._regionGroup);
        }
        get region() {
            const collection = this.collectionCache.getCollection(Regions$1.KEY, Regions$1.Entry);
            return collection.find(entry => entry.key === this._region);
        }
    }
    RegionsToRegionGroupsJunctions.Entry = Entry;
})(RegionsToRegionGroupsJunctions$1 || (RegionsToRegionGroupsJunctions$1 = {}));

var RegionReligions$1;
(function (RegionReligions) {
    RegionReligions.KEY = new CollectionKey("region_religions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._region = values["region"];
            this._religion = values["religion"];
            this.religionZeal = values["religion_zeal"];
        }
        get region() {
            const collection = this.collectionCache.getCollection(Regions$1.KEY, Regions$1.Entry);
            return collection.find(entry => entry.key === this._region);
        }
        get religion() {
            const collection = this.collectionCache.getCollection(Religions$1.KEY, Religions$1.Entry);
            return collection.find(entry => entry.religionKey === this._religion);
        }
    }
    RegionReligions.Entry = Entry;
})(RegionReligions$1 || (RegionReligions$1 = {}));

var RegionToProvinceJunctions$1;
(function (RegionToProvinceJunctions) {
    RegionToProvinceJunctions.KEY = new CollectionKey("region_to_province_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._region = values["region"];
            this._province = values["province"];
            this.isCapital = !!values["is_capital"];
        }
        get region() {
            const collection = this.collectionCache.getCollection(Regions$1.KEY, Regions$1.Entry);
            return collection.find(entry => entry.key === this._region);
        }
        get province() {
            const collection = this.collectionCache.getCollection(Provinces$1.KEY, Provinces$1.Entry);
            return collection.find(entry => entry.key === this._province);
        }
    }
    RegionToProvinceJunctions.Entry = Entry;
})(RegionToProvinceJunctions$1 || (RegionToProvinceJunctions$1 = {}));

var ReligionConversionMods$1;
(function (ReligionConversionMods) {
    ReligionConversionMods.KEY = new CollectionKey("religion_conversion_mods");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._relFrom = values["rel_from"];
            this._relTo = values["rel_to"];
            this.modifier = values["modifier"];
        }
        get relFrom() {
            const collection = this.collectionCache.getCollection(Religions$1.KEY, Religions$1.Entry);
            return collection.find(entry => entry.religionKey === this._relFrom);
        }
        get relTo() {
            const collection = this.collectionCache.getCollection(Religions$1.KEY, Religions$1.Entry);
            return collection.find(entry => entry.religionKey === this._relTo);
        }
    }
    ReligionConversionMods.Entry = Entry;
})(ReligionConversionMods$1 || (ReligionConversionMods$1 = {}));

var ReligiousRebellions;
(function (ReligiousRebellions) {
    ReligiousRebellions.KEY = new CollectionKey("religious_rebellions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._religion = values["religion"];
            this.percentageForRebellion = values["percentage_for_rebellion"];
            this._rebelShadowedFaction = values["rebel_shadowed_faction"];
            this._campaign = values["campaign"];
        }
        get religion() {
            const collection = this.collectionCache.getCollection(Religions$1.KEY, Religions$1.Entry);
            return collection.find(entry => entry.religionKey === this._religion);
        }
        get rebelShadowedFaction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._rebelShadowedFaction);
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
    }
    ReligiousRebellions.Entry = Entry;
})(ReligiousRebellions || (ReligiousRebellions = {}));

var ResourcesToCampaignGroupJunctions;
(function (ResourcesToCampaignGroupJunctions) {
    ResourcesToCampaignGroupJunctions.KEY = new CollectionKey("resources_to_campaign_group_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._resource = values["resource"];
            this._campaignGroup = values["campaign_group"];
        }
        get resource() {
            const collection = this.collectionCache.getCollection(Resources$1.KEY, Resources$1.Entry);
            return collection.find(entry => entry.key === this._resource);
        }
        get campaignGroup() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._campaignGroup);
        }
    }
    ResourcesToCampaignGroupJunctions.Entry = Entry;
})(ResourcesToCampaignGroupJunctions || (ResourcesToCampaignGroupJunctions = {}));

var ResourcesToCampaignJunctions;
(function (ResourcesToCampaignJunctions) {
    ResourcesToCampaignJunctions.KEY = new CollectionKey("resources_to_campaign_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._resource = values["resource"];
            this._campaign = values["campaign"];
        }
        get resource() {
            const collection = this.collectionCache.getCollection(Resources$1.KEY, Resources$1.Entry);
            return collection.find(entry => entry.key === this._resource);
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
    }
    ResourcesToCampaignJunctions.Entry = Entry;
})(ResourcesToCampaignJunctions || (ResourcesToCampaignJunctions = {}));

var ResourceCostAncillaryJunctions;
(function (ResourceCostAncillaryJunctions) {
    ResourceCostAncillaryJunctions.KEY = new CollectionKey("resource_cost_ancillary_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._resourceCost = values["resource_cost"];
            this._ancillary = values["ancillary"];
        }
        get resourceCost() {
            const collection = this.collectionCache.getCollection(ResourceCosts.KEY, ResourceCosts.Entry);
            return collection.find(entry => entry.id === this._resourceCost);
        }
        get ancillary() {
            const collection = this.collectionCache.getCollection(Ancillaries$1.KEY, Ancillaries$1.Entry);
            return collection.find(entry => entry._key === this._ancillary);
        }
    }
    ResourceCostAncillaryJunctions.Entry = Entry;
})(ResourceCostAncillaryJunctions || (ResourceCostAncillaryJunctions = {}));

var ResourceCostPooledResourceJunctions;
(function (ResourceCostPooledResourceJunctions) {
    ResourceCostPooledResourceJunctions.KEY = new CollectionKey("resource_cost_pooled_resource_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._resourceCost = values["resource_cost"];
            this._pooledResourceFactor = values["pooled_resource_factor"];
            this.amount = values["amount"];
        }
        get resourceCost() {
            const collection = this.collectionCache.getCollection(ResourceCosts.KEY, ResourceCosts.Entry);
            return collection.find(entry => entry.id === this._resourceCost);
        }
        get pooledResourceFactor() {
            const collection = this.collectionCache.getCollection(PooledResourceFactorJunctions.KEY, PooledResourceFactorJunctions.Entry);
            return collection.find(entry => entry.uniqueId === this._pooledResourceFactor);
        }
    }
    ResourceCostPooledResourceJunctions.Entry = Entry;
})(ResourceCostPooledResourceJunctions || (ResourceCostPooledResourceJunctions = {}));

var ResourceCostTradeResourceJunctions;
(function (ResourceCostTradeResourceJunctions) {
    ResourceCostTradeResourceJunctions.KEY = new CollectionKey("resource_cost_trade_resource_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._resourceCost = values["resource_cost"];
            this._tradeResource = values["trade_resource"];
        }
        get resourceCost() {
            const collection = this.collectionCache.getCollection(ResourceCosts.KEY, ResourceCosts.Entry);
            return collection.find(entry => entry.id === this._resourceCost);
        }
        get tradeResource() {
            const collection = this.collectionCache.getCollection(Resources$1.KEY, Resources$1.Entry);
            return collection.find(entry => entry.key === this._tradeResource);
        }
    }
    ResourceCostTradeResourceJunctions.Entry = Entry;
})(ResourceCostTradeResourceJunctions || (ResourceCostTradeResourceJunctions = {}));

var ResourceEffects$1;
(function (ResourceEffects) {
    ResourceEffects.KEY = new CollectionKey("resource_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._resourceKey = values["resource_key"];
            this._effectKey = values["effect_key"];
            this.value = values["value"];
        }
        get resourceKey() {
            const collection = this.collectionCache.getCollection(Resources$1.KEY, Resources$1.Entry);
            return collection.find(entry => entry.key === this._resourceKey);
        }
        get effectKey() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effectKey);
        }
    }
    ResourceEffects.Entry = Entry;
})(ResourceEffects$1 || (ResourceEffects$1 = {}));

var ResourceUiOverrides;
(function (ResourceUiOverrides) {
    ResourceUiOverrides.KEY = new CollectionKey("resource_ui_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._sourceResource = values["source_resource"];
            this._targetResource = values["target_resource"];
            this._overrideFaction = values["override_faction"];
            this._overrideSubculture = values["override_subculture"];
        }
        get sourceResource() {
            const collection = this.collectionCache.getCollection(Resources$1.KEY, Resources$1.Entry);
            return collection.find(entry => entry.key === this._sourceResource);
        }
        get targetResource() {
            const collection = this.collectionCache.getCollection(Resources$1.KEY, Resources$1.Entry);
            return collection.find(entry => entry.key === this._targetResource);
        }
        get overrideFaction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._overrideFaction);
        }
        get overrideSubculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._overrideSubculture);
        }
    }
    ResourceUiOverrides.Entry = Entry;
})(ResourceUiOverrides || (ResourceUiOverrides = {}));

var RitualsToNakaiTempleLevels;
(function (RitualsToNakaiTempleLevels) {
    RitualsToNakaiTempleLevels.KEY = new CollectionKey("rituals_to_nakai_temple_levels");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this._ritual = values["ritual"];
            this.sort = values["sort"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(NakaiTempleLevels.KEY, NakaiTempleLevels.Entry);
            return collection.find(entry => entry.key === this._key);
        }
        get ritual() {
            const collection = this.collectionCache.getCollection(Rituals.KEY, Rituals.Entry);
            return collection.find(entry => entry.key === this._ritual);
        }
    }
    RitualsToNakaiTempleLevels.Entry = Entry;
})(RitualsToNakaiTempleLevels || (RitualsToNakaiTempleLevels = {}));

var RitualsToRitualChains;
(function (RitualsToRitualChains) {
    RitualsToRitualChains.KEY = new CollectionKey("rituals_to_ritual_chains");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._ritual = values["ritual"];
            this._chain = values["chain"];
            this.order = values["order"];
        }
        get ritual() {
            const collection = this.collectionCache.getCollection(Rituals.KEY, Rituals.Entry);
            return collection.find(entry => entry.key === this._ritual);
        }
        get chain() {
            const collection = this.collectionCache.getCollection(RitualChains.KEY, RitualChains.Entry);
            return collection.find(entry => entry.key === this._chain);
        }
    }
    RitualsToRitualChains.Entry = Entry;
})(RitualsToRitualChains || (RitualsToRitualChains = {}));

var RitualAdditionalUiExplanationTexts;
(function (RitualAdditionalUiExplanationTexts) {
    RitualAdditionalUiExplanationTexts.KEY = new CollectionKey("ritual_additional_ui_explanation_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._ritualKey = values["ritual_key"];
            this.onscreenText = values["onscreen_text"];
        }
        get ritualKey() {
            const collection = this.collectionCache.getCollection(Rituals.KEY, Rituals.Entry);
            return collection.find(entry => entry.key === this._ritualKey);
        }
    }
    RitualAdditionalUiExplanationTexts.Entry = Entry;
})(RitualAdditionalUiExplanationTexts || (RitualAdditionalUiExplanationTexts = {}));

var RitualBeamTypes;
(function (RitualBeamTypes) {
    RitualBeamTypes.KEY = new CollectionKey("ritual_beam_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.type = values["type"];
        }
    }
    RitualBeamTypes.Entry = Entry;
})(RitualBeamTypes || (RitualBeamTypes = {}));

var RitualBeams;
(function (RitualBeams) {
    RitualBeams.KEY = new CollectionKey("ritual_beams");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._culture = values["culture"];
            this._beamType = values["beam_type"];
            this.bmd = values["bmd"];
            this.id = values["id"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get beamType() {
            const collection = this.collectionCache.getCollection(RitualBeamTypes.KEY, RitualBeamTypes.Entry);
            return collection.find(entry => entry.type === this._beamType);
        }
    }
    RitualBeams.Entry = Entry;
})(RitualBeams || (RitualBeams = {}));

var RitualIncursionStrengths;
(function (RitualIncursionStrengths) {
    RitualIncursionStrengths.KEY = new CollectionKey("ritual_incursion_strengths");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._ritual = values["ritual"];
            this.difficulty = values["difficulty"];
            this.strength = values["strength"];
        }
        get ritual() {
            const collection = this.collectionCache.getCollection(Rituals.KEY, Rituals.Entry);
            return collection.find(entry => entry.key === this._ritual);
        }
    }
    RitualIncursionStrengths.Entry = Entry;
})(RitualIncursionStrengths || (RitualIncursionStrengths = {}));

var RitualPayloadAncillaries;
(function (RitualPayloadAncillaries) {
    RitualPayloadAncillaries.KEY = new CollectionKey("ritual_payload_ancillaries");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._payload = values["payload"];
            this._ancillary = values["ancillary"];
        }
        get payload() {
            const collection = this.collectionCache.getCollection(RitualPayloads.KEY, RitualPayloads.Entry);
            return collection.find(entry => entry.key === this._payload);
        }
        get ancillary() {
            const collection = this.collectionCache.getCollection(Ancillaries$1.KEY, Ancillaries$1.Entry);
            return collection.find(entry => entry._key === this._ancillary);
        }
    }
    RitualPayloadAncillaries.Entry = Entry;
})(RitualPayloadAncillaries || (RitualPayloadAncillaries = {}));

var RitualPayloadBasicComponentTypes;
(function (RitualPayloadBasicComponentTypes) {
    RitualPayloadBasicComponentTypes.KEY = new CollectionKey("ritual_payload_basic_component_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
        }
    }
    RitualPayloadBasicComponentTypes.Entry = Entry;
})(RitualPayloadBasicComponentTypes || (RitualPayloadBasicComponentTypes = {}));

var RitualPayloadBasicComponents;
(function (RitualPayloadBasicComponents) {
    RitualPayloadBasicComponents.KEY = new CollectionKey("ritual_payload_basic_components");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._payload = values["payload"];
            this._component = values["component"];
            this.value = values["value"];
        }
        get payload() {
            const collection = this.collectionCache.getCollection(RitualPayloads.KEY, RitualPayloads.Entry);
            return collection.find(entry => entry.key === this._payload);
        }
        get component() {
            const collection = this.collectionCache.getCollection(RitualPayloadBasicComponentTypes.KEY, RitualPayloadBasicComponentTypes.Entry);
            return collection.find(entry => entry.id === this._component);
        }
    }
    RitualPayloadBasicComponents.Entry = Entry;
})(RitualPayloadBasicComponents || (RitualPayloadBasicComponents = {}));

var RitualPayloadDiplomaticAttitudeChanges;
(function (RitualPayloadDiplomaticAttitudeChanges) {
    RitualPayloadDiplomaticAttitudeChanges.KEY = new CollectionKey("ritual_payload_diplomatic_attitude_changes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._payload = values["payload"];
            this.attitudeDelta = values["attitude_delta"];
        }
        get payload() {
            const collection = this.collectionCache.getCollection(RitualPayloads.KEY, RitualPayloads.Entry);
            return collection.find(entry => entry.key === this._payload);
        }
    }
    RitualPayloadDiplomaticAttitudeChanges.Entry = Entry;
})(RitualPayloadDiplomaticAttitudeChanges || (RitualPayloadDiplomaticAttitudeChanges = {}));

var RitualPayloadEffectBundles;
(function (RitualPayloadEffectBundles) {
    RitualPayloadEffectBundles.KEY = new CollectionKey("ritual_payload_effect_bundles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._payload = values["payload"];
            this._effectBundle = values["effect_bundle"];
            this.duration = values["duration"];
        }
        get payload() {
            const collection = this.collectionCache.getCollection(RitualPayloads.KEY, RitualPayloads.Entry);
            return collection.find(entry => entry.key === this._payload);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    RitualPayloadEffectBundles.Entry = Entry;
})(RitualPayloadEffectBundles || (RitualPayloadEffectBundles = {}));

var RitualPayloadResourceTransactions;
(function (RitualPayloadResourceTransactions) {
    RitualPayloadResourceTransactions.KEY = new CollectionKey("ritual_payload_resource_transactions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._payload = values["payload"];
            this._transaction = values["transaction"];
            this.isTransfer = !!values["is_transfer"];
        }
        get payload() {
            const collection = this.collectionCache.getCollection(RitualPayloads.KEY, RitualPayloads.Entry);
            return collection.find(entry => entry.key === this._payload);
        }
        get transaction() {
            const collection = this.collectionCache.getCollection(ResourceCosts.KEY, ResourceCosts.Entry);
            return collection.find(entry => entry.id === this._transaction);
        }
    }
    RitualPayloadResourceTransactions.Entry = Entry;
})(RitualPayloadResourceTransactions || (RitualPayloadResourceTransactions = {}));

var RitualPayloadSpawnAgents;
(function (RitualPayloadSpawnAgents) {
    RitualPayloadSpawnAgents.KEY = new CollectionKey("ritual_payload_spawn_agents");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._payload = values["payload"];
            this._agentType = values["agent_type"];
            this._agentSubtype = values["agent_subtype"];
            this.spawnToPool = !!values["spawn_to_pool"];
        }
        get payload() {
            const collection = this.collectionCache.getCollection(RitualPayloads.KEY, RitualPayloads.Entry);
            return collection.find(entry => entry.key === this._payload);
        }
        get agentType() {
            const collection = this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry);
            return collection.find(entry => entry.key === this._agentType);
        }
        get agentSubtype() {
            const collection = this.collectionCache.getCollection(AgentSubtypes.KEY, AgentSubtypes.Entry);
            return collection.find(entry => entry.key === this._agentSubtype);
        }
    }
    RitualPayloadSpawnAgents.Entry = Entry;
})(RitualPayloadSpawnAgents || (RitualPayloadSpawnAgents = {}));

var SpawnableForces;
(function (SpawnableForces) {
    SpawnableForces.KEY = new CollectionKey("spawnable_forces");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    SpawnableForces.Entry = Entry;
})(SpawnableForces || (SpawnableForces = {}));

var RitualPayloadSpawnArmies;
(function (RitualPayloadSpawnArmies) {
    RitualPayloadSpawnArmies.KEY = new CollectionKey("ritual_payload_spawn_armies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._payload = values["payload"];
            this._spawnableForce = values["spawnable_force"];
            this.spawnAtRitualSite = !!values["spawn_at_ritual_site"];
            this._factionOverride = values["faction_override"];
        }
        get payload() {
            const collection = this.collectionCache.getCollection(RitualPayloads.KEY, RitualPayloads.Entry);
            return collection.find(entry => entry.key === this._payload);
        }
        get spawnableForce() {
            const collection = this.collectionCache.getCollection(SpawnableForces.KEY, SpawnableForces.Entry);
            return collection.find(entry => entry.key === this._spawnableForce);
        }
        get factionOverride() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._factionOverride);
        }
    }
    RitualPayloadSpawnArmies.Entry = Entry;
})(RitualPayloadSpawnArmies || (RitualPayloadSpawnArmies = {}));

var RitualPayloadSpawnMercenaries;
(function (RitualPayloadSpawnMercenaries) {
    RitualPayloadSpawnMercenaries.KEY = new CollectionKey("ritual_payload_spawn_mercenaries");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._payload = values["payload"];
            this._spawnableUnit = values["spawnable_unit"];
        }
        get payload() {
            const collection = this.collectionCache.getCollection(RitualPayloads.KEY, RitualPayloads.Entry);
            return collection.find(entry => entry.key === this._payload);
        }
        get spawnableUnit() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._spawnableUnit);
        }
    }
    RitualPayloadSpawnMercenaries.Entry = Entry;
})(RitualPayloadSpawnMercenaries || (RitualPayloadSpawnMercenaries = {}));

var RitualPayloadSpawnStorms;
(function (RitualPayloadSpawnStorms) {
    RitualPayloadSpawnStorms.KEY = new CollectionKey("ritual_payload_spawn_storms");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._payload = values["payload"];
            this._region = values["region"];
            this.strength = values["strength"];
            this.maxTurnsDuration = values["max_turns_duration"];
            this._type = values["type"];
        }
        get payload() {
            const collection = this.collectionCache.getCollection(RitualPayloads.KEY, RitualPayloads.Entry);
            return collection.find(entry => entry.key === this._payload);
        }
        get region() {
            const collection = this.collectionCache.getCollection(Regions$1.KEY, Regions$1.Entry);
            return collection.find(entry => entry.key === this._region);
        }
        get type() {
            const collection = this.collectionCache.getCollection(CampaignStormTypes.KEY, CampaignStormTypes.Entry);
            return collection.find(entry => entry.type === this._type);
        }
    }
    RitualPayloadSpawnStorms.Entry = Entry;
})(RitualPayloadSpawnStorms || (RitualPayloadSpawnStorms = {}));

var RitualPayloadTriggerDilemmas;
(function (RitualPayloadTriggerDilemmas) {
    RitualPayloadTriggerDilemmas.KEY = new CollectionKey("ritual_payload_trigger_dilemmas");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._payload = values["payload"];
            this._dilemma = values["dilemma"];
        }
        get payload() {
            const collection = this.collectionCache.getCollection(RitualPayloads.KEY, RitualPayloads.Entry);
            return collection.find(entry => entry.key === this._payload);
        }
        get dilemma() {
            const collection = this.collectionCache.getCollection(Dilemmas$1.KEY, Dilemmas$1.Entry);
            return collection.find(entry => entry.key === this._dilemma);
        }
    }
    RitualPayloadTriggerDilemmas.Entry = Entry;
})(RitualPayloadTriggerDilemmas || (RitualPayloadTriggerDilemmas = {}));

var RitualPerformingCharacters;
(function (RitualPerformingCharacters) {
    RitualPerformingCharacters.KEY = new CollectionKey("ritual_performing_characters");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._agentType = values["agent_type"];
            this._agentSubtype = values["agent_subtype"];
            this.recoveryTime = values["recovery_time"];
            this.minimumLevel = values["minimum_level"];
        }
        get agentType() {
            const collection = this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry);
            return collection.find(entry => entry.key === this._agentType);
        }
        get agentSubtype() {
            const collection = this.collectionCache.getCollection(AgentSubtypes.KEY, AgentSubtypes.Entry);
            return collection.find(entry => entry.key === this._agentSubtype);
        }
    }
    RitualPerformingCharacters.Entry = Entry;
})(RitualPerformingCharacters || (RitualPerformingCharacters = {}));

var RitualPerformingCharacterJunctions;
(function (RitualPerformingCharacterJunctions) {
    RitualPerformingCharacterJunctions.KEY = new CollectionKey("ritual_performing_character_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._ritual = values["ritual"];
            this._character = values["character"];
            this.amount = values["amount"];
        }
        get ritual() {
            const collection = this.collectionCache.getCollection(Rituals.KEY, Rituals.Entry);
            return collection.find(entry => entry.key === this._ritual);
        }
        get character() {
            const collection = this.collectionCache.getCollection(RitualPerformingCharacters.KEY, RitualPerformingCharacters.Entry);
            return collection.find(entry => entry.key === this._character);
        }
    }
    RitualPerformingCharacterJunctions.Entry = Entry;
})(RitualPerformingCharacterJunctions || (RitualPerformingCharacterJunctions = {}));

var RitualReactionConstraints;
(function (RitualReactionConstraints) {
    RitualReactionConstraints.KEY = new CollectionKey("ritual_reaction_constraints");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._ritual = values["ritual"];
            this._targetRitual = values["target_ritual"];
            this._targetCategory = values["target_category"];
            this.oncePerTarget = !!values["once_per_target"];
            this.sameSubcultureValid = !!values["same_subculture_valid"];
        }
        get ritual() {
            const collection = this.collectionCache.getCollection(Rituals.KEY, Rituals.Entry);
            return collection.find(entry => entry.key === this._ritual);
        }
        get targetRitual() {
            const collection = this.collectionCache.getCollection(Rituals.KEY, Rituals.Entry);
            return collection.find(entry => entry.key === this._targetRitual);
        }
        get targetCategory() {
            const collection = this.collectionCache.getCollection(RitualCategories.KEY, RitualCategories.Entry);
            return collection.find(entry => entry.id === this._targetCategory);
        }
    }
    RitualReactionConstraints.Entry = Entry;
})(RitualReactionConstraints || (RitualReactionConstraints = {}));

var SacrificesToSotekRituals;
(function (SacrificesToSotekRituals) {
    SacrificesToSotekRituals.KEY = new CollectionKey("sacrifices_to_sotek_rituals");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._ritual = values["ritual"];
            this.tier = values["tier"];
            this.order = values["order"];
        }
        get ritual() {
            const collection = this.collectionCache.getCollection(Rituals.KEY, Rituals.Entry);
            return collection.find(entry => entry.key === this._ritual);
        }
    }
    SacrificesToSotekRituals.Entry = Entry;
})(SacrificesToSotekRituals || (SacrificesToSotekRituals = {}));

var ScriptedObjectives$1;
(function (ScriptedObjectives) {
    ScriptedObjectives.KEY = new CollectionKey("scripted_objectives");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.localisedText = values["localised_text"];
            this._gameExpansionKey = values["game_expansion_key"];
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
    }
    ScriptedObjectives.Entry = Entry;
})(ScriptedObjectives$1 || (ScriptedObjectives$1 = {}));

var ScriptedSubtitles$1;
(function (ScriptedSubtitles) {
    ScriptedSubtitles.KEY = new CollectionKey("scripted_subtitles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.localisedText = values["localised_text"];
            this.characterForVo = values["character_for_vo"];
        }
    }
    ScriptedSubtitles.Entry = Entry;
})(ScriptedSubtitles$1 || (ScriptedSubtitles$1 = {}));

var SeasonAttritions$1;
(function (SeasonAttritions) {
    SeasonAttritions.KEY = new CollectionKey("season_attritions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._season = values["season"];
            this._attritionType = values["attrition_type"];
            this.enable = !!values["enable"];
            this._campaign = values["campaign"];
            this.climatePhaseLowerThreshold = values["climate_phase_lower_threshold"];
        }
        get season() {
            const collection = this.collectionCache.getCollection(Seasons$1.KEY, Seasons$1.Entry);
            return collection.find(entry => entry.season === this._season);
        }
        get attritionType() {
            const collection = this.collectionCache.getCollection(CampaignMapAttritions$1.KEY, CampaignMapAttritions$1.Entry);
            return collection.find(entry => entry.key === this._attritionType);
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
    }
    SeasonAttritions.Entry = Entry;
})(SeasonAttritions$1 || (SeasonAttritions$1 = {}));

var SeasonProvinceEffectBundles$1;
(function (SeasonProvinceEffectBundles) {
    SeasonProvinceEffectBundles.KEY = new CollectionKey("season_province_effect_bundles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._season = values["season"];
            this._province = values["province"];
            this._effectBundle = values["effect_bundle"];
            this.weighting = values["weighting"];
            this.default = !!values["default"];
            this.climatePhaseLowerThreshold = values["climate_phase_lower_threshold"];
        }
        get season() {
            const collection = this.collectionCache.getCollection(Seasons$1.KEY, Seasons$1.Entry);
            return collection.find(entry => entry.season === this._season);
        }
        get province() {
            const collection = this.collectionCache.getCollection(Provinces$1.KEY, Provinces$1.Entry);
            return collection.find(entry => entry.key === this._province);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    SeasonProvinceEffectBundles.Entry = Entry;
})(SeasonProvinceEffectBundles$1 || (SeasonProvinceEffectBundles$1 = {}));

var SeaSurfaces$1;
(function (SeaSurfaces) {
    SeaSurfaces.KEY = new CollectionKey("sea_surfaces");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.seaWindSpeed = values["sea_wind_speed"];
            this.seaPhillipsConstant = values["sea_phillips_constant"];
            this.seaChoppiness = values["sea_choppiness"];
            this.swellWindSpeed = values["swell_wind_speed"];
            this.swellPhillipsConstant = values["swell_phillips_constant"];
            this.foamEnabled = !!values["foam_enabled"];
            this.foamDecayRate = values["foam_decay_rate"];
            this.foamFadeInTime = values["foam_fade_in_time"];
            this.foamCutOffValue = values["foam_cut_off_value"];
            this.frothValue = values["froth_value"];
            this.frothDistortionSpeed = values["froth_distortion_speed"];
            this.frothDistortionAmount = values["froth_distortion_amount"];
            this.sprayCutOffValue = values["spray_cut_off_value"];
            this.spraySpeed = values["spray_speed"];
            this.sprayDuration = values["spray_duration"];
            this.seaShininess = values["sea_shininess"];
            this.seaDecay = values["sea_decay"];
            this.reflectionFlatteningFactor = values["reflection_flattening_factor"];
            this.waveTroughYValue = values["wave_trough_y_value"];
            this.detailNormalUvScale1 = values["detail_normal_uv_scale1"];
            this.detailNormalUvSpeed1 = values["detail_normal_uv_speed1"];
            this.detailNormalUvScale2 = values["detail_normal_uv_scale2"];
            this.detailNormalUvSpeed2 = values["detail_normal_uv_speed2"];
        }
    }
    SeaSurfaces.Entry = Entry;
})(SeaSurfaces$1 || (SeaSurfaces$1 = {}));

var SettlementAbandomentBuildings;
(function (SettlementAbandomentBuildings) {
    SettlementAbandomentBuildings.KEY = new CollectionKey("settlement_abandoment_buildings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._building = values["building"];
            this._campaignGroup = values["campaign_group"];
        }
        get building() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._building);
        }
        get campaignGroup() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._campaignGroup);
        }
    }
    SettlementAbandomentBuildings.Entry = Entry;
})(SettlementAbandomentBuildings || (SettlementAbandomentBuildings = {}));

var SettlementVandalisationBuildings;
(function (SettlementVandalisationBuildings) {
    SettlementVandalisationBuildings.KEY = new CollectionKey("settlement_vandalisation_buildings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._building = values["building"];
            this._campaignGroup = values["campaign_group"];
            this.frequency = values["frequency"];
        }
        get building() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._building);
        }
        get campaignGroup() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._campaignGroup);
        }
    }
    SettlementVandalisationBuildings.Entry = Entry;
})(SettlementVandalisationBuildings || (SettlementVandalisationBuildings = {}));

var ShipNames$1;
(function (ShipNames) {
    ShipNames.KEY = new CollectionKey("ship_names");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this._nameGroup = values["name_group"];
            this.shipName = values["Ship_Name"];
            this._exclusiveToFaction = values["exclusive_to_faction"];
        }
        get nameGroup() {
            const collection = this.collectionCache.getCollection(NamesGroups$1.KEY, NamesGroups$1.Entry);
            return collection.find(entry => entry.key === this._nameGroup);
        }
        get exclusiveToFaction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._exclusiveToFaction);
        }
    }
    ShipNames.Entry = Entry;
})(ShipNames$1 || (ShipNames$1 = {}));

var ShortcutLocalisation$1;
(function (ShortcutLocalisation) {
    ShortcutLocalisation.KEY = new CollectionKey("shortcut_localisation");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreen = values["onscreen"];
            this.toolitp = values["toolitp"];
        }
    }
    ShortcutLocalisation.Entry = Entry;
})(ShortcutLocalisation$1 || (ShortcutLocalisation$1 = {}));

var SlotSetItems;
(function (SlotSetItems) {
    SlotSetItems.KEY = new CollectionKey("slot_set_items");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._slotSet = values["slot_set"];
            this._slotType = values["slot_type"];
            this._slotTemplate = values["slot_template"];
            this._buildingLevel = values["building_level"];
        }
        get slotSet() {
            const collection = this.collectionCache.getCollection(SlotSets.KEY, SlotSets.Entry);
            return collection.find(entry => entry.key === this._slotSet);
        }
        get slotType() {
            const collection = this.collectionCache.getCollection(SlotTypes$1.KEY, SlotTypes$1.Entry);
            return collection.find(entry => entry.key === this._slotType);
        }
        get slotTemplate() {
            const collection = this.collectionCache.getCollection(SlotTemplates$1.KEY, SlotTemplates$1.Entry);
            return collection.find(entry => entry.key === this._slotTemplate);
        }
        get buildingLevel() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._buildingLevel);
        }
    }
    SlotSetItems.Entry = Entry;
})(SlotSetItems || (SlotSetItems = {}));

var SlotTemplateToBuildingSuperchainJunctions$1;
(function (SlotTemplateToBuildingSuperchainJunctions) {
    SlotTemplateToBuildingSuperchainJunctions.KEY = new CollectionKey("slot_template_to_building_superchain_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._slotTemplate = values["slot_template"];
            this._buildingSuperchain = values["building_superchain"];
        }
        get slotTemplate() {
            const collection = this.collectionCache.getCollection(SlotTemplates$1.KEY, SlotTemplates$1.Entry);
            return collection.find(entry => entry.key === this._slotTemplate);
        }
        get buildingSuperchain() {
            const collection = this.collectionCache.getCollection(BuildingSuperchains$1.KEY, BuildingSuperchains$1.Entry);
            return collection.find(entry => entry.key === this._buildingSuperchain);
        }
    }
    SlotTemplateToBuildingSuperchainJunctions.Entry = Entry;
})(SlotTemplateToBuildingSuperchainJunctions$1 || (SlotTemplateToBuildingSuperchainJunctions$1 = {}));

var SpawnableForceUnitJunctions;
(function (SpawnableForceUnitJunctions) {
    SpawnableForceUnitJunctions.KEY = new CollectionKey("spawnable_force_unit_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._spawnableForce = values["spawnable_force"];
            this._unit = values["unit"];
            this.minXp = values["min_xp"];
            this.maxXp = values["max_xp"];
            this.minAmount = values["min_amount"];
            this.maxAmount = values["max_amount"];
        }
        get spawnableForce() {
            const collection = this.collectionCache.getCollection(SpawnableForces.KEY, SpawnableForces.Entry);
            return collection.find(entry => entry.key === this._spawnableForce);
        }
        get unit() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
    }
    SpawnableForceUnitJunctions.Entry = Entry;
})(SpawnableForceUnitJunctions || (SpawnableForceUnitJunctions = {}));

var UnitLists;
(function (UnitLists) {
    UnitLists.KEY = new CollectionKey("unit_lists");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    UnitLists.Entry = Entry;
})(UnitLists || (UnitLists = {}));

var SpawnableForceUnitListJunctions;
(function (SpawnableForceUnitListJunctions) {
    SpawnableForceUnitListJunctions.KEY = new CollectionKey("spawnable_force_unit_list_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._spawnableForce = values["spawnable_force"];
            this._unitList = values["unit_list"];
            this.minXp = values["min_xp"];
            this.maxXp = values["max_xp"];
            this.minAmount = values["min_amount"];
            this.maxAmount = values["max_amount"];
        }
        get spawnableForce() {
            const collection = this.collectionCache.getCollection(SpawnableForces.KEY, SpawnableForces.Entry);
            return collection.find(entry => entry.key === this._spawnableForce);
        }
        get unitList() {
            const collection = this.collectionCache.getCollection(UnitLists.KEY, UnitLists.Entry);
            return collection.find(entry => entry.key === this._unitList);
        }
    }
    SpawnableForceUnitListJunctions.Entry = Entry;
})(SpawnableForceUnitListJunctions || (SpawnableForceUnitListJunctions = {}));

var SpecialAbilityGroupsToUnitsJunctions;
(function (SpecialAbilityGroupsToUnitsJunctions) {
    SpecialAbilityGroupsToUnitsJunctions.KEY = new CollectionKey("special_ability_groups_to_units_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._abilityGroup = values["ability_group"];
            this._unit = values["unit"];
        }
        get abilityGroup() {
            const collection = this.collectionCache.getCollection(SpecialAbilityGroups$1.KEY, SpecialAbilityGroups$1.Entry);
            return collection.find(entry => entry.abilityGroup === this._abilityGroup);
        }
        get unit() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
    }
    SpecialAbilityGroupsToUnitsJunctions.Entry = Entry;
})(SpecialAbilityGroupsToUnitsJunctions || (SpecialAbilityGroupsToUnitsJunctions = {}));

var SpecialAbilityGroupsToUnitAbilitiesJunctions$1;
(function (SpecialAbilityGroupsToUnitAbilitiesJunctions) {
    SpecialAbilityGroupsToUnitAbilitiesJunctions.KEY = new CollectionKey("special_ability_groups_to_unit_abilities_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._specialAbilityGroups = values["special_ability_groups"];
            this._unitSpecialAbilities = values["unit_special_abilities"];
        }
        get specialAbilityGroups() {
            const collection = this.collectionCache.getCollection(SpecialAbilityGroups$1.KEY, SpecialAbilityGroups$1.Entry);
            return collection.find(entry => entry.abilityGroup === this._specialAbilityGroups);
        }
        get unitSpecialAbilities() {
            const collection = this.collectionCache.getCollection(UnitSpecialAbilities$1.KEY, UnitSpecialAbilities$1.Entry);
            return collection.find(entry => entry._key === this._unitSpecialAbilities);
        }
    }
    SpecialAbilityGroupsToUnitAbilitiesJunctions.Entry = Entry;
})(SpecialAbilityGroupsToUnitAbilitiesJunctions$1 || (SpecialAbilityGroupsToUnitAbilitiesJunctions$1 = {}));

var SpecialAbilityGroupParents;
(function (SpecialAbilityGroupParents) {
    SpecialAbilityGroupParents.KEY = new CollectionKey("special_ability_group_parents");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._child = values["child"];
            this._parent = values["parent"];
        }
        get child() {
            const collection = this.collectionCache.getCollection(SpecialAbilityGroups$1.KEY, SpecialAbilityGroups$1.Entry);
            return collection.find(entry => entry.abilityGroup === this._child);
        }
        get parent() {
            const collection = this.collectionCache.getCollection(SpecialAbilityGroups$1.KEY, SpecialAbilityGroups$1.Entry);
            return collection.find(entry => entry.abilityGroup === this._parent);
        }
    }
    SpecialAbilityGroupParents.Entry = Entry;
})(SpecialAbilityGroupParents || (SpecialAbilityGroupParents = {}));

var SpecialAbilityInvalidUsageFlags$1;
(function (SpecialAbilityInvalidUsageFlags) {
    SpecialAbilityInvalidUsageFlags.KEY = new CollectionKey("special_ability_invalid_usage_flags");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.flagKey = values["flag_key"];
            this.flagDescription = values["flag_description"];
            this.altDescription = values["alt_description"];
        }
    }
    SpecialAbilityInvalidUsageFlags.Entry = Entry;
})(SpecialAbilityInvalidUsageFlags$1 || (SpecialAbilityInvalidUsageFlags$1 = {}));

var SpecialAbilityPhaseAttributeEffects$1;
(function (SpecialAbilityPhaseAttributeEffects) {
    SpecialAbilityPhaseAttributeEffects.KEY = new CollectionKey("special_ability_phase_attribute_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._phase = values["phase"];
            this._attribute = values["attribute"];
            this._attributeType = values["attribute_type"];
        }
        get phase() {
            const collection = this.collectionCache.getCollection(SpecialAbilityPhases$1.KEY, SpecialAbilityPhases$1.Entry);
            return collection.find(entry => entry.id === this._phase);
        }
        get attribute() {
            const collection = this.collectionCache.getCollection(UnitAttributes$1.KEY, UnitAttributes$1.Entry);
            return collection.find(entry => entry.key === this._attribute);
        }
        get attributeType() {
            const collection = this.collectionCache.getCollection(SpecialAbilityPhaseEffectTypes$1.KEY, SpecialAbilityPhaseEffectTypes$1.Entry);
            return collection.find(entry => entry.effectType === this._attributeType);
        }
    }
    SpecialAbilityPhaseAttributeEffects.Entry = Entry;
})(SpecialAbilityPhaseAttributeEffects$1 || (SpecialAbilityPhaseAttributeEffects$1 = {}));

var SpecialAbilityPhaseStatEffects$1;
(function (SpecialAbilityPhaseStatEffects) {
    SpecialAbilityPhaseStatEffects.KEY = new CollectionKey("special_ability_phase_stat_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._phase = values["phase"];
            this.value = values["value"];
            this._stat = values["stat"];
            this._how = values["how"];
        }
        get phase() {
            const collection = this.collectionCache.getCollection(SpecialAbilityPhases$1.KEY, SpecialAbilityPhases$1.Entry);
            return collection.find(entry => entry.id === this._phase);
        }
        get stat() {
            const collection = this.collectionCache.getCollection(ModifiableUnitStats.KEY, ModifiableUnitStats.Entry);
            return collection.find(entry => entry.statKey === this._stat);
        }
        get how() {
            const collection = this.collectionCache.getCollection(UnitStatModifiersHowEnums$1.KEY, UnitStatModifiersHowEnums$1.Entry);
            return collection.find(entry => entry.key === this._how);
        }
    }
    SpecialAbilityPhaseStatEffects.Entry = Entry;
})(SpecialAbilityPhaseStatEffects$1 || (SpecialAbilityPhaseStatEffects$1 = {}));

var SpecialAbilityToAutoDeactivateFlags$1;
(function (SpecialAbilityToAutoDeactivateFlags) {
    SpecialAbilityToAutoDeactivateFlags.KEY = new CollectionKey("special_ability_to_auto_deactivate_flags");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._specialAbility = values["special_ability"];
            this._deactivateFlag = values["deactivate_flag"];
        }
        get specialAbility() {
            const collection = this.collectionCache.getCollection(UnitSpecialAbilities$1.KEY, UnitSpecialAbilities$1.Entry);
            return collection.find(entry => entry._key === this._specialAbility);
        }
        get deactivateFlag() {
            const collection = this.collectionCache.getCollection(SpecialAbilityInvalidUsageFlags$1.KEY, SpecialAbilityInvalidUsageFlags$1.Entry);
            return collection.find(entry => entry.flagKey === this._deactivateFlag);
        }
    }
    SpecialAbilityToAutoDeactivateFlags.Entry = Entry;
})(SpecialAbilityToAutoDeactivateFlags$1 || (SpecialAbilityToAutoDeactivateFlags$1 = {}));

var SpecialAbilityToInvalidTargetFlags;
(function (SpecialAbilityToInvalidTargetFlags) {
    SpecialAbilityToInvalidTargetFlags.KEY = new CollectionKey("special_ability_to_invalid_target_flags");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._specialAbility = values["special_ability"];
            this._invalidTarget = values["invalid_target"];
        }
        get specialAbility() {
            const collection = this.collectionCache.getCollection(UnitSpecialAbilities$1.KEY, UnitSpecialAbilities$1.Entry);
            return collection.find(entry => entry._key === this._specialAbility);
        }
        get invalidTarget() {
            const collection = this.collectionCache.getCollection(SpecialAbilityInvalidUsageFlags$1.KEY, SpecialAbilityInvalidUsageFlags$1.Entry);
            return collection.find(entry => entry.flagKey === this._invalidTarget);
        }
    }
    SpecialAbilityToInvalidTargetFlags.Entry = Entry;
})(SpecialAbilityToInvalidTargetFlags || (SpecialAbilityToInvalidTargetFlags = {}));

var SpecialAbilityToInvalidUsageFlags$1;
(function (SpecialAbilityToInvalidUsageFlags) {
    SpecialAbilityToInvalidUsageFlags.KEY = new CollectionKey("special_ability_to_invalid_usage_flags");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._specialAbility = values["special_ability"];
            this._invalidUsageFlag = values["invalid_usage_flag"];
        }
        get specialAbility() {
            const collection = this.collectionCache.getCollection(UnitSpecialAbilities$1.KEY, UnitSpecialAbilities$1.Entry);
            return collection.find(entry => entry._key === this._specialAbility);
        }
        get invalidUsageFlag() {
            const collection = this.collectionCache.getCollection(SpecialAbilityInvalidUsageFlags$1.KEY, SpecialAbilityInvalidUsageFlags$1.Entry);
            return collection.find(entry => entry.flagKey === this._invalidUsageFlag);
        }
    }
    SpecialAbilityToInvalidUsageFlags.Entry = Entry;
})(SpecialAbilityToInvalidUsageFlags$1 || (SpecialAbilityToInvalidUsageFlags$1 = {}));

var SpecialAbilityToRechargeContexts;
(function (SpecialAbilityToRechargeContexts) {
    SpecialAbilityToRechargeContexts.KEY = new CollectionKey("special_ability_to_recharge_contexts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._specialAbility = values["special_ability"];
            this._rechargeContext = values["recharge_context"];
        }
        get specialAbility() {
            const collection = this.collectionCache.getCollection(UnitSpecialAbilities$1.KEY, UnitSpecialAbilities$1.Entry);
            return collection.find(entry => entry._key === this._specialAbility);
        }
        get rechargeContext() {
            const collection = this.collectionCache.getCollection(SpecialAbilityInvalidUsageFlags$1.KEY, SpecialAbilityInvalidUsageFlags$1.Entry);
            return collection.find(entry => entry.flagKey === this._rechargeContext);
        }
    }
    SpecialAbilityToRechargeContexts.Entry = Entry;
})(SpecialAbilityToRechargeContexts || (SpecialAbilityToRechargeContexts = {}));

var SpecialAbilityToSpecialAbilityPhaseJunctions$1;
(function (SpecialAbilityToSpecialAbilityPhaseJunctions) {
    SpecialAbilityToSpecialAbilityPhaseJunctions.KEY = new CollectionKey("special_ability_to_special_ability_phase_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._specialAbility = values["special_ability"];
            this._phase = values["phase"];
            this.order = values["order"];
        }
        get specialAbility() {
            const collection = this.collectionCache.getCollection(UnitSpecialAbilities$1.KEY, UnitSpecialAbilities$1.Entry);
            return collection.find(entry => entry._key === this._specialAbility);
        }
        get phase() {
            const collection = this.collectionCache.getCollection(SpecialAbilityPhases$1.KEY, SpecialAbilityPhases$1.Entry);
            return collection.find(entry => entry.id === this._phase);
        }
    }
    SpecialAbilityToSpecialAbilityPhaseJunctions.Entry = Entry;
})(SpecialAbilityToSpecialAbilityPhaseJunctions$1 || (SpecialAbilityToSpecialAbilityPhaseJunctions$1 = {}));

var StartPosCalendars$1;
(function (StartPosCalendars) {
    StartPosCalendars.KEY = new CollectionKey("start_pos_calendars");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaign = values["campaign"];
            this.startYear = values["start_year"];
            this._startSeason = values["start_season"];
            this.turnsPerYear = values["turns_per_year"];
            this.startWeekOfYear = values["start_week_of_year"];
            this.unique = !!values["unique"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
        get startSeason() {
            const collection = this.collectionCache.getCollection(Seasons$1.KEY, Seasons$1.Entry);
            return collection.find(entry => entry.season === this._startSeason);
        }
    }
    StartPosCalendars.Entry = Entry;
})(StartPosCalendars$1 || (StartPosCalendars$1 = {}));

var StartPosFactions$1;
(function (StartPosFactions) {
    StartPosFactions.KEY = new CollectionKey("start_pos_factions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["ID"];
            this._faction = values["faction"];
            this._campaign = values["campaign"];
            this.playable = !!values["playable"];
            this.treasury = values["treasury"];
            this.startingOrder = values["starting_order"];
            this._governmentType = values["government_type"];
            this._stateReligion = values["state_religion"];
            this.isMajor = !!values["is_major"];
            this.description = values["description"];
            this._aiManager = values["ai_manager"];
            this.prestigeArmy = values["prestige_army"];
            this.prestigeNavy = values["prestige_navy"];
            this.prestigeEconomy = values["prestige_economy"];
            this.prestigeEnlightenment = values["prestige_enlightenment"];
            this.honour = values["honour"];
            this._caiStartingPersonality = values["cai_starting_personality"];
            this.longDescription = values["long_description"];
            this.canEverConvertReligion = !!values["can_ever_convert_religion"];
            this._cdirMilitaryGeneratorConfig = values["cdir_military_generator_config"];
            this.unique = !!values["unique"];
            this._caiPersonalityGroup = values["cai_personality_group"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(StartPosCalendars$1.KEY, StartPosCalendars$1.Entry);
            return collection.find(entry => entry._campaign === this._campaign);
        }
        get governmentType() {
            const collection = this.collectionCache.getCollection(GovernmentTypes$1.KEY, GovernmentTypes$1.Entry);
            return collection.find(entry => entry.governmentType === this._governmentType);
        }
        get stateReligion() {
            const collection = this.collectionCache.getCollection(Religions$1.KEY, Religions$1.Entry);
            return collection.find(entry => entry.religionKey === this._stateReligion);
        }
        get aiManager() {
            const collection = this.collectionCache.getCollection(CampaignAiManagers$1.KEY, CampaignAiManagers$1.Entry);
            return collection.find(entry => entry.manager === this._aiManager);
        }
        get caiStartingPersonality() {
            const collection = this.collectionCache.getCollection(CaiPersonalities$1.KEY, CaiPersonalities$1.Entry);
            return collection.find(entry => entry.key === this._caiStartingPersonality);
        }
        get cdirMilitaryGeneratorConfig() {
            const collection = this.collectionCache.getCollection(CdirMilitaryGeneratorConfigs$1.KEY, CdirMilitaryGeneratorConfigs$1.Entry);
            return collection.find(entry => entry.key === this._cdirMilitaryGeneratorConfig);
        }
        get caiPersonalityGroup() {
            const collection = this.collectionCache.getCollection(CaiPersonalityGroups.KEY, CaiPersonalityGroups.Entry);
            return collection.find(entry => entry.key === this._caiPersonalityGroup);
        }
    }
    StartPosFactions.Entry = Entry;
})(StartPosFactions$1 || (StartPosFactions$1 = {}));

var StartPosCharacters$1;
(function (StartPosCharacters) {
    StartPosCharacters.KEY = new CollectionKey("start_pos_characters");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["ID"];
            this._faction = values["faction"];
            this._name = values["Name"];
            this._surname = values["Surname"];
            this.age = values["Age"];
            this._type = values["Type"];
            this.startx = values["startx"];
            this.starty = values["starty"];
            this._ministerialPosition = values["ministerial_position"];
            this._portraitId = values["portrait_id"];
            this.model = values["model"];
            this.immortal = !!values["immortal"];
            this._overrideGeneralUnit = values["override_general_unit"];
            this.isInGeneralsPool = !!values["is_in_generals_pool"];
            this.isMale = !!values["is_male"];
            this.loyalty = values["loyalty"];
            this._clanName = values["clan_name"];
            this._otherName = values["other_name"];
            this.ambition = values["ambition"];
            this.unique = !!values["unique"];
            this._deathType = values["death_type"];
            this.turnsDiedBeforeStart = values["turns_died_before_start"];
            this.legacyOverride = values["legacy_override"];
            this.progenitor = !!values["progenitor"];
            this._subtype = values["subtype"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(StartPosFactions$1.KEY, StartPosFactions$1.Entry);
            return collection.find(entry => entry.id === this._faction);
        }
        get name() {
            const collection = this.collectionCache.getCollection(Names$1.KEY, Names$1.Entry);
            return collection.find(entry => entry.id === this._name);
        }
        get surname() {
            const collection = this.collectionCache.getCollection(Names$1.KEY, Names$1.Entry);
            return collection.find(entry => entry.id === this._surname);
        }
        get type() {
            const collection = this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry);
            return collection.find(entry => entry.key === this._type);
        }
        get ministerialPosition() {
            const collection = this.collectionCache.getCollection(MinisterialPositions$1.KEY, MinisterialPositions$1.Entry);
            return collection.find(entry => entry.ministerKey === this._ministerialPosition);
        }
        get portraitId() {
            const collection = this.collectionCache.getCollection(CampaignCharacterArtSets$1.KEY, CampaignCharacterArtSets$1.Entry);
            return collection.find(entry => entry.artSetId === this._portraitId);
        }
        get overrideGeneralUnit() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._overrideGeneralUnit);
        }
        get clanName() {
            const collection = this.collectionCache.getCollection(Names$1.KEY, Names$1.Entry);
            return collection.find(entry => entry.id === this._clanName);
        }
        get otherName() {
            const collection = this.collectionCache.getCollection(Names$1.KEY, Names$1.Entry);
            return collection.find(entry => entry.id === this._otherName);
        }
        get deathType() {
            const collection = this.collectionCache.getCollection(DeathTypes$1.KEY, DeathTypes$1.Entry);
            return collection.find(entry => entry.key === this._deathType);
        }
        get subtype() {
            const collection = this.collectionCache.getCollection(AgentSubtypes.KEY, AgentSubtypes.Entry);
            return collection.find(entry => entry.key === this._subtype);
        }
    }
    StartPosCharacters.Entry = Entry;
})(StartPosCharacters$1 || (StartPosCharacters$1 = {}));

var StartPosCharacterAncillaries$1;
(function (StartPosCharacterAncillaries) {
    StartPosCharacterAncillaries.KEY = new CollectionKey("start_pos_character_ancillaries");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._characterId = values["character_id"];
            this._ancillary = values["ancillary"];
            this.unique = !!values["unique"];
        }
        get characterId() {
            const collection = this.collectionCache.getCollection(StartPosCharacters$1.KEY, StartPosCharacters$1.Entry);
            return collection.find(entry => entry.id === this._characterId);
        }
        get ancillary() {
            const collection = this.collectionCache.getCollection(AncillaryInfo$1.KEY, AncillaryInfo$1.Entry);
            return collection.find(entry => entry.ancillary === this._ancillary);
        }
    }
    StartPosCharacterAncillaries.Entry = Entry;
})(StartPosCharacterAncillaries$1 || (StartPosCharacterAncillaries$1 = {}));

var StartPosRegions$1;
(function (StartPosRegions) {
    StartPosRegions.KEY = new CollectionKey("start_pos_regions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._region = values["region"];
            this._campaign = values["campaign"];
            this._owningFaction = values["owning_faction"];
            this.factionCapital = !!values["faction_capital"];
            this.basePopulation = values["base_population"];
            this.baseMaxPopulation = values["base_max_population"];
            this.population = values["population"];
            this.baseGdp = values["base_gdp"];
            this.townWealth = values["town_wealth"];
            this._culturalOriginator = values["cultural_originator"];
            this._rebelFaction = values["rebel_faction"];
            this.rebelFactionName = values["rebel_faction_name"];
            this._alternativeRebelFaction = values["alternative_rebel_faction"];
            this.settlerRebellionsEnabled = !!values["settler_rebellions_enabled"];
            this.capturePrestige = values["capture_prestige"];
            this.longDescription = values["long_description"];
            this.developmentPoints = values["development_points"];
            this.unique = !!values["unique"];
            this.baseFertility = values["base_fertility"];
            this.slotCap = values["slot_cap"];
        }
        get region() {
            const collection = this.collectionCache.getCollection(Regions$1.KEY, Regions$1.Entry);
            return collection.find(entry => entry.key === this._region);
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
        get owningFaction() {
            const collection = this.collectionCache.getCollection(StartPosFactions$1.KEY, StartPosFactions$1.Entry);
            return collection.find(entry => entry.id === this._owningFaction);
        }
        get culturalOriginator() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._culturalOriginator);
        }
        get rebelFaction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._rebelFaction);
        }
        get alternativeRebelFaction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._alternativeRebelFaction);
        }
    }
    StartPosRegions.Entry = Entry;
})(StartPosRegions$1 || (StartPosRegions$1 = {}));

var StartPosSettlements$1;
(function (StartPosSettlements) {
    StartPosSettlements.KEY = new CollectionKey("start_pos_settlements");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._settlementId = values["settlement_id"];
            this._region = values["region"];
            this._building1 = values["building1"];
            this._building2 = values["building2"];
            this._building3 = values["building3"];
            this._building4 = values["building4"];
            this._building5 = values["building5"];
            this.wealth = values["wealth"];
            this.onscreenName = values["onscreen_name"];
            this.id = values["id"];
            this._primaryBuilding = values["primary_building"];
            this._portBuilding = values["port_building"];
            this.startposSlavePoints = values["startpos_slave_points"];
            this.unique = !!values["unique"];
            this._primaryDisplayBuilding = values["primary_display_building"];
        }
        get settlementId() {
            const collection = this.collectionCache.getCollection(CampaignMapSettlements$1.KEY, CampaignMapSettlements$1.Entry);
            return collection.find(entry => entry.settlementId === this._settlementId);
        }
        get region() {
            const collection = this.collectionCache.getCollection(StartPosRegions$1.KEY, StartPosRegions$1.Entry);
            return collection.find(entry => entry.id === this._region);
        }
        get building1() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._building1);
        }
        get building2() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._building2);
        }
        get building3() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._building3);
        }
        get building4() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._building4);
        }
        get building5() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._building5);
        }
        get primaryBuilding() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._primaryBuilding);
        }
        get portBuilding() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._portBuilding);
        }
        get primaryDisplayBuilding() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._primaryDisplayBuilding);
        }
    }
    StartPosSettlements.Entry = Entry;
})(StartPosSettlements$1 || (StartPosSettlements$1 = {}));

var StartPosCharacterToSettlements$1;
(function (StartPosCharacterToSettlements) {
    StartPosCharacterToSettlements.KEY = new CollectionKey("start_pos_character_to_settlements");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._character = values["character"];
            this._settlement = values["settlement"];
            this.unique = !!values["unique"];
        }
        get character() {
            const collection = this.collectionCache.getCollection(StartPosCharacters$1.KEY, StartPosCharacters$1.Entry);
            return collection.find(entry => entry.id === this._character);
        }
        get settlement() {
            const collection = this.collectionCache.getCollection(StartPosSettlements$1.KEY, StartPosSettlements$1.Entry);
            return collection.find(entry => entry.id === this._settlement);
        }
    }
    StartPosCharacterToSettlements.Entry = Entry;
})(StartPosCharacterToSettlements$1 || (StartPosCharacterToSettlements$1 = {}));

var StartPosCharacterTraits$1;
(function (StartPosCharacterTraits) {
    StartPosCharacterTraits.KEY = new CollectionKey("start_pos_character_traits");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._characterId = values["character_id"];
            this._traitLevel = values["trait_level"];
            this.unique = !!values["unique"];
        }
        get characterId() {
            const collection = this.collectionCache.getCollection(StartPosCharacters$1.KEY, StartPosCharacters$1.Entry);
            return collection.find(entry => entry.id === this._characterId);
        }
        get traitLevel() {
            const collection = this.collectionCache.getCollection(CharacterTraitLevels$1.KEY, CharacterTraitLevels$1.Entry);
            return collection.find(entry => entry.key === this._traitLevel);
        }
    }
    StartPosCharacterTraits.Entry = Entry;
})(StartPosCharacterTraits$1 || (StartPosCharacterTraits$1 = {}));

var StartPosDiplomacy$1;
(function (StartPosDiplomacy) {
    StartPosDiplomacy.KEY = new CollectionKey("start_pos_diplomacy");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._faction1 = values["faction1"];
            this._faction2 = values["faction2"];
            this._stance = values["stance"];
            this.grantsMilitaryAccess = !!values["grants_military_access"];
            this.grantsTradeAgreement = !!values["grants_trade_agreement"];
            this.relationsModifier = values["relations_modifier"];
            this.nonAggressionPact = !!values["non_aggression_pact"];
            this.unique = !!values["unique"];
        }
        get faction1() {
            const collection = this.collectionCache.getCollection(StartPosFactions$1.KEY, StartPosFactions$1.Entry);
            return collection.find(entry => entry.id === this._faction1);
        }
        get faction2() {
            const collection = this.collectionCache.getCollection(StartPosFactions$1.KEY, StartPosFactions$1.Entry);
            return collection.find(entry => entry.id === this._faction2);
        }
    }
    StartPosDiplomacy.Entry = Entry;
})(StartPosDiplomacy$1 || (StartPosDiplomacy$1 = {}));

var StartPosDiplomacyDealActions;
(function (StartPosDiplomacyDealActions) {
    StartPosDiplomacyDealActions.KEY = new CollectionKey("start_pos_diplomacy_deal_actions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
        }
    }
    StartPosDiplomacyDealActions.Entry = Entry;
})(StartPosDiplomacyDealActions || (StartPosDiplomacyDealActions = {}));

var StartPosDiplomacyDeals;
(function (StartPosDiplomacyDeals) {
    StartPosDiplomacyDeals.KEY = new CollectionKey("start_pos_diplomacy_deals");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._instigator = values["instigator"];
            this._recipient = values["recipient"];
            this.expiresOnRound = values["expires_on_round"];
            this._onExpiryInstigatorWill = values["on_expiry_instigator_will"];
            this._onExpiryRecipientWill = values["on_expiry_recipient_will"];
            this._onInstigatorCancelInstigatorWill = values["on_instigator_cancel_instigator_will"];
            this._onInstigatorCancelRecipientWill = values["on_instigator_cancel_recipient_will"];
            this._onRecipientCancelInstigatorWill = values["on_recipient_cancel_instigator_will"];
            this._onRecipientCancelRecipientWill = values["on_recipient_cancel_recipient_will"];
        }
        get instigator() {
            const collection = this.collectionCache.getCollection(StartPosFactions$1.KEY, StartPosFactions$1.Entry);
            return collection.find(entry => entry.id === this._instigator);
        }
        get recipient() {
            const collection = this.collectionCache.getCollection(StartPosFactions$1.KEY, StartPosFactions$1.Entry);
            return collection.find(entry => entry.id === this._recipient);
        }
        get onExpiryInstigatorWill() {
            const collection = this.collectionCache.getCollection(StartPosDiplomacyDealActions.KEY, StartPosDiplomacyDealActions.Entry);
            return collection.find(entry => entry.id === this._onExpiryInstigatorWill);
        }
        get onExpiryRecipientWill() {
            const collection = this.collectionCache.getCollection(StartPosDiplomacyDealActions.KEY, StartPosDiplomacyDealActions.Entry);
            return collection.find(entry => entry.id === this._onExpiryRecipientWill);
        }
        get onInstigatorCancelInstigatorWill() {
            const collection = this.collectionCache.getCollection(StartPosDiplomacyDealActions.KEY, StartPosDiplomacyDealActions.Entry);
            return collection.find(entry => entry.id === this._onInstigatorCancelInstigatorWill);
        }
        get onInstigatorCancelRecipientWill() {
            const collection = this.collectionCache.getCollection(StartPosDiplomacyDealActions.KEY, StartPosDiplomacyDealActions.Entry);
            return collection.find(entry => entry.id === this._onInstigatorCancelRecipientWill);
        }
        get onRecipientCancelInstigatorWill() {
            const collection = this.collectionCache.getCollection(StartPosDiplomacyDealActions.KEY, StartPosDiplomacyDealActions.Entry);
            return collection.find(entry => entry.id === this._onRecipientCancelInstigatorWill);
        }
        get onRecipientCancelRecipientWill() {
            const collection = this.collectionCache.getCollection(StartPosDiplomacyDealActions.KEY, StartPosDiplomacyDealActions.Entry);
            return collection.find(entry => entry.id === this._onRecipientCancelRecipientWill);
        }
    }
    StartPosDiplomacyDeals.Entry = Entry;
})(StartPosDiplomacyDeals || (StartPosDiplomacyDeals = {}));

var StartPosDiplomacyDetails;
(function (StartPosDiplomacyDetails) {
    StartPosDiplomacyDetails.KEY = new CollectionKey("start_pos_diplomacy_details");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
        }
    }
    StartPosDiplomacyDetails.Entry = Entry;
})(StartPosDiplomacyDetails || (StartPosDiplomacyDetails = {}));

var StartPosDiplomacyDealComponents;
(function (StartPosDiplomacyDealComponents) {
    StartPosDiplomacyDealComponents.KEY = new CollectionKey("start_pos_diplomacy_deal_components");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._deal = values["deal"];
            this._component = values["component"];
            this._details = values["details"];
        }
        get deal() {
            const collection = this.collectionCache.getCollection(StartPosDiplomacyDeals.KEY, StartPosDiplomacyDeals.Entry);
            return collection.find(entry => entry.id === this._deal);
        }
        get component() {
            const collection = this.collectionCache.getCollection(DiplomacyComponents.KEY, DiplomacyComponents.Entry);
            return collection.find(entry => entry.component === this._component);
        }
        get details() {
            const collection = this.collectionCache.getCollection(StartPosDiplomacyDetails.KEY, StartPosDiplomacyDetails.Entry);
            return collection.find(entry => entry.id === this._details);
        }
    }
    StartPosDiplomacyDealComponents.Entry = Entry;
})(StartPosDiplomacyDealComponents || (StartPosDiplomacyDealComponents = {}));

var StartPosFactionEffectBundles$1;
(function (StartPosFactionEffectBundles) {
    StartPosFactionEffectBundles.KEY = new CollectionKey("start_pos_faction_effect_bundles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._startPosFaction = values["start_pos_faction"];
            this._effectBundle = values["effect_bundle"];
            this.duration = values["duration"];
            this.unique = !!values["unique"];
        }
        get startPosFaction() {
            const collection = this.collectionCache.getCollection(StartPosFactions$1.KEY, StartPosFactions$1.Entry);
            return collection.find(entry => entry.id === this._startPosFaction);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    StartPosFactionEffectBundles.Entry = Entry;
})(StartPosFactionEffectBundles$1 || (StartPosFactionEffectBundles$1 = {}));

var StartPosFamilyRelationships$1;
(function (StartPosFamilyRelationships) {
    StartPosFamilyRelationships.KEY = new CollectionKey("start_pos_family_relationships");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._character = values["character"];
            this._relatedTo = values["related_to"];
            this._relationship = values["relationship"];
            this.unique = !!values["unique"];
            this.bastard = !!values["bastard"];
            this.adopted = !!values["adopted"];
        }
        get character() {
            const collection = this.collectionCache.getCollection(StartPosCharacters$1.KEY, StartPosCharacters$1.Entry);
            return collection.find(entry => entry.id === this._character);
        }
        get relatedTo() {
            const collection = this.collectionCache.getCollection(StartPosCharacters$1.KEY, StartPosCharacters$1.Entry);
            return collection.find(entry => entry.id === this._relatedTo);
        }
        get relationship() {
            const collection = this.collectionCache.getCollection(FamilyRelationshipTypes$1.KEY, FamilyRelationshipTypes$1.Entry);
            return collection.find(entry => entry.relationshipType === this._relationship);
        }
    }
    StartPosFamilyRelationships.Entry = Entry;
})(StartPosFamilyRelationships$1 || (StartPosFamilyRelationships$1 = {}));

var StartPosHordeDetails;
(function (StartPosHordeDetails) {
    StartPosHordeDetails.KEY = new CollectionKey("start_pos_horde_details");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._general = values["general"];
            this.startingDevPoints = values["starting_dev_points"];
            this._primaryBuilding = values["primary_building"];
            this._secondaryBuilding1 = values["secondary_building_1"];
            this._secondaryBuilding2 = values["secondary_building_2"];
            this._secondaryBuilding3 = values["secondary_building_3"];
            this._secondaryBuilding4 = values["secondary_building_4"];
            this._secondaryBuilding5 = values["secondary_building_5"];
            this._secondaryBuilding6 = values["secondary_building_6"];
            this._secondaryBuilding7 = values["secondary_building_7"];
            this._secondaryBuilding8 = values["secondary_building_8"];
            this._secondaryBuilding9 = values["secondary_building_9"];
            this._secondaryBuilding10 = values["secondary_building_10"];
        }
        get general() {
            const collection = this.collectionCache.getCollection(StartPosCharacters$1.KEY, StartPosCharacters$1.Entry);
            return collection.find(entry => entry.id === this._general);
        }
        get primaryBuilding() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._primaryBuilding);
        }
        get secondaryBuilding1() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._secondaryBuilding1);
        }
        get secondaryBuilding2() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._secondaryBuilding2);
        }
        get secondaryBuilding3() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._secondaryBuilding3);
        }
        get secondaryBuilding4() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._secondaryBuilding4);
        }
        get secondaryBuilding5() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._secondaryBuilding5);
        }
        get secondaryBuilding6() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._secondaryBuilding6);
        }
        get secondaryBuilding7() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._secondaryBuilding7);
        }
        get secondaryBuilding8() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._secondaryBuilding8);
        }
        get secondaryBuilding9() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._secondaryBuilding9);
        }
        get secondaryBuilding10() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._secondaryBuilding10);
        }
    }
    StartPosHordeDetails.Entry = Entry;
})(StartPosHordeDetails || (StartPosHordeDetails = {}));

var StartPosLandUnits$1;
(function (StartPosLandUnits) {
    StartPosLandUnits.KEY = new CollectionKey("start_pos_land_units");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._unitType = values["unit_type"];
            this._general = values["general"];
            this.soldiers = values["soldiers"];
            this.unique = !!values["unique"];
        }
        get unitType() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unitType);
        }
        get general() {
            const collection = this.collectionCache.getCollection(StartPosCharacters$1.KEY, StartPosCharacters$1.Entry);
            return collection.find(entry => entry.id === this._general);
        }
    }
    StartPosLandUnits.Entry = Entry;
})(StartPosLandUnits$1 || (StartPosLandUnits$1 = {}));

var StartPosNavalUnits$1;
(function (StartPosNavalUnits) {
    StartPosNavalUnits.KEY = new CollectionKey("start_pos_naval_units");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["ID"];
            this._unitType = values["unit_type"];
            this._admiral = values["admiral"];
            this.unique = !!values["unique"];
        }
        get unitType() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unitType);
        }
        get admiral() {
            const collection = this.collectionCache.getCollection(StartPosCharacters$1.KEY, StartPosCharacters$1.Entry);
            return collection.find(entry => entry.id === this._admiral);
        }
    }
    StartPosNavalUnits.Entry = Entry;
})(StartPosNavalUnits$1 || (StartPosNavalUnits$1 = {}));

var StartPosPastEvents$1;
(function (StartPosPastEvents) {
    StartPosPastEvents.KEY = new CollectionKey("start_pos_past_events");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._source = values["source"];
            this._target = values["target"];
            this._event = values["event"];
            this.turnsAgo = values["turns_ago"];
            this.unique = !!values["unique"];
        }
        get source() {
            const collection = this.collectionCache.getCollection(StartPosFactions$1.KEY, StartPosFactions$1.Entry);
            return collection.find(entry => entry.id === this._source);
        }
        get target() {
            const collection = this.collectionCache.getCollection(StartPosFactions$1.KEY, StartPosFactions$1.Entry);
            return collection.find(entry => entry.id === this._target);
        }
        get event() {
            const collection = this.collectionCache.getCollection(CaiPersonalityDiplomaticEvents$1.KEY, CaiPersonalityDiplomaticEvents$1.Entry);
            return collection.find(entry => entry.id === this._event);
        }
    }
    StartPosPastEvents.Entry = Entry;
})(StartPosPastEvents$1 || (StartPosPastEvents$1 = {}));

var StartPosRegionsToUnitResources$1;
(function (StartPosRegionsToUnitResources) {
    StartPosRegionsToUnitResources.KEY = new CollectionKey("start_pos_regions_to_unit_resources");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this._resource = values["resource"];
            this.unique = !!values["unique"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(StartPosRegions$1.KEY, StartPosRegions$1.Entry);
            return collection.find(entry => entry.id === this._key);
        }
        get resource() {
            const collection = this.collectionCache.getCollection(RegionUnitResources$1.KEY, RegionUnitResources$1.Entry);
            return collection.find(entry => entry.key === this._resource);
        }
    }
    StartPosRegionsToUnitResources.Entry = Entry;
})(StartPosRegionsToUnitResources$1 || (StartPosRegionsToUnitResources$1 = {}));

var StartPosRegionForeignSlots;
(function (StartPosRegionForeignSlots) {
    StartPosRegionForeignSlots.KEY = new CollectionKey("start_pos_region_foreign_slots");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._campaign = values["campaign"];
            this._faction = values["faction"];
            this._region = values["region"];
            this._slotSet = values["slot_set"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get region() {
            const collection = this.collectionCache.getCollection(Regions$1.KEY, Regions$1.Entry);
            return collection.find(entry => entry.key === this._region);
        }
        get slotSet() {
            const collection = this.collectionCache.getCollection(SlotSets.KEY, SlotSets.Entry);
            return collection.find(entry => entry.key === this._slotSet);
        }
    }
    StartPosRegionForeignSlots.Entry = Entry;
})(StartPosRegionForeignSlots || (StartPosRegionForeignSlots = {}));

var StartPosRegionReligions$1;
(function (StartPosRegionReligions) {
    StartPosRegionReligions.KEY = new CollectionKey("start_pos_region_religions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._region = values["region"];
            this._religion = values["religion"];
            this.percentage = values["percentage"];
            this.unique = !!values["unique"];
        }
        get region() {
            const collection = this.collectionCache.getCollection(StartPosRegions$1.KEY, StartPosRegions$1.Entry);
            return collection.find(entry => entry.id === this._region);
        }
        get religion() {
            const collection = this.collectionCache.getCollection(Religions$1.KEY, Religions$1.Entry);
            return collection.find(entry => entry.religionKey === this._religion);
        }
    }
    StartPosRegionReligions.Entry = Entry;
})(StartPosRegionReligions$1 || (StartPosRegionReligions$1 = {}));

var StartPosRegionSlotSets;
(function (StartPosRegionSlotSets) {
    StartPosRegionSlotSets.KEY = new CollectionKey("start_pos_region_slot_sets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    StartPosRegionSlotSets.Entry = Entry;
})(StartPosRegionSlotSets || (StartPosRegionSlotSets = {}));

var StartPosRegionSlotSetItems;
(function (StartPosRegionSlotSetItems) {
    StartPosRegionSlotSetItems.KEY = new CollectionKey("start_pos_region_slot_set_items");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._startPosRegionSlotSet = values["start_pos_region_slot_set"];
            this._slotType = values["slot_type"];
            this._slotTemplate = values["slot_template"];
            this._buildingLevel = values["building_level"];
        }
        get startPosRegionSlotSet() {
            const collection = this.collectionCache.getCollection(StartPosRegionSlotSets.KEY, StartPosRegionSlotSets.Entry);
            return collection.find(entry => entry.key === this._startPosRegionSlotSet);
        }
        get slotType() {
            const collection = this.collectionCache.getCollection(SlotTypes$1.KEY, SlotTypes$1.Entry);
            return collection.find(entry => entry.key === this._slotType);
        }
        get slotTemplate() {
            const collection = this.collectionCache.getCollection(SlotTemplates$1.KEY, SlotTemplates$1.Entry);
            return collection.find(entry => entry.key === this._slotTemplate);
        }
        get buildingLevel() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._buildingLevel);
        }
    }
    StartPosRegionSlotSetItems.Entry = Entry;
})(StartPosRegionSlotSetItems || (StartPosRegionSlotSetItems = {}));

var StartPosRegionSlotTemplates$1;
(function (StartPosRegionSlotTemplates) {
    StartPosRegionSlotTemplates.KEY = new CollectionKey("start_pos_region_slot_templates");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._campaign = values["campaign"];
            this._region = values["region"];
            this._slotType = values["slot_type"];
            this._slotTemplate = values["slot_template"];
            this.unique = !!values["unique"];
        }
        get campaign() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaign);
        }
        get region() {
            const collection = this.collectionCache.getCollection(Regions$1.KEY, Regions$1.Entry);
            return collection.find(entry => entry.key === this._region);
        }
        get slotType() {
            const collection = this.collectionCache.getCollection(SlotTypes$1.KEY, SlotTypes$1.Entry);
            return collection.find(entry => entry.key === this._slotType);
        }
        get slotTemplate() {
            const collection = this.collectionCache.getCollection(SlotTemplates$1.KEY, SlotTemplates$1.Entry);
            return collection.find(entry => entry.key === this._slotTemplate);
        }
    }
    StartPosRegionSlotTemplates.Entry = Entry;
})(StartPosRegionSlotTemplates$1 || (StartPosRegionSlotTemplates$1 = {}));

var StartPosSettlementGarrisons$1;
(function (StartPosSettlementGarrisons) {
    StartPosSettlementGarrisons.KEY = new CollectionKey("start_pos_settlement_garrisons");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._settlement = values["settlement"];
            this._unit = values["unit"];
            this.soldiers = values["soldiers"];
            this.unique = !!values["unique"];
        }
        get settlement() {
            const collection = this.collectionCache.getCollection(StartPosSettlements$1.KEY, StartPosSettlements$1.Entry);
            return collection.find(entry => entry.id === this._settlement);
        }
        get unit() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
    }
    StartPosSettlementGarrisons.Entry = Entry;
})(StartPosSettlementGarrisons$1 || (StartPosSettlementGarrisons$1 = {}));

var StartPosStartingGeneralOptions;
(function (StartPosStartingGeneralOptions) {
    StartPosStartingGeneralOptions.KEY = new CollectionKey("start_pos_starting_general_options");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._general = values["general"];
            this._replacesGeneral = values["replaces_general"];
            this.turnsLocked = values["turns_locked"];
            this.precedence = values["precedence"];
            this._frontendFactionLeader = values["frontend_faction_leader"];
            this._effectBundle = values["effect_bundle"];
            this.uiTooltipLockReason = values["ui_tooltip_lock_reason"];
        }
        get general() {
            const collection = this.collectionCache.getCollection(StartPosCharacters$1.KEY, StartPosCharacters$1.Entry);
            return collection.find(entry => entry.id === this._general);
        }
        get replacesGeneral() {
            const collection = this.collectionCache.getCollection(StartPosCharacters$1.KEY, StartPosCharacters$1.Entry);
            return collection.find(entry => entry.id === this._replacesGeneral);
        }
        get frontendFactionLeader() {
            const collection = this.collectionCache.getCollection(FrontendFactionLeaders$1.KEY, FrontendFactionLeaders$1.Entry);
            return collection.find(entry => entry.key === this._frontendFactionLeader);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    StartPosStartingGeneralOptions.Entry = Entry;
})(StartPosStartingGeneralOptions || (StartPosStartingGeneralOptions = {}));

var StartPosStartingGeneralOptionAdditionalUnits;
(function (StartPosStartingGeneralOptionAdditionalUnits) {
    StartPosStartingGeneralOptionAdditionalUnits.KEY = new CollectionKey("start_pos_starting_general_option_additional_units");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._general = values["general"];
            this._unit = values["unit"];
            this.percentSoldiers = values["percent_soldiers"];
        }
        get general() {
            const collection = this.collectionCache.getCollection(StartPosStartingGeneralOptions.KEY, StartPosStartingGeneralOptions.Entry);
            return collection.find(entry => entry.id === this._general);
        }
        get unit() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
    }
    StartPosStartingGeneralOptionAdditionalUnits.Entry = Entry;
})(StartPosStartingGeneralOptionAdditionalUnits || (StartPosStartingGeneralOptionAdditionalUnits = {}));

var StartPosTechnologies$1;
(function (StartPosTechnologies) {
    StartPosTechnologies.KEY = new CollectionKey("start_pos_technologies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._faction = values["faction"];
            this._technology = values["technology"];
            this.unique = !!values["unique"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(StartPosFactions$1.KEY, StartPosFactions$1.Entry);
            return collection.find(entry => entry.id === this._faction);
        }
        get technology() {
            const collection = this.collectionCache.getCollection(Technologies$1.KEY, Technologies$1.Entry);
            return collection.find(entry => entry.key === this._technology);
        }
    }
    StartPosTechnologies.Entry = Entry;
})(StartPosTechnologies$1 || (StartPosTechnologies$1 = {}));

var VictoryTypes$1;
(function (VictoryTypes) {
    VictoryTypes.KEY = new CollectionKey("victory_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.victoryType = values["victory_type"];
            this.displayName = values["display_name"];
            this.treeY = values["tree_y"];
            this.treeX = values["tree_x"];
            this.icon = values["icon"];
            this.lengthType = values["length_type"];
        }
    }
    VictoryTypes.Entry = Entry;
})(VictoryTypes$1 || (VictoryTypes$1 = {}));

var StartPosVictoryConditions$1;
(function (StartPosVictoryConditions) {
    StartPosVictoryConditions.KEY = new CollectionKey("start_pos_victory_conditions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._startPosFaction = values["start_pos_faction"];
            this._region = values["region"];
            this._victoryType = values["victory_type"];
            this.unique = !!values["unique"];
        }
        get startPosFaction() {
            const collection = this.collectionCache.getCollection(StartPosFactions$1.KEY, StartPosFactions$1.Entry);
            return collection.find(entry => entry.id === this._startPosFaction);
        }
        get region() {
            const collection = this.collectionCache.getCollection(Regions$1.KEY, Regions$1.Entry);
            return collection.find(entry => entry.key === this._region);
        }
        get victoryType() {
            const collection = this.collectionCache.getCollection(VictoryTypes$1.KEY, VictoryTypes$1.Entry);
            return collection.find(entry => entry.victoryType === this._victoryType);
        }
    }
    StartPosVictoryConditions.Entry = Entry;
})(StartPosVictoryConditions$1 || (StartPosVictoryConditions$1 = {}));

var Stats$1;
(function (Stats) {
    Stats.KEY = new CollectionKey("stats");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.public = !!values["public"];
            this._label = values["label"];
            this.ladder = !!values["ladder"];
        }
        get label() {
            const collection = this.collectionCache.getCollection(RandomLocalisationStrings$1.KEY, RandomLocalisationStrings$1.Entry);
            return collection.find(entry => entry.key === this._label);
        }
    }
    Stats.Entry = Entry;
})(Stats$1 || (Stats$1 = {}));

var SubcultureSettlementOccupationSuitabilityTypes;
(function (SubcultureSettlementOccupationSuitabilityTypes) {
    SubcultureSettlementOccupationSuitabilityTypes.KEY = new CollectionKey("subculture_settlement_occupation_suitability_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.suitability = values["suitability"];
        }
    }
    SubcultureSettlementOccupationSuitabilityTypes.Entry = Entry;
})(SubcultureSettlementOccupationSuitabilityTypes || (SubcultureSettlementOccupationSuitabilityTypes = {}));

var SubcultureSettlementOccupationEffectBundleSuitabilities;
(function (SubcultureSettlementOccupationEffectBundleSuitabilities) {
    SubcultureSettlementOccupationEffectBundleSuitabilities.KEY = new CollectionKey("subculture_settlement_occupation_effect_bundle_suitabilities");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._effectBundle = values["effect_bundle"];
            this._suitability = values["suitability"];
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
        get suitability() {
            const collection = this.collectionCache.getCollection(SubcultureSettlementOccupationSuitabilityTypes.KEY, SubcultureSettlementOccupationSuitabilityTypes.Entry);
            return collection.find(entry => entry.suitability === this._suitability);
        }
    }
    SubcultureSettlementOccupationEffectBundleSuitabilities.Entry = Entry;
})(SubcultureSettlementOccupationEffectBundleSuitabilities || (SubcultureSettlementOccupationEffectBundleSuitabilities = {}));

var SubcultureTreasureHuntDilemmaCategories;
(function (SubcultureTreasureHuntDilemmaCategories) {
    SubcultureTreasureHuntDilemmaCategories.KEY = new CollectionKey("subculture_treasure_hunt_dilemma_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._subculture = values["subculture"];
            this._category = values["category"];
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
        get category() {
            const collection = this.collectionCache.getCollection(CdirEventsCategories.KEY, CdirEventsCategories.Entry);
            return collection.find(entry => entry.categoryKey === this._category);
        }
    }
    SubcultureTreasureHuntDilemmaCategories.Entry = Entry;
})(SubcultureTreasureHuntDilemmaCategories || (SubcultureTreasureHuntDilemmaCategories = {}));

var TExcLocalisableFields$1;
(function (TExcLocalisableFields) {
    TExcLocalisableFields.KEY = new CollectionKey("TExc_LocalisableFields");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._tableName = values["table_name"];
            this.field = values["field"];
            this.destinationFile = values["destination_file"];
            this.readyForExport = !!values["ready_for_export"];
            this.spreadsheet = values["spreadsheet"];
            this.fieldAsKey = values["field_as_key"];
            this.forVo = !!values["for_vo"];
        }
        get tableName() {
            const collection = this.collectionCache.getCollection(TExcImplementedTables$1.KEY, TExcImplementedTables$1.Entry);
            return collection.find(entry => entry.tableName === this._tableName);
        }
    }
    TExcLocalisableFields.Entry = Entry;
})(TExcLocalisableFields$1 || (TExcLocalisableFields$1 = {}));

var SubtitleTimings$1;
(function (SubtitleTimings) {
    SubtitleTimings.KEY = new CollectionKey("subtitle_timings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._subtitleField = values["subtitle_field"];
            this._language = values["language"];
            this.start = values["start"];
            this.end = values["end"];
            this._scriptId = values["script_id"];
            this.textSection = values["text_section"];
            this.foreignKey = values["foreign_key"];
            this.textId = values["text_id"];
            this.alwaysShow = !!values["always_show"];
        }
        get subtitleField() {
            const collection = this.collectionCache.getCollection(TExcLocalisableFields$1.KEY, TExcLocalisableFields$1.Entry);
            return collection.find(entry => entry.key === this._subtitleField);
        }
        get language() {
            const collection = this.collectionCache.getCollection(Languages$1.KEY, Languages$1.Entry);
            return collection.find(entry => entry.key === this._language);
        }
        get scriptId() {
            const collection = this.collectionCache.getCollection(VoScripts$1.KEY, VoScripts$1.Entry);
            return collection.find(entry => entry.id === this._scriptId);
        }
    }
    SubtitleTimings.Entry = Entry;
})(SubtitleTimings$1 || (SubtitleTimings$1 = {}));

var TaxesClasses$1;
(function (TaxesClasses) {
    TaxesClasses.KEY = new CollectionKey("taxes_classes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.tax = values["tax"];
        }
    }
    TaxesClasses.Entry = Entry;
})(TaxesClasses$1 || (TaxesClasses$1 = {}));

var TaxesKeys$1;
(function (TaxesKeys) {
    TaxesKeys.KEY = new CollectionKey("taxes_keys");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._taxClass = values["tax_class"];
            this._taxLevel = values["tax_level"];
            this.taxLookup = values["tax_lookup"];
        }
        get taxClass() {
            const collection = this.collectionCache.getCollection(TaxesClasses$1.KEY, TaxesClasses$1.Entry);
            return collection.find(entry => entry.tax === this._taxClass);
        }
        get taxLevel() {
            const collection = this.collectionCache.getCollection(TaxesLevels$1.KEY, TaxesLevels$1.Entry);
            return collection.find(entry => entry.taxLevel === this._taxLevel);
        }
    }
    TaxesKeys.Entry = Entry;
})(TaxesKeys$1 || (TaxesKeys$1 = {}));

var TaxesEffectsJct$1;
(function (TaxesEffectsJct) {
    TaxesEffectsJct.KEY = new CollectionKey("taxes_effects_jct");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._taxName = values["tax_name"];
            this._effect = values["effect"];
            this.value = values["value"];
            this._optionalCampaignKey = values["optional_campaign_key"];
            this.optionalDifficultyLevel = values["optional_difficulty_level"];
            this.aiOnly = !!values["ai_only"];
            this._effectScope = values["effect_scope"];
            this._specificFeatureSet = values["specific_feature_set"];
        }
        get taxName() {
            const collection = this.collectionCache.getCollection(TaxesKeys$1.KEY, TaxesKeys$1.Entry);
            return collection.find(entry => entry.taxLookup === this._taxName);
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get optionalCampaignKey() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._optionalCampaignKey);
        }
        get effectScope() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes$1.KEY, CampaignEffectScopes$1.Entry);
            return collection.find(entry => entry.key === this._effectScope);
        }
    }
    TaxesEffectsJct.Entry = Entry;
})(TaxesEffectsJct$1 || (TaxesEffectsJct$1 = {}));

var TechnologyNodeSets$1;
(function (TechnologyNodeSets) {
    TechnologyNodeSets.KEY = new CollectionKey("technology_node_sets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._factionKey = values["faction_key"];
            this._campaignKey = values["campaign_key"];
            this._technologyCategory = values["technology_category"];
            this._culture = values["culture"];
            this._subculture = values["subculture"];
            this.localisedName = values["localised_name"];
            this.tooltipString = values["tooltip_string"];
            this.encyclopaediaString = values["encyclopaedia_string"];
            this.colourR = values["colour_r"];
            this.colourG = values["colour_g"];
            this.colourB = values["colour_b"];
            this._gameExpansionKey = values["game_expansion_key"];
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get campaignKey() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaignKey);
        }
        get technologyCategory() {
            const collection = this.collectionCache.getCollection(TechnologyCategories$1.KEY, TechnologyCategories$1.Entry);
            return collection.find(entry => entry.key === this._technologyCategory);
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
    }
    TechnologyNodeSets.Entry = Entry;
})(TechnologyNodeSets$1 || (TechnologyNodeSets$1 = {}));

var TechnologyCategoryModules$1;
(function (TechnologyCategoryModules) {
    TechnologyCategoryModules.KEY = new CollectionKey("technology_category_modules");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._technologyNodeSet = values["technology_node_set"];
            this.maxTier = values["max_tier"];
            this._effectBundle = values["effect_bundle"];
            this.minTier = values["min_tier"];
        }
        get technologyNodeSet() {
            const collection = this.collectionCache.getCollection(TechnologyNodeSets$1.KEY, TechnologyNodeSets$1.Entry);
            return collection.find(entry => entry.key === this._technologyNodeSet);
        }
        get effectBundle() {
            const collection = this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry);
            return collection.find(entry => entry.key === this._effectBundle);
        }
    }
    TechnologyCategoryModules.Entry = Entry;
})(TechnologyCategoryModules$1 || (TechnologyCategoryModules$1 = {}));

var TechnologyCategoryParents$1;
(function (TechnologyCategoryParents) {
    TechnologyCategoryParents.KEY = new CollectionKey("technology_category_parents");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._parentCategory = values["parent_category"];
            this._childCategory = values["child_category"];
        }
        get parentCategory() {
            const collection = this.collectionCache.getCollection(TechnologyCategories$1.KEY, TechnologyCategories$1.Entry);
            return collection.find(entry => entry.key === this._parentCategory);
        }
        get childCategory() {
            const collection = this.collectionCache.getCollection(TechnologyCategories$1.KEY, TechnologyCategories$1.Entry);
            return collection.find(entry => entry.key === this._childCategory);
        }
    }
    TechnologyCategoryParents.Entry = Entry;
})(TechnologyCategoryParents$1 || (TechnologyCategoryParents$1 = {}));

var TechnologyUiGroups;
(function (TechnologyUiGroups) {
    TechnologyUiGroups.KEY = new CollectionKey("technology_ui_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.colourRed = values["colour_red"];
            this.colourGreen = values["colour_green"];
            this.colourBlue = values["colour_blue"];
            this.optionalDisplayName = values["optional_display_name"];
            this.optionalDisplayDesctiption = values["optional_display_desctiption"];
            this.optionalBackgroundImage = values["optional_background_image"];
        }
    }
    TechnologyUiGroups.Entry = Entry;
})(TechnologyUiGroups || (TechnologyUiGroups = {}));

var TechnologyNodes$1;
(function (TechnologyNodes) {
    TechnologyNodes.KEY = new CollectionKey("technology_nodes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._technologyNodeSet = values["technology_node_set"];
            this._technologyKey = values["technology_key"];
            this._factionKey = values["faction_key"];
            this._campaignKey = values["campaign_key"];
            this.tier = values["tier"];
            this.indent = values["indent"];
            this.researchPointsRequired = values["research_points_required"];
            this.costPerRound = values["cost_per_round"];
            this._optionalUiGroup = values["optional_ui_group"];
            this.foodCost = values["food_cost"];
            this._resourceCost = values["resource_cost"];
        }
        get technologyNodeSet() {
            const collection = this.collectionCache.getCollection(TechnologyNodeSets$1.KEY, TechnologyNodeSets$1.Entry);
            return collection.find(entry => entry.key === this._technologyNodeSet);
        }
        get technologyKey() {
            const collection = this.collectionCache.getCollection(Technologies$1.KEY, Technologies$1.Entry);
            return collection.find(entry => entry.key === this._technologyKey);
        }
        get factionKey() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._factionKey);
        }
        get campaignKey() {
            const collection = this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry);
            return collection.find(entry => entry.campaignName === this._campaignKey);
        }
        get optionalUiGroup() {
            const collection = this.collectionCache.getCollection(TechnologyUiGroups.KEY, TechnologyUiGroups.Entry);
            return collection.find(entry => entry.key === this._optionalUiGroup);
        }
        get resourceCost() {
            const collection = this.collectionCache.getCollection(ResourceCosts.KEY, ResourceCosts.Entry);
            return collection.find(entry => entry.id === this._resourceCost);
        }
    }
    TechnologyNodes.Entry = Entry;
})(TechnologyNodes$1 || (TechnologyNodes$1 = {}));

var TechnologyCharacterTraitsJunctions;
(function (TechnologyCharacterTraitsJunctions) {
    TechnologyCharacterTraitsJunctions.KEY = new CollectionKey("technology_character_traits_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._technologyNode = values["technology_node"];
            this._characterTrait = values["character_trait"];
        }
        get technologyNode() {
            const collection = this.collectionCache.getCollection(TechnologyNodes$1.KEY, TechnologyNodes$1.Entry);
            return collection.find(entry => entry.key === this._technologyNode);
        }
        get characterTrait() {
            const collection = this.collectionCache.getCollection(CharacterTraitLevels$1.KEY, CharacterTraitLevels$1.Entry);
            return collection.find(entry => entry.key === this._characterTrait);
        }
    }
    TechnologyCharacterTraitsJunctions.Entry = Entry;
})(TechnologyCharacterTraitsJunctions || (TechnologyCharacterTraitsJunctions = {}));

var TechnologyEffectsJunction$1;
(function (TechnologyEffectsJunction) {
    TechnologyEffectsJunction.KEY = new CollectionKey("technology_effects_junction");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._technology = values["technology"];
            this._effect = values["effect"];
            this.value = values["value"];
            this._effectScope = values["effect_scope"];
        }
        get technology() {
            const collection = this.collectionCache.getCollection(Technologies$1.KEY, Technologies$1.Entry);
            return collection.find(entry => entry.key === this._technology);
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get effectScope() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes$1.KEY, CampaignEffectScopes$1.Entry);
            return collection.find(entry => entry.key === this._effectScope);
        }
    }
    TechnologyEffectsJunction.Entry = Entry;
})(TechnologyEffectsJunction$1 || (TechnologyEffectsJunction$1 = {}));

var TechnologyNodesToAncillariesJunctions;
(function (TechnologyNodesToAncillariesJunctions) {
    TechnologyNodesToAncillariesJunctions.KEY = new CollectionKey("technology_nodes_to_ancillaries_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._technologyNode = values["technology_node"];
            this._ancillary = values["ancillary"];
        }
        get technologyNode() {
            const collection = this.collectionCache.getCollection(TechnologyNodes$1.KEY, TechnologyNodes$1.Entry);
            return collection.find(entry => entry.key === this._technologyNode);
        }
        get ancillary() {
            const collection = this.collectionCache.getCollection(Ancillaries$1.KEY, Ancillaries$1.Entry);
            return collection.find(entry => entry._key === this._ancillary);
        }
    }
    TechnologyNodesToAncillariesJunctions.Entry = Entry;
})(TechnologyNodesToAncillariesJunctions || (TechnologyNodesToAncillariesJunctions = {}));

var TechnologyNodeLinks$1;
(function (TechnologyNodeLinks) {
    TechnologyNodeLinks.KEY = new CollectionKey("technology_node_links");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._parentKey = values["parent_key"];
            this._childKey = values["child_key"];
            this.initialDescentTiers = values["initial_descent_tiers"];
            this.parentLinkPosition = values["parent_link_position"];
            this.childLinkPosition = values["child_link_position"];
            this.parentLinkPositionOffset = values["parent_link_position_offset"];
            this.childLinkPositionOffset = values["child_link_position_offset"];
        }
        get parentKey() {
            const collection = this.collectionCache.getCollection(TechnologyNodes$1.KEY, TechnologyNodes$1.Entry);
            return collection.find(entry => entry.key === this._parentKey);
        }
        get childKey() {
            const collection = this.collectionCache.getCollection(TechnologyNodes$1.KEY, TechnologyNodes$1.Entry);
            return collection.find(entry => entry.key === this._childKey);
        }
    }
    TechnologyNodeLinks.Entry = Entry;
})(TechnologyNodeLinks$1 || (TechnologyNodeLinks$1 = {}));

var TechnologyRequiredBuildingLevelsJunctions$1;
(function (TechnologyRequiredBuildingLevelsJunctions) {
    TechnologyRequiredBuildingLevelsJunctions.KEY = new CollectionKey("technology_required_building_levels_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._technology = values["technology"];
            this._requiredBuildingLevel = values["required_building_level"];
        }
        get technology() {
            const collection = this.collectionCache.getCollection(Technologies$1.KEY, Technologies$1.Entry);
            return collection.find(entry => entry.key === this._technology);
        }
        get requiredBuildingLevel() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._requiredBuildingLevel);
        }
    }
    TechnologyRequiredBuildingLevelsJunctions.Entry = Entry;
})(TechnologyRequiredBuildingLevelsJunctions$1 || (TechnologyRequiredBuildingLevelsJunctions$1 = {}));

var TechnologyRequiredTechnologyJunctions$1;
(function (TechnologyRequiredTechnologyJunctions) {
    TechnologyRequiredTechnologyJunctions.KEY = new CollectionKey("technology_required_technology_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._technology = values["technology"];
            this._requiredTechnology = values["required_technology"];
        }
        get technology() {
            const collection = this.collectionCache.getCollection(Technologies$1.KEY, Technologies$1.Entry);
            return collection.find(entry => entry.key === this._technology);
        }
        get requiredTechnology() {
            const collection = this.collectionCache.getCollection(Technologies$1.KEY, Technologies$1.Entry);
            return collection.find(entry => entry.key === this._requiredTechnology);
        }
    }
    TechnologyRequiredTechnologyJunctions.Entry = Entry;
})(TechnologyRequiredTechnologyJunctions$1 || (TechnologyRequiredTechnologyJunctions$1 = {}));

var TechnologyUiGroupsToTechnologyNodesJunctions;
(function (TechnologyUiGroupsToTechnologyNodesJunctions) {
    TechnologyUiGroupsToTechnologyNodesJunctions.KEY = new CollectionKey("technology_ui_groups_to_technology_nodes_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._techUiGroup = values["tech_ui_group"];
            this._topLeftNode = values["top_left_node"];
            this._bottomRightNode = values["bottom_right_node"];
            this._optionalTopRightNode = values["optional_top_right_node"];
            this._optionalBottomLeftNode = values["optional_bottom_left_node"];
        }
        get techUiGroup() {
            const collection = this.collectionCache.getCollection(TechnologyUiGroups.KEY, TechnologyUiGroups.Entry);
            return collection.find(entry => entry.key === this._techUiGroup);
        }
        get topLeftNode() {
            const collection = this.collectionCache.getCollection(TechnologyNodes$1.KEY, TechnologyNodes$1.Entry);
            return collection.find(entry => entry.key === this._topLeftNode);
        }
        get bottomRightNode() {
            const collection = this.collectionCache.getCollection(TechnologyNodes$1.KEY, TechnologyNodes$1.Entry);
            return collection.find(entry => entry.key === this._bottomRightNode);
        }
        get optionalTopRightNode() {
            const collection = this.collectionCache.getCollection(TechnologyNodes$1.KEY, TechnologyNodes$1.Entry);
            return collection.find(entry => entry.key === this._optionalTopRightNode);
        }
        get optionalBottomLeftNode() {
            const collection = this.collectionCache.getCollection(TechnologyNodes$1.KEY, TechnologyNodes$1.Entry);
            return collection.find(entry => entry.key === this._optionalBottomLeftNode);
        }
    }
    TechnologyUiGroupsToTechnologyNodesJunctions.Entry = Entry;
})(TechnologyUiGroupsToTechnologyNodesJunctions || (TechnologyUiGroupsToTechnologyNodesJunctions = {}));

var TechnologyUnitUpgrades$1;
(function (TechnologyUnitUpgrades) {
    TechnologyUnitUpgrades.KEY = new CollectionKey("technology_unit_upgrades");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._technology = values["technology"];
            this._unit = values["unit"];
            this._targetUnit = values["target_unit"];
            this.cost = values["cost"];
        }
        get technology() {
            const collection = this.collectionCache.getCollection(Technologies$1.KEY, Technologies$1.Entry);
            return collection.find(entry => entry.key === this._technology);
        }
        get unit() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
        get targetUnit() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._targetUnit);
        }
    }
    TechnologyUnitUpgrades.Entry = Entry;
})(TechnologyUnitUpgrades$1 || (TechnologyUnitUpgrades$1 = {}));

var TExcCampaignMapProcessingExports$1;
(function (TExcCampaignMapProcessingExports) {
    TExcCampaignMapProcessingExports.KEY = new CollectionKey("TExc_campaign_map_processing_exports");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.tableName = values["table_name"];
        }
    }
    TExcCampaignMapProcessingExports.Entry = Entry;
})(TExcCampaignMapProcessingExports$1 || (TExcCampaignMapProcessingExports$1 = {}));

var TexcExpansionDependencies;
(function (TexcExpansionDependencies) {
    TexcExpansionDependencies.KEY = new CollectionKey("texc_expansion_dependencies");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._expansion = values["expansion"];
            this._parent = values["parent"];
        }
        get expansion() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._expansion);
        }
        get parent() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._parent);
        }
    }
    TexcExpansionDependencies.Entry = Entry;
})(TexcExpansionDependencies || (TexcExpansionDependencies = {}));

var TExcMissingConditions$1;
(function (TExcMissingConditions) {
    TExcMissingConditions.KEY = new CollectionKey("TExc_missing_conditions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["ID"];
            this.exportedScript = values["exported_script"];
            this.condition = values["condition"];
        }
    }
    TExcMissingConditions.Entry = Entry;
})(TExcMissingConditions$1 || (TExcMissingConditions$1 = {}));

var TExcPackFiles$1;
(function (TExcPackFiles) {
    TExcPackFiles.KEY = new CollectionKey("TExc_pack_files");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.packFile = values["pack_file"];
            this.notes = values["notes"];
        }
    }
    TExcPackFiles.Entry = Entry;
})(TExcPackFiles$1 || (TExcPackFiles$1 = {}));

var TExcScriptConditions$1;
(function (TExcScriptConditions) {
    TExcScriptConditions.KEY = new CollectionKey("TExc_script_conditions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.condition = values["Condition"];
        }
    }
    TExcScriptConditions.Entry = Entry;
})(TExcScriptConditions$1 || (TExcScriptConditions$1 = {}));

var TExcTableExportCategories$1;
(function (TExcTableExportCategories) {
    TExcTableExportCategories.KEY = new CollectionKey("TExc_TableExportCategories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.category = values["category"];
        }
    }
    TExcTableExportCategories.Entry = Entry;
})(TExcTableExportCategories$1 || (TExcTableExportCategories$1 = {}));

var TExcTableExportGroups$1;
(function (TExcTableExportGroups) {
    TExcTableExportGroups.KEY = new CollectionKey("TExc_TableExportGroups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["ID"];
            this._category = values["category"];
            this._table = values["table"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(TExcTableExportCategories$1.KEY, TExcTableExportCategories$1.Entry);
            return collection.find(entry => entry.category === this._category);
        }
        get table() {
            const collection = this.collectionCache.getCollection(TExcImplementedTables$1.KEY, TExcImplementedTables$1.Entry);
            return collection.find(entry => entry.tableName === this._table);
        }
    }
    TExcTableExportGroups.Entry = Entry;
})(TExcTableExportGroups$1 || (TExcTableExportGroups$1 = {}));

var TExcUnrestCauses$1;
(function (TExcUnrestCauses) {
    TExcUnrestCauses.KEY = new CollectionKey("TExc_unrest_causes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.cause = values["cause"];
        }
    }
    TExcUnrestCauses.Entry = Entry;
})(TExcUnrestCauses$1 || (TExcUnrestCauses$1 = {}));

var TExcUnrestDemands$1;
(function (TExcUnrestDemands) {
    TExcUnrestDemands.KEY = new CollectionKey("TExc_unrest_demands");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.demand = values["demand"];
        }
    }
    TExcUnrestDemands.Entry = Entry;
})(TExcUnrestDemands$1 || (TExcUnrestDemands$1 = {}));

var TradeDisplayTradeModels$1;
(function (TradeDisplayTradeModels) {
    TradeDisplayTradeModels.KEY = new CollectionKey("trade_display_trade_models");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._model = values["model"];
            this._optionalFollowingModel = values["optional_following_model"];
            this.isNaval = !!values["is_naval"];
            this.optionalFollowingModelDistance = values["optional_following_model_distance"];
        }
        get model() {
            const collection = this.collectionCache.getCollection(WarscapeAnimated$1.KEY, WarscapeAnimated$1.Entry);
            return collection.find(entry => entry.key === this._model);
        }
        get optionalFollowingModel() {
            const collection = this.collectionCache.getCollection(WarscapeAnimated$1.KEY, WarscapeAnimated$1.Entry);
            return collection.find(entry => entry.key === this._optionalFollowingModel);
        }
    }
    TradeDisplayTradeModels.Entry = Entry;
})(TradeDisplayTradeModels$1 || (TradeDisplayTradeModels$1 = {}));

var TradeDisplayGroups;
(function (TradeDisplayGroups) {
    TradeDisplayGroups.KEY = new CollectionKey("trade_display_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._group = values["group"];
            this._model = values["model"];
            this.relativeFrequency = values["relative_frequency"];
        }
        get group() {
            const collection = this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry);
            return collection.find(entry => entry.id === this._group);
        }
        get model() {
            const collection = this.collectionCache.getCollection(TradeDisplayTradeModels$1.KEY, TradeDisplayTradeModels$1.Entry);
            return collection.find(entry => entry.key === this._model);
        }
    }
    TradeDisplayGroups.Entry = Entry;
})(TradeDisplayGroups || (TradeDisplayGroups = {}));

var TradeNodeGroups$1;
(function (TradeNodeGroups) {
    TradeNodeGroups.KEY = new CollectionKey("trade_node_groups");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    TradeNodeGroups.Entry = Entry;
})(TradeNodeGroups$1 || (TradeNodeGroups$1 = {}));

var TradeNodes$1;
(function (TradeNodes) {
    TradeNodes.KEY = new CollectionKey("trade_nodes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["ID"];
            this._commodity = values["commodity"];
            this.baseQuantity = values["base_quantity"];
            this.percentageIncreasePerAgent = values["percentage_increase_per_agent"];
            this.maximumPercentageIncrease = values["maximum_percentage_increase"];
            this.displayName = values["display_name"];
            this._group = values["group"];
        }
        get commodity() {
            const collection = this.collectionCache.getCollection(Commodities$1.KEY, Commodities$1.Entry);
            return collection.find(entry => entry._key === this._commodity);
        }
        get group() {
            const collection = this.collectionCache.getCollection(TradeNodeGroups$1.KEY, TradeNodeGroups$1.Entry);
            return collection.find(entry => entry.key === this._group);
        }
    }
    TradeNodes.Entry = Entry;
})(TradeNodes$1 || (TradeNodes$1 = {}));

var TraitLevelEffects$1;
(function (TraitLevelEffects) {
    TraitLevelEffects.KEY = new CollectionKey("trait_level_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._traitLevel = values["trait_level"];
            this._effect = values["effect"];
            this.value = values["value"];
            this._effectScope = values["effect_scope"];
        }
        get traitLevel() {
            const collection = this.collectionCache.getCollection(CharacterTraitLevels$1.KEY, CharacterTraitLevels$1.Entry);
            return collection.find(entry => entry.key === this._traitLevel);
        }
        get effect() {
            const collection = this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry);
            return collection.find(entry => entry.effect === this._effect);
        }
        get effectScope() {
            const collection = this.collectionCache.getCollection(CampaignEffectScopes$1.KEY, CampaignEffectScopes$1.Entry);
            return collection.find(entry => entry.key === this._effectScope);
        }
    }
    TraitLevelEffects.Entry = Entry;
})(TraitLevelEffects$1 || (TraitLevelEffects$1 = {}));

var TraitLevelStringSubcultureOverrides;
(function (TraitLevelStringSubcultureOverrides) {
    TraitLevelStringSubcultureOverrides.KEY = new CollectionKey("trait_level_string_subculture_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._traitLevel = values["trait_level"];
            this._subculture = values["subculture"];
            this.onscreenNameOverride = values["onscreen_name_override"];
            this.colourTextOverride = values["colour_text_override"];
        }
        get traitLevel() {
            const collection = this.collectionCache.getCollection(CharacterTraitLevels$1.KEY, CharacterTraitLevels$1.Entry);
            return collection.find(entry => entry.key === this._traitLevel);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
    }
    TraitLevelStringSubcultureOverrides.Entry = Entry;
})(TraitLevelStringSubcultureOverrides || (TraitLevelStringSubcultureOverrides = {}));

var TraitToAntitraits$1;
(function (TraitToAntitraits) {
    TraitToAntitraits.KEY = new CollectionKey("trait_to_antitraits");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._trait = values["trait"];
            this._antitrait = values["antitrait"];
        }
        get trait() {
            const collection = this.collectionCache.getCollection(TraitInfo$1.KEY, TraitInfo$1.Entry);
            return collection.find(entry => entry.trait === this._trait);
        }
        get antitrait() {
            const collection = this.collectionCache.getCollection(TraitInfo$1.KEY, TraitInfo$1.Entry);
            return collection.find(entry => entry.trait === this._antitrait);
        }
    }
    TraitToAntitraits.Entry = Entry;
})(TraitToAntitraits$1 || (TraitToAntitraits$1 = {}));

var TraitToIncludedAgents$1;
(function (TraitToIncludedAgents) {
    TraitToIncludedAgents.KEY = new CollectionKey("trait_to_included_agents");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._trait = values["trait"];
            this._agent = values["agent"];
        }
        get trait() {
            const collection = this.collectionCache.getCollection(TraitInfo$1.KEY, TraitInfo$1.Entry);
            return collection.find(entry => entry.trait === this._trait);
        }
        get agent() {
            const collection = this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry);
            return collection.find(entry => entry.key === this._agent);
        }
    }
    TraitToIncludedAgents.Entry = Entry;
})(TraitToIncludedAgents$1 || (TraitToIncludedAgents$1 = {}));

var TraitTriggers$1;
(function (TraitTriggers) {
    TraitTriggers.KEY = new CollectionKey("trait_triggers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.trigger = values["trigger"];
            this._event = values["event"];
            this.conditions = values["conditions"];
        }
        get event() {
            const collection = this.collectionCache.getCollection(TriggerEvents$1.KEY, TriggerEvents$1.Entry);
            return collection.find(entry => entry.event === this._event);
        }
    }
    TraitTriggers.Entry = Entry;
})(TraitTriggers$1 || (TraitTriggers$1 = {}));

var TranslatedTexts$1;
(function (TranslatedTexts) {
    TranslatedTexts.KEY = new CollectionKey("translated_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._language = values["language"];
            this.lastEnglishText = values["last_english_text"];
            this.translatedText = values["translated_text"];
            this.requiresTranslation = !!values["requires_translation"];
            this.requiresRecording = !!values["requires_recording"];
        }
        get language() {
            const collection = this.collectionCache.getCollection(Languages$1.KEY, Languages$1.Entry);
            return collection.find(entry => entry.key === this._language);
        }
    }
    TranslatedTexts.Entry = Entry;
})(TranslatedTexts$1 || (TranslatedTexts$1 = {}));

var TreasureHuntExtraInformations;
(function (TreasureHuntExtraInformations) {
    TreasureHuntExtraInformations.KEY = new CollectionKey("treasure_hunt_extra_informations");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._treasureHuntDilemmaKey = values["treasure_hunt_dilemma_key"];
            this.option1Images = values["option_1_images"];
            this.option2Images = values["option_2_images"];
            this.option3Images = values["option_3_images"];
            this.option4Images = values["option_4_images"];
            this.overlayImage = values["overlay_image"];
            this.colorBlindModeOverlay = values["color_blind_mode_overlay"];
        }
        get treasureHuntDilemmaKey() {
            const collection = this.collectionCache.getCollection(Dilemmas$1.KEY, Dilemmas$1.Entry);
            return collection.find(entry => entry.key === this._treasureHuntDilemmaKey);
        }
    }
    TreasureHuntExtraInformations.Entry = Entry;
})(TreasureHuntExtraInformations || (TreasureHuntExtraInformations = {}));

var TriggerEffects$1;
(function (TriggerEffects) {
    TriggerEffects.KEY = new CollectionKey("trigger_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
            this._trigger = values["trigger"];
            this._trait = values["trait"];
            this.value = values["value"];
            this.chance = values["chance"];
            this._gameExpansionKey = values["game_expansion_key"];
        }
        get trigger() {
            const collection = this.collectionCache.getCollection(TraitTriggers$1.KEY, TraitTriggers$1.Entry);
            return collection.find(entry => entry.trigger === this._trigger);
        }
        get trait() {
            const collection = this.collectionCache.getCollection(TraitInfo$1.KEY, TraitInfo$1.Entry);
            return collection.find(entry => entry.trait === this._trait);
        }
        get gameExpansionKey() {
            const collection = this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry);
            return collection.find(entry => entry.expansion === this._gameExpansionKey);
        }
    }
    TriggerEffects.Entry = Entry;
})(TriggerEffects$1 || (TriggerEffects$1 = {}));

var TriggerEventToExcludedAgentTypes$1;
(function (TriggerEventToExcludedAgentTypes) {
    TriggerEventToExcludedAgentTypes.KEY = new CollectionKey("trigger_event_to_excluded_agent_types");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._event = values["event"];
            this._agent = values["agent"];
        }
    }
    TriggerEventToExcludedAgentTypes.Entry = Entry;
})(TriggerEventToExcludedAgentTypes$1 || (TriggerEventToExcludedAgentTypes$1 = {}));

var UiedComponentTexts$1;
(function (UiedComponentTexts) {
    UiedComponentTexts.KEY = new CollectionKey("uied_component_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.componentLabel = values["component_label"];
            this.localisedString = values["localised_string"];
        }
    }
    UiedComponentTexts.Entry = Entry;
})(UiedComponentTexts$1 || (UiedComponentTexts$1 = {}));

var UiedTextLayouts$1;
(function (UiedTextLayouts) {
    UiedTextLayouts.KEY = new CollectionKey("uied_text_layouts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.layoutId = values["layout_id"];
            this.layoutLocation = values["layout_location"];
        }
    }
    UiedTextLayouts.Entry = Entry;
})(UiedTextLayouts$1 || (UiedTextLayouts$1 = {}));

var UiedComponentAddressesToTexts$1;
(function (UiedComponentAddressesToTexts) {
    UiedComponentAddressesToTexts.KEY = new CollectionKey("uied_component_addresses_to_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._componentLabel = values["component_label"];
            this.componentAddress = values["component_address"];
            this._componentLayout = values["component_layout"];
        }
        get componentLabel() {
            const collection = this.collectionCache.getCollection(UiedComponentTexts$1.KEY, UiedComponentTexts$1.Entry);
            return collection.find(entry => entry.componentLabel === this._componentLabel);
        }
        get componentLayout() {
            const collection = this.collectionCache.getCollection(UiedTextLayouts$1.KEY, UiedTextLayouts$1.Entry);
            return collection.find(entry => entry.layoutId === this._componentLayout);
        }
    }
    UiedComponentAddressesToTexts.Entry = Entry;
})(UiedComponentAddressesToTexts$1 || (UiedComponentAddressesToTexts$1 = {}));

var UiColourProfiles;
(function (UiColourProfiles) {
    UiColourProfiles.KEY = new CollectionKey("ui_colour_profiles");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.localisedName = values["localised_name"];
            this.localisedDescription = values["localised_description"];
        }
    }
    UiColourProfiles.Entry = Entry;
})(UiColourProfiles || (UiColourProfiles = {}));

var UiColourProfileColourOverrides;
(function (UiColourProfileColourOverrides) {
    UiColourProfileColourOverrides.KEY = new CollectionKey("ui_colour_profile_colour_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._colourProfile = values["colour_profile"];
            this._colour = values["colour"];
            this.colourR = values["colour_r"];
            this.colourG = values["colour_g"];
            this.colourB = values["colour_b"];
        }
        get colourProfile() {
            const collection = this.collectionCache.getCollection(UiColourProfiles.KEY, UiColourProfiles.Entry);
            return collection.find(entry => entry.key === this._colourProfile);
        }
        get colour() {
            const collection = this.collectionCache.getCollection(UiColours.KEY, UiColours.Entry);
            return collection.find(entry => entry.key === this._colour);
        }
    }
    UiColourProfileColourOverrides.Entry = Entry;
})(UiColourProfileColourOverrides || (UiColourProfileColourOverrides = {}));

var UiComponentLocalisation$1;
(function (UiComponentLocalisation) {
    UiComponentLocalisation.KEY = new CollectionKey("ui_component_localisation");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.componentLabel = values["component_label"];
            this.localisedString = values["localised_string"];
        }
    }
    UiComponentLocalisation.Entry = Entry;
})(UiComponentLocalisation$1 || (UiComponentLocalisation$1 = {}));

var UiComponentAddressesWithLocalisation$1;
(function (UiComponentAddressesWithLocalisation) {
    UiComponentAddressesWithLocalisation.KEY = new CollectionKey("ui_component_addresses_with_localisation");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._componentLabel = values["component_label"];
            this.componentAddress = values["component_address"];
        }
        get componentLabel() {
            const collection = this.collectionCache.getCollection(UiComponentLocalisation$1.KEY, UiComponentLocalisation$1.Entry);
            return collection.find(entry => entry.componentLabel === this._componentLabel);
        }
    }
    UiComponentAddressesWithLocalisation.Entry = Entry;
})(UiComponentAddressesWithLocalisation$1 || (UiComponentAddressesWithLocalisation$1 = {}));

var UiLargeImages;
(function (UiLargeImages) {
    UiLargeImages.KEY = new CollectionKey("ui_large_images");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.imagePath = values["image_path"];
            this._gameArea = values["game_area"];
        }
        get gameArea() {
            const collection = this.collectionCache.getCollection(GameAreaEnums$1.KEY, GameAreaEnums$1.Entry);
            return collection.find(entry => entry.key === this._gameArea);
        }
    }
    UiLargeImages.Entry = Entry;
})(UiLargeImages || (UiLargeImages = {}));

var UiTaggedImages;
(function (UiTaggedImages) {
    UiTaggedImages.KEY = new CollectionKey("ui_tagged_images");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.imagePath = values["image_path"];
        }
    }
    UiTaggedImages.Entry = Entry;
})(UiTaggedImages || (UiTaggedImages = {}));

var UiTooltips;
(function (UiTooltips) {
    UiTooltips.KEY = new CollectionKey("ui_tooltips");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.layoutName = values["layout_name"];
        }
    }
    UiTooltips.Entry = Entry;
})(UiTooltips || (UiTooltips = {}));

var UiTooltipComponents;
(function (UiTooltipComponents) {
    UiTooltipComponents.KEY = new CollectionKey("ui_tooltip_components");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._uiTooltip = values["ui_tooltip"];
            this.childId = values["child_id"];
            this.localisedText = values["localised_text"];
            this.iconPath = values["icon_path"];
            this.stateName = values["state_name"];
            this.isVisible = !!values["is_visible"];
        }
        get uiTooltip() {
            const collection = this.collectionCache.getCollection(UiTooltips.KEY, UiTooltips.Entry);
            return collection.find(entry => entry.key === this._uiTooltip);
        }
    }
    UiTooltipComponents.Entry = Entry;
})(UiTooltipComponents || (UiTooltipComponents = {}));

var UiUnitStats$1;
(function (UiUnitStats) {
    UiUnitStats.KEY = new CollectionKey("ui_unit_stats");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.maxValue = values["max_value"];
            this.campaignOnly = !!values["campaign_only"];
            this.sortOrder = values["sort_order"];
            this._localisation = values["localisation"];
            this.icon = values["icon"];
        }
        get localisation() {
            const collection = this.collectionCache.getCollection(UnitStatLocalisations.KEY, UnitStatLocalisations.Entry);
            return collection.find(entry => entry.statKey === this._localisation);
        }
    }
    UiUnitStats.Entry = Entry;
})(UiUnitStats$1 || (UiUnitStats$1 = {}));

var UiUnitBulletPointEnums;
(function (UiUnitBulletPointEnums) {
    UiUnitBulletPointEnums.KEY = new CollectionKey("ui_unit_bullet_point_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onscreenName = values["onscreen_name"];
            this.state = values["state"];
            this.sortOrder = values["sort_order"];
            this.tooltip = values["tooltip"];
        }
    }
    UiUnitBulletPointEnums.Entry = Entry;
})(UiUnitBulletPointEnums || (UiUnitBulletPointEnums = {}));

var UiUnitBulletPointsGenerations;
(function (UiUnitBulletPointsGenerations) {
    UiUnitBulletPointsGenerations.KEY = new CollectionKey("ui_unit_bullet_points_generations");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unitClass = values["unit_class"];
            this._unitStat = values["unit_stat"];
            this.unitStatThreshold = values["unit_stat_threshold"];
            this._bulletPointEnum = values["bullet_point_enum"];
            this._textOverride = values["text_override"];
            this.shouldDisplay = !!values["should_display"];
        }
        get unitClass() {
            const collection = this.collectionCache.getCollection(UnitClass$1.KEY, UnitClass$1.Entry);
            return collection.find(entry => entry.key === this._unitClass);
        }
        get unitStat() {
            const collection = this.collectionCache.getCollection(UiUnitStats$1.KEY, UiUnitStats$1.Entry);
            return collection.find(entry => entry.key === this._unitStat);
        }
        get bulletPointEnum() {
            const collection = this.collectionCache.getCollection(UiUnitBulletPointEnums.KEY, UiUnitBulletPointEnums.Entry);
            return collection.find(entry => entry.key === this._bulletPointEnum);
        }
        get textOverride() {
            const collection = this.collectionCache.getCollection(UiUnitBulletPointEnums.KEY, UiUnitBulletPointEnums.Entry);
            return collection.find(entry => entry.key === this._textOverride);
        }
    }
    UiUnitBulletPointsGenerations.Entry = Entry;
})(UiUnitBulletPointsGenerations || (UiUnitBulletPointsGenerations = {}));

var UiUnitBulletPointUnitOverrides;
(function (UiUnitBulletPointUnitOverrides) {
    UiUnitBulletPointUnitOverrides.KEY = new CollectionKey("ui_unit_bullet_point_unit_overrides");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unitKey = values["unit_key"];
            this._bulletPoint = values["bullet_point"];
        }
        get unitKey() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unitKey);
        }
        get bulletPoint() {
            const collection = this.collectionCache.getCollection(UiUnitBulletPointEnums.KEY, UiUnitBulletPointEnums.Entry);
            return collection.find(entry => entry.key === this._bulletPoint);
        }
    }
    UiUnitBulletPointUnitOverrides.Entry = Entry;
})(UiUnitBulletPointUnitOverrides || (UiUnitBulletPointUnitOverrides = {}));

var UiUnitStatsFilters$1;
(function (UiUnitStatsFilters) {
    UiUnitStatsFilters.KEY = new CollectionKey("ui_unit_stats_filters");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    UiUnitStatsFilters.Entry = Entry;
})(UiUnitStatsFilters$1 || (UiUnitStatsFilters$1 = {}));

var UiUnitStatuses;
(function (UiUnitStatuses) {
    UiUnitStatuses.KEY = new CollectionKey("ui_unit_statuses");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.tooltip = values["tooltip"];
            this.iconPath = values["icon_path"];
            this.priority = values["priority"];
        }
    }
    UiUnitStatuses.Entry = Entry;
})(UiUnitStatuses || (UiUnitStatuses = {}));

var UiUnitStatToClasses$1;
(function (UiUnitStatToClasses) {
    UiUnitStatToClasses.KEY = new CollectionKey("ui_unit_stat_to_classes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._statKey = values["stat_key"];
            this._unitClass = values["unit_class"];
            this.listOrder = values["list_order"];
            this._filter = values["filter"];
            this.baseValue = values["base_value"];
        }
        get statKey() {
            const collection = this.collectionCache.getCollection(UiUnitStats$1.KEY, UiUnitStats$1.Entry);
            return collection.find(entry => entry.key === this._statKey);
        }
        get unitClass() {
            const collection = this.collectionCache.getCollection(UnitClass$1.KEY, UnitClass$1.Entry);
            return collection.find(entry => entry.key === this._unitClass);
        }
        get filter() {
            const collection = this.collectionCache.getCollection(UiUnitStatsFilters$1.KEY, UiUnitStatsFilters$1.Entry);
            return collection.find(entry => entry.key === this._filter);
        }
    }
    UiUnitStatToClasses.Entry = Entry;
})(UiUnitStatToClasses$1 || (UiUnitStatToClasses$1 = {}));

var UiUnitStatToUnitCastes;
(function (UiUnitStatToUnitCastes) {
    UiUnitStatToUnitCastes.KEY = new CollectionKey("ui_unit_stat_to_unit_castes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._stat = values["stat"];
            this._unitCaste = values["unit_caste"];
            this.maxValueOverride = values["max_value_override"];
        }
        get stat() {
            const collection = this.collectionCache.getCollection(UiUnitStats$1.KEY, UiUnitStats$1.Entry);
            return collection.find(entry => entry.key === this._stat);
        }
        get unitCaste() {
            const collection = this.collectionCache.getCollection(UnitCastes$1.KEY, UnitCastes$1.Entry);
            return collection.find(entry => entry.caste === this._unitCaste);
        }
    }
    UiUnitStatToUnitCastes.Entry = Entry;
})(UiUnitStatToUnitCastes || (UiUnitStatToUnitCastes = {}));

var UiVfxs;
(function (UiVfxs) {
    UiVfxs.KEY = new CollectionKey("ui_vfxs");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.vfxName = values["vfx_name"];
            this._gameArea = values["game_area"];
        }
        get gameArea() {
            const collection = this.collectionCache.getCollection(GameAreaEnums$1.KEY, GameAreaEnums$1.Entry);
            return collection.find(entry => entry.key === this._gameArea);
        }
    }
    UiVfxs.Entry = Entry;
})(UiVfxs || (UiVfxs = {}));

var UniformTypeEnums$1;
(function (UniformTypeEnums) {
    UniformTypeEnums.KEY = new CollectionKey("uniform_type_enums");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    UniformTypeEnums.Entry = Entry;
})(UniformTypeEnums$1 || (UniformTypeEnums$1 = {}));

var UniqueAgentComponents;
(function (UniqueAgentComponents) {
    UniqueAgentComponents.KEY = new CollectionKey("unique_agent_components");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.id = values["id"];
        }
    }
    UniqueAgentComponents.Entry = Entry;
})(UniqueAgentComponents || (UniqueAgentComponents = {}));

var UniqueAgentComponentJunctions;
(function (UniqueAgentComponentJunctions) {
    UniqueAgentComponentJunctions.KEY = new CollectionKey("unique_agent_component_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._uniqueAgent = values["unique_agent"];
            this._component = values["component"];
            this.value = values["value"];
        }
        get uniqueAgent() {
            const collection = this.collectionCache.getCollection(UniqueAgents.KEY, UniqueAgents.Entry);
            return collection.find(entry => entry._agentSubtype === this._uniqueAgent);
        }
        get component() {
            const collection = this.collectionCache.getCollection(UniqueAgentComponents.KEY, UniqueAgentComponents.Entry);
            return collection.find(entry => entry.id === this._component);
        }
    }
    UniqueAgentComponentJunctions.Entry = Entry;
})(UniqueAgentComponentJunctions || (UniqueAgentComponentJunctions = {}));

var UniqueAgentSpawnVfxJunctions;
(function (UniqueAgentSpawnVfxJunctions) {
    UniqueAgentSpawnVfxJunctions.KEY = new CollectionKey("unique_agent_spawn_vfx_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._uniqueAgent = values["unique_agent"];
            this._compositeScene = values["composite_scene"];
        }
        get uniqueAgent() {
            const collection = this.collectionCache.getCollection(UniqueAgents.KEY, UniqueAgents.Entry);
            return collection.find(entry => entry._agentSubtype === this._uniqueAgent);
        }
        get compositeScene() {
            const collection = this.collectionCache.getCollection(CampaignCompositeScenes.KEY, CampaignCompositeScenes.Entry);
            return collection.find(entry => entry.id === this._compositeScene);
        }
    }
    UniqueAgentSpawnVfxJunctions.Entry = Entry;
})(UniqueAgentSpawnVfxJunctions || (UniqueAgentSpawnVfxJunctions = {}));

var UnitDescriptionTexts$1;
(function (UnitDescriptionTexts) {
    UnitDescriptionTexts.KEY = new CollectionKey("unit_description_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.descriptionText = values["description_text"];
            this.longDescriptionText = values["long_description_text"];
            this.strengthsAndWeaknesses = values["strengths_and_weaknesses"];
        }
    }
    UnitDescriptionTexts.Entry = Entry;
})(UnitDescriptionTexts$1 || (UnitDescriptionTexts$1 = {}));

var Units$1;
(function (Units) {
    Units.KEY = new CollectionKey("units");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.onScreenName = values["on_screen_name"];
            this._category = values["category"];
            this._class = values["class"];
            this.multiplayerCost = values["multiplayer_cost"];
            this.multiplayerLateCost = values["multiplayer_late_cost"];
            this.createTime = values["create_time"];
            this.createCost = values["create_cost"];
            this.upkeepCost = values["upkeep_cost"];
            this.campaignActionPoints = values["campaign_action_points"];
            this.voice = values["voice"];
            this.fitness = values["fitness"];
            this.iconName = values["icon_name"];
            this._unitDescriptionText = values["unit_description_text"];
            this.infoPic = values["info_pic"];
            this._regionUnitResource = values["region_unit_resource"];
            this.totalCap = values["total_cap"];
            this.era = values["era"];
            this.mpAvailableEarly = !!values["mp_available_early"];
            this.mpAvailableMiddle = !!values["mp_available_middle"];
            this.mpAvailableLate = !!values["mp_available_late"];
            this.prestige = values["prestige"];
            this.armedCitizenry = !!values["armed_citizenry"];
            this.totalCapMp = values["total_cap_mp"];
            this.unitTypeIcon = values["unit_type_icon"];
            this.useOnscreenName = !!values["use_onscreen_name"];
            this._unitCaste = values["unit_caste"];
            this._additionalBuildingLevelRequirement = values["additional_building_level_requirement"];
            this._religionRequirement = values["religion_requirement"];
            this._resourceRequirement = values["resource_requirement"];
            this.inEncyclopedia = !!values["in_encyclopedia"];
            this._unitRecruitedMovie = values["unit_recruited_movie"];
            this.uniqueIndex = values["unique_index"];
            this._pdlc = values["pdlc"];
            this.isMale = !!values["is_male"];
            this.supportsFirstPerson = !!values["supports_first_person"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(UnitCategory$1.KEY, UnitCategory$1.Entry);
            return collection.find(entry => entry.key === this._category);
        }
        get class() {
            const collection = this.collectionCache.getCollection(UnitClass$1.KEY, UnitClass$1.Entry);
            return collection.find(entry => entry.key === this._class);
        }
        get unitDescriptionText() {
            const collection = this.collectionCache.getCollection(UnitDescriptionTexts$1.KEY, UnitDescriptionTexts$1.Entry);
            return collection.find(entry => entry.key === this._unitDescriptionText);
        }
        get regionUnitResource() {
            const collection = this.collectionCache.getCollection(RegionUnitResources$1.KEY, RegionUnitResources$1.Entry);
            return collection.find(entry => entry.key === this._regionUnitResource);
        }
        get unitCaste() {
            const collection = this.collectionCache.getCollection(UnitCastes$1.KEY, UnitCastes$1.Entry);
            return collection.find(entry => entry.caste === this._unitCaste);
        }
        get additionalBuildingLevelRequirement() {
            const collection = this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry);
            return collection.find(entry => entry.levelName === this._additionalBuildingLevelRequirement);
        }
        get religionRequirement() {
            const collection = this.collectionCache.getCollection(Religions$1.KEY, Religions$1.Entry);
            return collection.find(entry => entry.religionKey === this._religionRequirement);
        }
        get resourceRequirement() {
            const collection = this.collectionCache.getCollection(Resources$1.KEY, Resources$1.Entry);
            return collection.find(entry => entry.key === this._resourceRequirement);
        }
        get unitRecruitedMovie() {
            const collection = this.collectionCache.getCollection(MovieEventStrings$1.KEY, MovieEventStrings$1.Entry);
            return collection.find(entry => entry._event === this._unitRecruitedMovie);
        }
        get pdlc() {
            const collection = this.collectionCache.getCollection(Pdlc$1.KEY, Pdlc$1.Entry);
            return collection.find(entry => entry.id === this._pdlc);
        }
    }
    Units.Entry = Entry;
})(Units$1 || (Units$1 = {}));

var UnitsCustomBattleMounts;
(function (UnitsCustomBattleMounts) {
    UnitsCustomBattleMounts.KEY = new CollectionKey("units_custom_battle_mounts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._baseUnit = values["base_unit"];
            this._mountedUnit = values["mounted_unit"];
            this.iconName = values["icon_name"];
            this.mountName = values["mount_name"];
            this.localisedDescription = values["localised_description"];
        }
        get baseUnit() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._baseUnit);
        }
        get mountedUnit() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._mountedUnit);
        }
    }
    UnitsCustomBattleMounts.Entry = Entry;
})(UnitsCustomBattleMounts || (UnitsCustomBattleMounts = {}));

var UnitsCustomBattlePermissions$1;
(function (UnitsCustomBattlePermissions) {
    UnitsCustomBattlePermissions.KEY = new CollectionKey("units_custom_battle_permissions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unit = values["unit"];
            this._faction = values["faction"];
            this.generalUnit = !!values["general_unit"];
            this.siegeUnitAttacker = !!values["siege_unit_attacker"];
            this.siegeUnitDefender = !!values["siege_unit_defender"];
            this.generalPortrait = values["general_portrait"];
            this._generalUniform = values["general_uniform"];
            this._setPieceCharacter = values["set_piece_character"];
            this.campaignExclusive = !!values["campaign_exclusive"];
        }
        get unit() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get generalUniform() {
            const collection = this.collectionCache.getCollection(AgentUniforms$1.KEY, AgentUniforms$1.Entry);
            return collection.find(entry => entry.uniformName === this._generalUniform);
        }
        get setPieceCharacter() {
            const collection = this.collectionCache.getCollection(BattleSetPieceArmiesCharacters.KEY, BattleSetPieceArmiesCharacters.Entry);
            return collection.find(entry => entry.characterName === this._setPieceCharacter);
        }
    }
    UnitsCustomBattlePermissions.Entry = Entry;
})(UnitsCustomBattlePermissions$1 || (UnitsCustomBattlePermissions$1 = {}));

var UnitsToExclusiveFactionPermissions$1;
(function (UnitsToExclusiveFactionPermissions) {
    UnitsToExclusiveFactionPermissions.KEY = new CollectionKey("units_to_exclusive_faction_permissions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this._faction = values["faction"];
            this.allowed = !!values["allowed"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._key);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    UnitsToExclusiveFactionPermissions.Entry = Entry;
})(UnitsToExclusiveFactionPermissions$1 || (UnitsToExclusiveFactionPermissions$1 = {}));

var UnitsToGovTypeOutcomesEnum$1;
(function (UnitsToGovTypeOutcomesEnum) {
    UnitsToGovTypeOutcomesEnum.KEY = new CollectionKey("units_to_gov_type_outcomes_enum");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    UnitsToGovTypeOutcomesEnum.Entry = Entry;
})(UnitsToGovTypeOutcomesEnum$1 || (UnitsToGovTypeOutcomesEnum$1 = {}));

var UnitsToGovTypePermissions$1;
(function (UnitsToGovTypePermissions) {
    UnitsToGovTypePermissions.KEY = new CollectionKey("units_to_gov_type_permissions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.uniqueNumber = values["unique_number"];
            this._key = values["key"];
            this._govType = values["gov_type"];
            this._outcome = values["outcome"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._key);
        }
        get govType() {
            const collection = this.collectionCache.getCollection(GovernmentTypes$1.KEY, GovernmentTypes$1.Entry);
            return collection.find(entry => entry.governmentType === this._govType);
        }
        get outcome() {
            const collection = this.collectionCache.getCollection(UnitsToGovTypeOutcomesEnum$1.KEY, UnitsToGovTypeOutcomesEnum$1.Entry);
            return collection.find(entry => entry.key === this._outcome);
        }
    }
    UnitsToGovTypePermissions.Entry = Entry;
})(UnitsToGovTypePermissions$1 || (UnitsToGovTypePermissions$1 = {}));

var UnitsToGovTypesConversionJcts$1;
(function (UnitsToGovTypesConversionJcts) {
    UnitsToGovTypesConversionJcts.KEY = new CollectionKey("units_to_gov_types_conversion_jcts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this._unit = values["unit"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(UnitsToGovTypePermissions$1.KEY, UnitsToGovTypePermissions$1.Entry);
            return collection.find(entry => entry.uniqueNumber === this._key);
        }
        get unit() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
    }
    UnitsToGovTypesConversionJcts.Entry = Entry;
})(UnitsToGovTypesConversionJcts$1 || (UnitsToGovTypesConversionJcts$1 = {}));

var UnitsToGovTypeOutcomes$1;
(function (UnitsToGovTypeOutcomes) {
    UnitsToGovTypeOutcomes.KEY = new CollectionKey("units_to_gov_type_outcomes");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this._govType = values["gov_type"];
            this._outcome = values["outcome"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(Units$1.KEY, Units$1.Entry);
            return collection.find(entry => entry.key === this._key);
        }
        get govType() {
            const collection = this.collectionCache.getCollection(GovernmentTypes$1.KEY, GovernmentTypes$1.Entry);
            return collection.find(entry => entry.governmentType === this._govType);
        }
        get outcome() {
            const collection = this.collectionCache.getCollection(UnitsToGovTypeOutcomesEnum$1.KEY, UnitsToGovTypeOutcomesEnum$1.Entry);
            return collection.find(entry => entry.key === this._outcome);
        }
    }
    UnitsToGovTypeOutcomes.Entry = Entry;
})(UnitsToGovTypeOutcomes$1 || (UnitsToGovTypeOutcomes$1 = {}));

var UnitsToGroupingsMilitaryPermissions$1;
(function (UnitsToGroupingsMilitaryPermissions) {
    UnitsToGroupingsMilitaryPermissions.KEY = new CollectionKey("units_to_groupings_military_permissions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unit = values["unit"];
            this._militaryGroup = values["military_group"];
        }
        get unit() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
        get militaryGroup() {
            const collection = this.collectionCache.getCollection(GroupingsMilitary$1.KEY, GroupingsMilitary$1.Entry);
            return collection.find(entry => entry.militaryGroup === this._militaryGroup);
        }
    }
    UnitsToGroupingsMilitaryPermissions.Entry = Entry;
})(UnitsToGroupingsMilitaryPermissions$1 || (UnitsToGroupingsMilitaryPermissions$1 = {}));

var UnitAbilitiesAdditionalUiEffects;
(function (UnitAbilitiesAdditionalUiEffects) {
    UnitAbilitiesAdditionalUiEffects.KEY = new CollectionKey("unit_abilities_additional_ui_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.localisedText = values["localised_text"];
            this.sortOrder = values["sort_order"];
        }
    }
    UnitAbilitiesAdditionalUiEffects.Entry = Entry;
})(UnitAbilitiesAdditionalUiEffects || (UnitAbilitiesAdditionalUiEffects = {}));

var UnitAbilitiesToAdditionalUiEffectsJuncs;
(function (UnitAbilitiesToAdditionalUiEffectsJuncs) {
    UnitAbilitiesToAdditionalUiEffectsJuncs.KEY = new CollectionKey("unit_abilities_to_additional_ui_effects_juncs");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._ability = values["ability"];
            this._effect = values["effect"];
        }
        get ability() {
            const collection = this.collectionCache.getCollection(UnitAbilities$1.KEY, UnitAbilities$1.Entry);
            return collection.find(entry => entry.key === this._ability);
        }
        get effect() {
            const collection = this.collectionCache.getCollection(UnitAbilitiesAdditionalUiEffects.KEY, UnitAbilitiesAdditionalUiEffects.Entry);
            return collection.find(entry => entry.key === this._effect);
        }
    }
    UnitAbilitiesToAdditionalUiEffectsJuncs.Entry = Entry;
})(UnitAbilitiesToAdditionalUiEffectsJuncs || (UnitAbilitiesToAdditionalUiEffectsJuncs = {}));

var UnitAttributesToGroupsJunctions$1;
(function (UnitAttributesToGroupsJunctions) {
    UnitAttributesToGroupsJunctions.KEY = new CollectionKey("unit_attributes_to_groups_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._attribute = values["attribute"];
            this._attributeGroup = values["attribute_group"];
        }
        get attribute() {
            const collection = this.collectionCache.getCollection(UnitAttributes$1.KEY, UnitAttributes$1.Entry);
            return collection.find(entry => entry.key === this._attribute);
        }
        get attributeGroup() {
            const collection = this.collectionCache.getCollection(UnitAttributesGroups$1.KEY, UnitAttributesGroups$1.Entry);
            return collection.find(entry => entry.groupName === this._attributeGroup);
        }
    }
    UnitAttributesToGroupsJunctions.Entry = Entry;
})(UnitAttributesToGroupsJunctions$1 || (UnitAttributesToGroupsJunctions$1 = {}));

var UnitBannerUnitHeightOffsets;
(function (UnitBannerUnitHeightOffsets) {
    UnitBannerUnitHeightOffsets.KEY = new CollectionKey("unit_banner_unit_height_offsets");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unitRecord = values["unit_record"];
            this.heightOffset = values["height_offset"];
            this.campaignHeightOffset = values["campaign_height_offset"];
        }
        get unitRecord() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unitRecord);
        }
    }
    UnitBannerUnitHeightOffsets.Entry = Entry;
})(UnitBannerUnitHeightOffsets || (UnitBannerUnitHeightOffsets = {}));

var UnitExperienceBonuses$1;
(function (UnitExperienceBonuses) {
    UnitExperienceBonuses.KEY = new CollectionKey("unit_experience_bonuses");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._stat = values["stat"];
            this.value = values["value"];
            this.growthRate = values["growth_rate"];
            this.growthScalar = values["growth_scalar"];
        }
        get stat() {
            const collection = this.collectionCache.getCollection(ModifiableUnitStats.KEY, ModifiableUnitStats.Entry);
            return collection.find(entry => entry.statKey === this._stat);
        }
    }
    UnitExperienceBonuses.Entry = Entry;
})(UnitExperienceBonuses$1 || (UnitExperienceBonuses$1 = {}));

var UnitExperienceThresholds$1;
(function (UnitExperienceThresholds) {
    UnitExperienceThresholds.KEY = new CollectionKey("unit_experience_thresholds");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.value = values["value"];
        }
    }
    UnitExperienceThresholds.Entry = Entry;
})(UnitExperienceThresholds$1 || (UnitExperienceThresholds$1 = {}));

var UnitExperienceThresholdModifiers$1;
(function (UnitExperienceThresholdModifiers) {
    UnitExperienceThresholdModifiers.KEY = new CollectionKey("unit_experience_threshold_modifiers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._key = values["key"];
            this.modifier = values["modifier"];
        }
        get key() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._key);
        }
    }
    UnitExperienceThresholdModifiers.Entry = Entry;
})(UnitExperienceThresholdModifiers$1 || (UnitExperienceThresholdModifiers$1 = {}));

var KvFatigue$1;
(function (KvFatigue) {
    KvFatigue.KEY = new CollectionKey("_kv_fatigue");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.value = values["value"];
            this.description = values["description"];
        }
    }
    KvFatigue.Entry = Entry;
})(KvFatigue$1 || (KvFatigue$1 = {}));

var UnitFatigueEffects$1;
(function (UnitFatigueEffects) {
    UnitFatigueEffects.KEY = new CollectionKey("unit_fatigue_effects");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._fatigueLevel = values["fatigue_level"];
            this._stat = values["stat"];
            this.value = values["value"];
        }
        get fatigueLevel() {
            const collection = this.collectionCache.getCollection(KvFatigue$1.KEY, KvFatigue$1.Entry);
            return collection.find(entry => entry.key === this._fatigueLevel);
        }
        get stat() {
            const collection = this.collectionCache.getCollection(ModifiableUnitStats.KEY, ModifiableUnitStats.Entry);
            return collection.find(entry => entry.statKey === this._stat);
        }
    }
    UnitFatigueEffects.Entry = Entry;
})(UnitFatigueEffects$1 || (UnitFatigueEffects$1 = {}));

var UnitNavalArtilleryPositions$1;
(function (UnitNavalArtilleryPositions) {
    UnitNavalArtilleryPositions.KEY = new CollectionKey("unit_naval_artillery_positions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    UnitNavalArtilleryPositions.Entry = Entry;
})(UnitNavalArtilleryPositions$1 || (UnitNavalArtilleryPositions$1 = {}));

var UnitNavalDamageSites$1;
(function (UnitNavalDamageSites) {
    UnitNavalDamageSites.KEY = new CollectionKey("unit_naval_damage_sites");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
        }
    }
    UnitNavalDamageSites.Entry = Entry;
})(UnitNavalDamageSites$1 || (UnitNavalDamageSites$1 = {}));

var UnitRegimentNames$1;
(function (UnitRegimentNames) {
    UnitRegimentNames.KEY = new CollectionKey("unit_regiment_names");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._nameGroup = values["name_group"];
            this._unitCaste = values["unit_caste"];
            this._unitName = values["unit_name"];
            this.nameOrder = values["name_order"];
        }
        get nameGroup() {
            const collection = this.collectionCache.getCollection(NamesGroups$1.KEY, NamesGroups$1.Entry);
            return collection.find(entry => entry.key === this._nameGroup);
        }
        get unitCaste() {
            const collection = this.collectionCache.getCollection(UnitCastes$1.KEY, UnitCastes$1.Entry);
            return collection.find(entry => entry.caste === this._unitCaste);
        }
    }
    UnitRegimentNames.Entry = Entry;
})(UnitRegimentNames$1 || (UnitRegimentNames$1 = {}));

var UnitRegimentNamesLocalisationLookup$1;
(function (UnitRegimentNamesLocalisationLookup) {
    UnitRegimentNamesLocalisationLookup.KEY = new CollectionKey("unit_regiment_names_localisation_lookup");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.unitName = values["unit_name"];
        }
    }
    UnitRegimentNamesLocalisationLookup.Entry = Entry;
})(UnitRegimentNamesLocalisationLookup$1 || (UnitRegimentNamesLocalisationLookup$1 = {}));

var UnitRequiredTechnologyJunctions$1;
(function (UnitRequiredTechnologyJunctions) {
    UnitRequiredTechnologyJunctions.KEY = new CollectionKey("unit_required_technology_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unitKey = values["unit_key"];
            this._technologyKey = values["technology_key"];
        }
        get unitKey() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unitKey);
        }
        get technologyKey() {
            const collection = this.collectionCache.getCollection(Technologies$1.KEY, Technologies$1.Entry);
            return collection.find(entry => entry.key === this._technologyKey);
        }
    }
    UnitRequiredTechnologyJunctions.Entry = Entry;
})(UnitRequiredTechnologyJunctions$1 || (UnitRequiredTechnologyJunctions$1 = {}));

var UnitSetToMpUnitCaps;
(function (UnitSetToMpUnitCaps) {
    UnitSetToMpUnitCaps.KEY = new CollectionKey("unit_set_to_mp_unit_caps");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unitSet = values["unit_set"];
            this.localisedName = values["localised_name"];
            this.cap = values["cap"];
        }
        get unitSet() {
            const collection = this.collectionCache.getCollection(UnitSets$1.KEY, UnitSets$1.Entry);
            return collection.find(entry => entry.key === this._unitSet);
        }
    }
    UnitSetToMpUnitCaps.Entry = Entry;
})(UnitSetToMpUnitCaps || (UnitSetToMpUnitCaps = {}));

var UnitSetToUnitJunctions$1;
(function (UnitSetToUnitJunctions) {
    UnitSetToUnitJunctions.KEY = new CollectionKey("unit_set_to_unit_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unitSet = values["unit_set"];
            this._unitRecord = values["unit_record"];
            this._unitCaste = values["unit_caste"];
            this._unitCategory = values["unit_category"];
            this._unitClass = values["unit_class"];
            this.exclude = !!values["exclude"];
        }
        get unitSet() {
            const collection = this.collectionCache.getCollection(UnitSets$1.KEY, UnitSets$1.Entry);
            return collection.find(entry => entry.key === this._unitSet);
        }
        get unitRecord() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unitRecord);
        }
        get unitCaste() {
            const collection = this.collectionCache.getCollection(UnitCastes$1.KEY, UnitCastes$1.Entry);
            return collection.find(entry => entry.caste === this._unitCaste);
        }
        get unitCategory() {
            const collection = this.collectionCache.getCollection(UnitCategory$1.KEY, UnitCategory$1.Entry);
            return collection.find(entry => entry.key === this._unitCategory);
        }
        get unitClass() {
            const collection = this.collectionCache.getCollection(UnitClass$1.KEY, UnitClass$1.Entry);
            return collection.find(entry => entry.key === this._unitClass);
        }
    }
    UnitSetToUnitJunctions.Entry = Entry;
})(UnitSetToUnitJunctions$1 || (UnitSetToUnitJunctions$1 = {}));

var UnitStatsLandExperienceBonuses$1;
(function (UnitStatsLandExperienceBonuses) {
    UnitStatsLandExperienceBonuses.KEY = new CollectionKey("unit_stats_land_experience_bonuses");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.xpLevel = values["xp_level"];
            this.fatigue = values["fatigue"];
            this.mpFixedCost = values["mp_fixed_cost"];
            this.mpExperienceCostMultiplier = values["mp_experience_cost_multiplier"];
            this.additionalMeleeCp = values["additional_melee_cp"];
            this.additionalMissileCp = values["additional_missile_cp"];
        }
    }
    UnitStatsLandExperienceBonuses.Entry = Entry;
})(UnitStatsLandExperienceBonuses$1 || (UnitStatsLandExperienceBonuses$1 = {}));

var UnitStatsNavalCrew$1;
(function (UnitStatsNavalCrew) {
    UnitStatsNavalCrew.KEY = new CollectionKey("unit_stats_naval_crew");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.unitType = values["unit_type"];
            this.coreLoadingSkill = values["core_loading_skill"];
            this.coreMarksmanship = values["core_marksmanship"];
            this.meleeAttack = values["melee_attack"];
            this.meleeDefence = values["melee_defence"];
            this.meleeWeaponType = values["melee_weapon_type"];
            this.pistols = !!values["pistols"];
            this.ammo = values["ammo"];
            this._battleEntity = values["battle_entity"];
            this._soldierModel = values["soldier_model"];
            this._manAnimationsTable = values["man_animations_table"];
            this.equipmentTheme = values["equipment_theme"];
            this.armourAudio = values["armour_audio"];
            this.armour = values["armour"];
            this.spacing = values["spacing"];
            this.discipline = values["discipline"];
            this._missileType = values["missile_type"];
        }
        get battleEntity() {
            const collection = this.collectionCache.getCollection(BattleEntities$1.KEY, BattleEntities$1.Entry);
            return collection.find(entry => entry.key === this._battleEntity);
        }
        get soldierModel() {
            const collection = this.collectionCache.getCollection(WarscapeAnimated$1.KEY, WarscapeAnimated$1.Entry);
            return collection.find(entry => entry.key === this._soldierModel);
        }
        get manAnimationsTable() {
            const collection = this.collectionCache.getCollection(BattleAnimationsTable$1.KEY, BattleAnimationsTable$1.Entry);
            return collection.find(entry => entry.key === this._manAnimationsTable);
        }
        get missileType() {
            const collection = this.collectionCache.getCollection(Projectiles$1.KEY, Projectiles$1.Entry);
            return collection.find(entry => entry.key === this._missileType);
        }
    }
    UnitStatsNavalCrew.Entry = Entry;
})(UnitStatsNavalCrew$1 || (UnitStatsNavalCrew$1 = {}));

var UnitStatsNavalExperienceBonuses$1;
(function (UnitStatsNavalExperienceBonuses) {
    UnitStatsNavalExperienceBonuses.KEY = new CollectionKey("unit_stats_naval_experience_bonuses");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.xpLevel = values["xp_level"];
            this.meleeDefence = values["melee_defence"];
            this.meleeAttack = values["melee_attack"];
            this.coreGunnerLoadingSkill = values["core_gunner_loading_skill"];
            this.coreGunnerMarksmanship = values["core_gunner_marksmanship"];
            this.morale = values["morale"];
            this.mpFixedCost = values["mp_fixed_cost"];
            this.mpExperienceCostMultiplier = values["mp_experience_cost_multiplier"];
        }
    }
    UnitStatsNavalExperienceBonuses.Entry = Entry;
})(UnitStatsNavalExperienceBonuses$1 || (UnitStatsNavalExperienceBonuses$1 = {}));

var UnitToUnitListJunctions;
(function (UnitToUnitListJunctions) {
    UnitToUnitListJunctions.KEY = new CollectionKey("unit_to_unit_list_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unitList = values["unit_list"];
            this._unit = values["unit"];
        }
        get unitList() {
            const collection = this.collectionCache.getCollection(UnitLists.KEY, UnitLists.Entry);
            return collection.find(entry => entry.key === this._unitList);
        }
        get unit() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unit);
        }
    }
    UnitToUnitListJunctions.Entry = Entry;
})(UnitToUnitListJunctions || (UnitToUnitListJunctions = {}));

var UnitVariants$1;
(function (UnitVariants) {
    UnitVariants.KEY = new CollectionKey("unit_variants");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
            this._faction = values["faction"];
            this._unit = values["unit"];
            this._variant = values["variant"];
            this.unitCard = values["unit_card"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get unit() {
            const collection = this.collectionCache.getCollection(LandUnits$1.KEY, LandUnits$1.Entry);
            return collection.find(entry => entry.key === this._unit);
        }
        get variant() {
            const collection = this.collectionCache.getCollection(Variants$1.KEY, Variants$1.Entry);
            return collection.find(entry => entry.variantName === this._variant);
        }
    }
    UnitVariants.Entry = Entry;
})(UnitVariants$1 || (UnitVariants$1 = {}));

var UnitVariantsColours$1;
(function (UnitVariantsColours) {
    UnitVariantsColours.KEY = new CollectionKey("unit_variants_colours");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._unitVariant = values["unit_variant"];
            this._faction = values["faction"];
            this.primaryColourR = values["primary_colour_r"];
            this.primaryColourG = values["primary_colour_g"];
            this.primaryColourB = values["primary_colour_b"];
            this.secondaryColourR = values["secondary_colour_r"];
            this.secondaryColourG = values["secondary_colour_g"];
            this.secondaryColourB = values["secondary_colour_b"];
            this.tertiaryColourR = values["tertiary_colour_r"];
            this.tertiaryColourG = values["tertiary_colour_g"];
            this.tertiaryColourB = values["tertiary_colour_b"];
            this._soldierType = values["soldier_type"];
            this.key = values["key"];
        }
        get unitVariant() {
            const collection = this.collectionCache.getCollection(UnitVariants$1.KEY, UnitVariants$1.Entry);
            return collection.find(entry => entry.name === this._unitVariant);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get soldierType() {
            const collection = this.collectionCache.getCollection(UniformTypeEnums$1.KEY, UniformTypeEnums$1.Entry);
            return collection.find(entry => entry.key === this._soldierType);
        }
    }
    UnitVariantsColours.Entry = Entry;
})(UnitVariantsColours$1 || (UnitVariantsColours$1 = {}));

var UnitVariantsShips;
(function (UnitVariantsShips) {
    UnitVariantsShips.KEY = new CollectionKey("unit_variants_ships");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.name = values["name"];
            this._faction = values["faction"];
            this._unit = values["unit"];
            this.variant = values["variant"];
            this.unitCard = values["unit_card"];
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
        get unit() {
            const collection = this.collectionCache.getCollection(NavalUnits$1.KEY, NavalUnits$1.Entry);
            return collection.find(entry => entry.key === this._unit);
        }
    }
    UnitVariantsShips.Entry = Entry;
})(UnitVariantsShips || (UnitVariantsShips = {}));

var UnitVariantUpgrades;
(function (UnitVariantUpgrades) {
    UnitVariantUpgrades.KEY = new CollectionKey("unit_variant_upgrades");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._mainUnitKey = values["main_unit_key"];
            this._ancillaryPrimary = values["ancillary_primary"];
            this._ancillarySecondary = values["ancillary_secondary"];
            this._variantName = values["variant_name"];
            this.cost = values["cost"];
        }
        get mainUnitKey() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._mainUnitKey);
        }
        get ancillaryPrimary() {
            const collection = this.collectionCache.getCollection(Ancillaries$1.KEY, Ancillaries$1.Entry);
            return collection.find(entry => entry._key === this._ancillaryPrimary);
        }
        get ancillarySecondary() {
            const collection = this.collectionCache.getCollection(Ancillaries$1.KEY, Ancillaries$1.Entry);
            return collection.find(entry => entry._key === this._ancillarySecondary);
        }
        get variantName() {
            const collection = this.collectionCache.getCollection(Variants$1.KEY, Variants$1.Entry);
            return collection.find(entry => entry.variantName === this._variantName);
        }
    }
    UnitVariantUpgrades.Entry = Entry;
})(UnitVariantUpgrades || (UnitVariantUpgrades = {}));

var VampireMercenarySetJunctions;
(function (VampireMercenarySetJunctions) {
    VampireMercenarySetJunctions.KEY = new CollectionKey("vampire_mercenary_set_junctions");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._mercenarySet = values["mercenary_set"];
        }
        get mercenarySet() {
            const collection = this.collectionCache.getCollection(MercenaryPools$1.KEY, MercenaryPools$1.Entry);
            return collection.find(entry => entry.key === this._mercenarySet);
        }
    }
    VampireMercenarySetJunctions.Entry = Entry;
})(VampireMercenarySetJunctions || (VampireMercenarySetJunctions = {}));

var VictoryTypeLinks;
(function (VictoryTypeLinks) {
    VictoryTypeLinks.KEY = new CollectionKey("victory_type_links");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._from = values["from"];
            this._to = values["to"];
        }
        get from() {
            const collection = this.collectionCache.getCollection(VictoryTypes$1.KEY, VictoryTypes$1.Entry);
            return collection.find(entry => entry.victoryType === this._from);
        }
        get to() {
            const collection = this.collectionCache.getCollection(VictoryTypes$1.KEY, VictoryTypes$1.Entry);
            return collection.find(entry => entry.victoryType === this._to);
        }
    }
    VictoryTypeLinks.Entry = Entry;
})(VictoryTypeLinks || (VictoryTypeLinks = {}));

var VoCampaignAgentTexts$1;
(function (VoCampaignAgentTexts) {
    VoCampaignAgentTexts.KEY = new CollectionKey("vo_campaign_agent_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.character = values["character"];
            this.key = values["key"];
            this.text = values["text"];
            this._culture = values["culture"];
            this._subculture = values["subculture"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get subculture() {
            const collection = this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry);
            return collection.find(entry => entry.subculture === this._subculture);
        }
    }
    VoCampaignAgentTexts.Entry = Entry;
})(VoCampaignAgentTexts$1 || (VoCampaignAgentTexts$1 = {}));

var VoCharacters$1;
(function (VoCharacters) {
    VoCharacters.KEY = new CollectionKey("vo_characters");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.name = values["name"];
        }
    }
    VoCharacters.Entry = Entry;
})(VoCharacters$1 || (VoCharacters$1 = {}));

var VoContextSensitiveTexts$1;
(function (VoContextSensitiveTexts) {
    VoContextSensitiveTexts.KEY = new CollectionKey("vo_context_sensitive_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._culture = values["culture"];
            this._faction = values["faction"];
            this.text = values["text"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    VoContextSensitiveTexts.Entry = Entry;
})(VoContextSensitiveTexts$1 || (VoContextSensitiveTexts$1 = {}));

var VoDiplomacyTexts$1;
(function (VoDiplomacyTexts) {
    VoDiplomacyTexts.KEY = new CollectionKey("vo_diplomacy_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._culture = values["culture"];
            this._faction = values["faction"];
            this.text = values["text"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    VoDiplomacyTexts.Entry = Entry;
})(VoDiplomacyTexts$1 || (VoDiplomacyTexts$1 = {}));

var VoFactionIntroTexts$1;
(function (VoFactionIntroTexts) {
    VoFactionIntroTexts.KEY = new CollectionKey("vo_faction_intro_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._culture = values["culture"];
            this._faction = values["faction"];
            this.text = values["text"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    VoFactionIntroTexts.Entry = Entry;
})(VoFactionIntroTexts$1 || (VoFactionIntroTexts$1 = {}));

var VoFmvTexts$1;
(function (VoFmvTexts) {
    VoFmvTexts.KEY = new CollectionKey("vo_fmv_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._culture = values["culture"];
            this._faction = values["faction"];
            this.text = values["text"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    VoFmvTexts.Entry = Entry;
})(VoFmvTexts$1 || (VoFmvTexts$1 = {}));

var VoHistoricalBattleTexts$1;
(function (VoHistoricalBattleTexts) {
    VoHistoricalBattleTexts.KEY = new CollectionKey("vo_historical_battle_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._culture = values["culture"];
            this._faction = values["faction"];
            this.text = values["text"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    VoHistoricalBattleTexts.Entry = Entry;
})(VoHistoricalBattleTexts$1 || (VoHistoricalBattleTexts$1 = {}));

var VoSpeechTexts$1;
(function (VoSpeechTexts) {
    VoSpeechTexts.KEY = new CollectionKey("vo_speech_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._culture = values["culture"];
            this._faction = values["faction"];
            this.text = values["text"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    VoSpeechTexts.Entry = Entry;
})(VoSpeechTexts$1 || (VoSpeechTexts$1 = {}));

var VoTexts$1;
(function (VoTexts) {
    VoTexts.KEY = new CollectionKey("vo_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.recordedFilename = values["recorded_filename"];
            this._scriptId = values["script_id"];
            this.order = values["order"];
            this.comment = values["comment"];
            this._tableField = values["table_field"];
            this.foreignKey = values["foreign_key"];
        }
        get scriptId() {
            const collection = this.collectionCache.getCollection(VoScripts$1.KEY, VoScripts$1.Entry);
            return collection.find(entry => entry.id === this._scriptId);
        }
        get tableField() {
            const collection = this.collectionCache.getCollection(TExcLocalisableFields$1.KEY, TExcLocalisableFields$1.Entry);
            return collection.find(entry => entry.key === this._tableField);
        }
    }
    VoTexts.Entry = Entry;
})(VoTexts$1 || (VoTexts$1 = {}));

var VoTextCharacters$1;
(function (VoTextCharacters) {
    VoTextCharacters.KEY = new CollectionKey("vo_text_characters");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._voText = values["vo_text"];
            this._voCharacter = values["vo_character"];
        }
        get voText() {
            const collection = this.collectionCache.getCollection(VoTexts$1.KEY, VoTexts$1.Entry);
            return collection.find(entry => entry.key === this._voText);
        }
        get voCharacter() {
            const collection = this.collectionCache.getCollection(VoCharacters$1.KEY, VoCharacters$1.Entry);
            return collection.find(entry => entry.key === this._voCharacter);
        }
    }
    VoTextCharacters.Entry = Entry;
})(VoTextCharacters$1 || (VoTextCharacters$1 = {}));

var VoTutorialFmvTexts$1;
(function (VoTutorialFmvTexts) {
    VoTutorialFmvTexts.KEY = new CollectionKey("vo_tutorial_fmv_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._culture = values["culture"];
            this._faction = values["faction"];
            this.text = values["text"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    VoTutorialFmvTexts.Entry = Entry;
})(VoTutorialFmvTexts$1 || (VoTutorialFmvTexts$1 = {}));

var VoUnitTexts$1;
(function (VoUnitTexts) {
    VoUnitTexts.KEY = new CollectionKey("vo_unit_texts");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._culture = values["culture"];
            this._faction = values["faction"];
            this.text = values["text"];
        }
        get culture() {
            const collection = this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry);
            return collection.find(entry => entry.key === this._culture);
        }
        get faction() {
            const collection = this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry);
            return collection.find(entry => entry.key === this._faction);
        }
    }
    VoUnitTexts.Entry = Entry;
})(VoUnitTexts$1 || (VoUnitTexts$1 = {}));

var WarscapeAnimatedLod$1;
(function (WarscapeAnimatedLod) {
    WarscapeAnimatedLod.KEY = new CollectionKey("warscape_animated_lod");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.filename = values["filename"];
            this.range = values["range"];
            this._animated = values["animated"];
        }
        get animated() {
            const collection = this.collectionCache.getCollection(WarscapeAnimated$1.KEY, WarscapeAnimated$1.Entry);
            return collection.find(entry => entry.key === this._animated);
        }
    }
    WarscapeAnimatedLod.Entry = Entry;
})(WarscapeAnimatedLod$1 || (WarscapeAnimatedLod$1 = {}));

var WindLevels$1;
(function (WindLevels) {
    WindLevels.KEY = new CollectionKey("wind_levels");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this._seaSurface = values["sea_surface"];
            this.onscreen = values["onscreen"];
            this.magnitudeX = values["magnitudeX"];
            this.magnitudeY = values["magnitudeY"];
            this.sortOrder = values["sort_order"];
        }
        get seaSurface() {
            const collection = this.collectionCache.getCollection(SeaSurfaces$1.KEY, SeaSurfaces$1.Entry);
            return collection.find(entry => entry.key === this._seaSurface);
        }
    }
    WindLevels.Entry = Entry;
})(WindLevels$1 || (WindLevels$1 = {}));

var WorkshopCategories;
(function (WorkshopCategories) {
    WorkshopCategories.KEY = new CollectionKey("workshop_categories");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.category = values["category"];
        }
    }
    WorkshopCategories.Entry = Entry;
})(WorkshopCategories || (WorkshopCategories = {}));

var WorkshopCategoriesProgressLevels;
(function (WorkshopCategoriesProgressLevels) {
    WorkshopCategoriesProgressLevels.KEY = new CollectionKey("workshop_categories_progress_levels");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._category = values["category"];
            this.levelToUnlock = values["level_to_unlock"];
            this._ancillaryReward = values["ancillary_reward"];
            this._unitReward = values["unit_reward"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(WorkshopCategories.KEY, WorkshopCategories.Entry);
            return collection.find(entry => entry.category === this._category);
        }
        get ancillaryReward() {
            const collection = this.collectionCache.getCollection(Ancillaries$1.KEY, Ancillaries$1.Entry);
            return collection.find(entry => entry._key === this._ancillaryReward);
        }
        get unitReward() {
            const collection = this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry);
            return collection.find(entry => entry.unit === this._unitReward);
        }
    }
    WorkshopCategoriesProgressLevels.Entry = Entry;
})(WorkshopCategoriesProgressLevels || (WorkshopCategoriesProgressLevels = {}));

var WorkshopCategoriesToRituals;
(function (WorkshopCategoriesToRituals) {
    WorkshopCategoriesToRituals.KEY = new CollectionKey("workshop_categories_to_rituals");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this._category = values["category"];
            this._ritual = values["ritual"];
            this.order = values["order"];
        }
        get category() {
            const collection = this.collectionCache.getCollection(WorkshopCategories.KEY, WorkshopCategories.Entry);
            return collection.find(entry => entry.category === this._category);
        }
        get ritual() {
            const collection = this.collectionCache.getCollection(Rituals.KEY, Rituals.Entry);
            return collection.find(entry => entry.key === this._ritual);
        }
    }
    WorkshopCategoriesToRituals.Entry = Entry;
})(WorkshopCategoriesToRituals || (WorkshopCategoriesToRituals = {}));

var KvBattleAiAbilityUsageVariables;
(function (KvBattleAiAbilityUsageVariables) {
    KvBattleAiAbilityUsageVariables.KEY = new CollectionKey("_kv_battle_ai_ability_usage_variables");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.value = values["value"];
            this.description = values["description"];
        }
    }
    KvBattleAiAbilityUsageVariables.Entry = Entry;
})(KvBattleAiAbilityUsageVariables || (KvBattleAiAbilityUsageVariables = {}));

var KvExperienceBonuses$1;
(function (KvExperienceBonuses) {
    KvExperienceBonuses.KEY = new CollectionKey("_kv_experience_bonuses");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.value = values["value"];
            this.description = values["description"];
        }
    }
    KvExperienceBonuses.Entry = Entry;
})(KvExperienceBonuses$1 || (KvExperienceBonuses$1 = {}));

var KvFireValues;
(function (KvFireValues) {
    KvFireValues.KEY = new CollectionKey("_kv_fire_values");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.value = values["value"];
            this.description = values["description"];
        }
    }
    KvFireValues.Entry = Entry;
})(KvFireValues || (KvFireValues = {}));

var KvKeyBuildings$1;
(function (KvKeyBuildings) {
    KvKeyBuildings.KEY = new CollectionKey("_kv_key_buildings");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.value = values["value"];
            this.description = values["description"];
        }
    }
    KvKeyBuildings.Entry = Entry;
})(KvKeyBuildings$1 || (KvKeyBuildings$1 = {}));

var KvMorale$1;
(function (KvMorale) {
    KvMorale.KEY = new CollectionKey("_kv_morale");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.value = values["value"];
            this.description = values["description"];
        }
    }
    KvMorale.Entry = Entry;
})(KvMorale$1 || (KvMorale$1 = {}));

var KvNavalMorale$1;
(function (KvNavalMorale) {
    KvNavalMorale.KEY = new CollectionKey("_kv_naval_morale");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.value = values["value"];
            this.description = values["description"];
        }
    }
    KvNavalMorale.Entry = Entry;
})(KvNavalMorale$1 || (KvNavalMorale$1 = {}));

var KvNavalRules;
(function (KvNavalRules) {
    KvNavalRules.KEY = new CollectionKey("_kv_naval_rules");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.value = values["value"];
            this.description = values["description"];
        }
    }
    KvNavalRules.Entry = Entry;
})(KvNavalRules || (KvNavalRules = {}));

var KvRules$1;
(function (KvRules) {
    KvRules.KEY = new CollectionKey("_kv_rules");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.value = values["value"];
            this.description = values["description"];
        }
    }
    KvRules.Entry = Entry;
})(KvRules$1 || (KvRules$1 = {}));

var KvUiTweakers;
(function (KvUiTweakers) {
    KvUiTweakers.KEY = new CollectionKey("_kv_ui_tweakers");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.value = values["value"];
            this.description = values["description"];
        }
    }
    KvUiTweakers.Entry = Entry;
})(KvUiTweakers || (KvUiTweakers = {}));

var KvUnitAbilityScalingRules;
(function (KvUnitAbilityScalingRules) {
    KvUnitAbilityScalingRules.KEY = new CollectionKey("_kv_unit_ability_scaling_rules");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.value = values["value"];
            this.description = values["description"];
        }
    }
    KvUnitAbilityScalingRules.Entry = Entry;
})(KvUnitAbilityScalingRules || (KvUnitAbilityScalingRules = {}));

var KvWindsOfMagicParams;
(function (KvWindsOfMagicParams) {
    KvWindsOfMagicParams.KEY = new CollectionKey("_kv_winds_of_magic_params");
    class Entry {
        constructor(collectionCache, values) {
            this.collectionCache = collectionCache;
            this.key = values["key"];
            this.value = values["value"];
            this.description = values["description"];
        }
    }
    KvWindsOfMagicParams.Entry = Entry;
})(KvWindsOfMagicParams || (KvWindsOfMagicParams = {}));

class Database$1 {
    constructor(pathToDb) {
        this.collectionCache = new CollectionCache(pathToDb);
    }
    get abilities() { return this.collectionCache.getCollection(Abilities$1.KEY, Abilities$1.Entry); }
    get achievements() { return this.collectionCache.getCollection(Achievements$1.KEY, Achievements$1.Entry); }
    get actionResults() { return this.collectionCache.getCollection(ActionResults$1.KEY, ActionResults$1.Entry); }
    get actionResultsAdditionalOutcomes() { return this.collectionCache.getCollection(ActionResultsAdditionalOutcomes$1.KEY, ActionResultsAdditionalOutcomes$1.Entry); }
    get actionResultsAdditionalOutcomesEnums() { return this.collectionCache.getCollection(ActionResultsAdditionalOutcomesEnums$1.KEY, ActionResultsAdditionalOutcomesEnums$1.Entry); }
    get adviceInfoTexts() { return this.collectionCache.getCollection(AdviceInfoTexts$1.KEY, AdviceInfoTexts$1.Entry); }
    get adviceLevels() { return this.collectionCache.getCollection(AdviceLevels$1.KEY, AdviceLevels$1.Entry); }
    get adviceLevelsInfoTextJuncs() { return this.collectionCache.getCollection(AdviceLevelsInfoTextJuncs.KEY, AdviceLevelsInfoTextJuncs.Entry); }
    get adviceThreads() { return this.collectionCache.getCollection(AdviceThreads$1.KEY, AdviceThreads$1.Entry); }
    get adviceTriggers() { return this.collectionCache.getCollection(AdviceTriggers$1.KEY, AdviceTriggers$1.Entry); }
    get adviceTriggerToAdviceThread() { return this.collectionCache.getCollection(AdviceTriggerToAdviceThread$1.KEY, AdviceTriggerToAdviceThread$1.Entry); }
    get advisors() { return this.collectionCache.getCollection(Advisors$1.KEY, Advisors$1.Entry); }
    get agents() { return this.collectionCache.getCollection(Agents$1.KEY, Agents$1.Entry); }
    get agentAbilityCategories() { return this.collectionCache.getCollection(AgentAbilityCategories.KEY, AgentAbilityCategories.Entry); }
    get agentActions() { return this.collectionCache.getCollection(AgentActions$1.KEY, AgentActions$1.Entry); }
    get agentAttributes() { return this.collectionCache.getCollection(AgentAttributes$1.KEY, AgentAttributes$1.Entry); }
    get agentCultureDetails() { return this.collectionCache.getCollection(AgentCultureDetails$1.KEY, AgentCultureDetails$1.Entry); }
    get agentLocalisations() { return this.collectionCache.getCollection(AgentLocalisations$1.KEY, AgentLocalisations$1.Entry); }
    get agentStringFactionOverrides() { return this.collectionCache.getCollection(AgentStringFactionOverrides$1.KEY, AgentStringFactionOverrides$1.Entry); }
    get agentStringSubcultureOverrides() { return this.collectionCache.getCollection(AgentStringSubcultureOverrides$1.KEY, AgentStringSubcultureOverrides$1.Entry); }
    get agentSubcultureGenderOverrides() { return this.collectionCache.getCollection(AgentSubcultureGenderOverrides$1.KEY, AgentSubcultureGenderOverrides$1.Entry); }
    get agentSubtypes() { return this.collectionCache.getCollection(AgentSubtypes.KEY, AgentSubtypes.Entry); }
    get agentSubtypesToMissionGroups() { return this.collectionCache.getCollection(AgentSubtypesToMissionGroups.KEY, AgentSubtypesToMissionGroups.Entry); }
    get agentSubtypeCivilWarFactionOverrides() { return this.collectionCache.getCollection(AgentSubtypeCivilWarFactionOverrides.KEY, AgentSubtypeCivilWarFactionOverrides.Entry); }
    get agentSubtypeMilitaryForceCreationOverrides() { return this.collectionCache.getCollection(AgentSubtypeMilitaryForceCreationOverrides.KEY, AgentSubtypeMilitaryForceCreationOverrides.Entry); }
    get agentSubtypeSubcultureOverrides() { return this.collectionCache.getCollection(AgentSubtypeSubcultureOverrides.KEY, AgentSubtypeSubcultureOverrides.Entry); }
    get agentSubtypeToVows() { return this.collectionCache.getCollection(AgentSubtypeToVows.KEY, AgentSubtypeToVows.Entry); }
    get agentToAgentAbilities() { return this.collectionCache.getCollection(AgentToAgentAbilities$1.KEY, AgentToAgentAbilities$1.Entry); }
    get agentToAgentAttributes() { return this.collectionCache.getCollection(AgentToAgentAttributes$1.KEY, AgentToAgentAttributes$1.Entry); }
    get agentUniforms() { return this.collectionCache.getCollection(AgentUniforms$1.KEY, AgentUniforms$1.Entry); }
    get aideDeCampSpeeches() { return this.collectionCache.getCollection(AideDeCampSpeeches$1.KEY, AideDeCampSpeeches$1.Entry); }
    get aiUsageGroups() { return this.collectionCache.getCollection(AiUsageGroups.KEY, AiUsageGroups.Entry); }
    get ancillaries() { return this.collectionCache.getCollection(Ancillaries$1.KEY, Ancillaries$1.Entry); }
    get ancillariesCategories() { return this.collectionCache.getCollection(AncillariesCategories$1.KEY, AncillariesCategories$1.Entry); }
    get ancillariesCategoriesAgentTypeScores() { return this.collectionCache.getCollection(AncillariesCategoriesAgentTypeScores.KEY, AncillariesCategoriesAgentTypeScores.Entry); }
    get ancillariesCategoriesFactionJunctions() { return this.collectionCache.getCollection(AncillariesCategoriesFactionJunctions.KEY, AncillariesCategoriesFactionJunctions.Entry); }
    get ancillariesIncludedAgentSubtypes() { return this.collectionCache.getCollection(AncillariesIncludedAgentSubtypes.KEY, AncillariesIncludedAgentSubtypes.Entry); }
    get ancillariesRequiredSkills() { return this.collectionCache.getCollection(AncillariesRequiredSkills.KEY, AncillariesRequiredSkills.Entry); }
    get ancillariesSubcategories() { return this.collectionCache.getCollection(AncillariesSubcategories.KEY, AncillariesSubcategories.Entry); }
    get ancillaryIncludedSubcultures() { return this.collectionCache.getCollection(AncillaryIncludedSubcultures$1.KEY, AncillaryIncludedSubcultures$1.Entry); }
    get ancillaryInfo() { return this.collectionCache.getCollection(AncillaryInfo$1.KEY, AncillaryInfo$1.Entry); }
    get ancillarySalvageResources() { return this.collectionCache.getCollection(AncillarySalvageResources.KEY, AncillarySalvageResources.Entry); }
    get ancillaryToEffects() { return this.collectionCache.getCollection(AncillaryToEffects$1.KEY, AncillaryToEffects$1.Entry); }
    get ancillaryToIncludedAgents() { return this.collectionCache.getCollection(AncillaryToIncludedAgents$1.KEY, AncillaryToIncludedAgents$1.Entry); }
    get ancillaryTriggers() { return this.collectionCache.getCollection(AncillaryTriggers$1.KEY, AncillaryTriggers$1.Entry); }
    get ancillaryTriggersToAncillaryRemovals() { return this.collectionCache.getCollection(AncillaryTriggersToAncillaryRemovals$1.KEY, AncillaryTriggersToAncillaryRemovals$1.Entry); }
    get ancillaryTriggerEffects() { return this.collectionCache.getCollection(AncillaryTriggerEffects$1.KEY, AncillaryTriggerEffects$1.Entry); }
    get ancillaryTypes() { return this.collectionCache.getCollection(AncillaryTypes$1.KEY, AncillaryTypes$1.Entry); }
    get ancillaryUniquenessGroupings() { return this.collectionCache.getCollection(AncillaryUniquenessGroupings.KEY, AncillaryUniquenessGroupings.Entry); }
    get animals() { return this.collectionCache.getCollection(Animals$1.KEY, Animals$1.Entry); }
    get animationCategories() { return this.collectionCache.getCollection(AnimationCategories$1.KEY, AnimationCategories$1.Entry); }
    get animationSetPrebattleGroups() { return this.collectionCache.getCollection(AnimationSetPrebattleGroups.KEY, AnimationSetPrebattleGroups.Entry); }
    get animationSetPrebattleGroupJunctions() { return this.collectionCache.getCollection(AnimationSetPrebattleGroupJunctions.KEY, AnimationSetPrebattleGroupJunctions.Entry); }
    get animationSetPrebattleGroupViewConfigurations() { return this.collectionCache.getCollection(AnimationSetPrebattleGroupViewConfigurations.KEY, AnimationSetPrebattleGroupViewConfigurations.Entry); }
    get animationSlotCategories() { return this.collectionCache.getCollection(AnimationSlotCategories$1.KEY, AnimationSlotCategories$1.Entry); }
    get areaOfEffectDisplays() { return this.collectionCache.getCollection(AreaOfEffectDisplays.KEY, AreaOfEffectDisplays.Entry); }
    get armedCitizenryUnitsToUnitGroupsJunctions() { return this.collectionCache.getCollection(ArmedCitizenryUnitsToUnitGroupsJunctions$1.KEY, ArmedCitizenryUnitsToUnitGroupsJunctions$1.Entry); }
    get armedCitizenryUnitGroups() { return this.collectionCache.getCollection(ArmedCitizenryUnitGroups$1.KEY, ArmedCitizenryUnitGroups$1.Entry); }
    get armySpecialAbilities() { return this.collectionCache.getCollection(ArmySpecialAbilities.KEY, ArmySpecialAbilities.Entry); }
    get armySpecialAbilitiesForFactionJunctions() { return this.collectionCache.getCollection(ArmySpecialAbilitiesForFactionJunctions.KEY, ArmySpecialAbilitiesForFactionJunctions.Entry); }
    get audioAbilities() { return this.collectionCache.getCollection(AudioAbilities.KEY, AudioAbilities.Entry); }
    get audioAbilityPhases() { return this.collectionCache.getCollection(AudioAbilityPhases.KEY, AudioAbilityPhases.Entry); }
    get audioAreaOfEffects() { return this.collectionCache.getCollection(AudioAreaOfEffects.KEY, AudioAreaOfEffects.Entry); }
    get audioAreaOfEffectPositioningTypes() { return this.collectionCache.getCollection(AudioAreaOfEffectPositioningTypes.KEY, AudioAreaOfEffectPositioningTypes.Entry); }
    get audioArmourTypes() { return this.collectionCache.getCollection(AudioArmourTypes.KEY, AudioArmourTypes.Entry); }
    get audioBattleEnvironments() { return this.collectionCache.getCollection(AudioBattleEnvironments.KEY, AudioBattleEnvironments.Entry); }
    get audioBattleEnvironmentLoops() { return this.collectionCache.getCollection(AudioBattleEnvironmentLoops.KEY, AudioBattleEnvironmentLoops.Entry); }
    get audioBattleEnvironmentLoopJunctions() { return this.collectionCache.getCollection(AudioBattleEnvironmentLoopJunctions.KEY, AudioBattleEnvironmentLoopJunctions.Entry); }
    get audioBattleEnvironmentOneShots() { return this.collectionCache.getCollection(AudioBattleEnvironmentOneShots.KEY, AudioBattleEnvironmentOneShots.Entry); }
    get audioBattleEnvironmentOneShotJunctions() { return this.collectionCache.getCollection(AudioBattleEnvironmentOneShotJunctions.KEY, AudioBattleEnvironmentOneShotJunctions.Entry); }
    get audioBattleEnvironmentReverbs() { return this.collectionCache.getCollection(AudioBattleEnvironmentReverbs.KEY, AudioBattleEnvironmentReverbs.Entry); }
    get audioBattleEnvironmentReverbJunctions() { return this.collectionCache.getCollection(AudioBattleEnvironmentReverbJunctions.KEY, AudioBattleEnvironmentReverbJunctions.Entry); }
    get audioBattleEnvironmentReverbTypes() { return this.collectionCache.getCollection(AudioBattleEnvironmentReverbTypes.KEY, AudioBattleEnvironmentReverbTypes.Entry); }
    get audioBattleEnvironmentTypes() { return this.collectionCache.getCollection(AudioBattleEnvironmentTypes.KEY, AudioBattleEnvironmentTypes.Entry); }
    get audioBattleEnvironmentWeathers() { return this.collectionCache.getCollection(AudioBattleEnvironmentWeathers.KEY, AudioBattleEnvironmentWeathers.Entry); }
    get audioBattleEnvironmentWeatherLoopJunctions() { return this.collectionCache.getCollection(AudioBattleEnvironmentWeatherLoopJunctions.KEY, AudioBattleEnvironmentWeatherLoopJunctions.Entry); }
    get audioBattleEnvironmentWeatherOneShotJunctions() { return this.collectionCache.getCollection(AudioBattleEnvironmentWeatherOneShotJunctions.KEY, AudioBattleEnvironmentWeatherOneShotJunctions.Entry); }
    get audioBattleGroundTypes() { return this.collectionCache.getCollection(AudioBattleGroundTypes.KEY, AudioBattleGroundTypes.Entry); }
    get audioCampaignBuildings() { return this.collectionCache.getCollection(AudioCampaignBuildings.KEY, AudioCampaignBuildings.Entry); }
    get audioCampaignBuildingEnums() { return this.collectionCache.getCollection(AudioCampaignBuildingEnums$1.KEY, AudioCampaignBuildingEnums$1.Entry); }
    get audioCampaignEnvironmentGroundTypeSounds() { return this.collectionCache.getCollection(AudioCampaignEnvironmentGroundTypeSounds.KEY, AudioCampaignEnvironmentGroundTypeSounds.Entry); }
    get audioCampaignEnvironmentGroundTypeSoundAssignments() { return this.collectionCache.getCollection(AudioCampaignEnvironmentGroundTypeSoundAssignments.KEY, AudioCampaignEnvironmentGroundTypeSoundAssignments.Entry); }
    get audioCampaignEnvironmentGroundTypeSoundGroundTypes() { return this.collectionCache.getCollection(AudioCampaignEnvironmentGroundTypeSoundGroundTypes.KEY, AudioCampaignEnvironmentGroundTypeSoundGroundTypes.Entry); }
    get audioCampaignEnvironmentGroundTypeSoundSounds() { return this.collectionCache.getCollection(AudioCampaignEnvironmentGroundTypeSoundSounds.KEY, AudioCampaignEnvironmentGroundTypeSoundSounds.Entry); }
    get audioCampaignEnvironmentLoopingSounds() { return this.collectionCache.getCollection(AudioCampaignEnvironmentLoopingSounds.KEY, AudioCampaignEnvironmentLoopingSounds.Entry); }
    get audioCampaignEnvironmentStaticSounds() { return this.collectionCache.getCollection(AudioCampaignEnvironmentStaticSounds.KEY, AudioCampaignEnvironmentStaticSounds.Entry); }
    get audioCampaignEnvironmentTreeSounds() { return this.collectionCache.getCollection(AudioCampaignEnvironmentTreeSounds.KEY, AudioCampaignEnvironmentTreeSounds.Entry); }
    get audioCampaignEnvironmentTreeSoundAssignments() { return this.collectionCache.getCollection(AudioCampaignEnvironmentTreeSoundAssignments.KEY, AudioCampaignEnvironmentTreeSoundAssignments.Entry); }
    get audioCampaignEnvironmentTreeSoundSounds() { return this.collectionCache.getCollection(AudioCampaignEnvironmentTreeSoundSounds.KEY, AudioCampaignEnvironmentTreeSoundSounds.Entry); }
    get audioCampaignEnvironmentTreeSoundTrees() { return this.collectionCache.getCollection(AudioCampaignEnvironmentTreeSoundTrees.KEY, AudioCampaignEnvironmentTreeSoundTrees.Entry); }
    get audioCampaignGroundTypes() { return this.collectionCache.getCollection(AudioCampaignGroundTypes.KEY, AudioCampaignGroundTypes.Entry); }
    get audioCampaignMaps() { return this.collectionCache.getCollection(AudioCampaignMaps.KEY, AudioCampaignMaps.Entry); }
    get audioCampaignStances() { return this.collectionCache.getCollection(AudioCampaignStances.KEY, AudioCampaignStances.Entry); }
    get audioCampaignTreeTypes() { return this.collectionCache.getCollection(AudioCampaignTreeTypes.KEY, AudioCampaignTreeTypes.Entry); }
    get audioEntityActors() { return this.collectionCache.getCollection(AudioEntityActors.KEY, AudioEntityActors.Entry); }
    get audioEntityFocusPools() { return this.collectionCache.getCollection(AudioEntityFocusPools.KEY, AudioEntityFocusPools.Entry); }
    get audioEntityLoopingSounds() { return this.collectionCache.getCollection(AudioEntityLoopingSounds.KEY, AudioEntityLoopingSounds.Entry); }
    get audioEntityRandomVocalisations() { return this.collectionCache.getCollection(AudioEntityRandomVocalisations.KEY, AudioEntityRandomVocalisations.Entry); }
    get audioEntityTypes() { return this.collectionCache.getCollection(AudioEntityTypes.KEY, AudioEntityTypes.Entry); }
    get audioEntityTypeLimitations() { return this.collectionCache.getCollection(AudioEntityTypeLimitations.KEY, AudioEntityTypeLimitations.Entry); }
    get audioExplosions() { return this.collectionCache.getCollection(AudioExplosions.KEY, AudioExplosions.Entry); }
    get audioGroupSounds() { return this.collectionCache.getCollection(AudioGroupSounds.KEY, AudioGroupSounds.Entry); }
    get audioGroupSoundAssignments() { return this.collectionCache.getCollection(AudioGroupSoundAssignments.KEY, AudioGroupSoundAssignments.Entry); }
    get audioGroupSoundGroupings() { return this.collectionCache.getCollection(AudioGroupSoundGroupings.KEY, AudioGroupSoundGroupings.Entry); }
    get audioGroupSoundSituations() { return this.collectionCache.getCollection(AudioGroupSoundSituations.KEY, AudioGroupSoundSituations.Entry); }
    get audioMarkers() { return this.collectionCache.getCollection(AudioMarkers.KEY, AudioMarkers.Entry); }
    get audioMarkerTypes() { return this.collectionCache.getCollection(AudioMarkerTypes.KEY, AudioMarkerTypes.Entry); }
    get audioMaterials() { return this.collectionCache.getCollection(AudioMaterials.KEY, AudioMaterials.Entry); }
    get audioMaterialsEnums() { return this.collectionCache.getCollection(AudioMaterialsEnums$1.KEY, AudioMaterialsEnums$1.Entry); }
    get audioMeleeHitCategories() { return this.collectionCache.getCollection(AudioMeleeHitCategories.KEY, AudioMeleeHitCategories.Entry); }
    get audioMeleeHitTypes() { return this.collectionCache.getCollection(AudioMeleeHitTypes.KEY, AudioMeleeHitTypes.Entry); }
    get audioMeleeWeaponTypes() { return this.collectionCache.getCollection(AudioMeleeWeaponTypes.KEY, AudioMeleeWeaponTypes.Entry); }
    get audioMetadataTags() { return this.collectionCache.getCollection(AudioMetadataTags.KEY, AudioMetadataTags.Entry); }
    get audioMetadataTagEntityOverrides() { return this.collectionCache.getCollection(AudioMetadataTagEntityOverrides.KEY, AudioMetadataTagEntityOverrides.Entry); }
    get audioMissileWeaponTypes() { return this.collectionCache.getCollection(AudioMissileWeaponTypes.KEY, AudioMissileWeaponTypes.Entry); }
    get audioProjectiles() { return this.collectionCache.getCollection(AudioProjectiles$1.KEY, AudioProjectiles$1.Entry); }
    get audioProjectileBombardments() { return this.collectionCache.getCollection(AudioProjectileBombardments.KEY, AudioProjectileBombardments.Entry); }
    get audioProjectileLimitations() { return this.collectionCache.getCollection(AudioProjectileLimitations.KEY, AudioProjectileLimitations.Entry); }
    get audioRtpcAssignments() { return this.collectionCache.getCollection(AudioRtpcAssignments.KEY, AudioRtpcAssignments.Entry); }
    get audioShieldTypes() { return this.collectionCache.getCollection(AudioShieldTypes.KEY, AudioShieldTypes.Entry); }
    get audioSphereOfInfluences() { return this.collectionCache.getCollection(AudioSphereOfInfluences.KEY, AudioSphereOfInfluences.Entry); }
    get audioSphereOfInfluenceGroups() { return this.collectionCache.getCollection(AudioSphereOfInfluenceGroups.KEY, AudioSphereOfInfluenceGroups.Entry); }
    get audioSphereOfInfluenceOneShots() { return this.collectionCache.getCollection(AudioSphereOfInfluenceOneShots.KEY, AudioSphereOfInfluenceOneShots.Entry); }
    get audioTechnologies() { return this.collectionCache.getCollection(AudioTechnologies.KEY, AudioTechnologies.Entry); }
    get audioUiCategories() { return this.collectionCache.getCollection(AudioUiCategories.KEY, AudioUiCategories.Entry); }
    get audioVoiceoverCultures() { return this.collectionCache.getCollection(AudioVoiceoverCultures.KEY, AudioVoiceoverCultures.Entry); }
    get audioVoActors() { return this.collectionCache.getCollection(AudioVoActors$1.KEY, AudioVoActors$1.Entry); }
    get audioVoActorGroups() { return this.collectionCache.getCollection(AudioVoActorGroups$1.KEY, AudioVoActorGroups$1.Entry); }
    get audioVoBattleSpecialAbilityStates() { return this.collectionCache.getCollection(AudioVoBattleSpecialAbilityStates.KEY, AudioVoBattleSpecialAbilityStates.Entry); }
    get audioVoCampaignSpecialAbilityStates() { return this.collectionCache.getCollection(AudioVoCampaignSpecialAbilityStates.KEY, AudioVoCampaignSpecialAbilityStates.Entry); }
    get audioVoSelectedSwitches() { return this.collectionCache.getCollection(AudioVoSelectedSwitches$1.KEY, AudioVoSelectedSwitches$1.Entry); }
    get autoresolverAiUsageGroupCombatPotentialModifiers() { return this.collectionCache.getCollection(AutoresolverAiUsageGroupCombatPotentialModifiers.KEY, AutoresolverAiUsageGroupCombatPotentialModifiers.Entry); }
    get autoresolverBattleTypes() { return this.collectionCache.getCollection(AutoresolverBattleTypes.KEY, AutoresolverBattleTypes.Entry); }
    get autoresolverDifficultyLevelEnums() { return this.collectionCache.getCollection(AutoresolverDifficultyLevelEnums.KEY, AutoresolverDifficultyLevelEnums.Entry); }
    get autoresolverModifierBonusTypes() { return this.collectionCache.getCollection(AutoresolverModifierBonusTypes.KEY, AutoresolverModifierBonusTypes.Entry); }
    get autoresolverModifierGroupKeys() { return this.collectionCache.getCollection(AutoresolverModifierGroupKeys.KEY, AutoresolverModifierGroupKeys.Entry); }
    get autoresolverModifierGroupLookups() { return this.collectionCache.getCollection(AutoresolverModifierGroupLookups.KEY, AutoresolverModifierGroupLookups.Entry); }
    get autoresolverModifierGroupToModifiers() { return this.collectionCache.getCollection(AutoresolverModifierGroupToModifiers.KEY, AutoresolverModifierGroupToModifiers.Entry); }
    get autoresolverModifierMultiplierMechanicEnums() { return this.collectionCache.getCollection(AutoresolverModifierMultiplierMechanicEnums.KEY, AutoresolverModifierMultiplierMechanicEnums.Entry); }
    get autoresolverModifierTargets() { return this.collectionCache.getCollection(AutoresolverModifierTargets.KEY, AutoresolverModifierTargets.Entry); }
    get autoresolverOptionalBoolEnums() { return this.collectionCache.getCollection(AutoresolverOptionalBoolEnums.KEY, AutoresolverOptionalBoolEnums.Entry); }
    get autoresolverPlayerTypes() { return this.collectionCache.getCollection(AutoresolverPlayerTypes.KEY, AutoresolverPlayerTypes.Entry); }
    get autoresolverUnitRecordUsageFlags() { return this.collectionCache.getCollection(AutoresolverUnitRecordUsageFlags.KEY, AutoresolverUnitRecordUsageFlags.Entry); }
    get banners() { return this.collectionCache.getCollection(Banners.KEY, Banners.Entry); }
    get bannersPermittedUnitSets() { return this.collectionCache.getCollection(BannersPermittedUnitSets.KEY, BannersPermittedUnitSets.Entry); }
    get battlefieldBuildings() { return this.collectionCache.getCollection(BattlefieldBuildings$1.KEY, BattlefieldBuildings$1.Entry); }
    get battlefieldBuildingsNames() { return this.collectionCache.getCollection(BattlefieldBuildingsNames$1.KEY, BattlefieldBuildingsNames$1.Entry); }
    get battlefieldBuildingsWithProjectilesNames() { return this.collectionCache.getCollection(BattlefieldBuildingsWithProjectilesNames$1.KEY, BattlefieldBuildingsWithProjectilesNames$1.Entry); }
    get battlefieldBuildingCategories() { return this.collectionCache.getCollection(BattlefieldBuildingCategories$1.KEY, BattlefieldBuildingCategories$1.Entry); }
    get battlefieldDeployableSiegeItems() { return this.collectionCache.getCollection(BattlefieldDeployableSiegeItems$1.KEY, BattlefieldDeployableSiegeItems$1.Entry); }
    get battlefieldEngines() { return this.collectionCache.getCollection(BattlefieldEngines$1.KEY, BattlefieldEngines$1.Entry); }
    get battlefieldEnginesAutonomous() { return this.collectionCache.getCollection(BattlefieldEnginesAutonomous$1.KEY, BattlefieldEnginesAutonomous$1.Entry); }
    get battlefieldSiegeVehicles() { return this.collectionCache.getCollection(BattlefieldSiegeVehicles$1.KEY, BattlefieldSiegeVehicles$1.Entry); }
    get battlefieldSiegeVehiclesCustomBattles() { return this.collectionCache.getCollection(BattlefieldSiegeVehiclesCustomBattles$1.KEY, BattlefieldSiegeVehiclesCustomBattles$1.Entry); }
    get battles() { return this.collectionCache.getCollection(Battles$1.KEY, Battles$1.Entry); }
    get battleAiAbilitiesUsageParams() { return this.collectionCache.getCollection(BattleAiAbilitiesUsageParams.KEY, BattleAiAbilitiesUsageParams.Entry); }
    get battleAiAbilitiesUsageTemplatesToParams() { return this.collectionCache.getCollection(BattleAiAbilitiesUsageTemplatesToParams.KEY, BattleAiAbilitiesUsageTemplatesToParams.Entry); }
    get battleAiAbilitiesUsageTemplateNames() { return this.collectionCache.getCollection(BattleAiAbilitiesUsageTemplateNames.KEY, BattleAiAbilitiesUsageTemplateNames.Entry); }
    get battleAnimationsTable() { return this.collectionCache.getCollection(BattleAnimationsTable$1.KEY, BattleAnimationsTable$1.Entry); }
    get battleCameras() { return this.collectionCache.getCollection(BattleCameras$1.KEY, BattleCameras$1.Entry); }
    get battleCameraShakeParameters() { return this.collectionCache.getCollection(BattleCameraShakeParameters.KEY, BattleCameraShakeParameters.Entry); }
    get battleCatchmentOverrideAreas() { return this.collectionCache.getCollection(BattleCatchmentOverrideAreas.KEY, BattleCatchmentOverrideAreas.Entry); }
    get battleCatchmentOverrideBattleMappings() { return this.collectionCache.getCollection(BattleCatchmentOverrideBattleMappings.KEY, BattleCatchmentOverrideBattleMappings.Entry); }
    get battleCatchmentOverrideGroups() { return this.collectionCache.getCollection(BattleCatchmentOverrideGroups.KEY, BattleCatchmentOverrideGroups.Entry); }
    get battleCatchmentOverrideGroupBattles() { return this.collectionCache.getCollection(BattleCatchmentOverrideGroupBattles.KEY, BattleCatchmentOverrideGroupBattles.Entry); }
    get battleCinematicEvents() { return this.collectionCache.getCollection(BattleCinematicEvents$1.KEY, BattleCinematicEvents$1.Entry); }
    get battleCinematicEventCategories() { return this.collectionCache.getCollection(BattleCinematicEventCategories$1.KEY, BattleCinematicEventCategories$1.Entry); }
    get battleClimateWeatherDescriptions() { return this.collectionCache.getCollection(BattleClimateWeatherDescriptions$1.KEY, BattleClimateWeatherDescriptions$1.Entry); }
    get battleContextArmySpecialAbilityJunctions() { return this.collectionCache.getCollection(BattleContextArmySpecialAbilityJunctions.KEY, BattleContextArmySpecialAbilityJunctions.Entry); }
    get battleContextUnitAbilityJunctions() { return this.collectionCache.getCollection(BattleContextUnitAbilityJunctions.KEY, BattleContextUnitAbilityJunctions.Entry); }
    get battleContextUnitAttributeJunctions() { return this.collectionCache.getCollection(BattleContextUnitAttributeJunctions.KEY, BattleContextUnitAttributeJunctions.Entry); }
    get battleEntities() { return this.collectionCache.getCollection(BattleEntities$1.KEY, BattleEntities$1.Entry); }
    get battleEntitiesClassValidationEnum() { return this.collectionCache.getCollection(BattleEntitiesClassValidationEnum$1.KEY, BattleEntitiesClassValidationEnum$1.Entry); }
    get battleEntitiesGradientStrategyEnums() { return this.collectionCache.getCollection(BattleEntitiesGradientStrategyEnums.KEY, BattleEntitiesGradientStrategyEnums.Entry); }
    get battleEntitiesShapeEnum() { return this.collectionCache.getCollection(BattleEntitiesShapeEnum$1.KEY, BattleEntitiesShapeEnum$1.Entry); }
    get battleEntitiesSizeEnums() { return this.collectionCache.getCollection(BattleEntitiesSizeEnums.KEY, BattleEntitiesSizeEnums.Entry); }
    get battleEntitiesTypesEnum() { return this.collectionCache.getCollection(BattleEntitiesTypesEnum$1.KEY, BattleEntitiesTypesEnum$1.Entry); }
    get battleEntityEffects() { return this.collectionCache.getCollection(BattleEntityEffects$1.KEY, BattleEntityEffects$1.Entry); }
    get battleEntityEffectsJunctions() { return this.collectionCache.getCollection(BattleEntityEffectsJunctions.KEY, BattleEntityEffectsJunctions.Entry); }
    get battleEntityStats() { return this.collectionCache.getCollection(BattleEntityStats.KEY, BattleEntityStats.Entry); }
    get battleMiscEffects() { return this.collectionCache.getCollection(BattleMiscEffects$1.KEY, BattleMiscEffects$1.Entry); }
    get battlePersonalities() { return this.collectionCache.getCollection(BattlePersonalities$1.KEY, BattlePersonalities$1.Entry); }
    get battlePersonalityTypesEnum() { return this.collectionCache.getCollection(BattlePersonalityTypesEnum$1.KEY, BattlePersonalityTypesEnum$1.Entry); }
    get battleResultTypes() { return this.collectionCache.getCollection(BattleResultTypes.KEY, BattleResultTypes.Entry); }
    get battleSequences() { return this.collectionCache.getCollection(BattleSequences$1.KEY, BattleSequences$1.Entry); }
    get battleSetPieces() { return this.collectionCache.getCollection(BattleSetPieces.KEY, BattleSetPieces.Entry); }
    get battleSetPieceArmies() { return this.collectionCache.getCollection(BattleSetPieceArmies.KEY, BattleSetPieceArmies.Entry); }
    get battleSetPieceArmiesCharacters() { return this.collectionCache.getCollection(BattleSetPieceArmiesCharacters.KEY, BattleSetPieceArmiesCharacters.Entry); }
    get battleSetPieceArmiesCharactersItems() { return this.collectionCache.getCollection(BattleSetPieceArmiesCharactersItems.KEY, BattleSetPieceArmiesCharactersItems.Entry); }
    get battleSetPieceArmiesCharactersJunctions() { return this.collectionCache.getCollection(BattleSetPieceArmiesCharactersJunctions.KEY, BattleSetPieceArmiesCharactersJunctions.Entry); }
    get battleSetPieceArmiesCharactersSkills() { return this.collectionCache.getCollection(BattleSetPieceArmiesCharactersSkills.KEY, BattleSetPieceArmiesCharactersSkills.Entry); }
    get battleSetPieceArmiesCharactersSkillsets() { return this.collectionCache.getCollection(BattleSetPieceArmiesCharactersSkillsets.KEY, BattleSetPieceArmiesCharactersSkillsets.Entry); }
    get battleSetPieceArmiesCharactersSkillsetsSkills() { return this.collectionCache.getCollection(BattleSetPieceArmiesCharactersSkillsetsSkills.KEY, BattleSetPieceArmiesCharactersSkillsetsSkills.Entry); }
    get battleSetPieceArmiesEffectBundles() { return this.collectionCache.getCollection(BattleSetPieceArmiesEffectBundles.KEY, BattleSetPieceArmiesEffectBundles.Entry); }
    get battleSetPieceArmiesJunctions() { return this.collectionCache.getCollection(BattleSetPieceArmiesJunctions.KEY, BattleSetPieceArmiesJunctions.Entry); }
    get battleSetPieceArmiesSkillsJunctions() { return this.collectionCache.getCollection(BattleSetPieceArmiesSkillsJunctions.KEY, BattleSetPieceArmiesSkillsJunctions.Entry); }
    get battleSetPieceArmiesUnits() { return this.collectionCache.getCollection(BattleSetPieceArmiesUnits.KEY, BattleSetPieceArmiesUnits.Entry); }
    get battleSetPieceArmiesUnitsJunctions() { return this.collectionCache.getCollection(BattleSetPieceArmiesUnitsJunctions.KEY, BattleSetPieceArmiesUnitsJunctions.Entry); }
    get battleSetPieceCampaignBattleScenes() { return this.collectionCache.getCollection(BattleSetPieceCampaignBattleScenes.KEY, BattleSetPieceCampaignBattleScenes.Entry); }
    get battleSetPieceCampaignBattleSceneViewConfigurations() { return this.collectionCache.getCollection(BattleSetPieceCampaignBattleSceneViewConfigurations.KEY, BattleSetPieceCampaignBattleSceneViewConfigurations.Entry); }
    get battleSetPieceFrontendGroups() { return this.collectionCache.getCollection(BattleSetPieceFrontendGroups.KEY, BattleSetPieceFrontendGroups.Entry); }
    get battleSetPieceFrontendGroupsToCharacters() { return this.collectionCache.getCollection(BattleSetPieceFrontendGroupsToCharacters.KEY, BattleSetPieceFrontendGroupsToCharacters.Entry); }
    get battleSiegeVehiclePermissions() { return this.collectionCache.getCollection(BattleSiegeVehiclePermissions$1.KEY, BattleSiegeVehiclePermissions$1.Entry); }
    get battleSkeletons() { return this.collectionCache.getCollection(BattleSkeletons$1.KEY, BattleSkeletons$1.Entry); }
    get battleSkeletonsLocomotionEnums() { return this.collectionCache.getCollection(BattleSkeletonsLocomotionEnums.KEY, BattleSkeletonsLocomotionEnums.Entry); }
    get battleTypes() { return this.collectionCache.getCollection(BattleTypes$1.KEY, BattleTypes$1.Entry); }
    get battleTypesToVictoryConditions() { return this.collectionCache.getCollection(BattleTypesToVictoryConditions$1.KEY, BattleTypesToVictoryConditions$1.Entry); }
    get battleTypeSetupLimits() { return this.collectionCache.getCollection(BattleTypeSetupLimits$1.KEY, BattleTypeSetupLimits$1.Entry); }
    get battleVortexs() { return this.collectionCache.getCollection(BattleVortexs.KEY, BattleVortexs.Entry); }
    get battleVortexCollisionResponses() { return this.collectionCache.getCollection(BattleVortexCollisionResponses.KEY, BattleVortexCollisionResponses.Entry); }
    get battleVortexCompositeSceneGroups() { return this.collectionCache.getCollection(BattleVortexCompositeSceneGroups.KEY, BattleVortexCompositeSceneGroups.Entry); }
    get battleVortexCompositeSceneGroupToScenes() { return this.collectionCache.getCollection(BattleVortexCompositeSceneGroupToScenes.KEY, BattleVortexCompositeSceneGroupToScenes.Entry); }
    get battleVortexLaunchSources() { return this.collectionCache.getCollection(BattleVortexLaunchSources.KEY, BattleVortexLaunchSources.Entry); }
    get battleWeatherTypes() { return this.collectionCache.getCollection(BattleWeatherTypes$1.KEY, BattleWeatherTypes$1.Entry); }
    get bmdExportTypes() { return this.collectionCache.getCollection(BmdExportTypes.KEY, BmdExportTypes.Entry); }
    get bmdLayerGroups() { return this.collectionCache.getCollection(BmdLayerGroups.KEY, BmdLayerGroups.Entry); }
    get bretonniaVows() { return this.collectionCache.getCollection(BretonniaVows.KEY, BretonniaVows.Entry); }
    get bretonniaVowsToTraits() { return this.collectionCache.getCollection(BretonniaVowsToTraits.KEY, BretonniaVowsToTraits.Entry); }
    get buildingBenefitCategories() { return this.collectionCache.getCollection(BuildingBenefitCategories.KEY, BuildingBenefitCategories.Entry); }
    get buildingCategories() { return this.collectionCache.getCollection(BuildingCategories$1.KEY, BuildingCategories$1.Entry); }
    get buildingChains() { return this.collectionCache.getCollection(BuildingChains$1.KEY, BuildingChains$1.Entry); }
    get buildingChainAvailabilities() { return this.collectionCache.getCollection(BuildingChainAvailabilities$1.KEY, BuildingChainAvailabilities$1.Entry); }
    get buildingChainAvailabilitySets() { return this.collectionCache.getCollection(BuildingChainAvailabilitySets$1.KEY, BuildingChainAvailabilitySets$1.Entry); }
    get buildingChainAvailabilitySetIds() { return this.collectionCache.getCollection(BuildingChainAvailabilitySetIds$1.KEY, BuildingChainAvailabilitySetIds$1.Entry); }
    get buildingCultureVariants() { return this.collectionCache.getCollection(BuildingCultureVariants$1.KEY, BuildingCultureVariants$1.Entry); }
    get buildingDescriptionTexts() { return this.collectionCache.getCollection(BuildingDescriptionTexts$1.KEY, BuildingDescriptionTexts$1.Entry); }
    get buildingDowngradeJunctions() { return this.collectionCache.getCollection(BuildingDowngradeJunctions.KEY, BuildingDowngradeJunctions.Entry); }
    get buildingEffectsJunction() { return this.collectionCache.getCollection(BuildingEffectsJunction$1.KEY, BuildingEffectsJunction$1.Entry); }
    get buildingFlavourTexts() { return this.collectionCache.getCollection(BuildingFlavourTexts$1.KEY, BuildingFlavourTexts$1.Entry); }
    get buildingInstances() { return this.collectionCache.getCollection(BuildingInstances$1.KEY, BuildingInstances$1.Entry); }
    get buildingLevels() { return this.collectionCache.getCollection(BuildingLevels$1.KEY, BuildingLevels$1.Entry); }
    get buildingLevelsCampaignBmdLayerGroupJunctions() { return this.collectionCache.getCollection(BuildingLevelsCampaignBmdLayerGroupJunctions.KEY, BuildingLevelsCampaignBmdLayerGroupJunctions.Entry); }
    get buildingLevelArmedCitizenryJunctions() { return this.collectionCache.getCollection(BuildingLevelArmedCitizenryJunctions$1.KEY, BuildingLevelArmedCitizenryJunctions$1.Entry); }
    get buildingLevelRequiredBuildings() { return this.collectionCache.getCollection(BuildingLevelRequiredBuildings.KEY, BuildingLevelRequiredBuildings.Entry); }
    get buildingLevelRequiredTechnologyJunctions() { return this.collectionCache.getCollection(BuildingLevelRequiredTechnologyJunctions$1.KEY, BuildingLevelRequiredTechnologyJunctions$1.Entry); }
    get buildingSets() { return this.collectionCache.getCollection(BuildingSets$1.KEY, BuildingSets$1.Entry); }
    get buildingSetToBuildingJunctions() { return this.collectionCache.getCollection(BuildingSetToBuildingJunctions$1.KEY, BuildingSetToBuildingJunctions$1.Entry); }
    get buildingShortDescriptionTexts() { return this.collectionCache.getCollection(BuildingShortDescriptionTexts$1.KEY, BuildingShortDescriptionTexts$1.Entry); }
    get buildingStates() { return this.collectionCache.getCollection(BuildingStates$1.KEY, BuildingStates$1.Entry); }
    get buildingSuperchains() { return this.collectionCache.getCollection(BuildingSuperchains$1.KEY, BuildingSuperchains$1.Entry); }
    get buildingToBuildingBenefitJunctions() { return this.collectionCache.getCollection(BuildingToBuildingBenefitJunctions.KEY, BuildingToBuildingBenefitJunctions.Entry); }
    get buildingUnitsAllowed() { return this.collectionCache.getCollection(BuildingUnitsAllowed$1.KEY, BuildingUnitsAllowed$1.Entry); }
    get buildingUpgradesJunction() { return this.collectionCache.getCollection(BuildingUpgradesJunction$1.KEY, BuildingUpgradesJunction$1.Entry); }
    get caiAgentDistributionProfiles() { return this.collectionCache.getCollection(CaiAgentDistributionProfiles$1.KEY, CaiAgentDistributionProfiles$1.Entry); }
    get caiAgentDistributionTypes() { return this.collectionCache.getCollection(CaiAgentDistributionTypes$1.KEY, CaiAgentDistributionTypes$1.Entry); }
    get caiAgentEmbedProfiles() { return this.collectionCache.getCollection(CaiAgentEmbedProfiles.KEY, CaiAgentEmbedProfiles.Entry); }
    get caiAgentEmbedProfileAgentTypeJunctions() { return this.collectionCache.getCollection(CaiAgentEmbedProfileAgentTypeJunctions.KEY, CaiAgentEmbedProfileAgentTypeJunctions.Entry); }
    get caiAgentRecordToCaiAgentTypeJunctions() { return this.collectionCache.getCollection(CaiAgentRecordToCaiAgentTypeJunctions$1.KEY, CaiAgentRecordToCaiAgentTypeJunctions$1.Entry); }
    get caiAgentRecruitmentProfiles() { return this.collectionCache.getCollection(CaiAgentRecruitmentProfiles$1.KEY, CaiAgentRecruitmentProfiles$1.Entry); }
    get caiAgentRecruitmentTypes() { return this.collectionCache.getCollection(CaiAgentRecruitmentTypes$1.KEY, CaiAgentRecruitmentTypes$1.Entry); }
    get caiAgentTypes() { return this.collectionCache.getCollection(CaiAgentTypes$1.KEY, CaiAgentTypes$1.Entry); }
    get caiAgentTypeDistributionProfileJunctions() { return this.collectionCache.getCollection(CaiAgentTypeDistributionProfileJunctions$1.KEY, CaiAgentTypeDistributionProfileJunctions$1.Entry); }
    get caiAgentTypeRecruitmentProfileJunctions() { return this.collectionCache.getCollection(CaiAgentTypeRecruitmentProfileJunctions$1.KEY, CaiAgentTypeRecruitmentProfileJunctions$1.Entry); }
    get caiBaseBuildingContextValues() { return this.collectionCache.getCollection(CaiBaseBuildingContextValues$1.KEY, CaiBaseBuildingContextValues$1.Entry); }
    get caiCharacterSkillSynergies() { return this.collectionCache.getCollection(CaiCharacterSkillSynergies.KEY, CaiCharacterSkillSynergies.Entry); }
    get caiCharacterSkillSynergyLevels() { return this.collectionCache.getCollection(CaiCharacterSkillSynergyLevels.KEY, CaiCharacterSkillSynergyLevels.Entry); }
    get caiConstructionSystemBlockingBuildings() { return this.collectionCache.getCollection(CaiConstructionSystemBlockingBuildings.KEY, CaiConstructionSystemBlockingBuildings.Entry); }
    get caiConstructionSystemBlockingCategories() { return this.collectionCache.getCollection(CaiConstructionSystemBlockingCategories.KEY, CaiConstructionSystemBlockingCategories.Entry); }
    get caiConstructionSystemBuildingValues() { return this.collectionCache.getCollection(CaiConstructionSystemBuildingValues$1.KEY, CaiConstructionSystemBuildingValues$1.Entry); }
    get caiConstructionSystemCategories() { return this.collectionCache.getCollection(CaiConstructionSystemCategories$1.KEY, CaiConstructionSystemCategories$1.Entry); }
    get caiConstructionSystemCategoryGroups() { return this.collectionCache.getCollection(CaiConstructionSystemCategoryGroups$1.KEY, CaiConstructionSystemCategoryGroups$1.Entry); }
    get caiConstructionSystemProvinceTemplateAssignmentPolicies() { return this.collectionCache.getCollection(CaiConstructionSystemProvinceTemplateAssignmentPolicies$1.KEY, CaiConstructionSystemProvinceTemplateAssignmentPolicies$1.Entry); }
    get caiConstructionSystemStrategicContextFactionStatusOverrides() { return this.collectionCache.getCollection(CaiConstructionSystemStrategicContextFactionStatusOverrides.KEY, CaiConstructionSystemStrategicContextFactionStatusOverrides.Entry); }
    get caiConstructionSystemStrategicContextTemplatePolicies() { return this.collectionCache.getCollection(CaiConstructionSystemStrategicContextTemplatePolicies$1.KEY, CaiConstructionSystemStrategicContextTemplatePolicies$1.Entry); }
    get caiConstructionSystemStrategicContextTemplatePolicyJunctions() { return this.collectionCache.getCollection(CaiConstructionSystemStrategicContextTemplatePolicyJunctions$1.KEY, CaiConstructionSystemStrategicContextTemplatePolicyJunctions$1.Entry); }
    get caiConstructionSystemSuperchainHints() { return this.collectionCache.getCollection(CaiConstructionSystemSuperchainHints$1.KEY, CaiConstructionSystemSuperchainHints$1.Entry); }
    get caiConstructionSystemSynergies() { return this.collectionCache.getCollection(CaiConstructionSystemSynergies$1.KEY, CaiConstructionSystemSynergies$1.Entry); }
    get caiConstructionSystemSynergyLevels() { return this.collectionCache.getCollection(CaiConstructionSystemSynergyLevels$1.KEY, CaiConstructionSystemSynergyLevels$1.Entry); }
    get caiConstructionSystemSynergyPolicies() { return this.collectionCache.getCollection(CaiConstructionSystemSynergyPolicies$1.KEY, CaiConstructionSystemSynergyPolicies$1.Entry); }
    get caiConstructionSystemSynergyScopes() { return this.collectionCache.getCollection(CaiConstructionSystemSynergyScopes.KEY, CaiConstructionSystemSynergyScopes.Entry); }
    get caiConstructionSystemTemplates() { return this.collectionCache.getCollection(CaiConstructionSystemTemplates$1.KEY, CaiConstructionSystemTemplates$1.Entry); }
    get caiConstructionSystemTemplatesJunctions() { return this.collectionCache.getCollection(CaiConstructionSystemTemplatesJunctions$1.KEY, CaiConstructionSystemTemplatesJunctions$1.Entry); }
    get caiConstructionSystemTemplateAssignmentPolicyFactionStatusOverrides() { return this.collectionCache.getCollection(CaiConstructionSystemTemplateAssignmentPolicyFactionStatusOverrides.KEY, CaiConstructionSystemTemplateAssignmentPolicyFactionStatusOverrides.Entry); }
    get caiConstructionSystemTemplateAssignmentSchemes() { return this.collectionCache.getCollection(CaiConstructionSystemTemplateAssignmentSchemes.KEY, CaiConstructionSystemTemplateAssignmentSchemes.Entry); }
    get caiConstructionSystemUnblockingBuildings() { return this.collectionCache.getCollection(CaiConstructionSystemUnblockingBuildings.KEY, CaiConstructionSystemUnblockingBuildings.Entry); }
    get caiDiplomacyComplexTreacheries() { return this.collectionCache.getCollection(CaiDiplomacyComplexTreacheries$1.KEY, CaiDiplomacyComplexTreacheries$1.Entry); }
    get caiDiplomacyExcludedFactions() { return this.collectionCache.getCollection(CaiDiplomacyExcludedFactions.KEY, CaiDiplomacyExcludedFactions.Entry); }
    get caiDiplomacySimpleTreacheries() { return this.collectionCache.getCollection(CaiDiplomacySimpleTreacheries$1.KEY, CaiDiplomacySimpleTreacheries$1.Entry); }
    get caiFactionsToHintProfileGroups() { return this.collectionCache.getCollection(CaiFactionsToHintProfileGroups.KEY, CaiFactionsToHintProfileGroups.Entry); }
    get caiFactionStatuses() { return this.collectionCache.getCollection(CaiFactionStatuses.KEY, CaiFactionStatuses.Entry); }
    get caiHintProfiles() { return this.collectionCache.getCollection(CaiHintProfiles.KEY, CaiHintProfiles.Entry); }
    get caiHintProfileGroups() { return this.collectionCache.getCollection(CaiHintProfileGroups.KEY, CaiHintProfileGroups.Entry); }
    get caiMilitaryAggressivenessPolicies() { return this.collectionCache.getCollection(CaiMilitaryAggressivenessPolicies$1.KEY, CaiMilitaryAggressivenessPolicies$1.Entry); }
    get caiMilitaryBehaviourPolicies() { return this.collectionCache.getCollection(CaiMilitaryBehaviourPolicies$1.KEY, CaiMilitaryBehaviourPolicies$1.Entry); }
    get caiPersonalities() { return this.collectionCache.getCollection(CaiPersonalities$1.KEY, CaiPersonalities$1.Entry); }
    get caiPersonalitiesBudgetAllocations() { return this.collectionCache.getCollection(CaiPersonalitiesBudgetAllocations$1.KEY, CaiPersonalitiesBudgetAllocations$1.Entry); }
    get caiPersonalitiesBudgetAllocationFactionStatusOverides() { return this.collectionCache.getCollection(CaiPersonalitiesBudgetAllocationFactionStatusOverides.KEY, CaiPersonalitiesBudgetAllocationFactionStatusOverides.Entry); }
    get caiPersonalitiesBudgetAllocationPolicyJunctions() { return this.collectionCache.getCollection(CaiPersonalitiesBudgetAllocationPolicyJunctions$1.KEY, CaiPersonalitiesBudgetAllocationPolicyJunctions$1.Entry); }
    get caiPersonalitiesBudgetPolicies() { return this.collectionCache.getCollection(CaiPersonalitiesBudgetPolicies$1.KEY, CaiPersonalitiesBudgetPolicies$1.Entry); }
    get caiPersonalitiesCharacterSkillSelectionPolicies() { return this.collectionCache.getCollection(CaiPersonalitiesCharacterSkillSelectionPolicies.KEY, CaiPersonalitiesCharacterSkillSelectionPolicies.Entry); }
    get caiPersonalitiesCharacterSkillSelectionPoliciesSkillUtilizationHintsJunctions() { return this.collectionCache.getCollection(CaiPersonalitiesCharacterSkillSelectionPoliciesSkillUtilizationHintsJunctions.KEY, CaiPersonalitiesCharacterSkillSelectionPoliciesSkillUtilizationHintsJunctions.Entry); }
    get caiPersonalitiesConstructionPreferencePolicies() { return this.collectionCache.getCollection(CaiPersonalitiesConstructionPreferencePolicies$1.KEY, CaiPersonalitiesConstructionPreferencePolicies$1.Entry); }
    get caiPersonalitiesConstructionPreferencePolicyBuildingJunctions() { return this.collectionCache.getCollection(CaiPersonalitiesConstructionPreferencePolicyBuildingJunctions$1.KEY, CaiPersonalitiesConstructionPreferencePolicyBuildingJunctions$1.Entry); }
    get caiPersonalitiesConstructionSystemPolicies() { return this.collectionCache.getCollection(CaiPersonalitiesConstructionSystemPolicies$1.KEY, CaiPersonalitiesConstructionSystemPolicies$1.Entry); }
    get caiPersonalitiesIncomeAllocations() { return this.collectionCache.getCollection(CaiPersonalitiesIncomeAllocations.KEY, CaiPersonalitiesIncomeAllocations.Entry); }
    get caiPersonalitiesIncomeAllocationPolicies() { return this.collectionCache.getCollection(CaiPersonalitiesIncomeAllocationPolicies$1.KEY, CaiPersonalitiesIncomeAllocationPolicies$1.Entry); }
    get caiPersonalitiesIncomeAllocationPolicyFactionStatusForContextJunctions() { return this.collectionCache.getCollection(CaiPersonalitiesIncomeAllocationPolicyFactionStatusForContextJunctions.KEY, CaiPersonalitiesIncomeAllocationPolicyFactionStatusForContextJunctions.Entry); }
    get caiPersonalitiesIncomeAllocationPolicyStrategicContextJunctions() { return this.collectionCache.getCollection(CaiPersonalitiesIncomeAllocationPolicyStrategicContextJunctions$1.KEY, CaiPersonalitiesIncomeAllocationPolicyStrategicContextJunctions$1.Entry); }
    get caiPersonalitiesReliabilityPolicies() { return this.collectionCache.getCollection(CaiPersonalitiesReliabilityPolicies$1.KEY, CaiPersonalitiesReliabilityPolicies$1.Entry); }
    get caiPersonalitiesReligionChangeManagementPolicies() { return this.collectionCache.getCollection(CaiPersonalitiesReligionChangeManagementPolicies.KEY, CaiPersonalitiesReligionChangeManagementPolicies.Entry); }
    get caiPersonalitiesReligiousConversionPolicies() { return this.collectionCache.getCollection(CaiPersonalitiesReligiousConversionPolicies$1.KEY, CaiPersonalitiesReligiousConversionPolicies$1.Entry); }
    get caiPersonalitiesTaskManagementSystemTaskGeneratorProfiles() { return this.collectionCache.getCollection(CaiPersonalitiesTaskManagementSystemTaskGeneratorProfiles$1.KEY, CaiPersonalitiesTaskManagementSystemTaskGeneratorProfiles$1.Entry); }
    get caiPersonalitiesTechnologyResearches() { return this.collectionCache.getCollection(CaiPersonalitiesTechnologyResearches.KEY, CaiPersonalitiesTechnologyResearches.Entry); }
    get caiPersonalitiesTechnologyResearchPathJunctions() { return this.collectionCache.getCollection(CaiPersonalitiesTechnologyResearchPathJunctions.KEY, CaiPersonalitiesTechnologyResearchPathJunctions.Entry); }
    get caiPersonalitiesTechnologyResearchPolicies() { return this.collectionCache.getCollection(CaiPersonalitiesTechnologyResearchPolicies.KEY, CaiPersonalitiesTechnologyResearchPolicies.Entry); }
    get caiPersonalitiesTechnologyResearchPolicyStrategicContextJunctions() { return this.collectionCache.getCollection(CaiPersonalitiesTechnologyResearchPolicyStrategicContextJunctions.KEY, CaiPersonalitiesTechnologyResearchPolicyStrategicContextJunctions.Entry); }
    get caiPersonalitiesTmsTaskGeneratorProfilesStrategicContextsJunctions() { return this.collectionCache.getCollection(CaiPersonalitiesTmsTaskGeneratorProfilesStrategicContextsJunctions$1.KEY, CaiPersonalitiesTmsTaskGeneratorProfilesStrategicContextsJunctions$1.Entry); }
    get caiPersonalitiesTmsTaskGeneratorProfileFactionStatusesJunctions() { return this.collectionCache.getCollection(CaiPersonalitiesTmsTaskGeneratorProfileFactionStatusesJunctions.KEY, CaiPersonalitiesTmsTaskGeneratorProfileFactionStatusesJunctions.Entry); }
    get caiPersonalityCulturalComponents() { return this.collectionCache.getCollection(CaiPersonalityCulturalComponents$1.KEY, CaiPersonalityCulturalComponents$1.Entry); }
    get caiPersonalityCulturalMultipliers() { return this.collectionCache.getCollection(CaiPersonalityCulturalMultipliers$1.KEY, CaiPersonalityCulturalMultipliers$1.Entry); }
    get caiPersonalityCulturalRelationsOverrides() { return this.collectionCache.getCollection(CaiPersonalityCulturalRelationsOverrides.KEY, CaiPersonalityCulturalRelationsOverrides.Entry); }
    get caiPersonalityDealEvaluationComponents() { return this.collectionCache.getCollection(CaiPersonalityDealEvaluationComponents$1.KEY, CaiPersonalityDealEvaluationComponents$1.Entry); }
    get caiPersonalityDealEvaluationComponentOverrides() { return this.collectionCache.getCollection(CaiPersonalityDealEvaluationComponentOverrides$1.KEY, CaiPersonalityDealEvaluationComponentOverrides$1.Entry); }
    get caiPersonalityDealEvaluationDealComponentNames() { return this.collectionCache.getCollection(CaiPersonalityDealEvaluationDealComponentNames$1.KEY, CaiPersonalityDealEvaluationDealComponentNames$1.Entry); }
    get caiPersonalityDealEvaluationDealComponentValues() { return this.collectionCache.getCollection(CaiPersonalityDealEvaluationDealComponentValues$1.KEY, CaiPersonalityDealEvaluationDealComponentValues$1.Entry); }
    get caiPersonalityDealGenerationComponents() { return this.collectionCache.getCollection(CaiPersonalityDealGenerationComponents$1.KEY, CaiPersonalityDealGenerationComponents$1.Entry); }
    get caiPersonalityDealGenerationComponentOverrides() { return this.collectionCache.getCollection(CaiPersonalityDealGenerationComponentOverrides.KEY, CaiPersonalityDealGenerationComponentOverrides.Entry); }
    get caiPersonalityDealGenerationGenerators() { return this.collectionCache.getCollection(CaiPersonalityDealGenerationGenerators$1.KEY, CaiPersonalityDealGenerationGenerators$1.Entry); }
    get caiPersonalityDealGenerationGeneratorPriorities() { return this.collectionCache.getCollection(CaiPersonalityDealGenerationGeneratorPriorities$1.KEY, CaiPersonalityDealGenerationGeneratorPriorities$1.Entry); }
    get caiPersonalityDiplomaticComponents() { return this.collectionCache.getCollection(CaiPersonalityDiplomaticComponents$1.KEY, CaiPersonalityDiplomaticComponents$1.Entry); }
    get caiPersonalityDiplomaticComponentOverrides() { return this.collectionCache.getCollection(CaiPersonalityDiplomaticComponentOverrides$1.KEY, CaiPersonalityDiplomaticComponentOverrides$1.Entry); }
    get caiPersonalityDiplomaticEvents() { return this.collectionCache.getCollection(CaiPersonalityDiplomaticEvents$1.KEY, CaiPersonalityDiplomaticEvents$1.Entry); }
    get caiPersonalityDiplomaticEventValues() { return this.collectionCache.getCollection(CaiPersonalityDiplomaticEventValues$1.KEY, CaiPersonalityDiplomaticEventValues$1.Entry); }
    get caiPersonalityDiplomaticTreatyTypes() { return this.collectionCache.getCollection(CaiPersonalityDiplomaticTreatyTypes.KEY, CaiPersonalityDiplomaticTreatyTypes.Entry); }
    get caiPersonalityDiplomaticTreatyValues() { return this.collectionCache.getCollection(CaiPersonalityDiplomaticTreatyValues$1.KEY, CaiPersonalityDiplomaticTreatyValues$1.Entry); }
    get caiPersonalityEmpireRivalryComponents() { return this.collectionCache.getCollection(CaiPersonalityEmpireRivalryComponents.KEY, CaiPersonalityEmpireRivalryComponents.Entry); }
    get caiPersonalityGroups() { return this.collectionCache.getCollection(CaiPersonalityGroups.KEY, CaiPersonalityGroups.Entry); }
    get caiPersonalityGroupJunctions() { return this.collectionCache.getCollection(CaiPersonalityGroupJunctions.KEY, CaiPersonalityGroupJunctions.Entry); }
    get caiPersonalityGroupOverrides() { return this.collectionCache.getCollection(CaiPersonalityGroupOverrides.KEY, CaiPersonalityGroupOverrides.Entry); }
    get caiPersonalityNegotiationComponents() { return this.collectionCache.getCollection(CaiPersonalityNegotiationComponents$1.KEY, CaiPersonalityNegotiationComponents$1.Entry); }
    get caiPersonalityOccupationDecisionComponents() { return this.collectionCache.getCollection(CaiPersonalityOccupationDecisionComponents$1.KEY, CaiPersonalityOccupationDecisionComponents$1.Entry); }
    get caiPersonalityOccupationDecisionPolicies() { return this.collectionCache.getCollection(CaiPersonalityOccupationDecisionPolicies.KEY, CaiPersonalityOccupationDecisionPolicies.Entry); }
    get caiPersonalityOccupationDecisionPriorities() { return this.collectionCache.getCollection(CaiPersonalityOccupationDecisionPriorities$1.KEY, CaiPersonalityOccupationDecisionPriorities$1.Entry); }
    get caiPersonalityReligiousComponents() { return this.collectionCache.getCollection(CaiPersonalityReligiousComponents.KEY, CaiPersonalityReligiousComponents.Entry); }
    get caiPersonalityReligiousRelationsOverrides() { return this.collectionCache.getCollection(CaiPersonalityReligiousRelationsOverrides.KEY, CaiPersonalityReligiousRelationsOverrides.Entry); }
    get caiPersonalityStrategicComponents() { return this.collectionCache.getCollection(CaiPersonalityStrategicComponents$1.KEY, CaiPersonalityStrategicComponents$1.Entry); }
    get caiPersonalityStrategicDesiredAttitudes() { return this.collectionCache.getCollection(CaiPersonalityStrategicDesiredAttitudes$1.KEY, CaiPersonalityStrategicDesiredAttitudes$1.Entry); }
    get caiPersonalityStrategicResourceValues() { return this.collectionCache.getCollection(CaiPersonalityStrategicResourceValues$1.KEY, CaiPersonalityStrategicResourceValues$1.Entry); }
    get caiPersonalityTrespassingComponents() { return this.collectionCache.getCollection(CaiPersonalityTrespassingComponents.KEY, CaiPersonalityTrespassingComponents.Entry); }
    get caiRegionGroups() { return this.collectionCache.getCollection(CaiRegionGroups.KEY, CaiRegionGroups.Entry); }
    get caiRegionGroupsToRegionsJunctions() { return this.collectionCache.getCollection(CaiRegionGroupsToRegionsJunctions.KEY, CaiRegionGroupsToRegionsJunctions.Entry); }
    get caiRegionHints() { return this.collectionCache.getCollection(CaiRegionHints.KEY, CaiRegionHints.Entry); }
    get caiRegionHintGroups() { return this.collectionCache.getCollection(CaiRegionHintGroups.KEY, CaiRegionHintGroups.Entry); }
    get caiRegionHintProfiles() { return this.collectionCache.getCollection(CaiRegionHintProfiles.KEY, CaiRegionHintProfiles.Entry); }
    get caiRegionHintProfilesToRegionHintGroups() { return this.collectionCache.getCollection(CaiRegionHintProfilesToRegionHintGroups.KEY, CaiRegionHintProfilesToRegionHintGroups.Entry); }
    get caiRegionHintProfileOverrides() { return this.collectionCache.getCollection(CaiRegionHintProfileOverrides.KEY, CaiRegionHintProfileOverrides.Entry); }
    get caiRitualCheckTypes() { return this.collectionCache.getCollection(CaiRitualCheckTypes.KEY, CaiRitualCheckTypes.Entry); }
    get caiRitualRitualCheckTypeJunctions() { return this.collectionCache.getCollection(CaiRitualRitualCheckTypeJunctions.KEY, CaiRitualRitualCheckTypeJunctions.Entry); }
    get caiRitualVariables() { return this.collectionCache.getCollection(CaiRitualVariables.KEY, CaiRitualVariables.Entry); }
    get caiRitualWeights() { return this.collectionCache.getCollection(CaiRitualWeights.KEY, CaiRitualWeights.Entry); }
    get caiSiegeStrengthModifiers() { return this.collectionCache.getCollection(CaiSiegeStrengthModifiers$1.KEY, CaiSiegeStrengthModifiers$1.Entry); }
    get caiStanceHints() { return this.collectionCache.getCollection(CaiStanceHints.KEY, CaiStanceHints.Entry); }
    get caiStrategicContextTypes() { return this.collectionCache.getCollection(CaiStrategicContextTypes$1.KEY, CaiStrategicContextTypes$1.Entry); }
    get caiTaskManagementSystemTaskGenerators() { return this.collectionCache.getCollection(CaiTaskManagementSystemTaskGenerators$1.KEY, CaiTaskManagementSystemTaskGenerators$1.Entry); }
    get caiTaskManagementSystemTaskGeneratorGroups() { return this.collectionCache.getCollection(CaiTaskManagementSystemTaskGeneratorGroups$1.KEY, CaiTaskManagementSystemTaskGeneratorGroups$1.Entry); }
    get caiTaskManagementSystemTaskGeneratorGroupsGeneratorsJunctions() { return this.collectionCache.getCollection(CaiTaskManagementSystemTaskGeneratorGroupsGeneratorsJunctions$1.KEY, CaiTaskManagementSystemTaskGeneratorGroupsGeneratorsJunctions$1.Entry); }
    get caiTaskManagementSystemTaskGeneratorGroupOverrides() { return this.collectionCache.getCollection(CaiTaskManagementSystemTaskGeneratorGroupOverrides.KEY, CaiTaskManagementSystemTaskGeneratorGroupOverrides.Entry); }
    get caiVariables() { return this.collectionCache.getCollection(CaiVariables$1.KEY, CaiVariables$1.Entry); }
    get caiVariablesOverides() { return this.collectionCache.getCollection(CaiVariablesOverides$1.KEY, CaiVariablesOverides$1.Entry); }
    get campaigns() { return this.collectionCache.getCollection(Campaigns$1.KEY, Campaigns$1.Entry); }
    get campaignsCampaignVariablesJunctions() { return this.collectionCache.getCollection(CampaignsCampaignVariablesJunctions$1.KEY, CampaignsCampaignVariablesJunctions$1.Entry); }
    get campaignAgentSubtypeBattleTags() { return this.collectionCache.getCollection(CampaignAgentSubtypeBattleTags.KEY, CampaignAgentSubtypeBattleTags.Entry); }
    get campaignAgentSubtypeFactorialEffectJunctions() { return this.collectionCache.getCollection(CampaignAgentSubtypeFactorialEffectJunctions.KEY, CampaignAgentSubtypeFactorialEffectJunctions.Entry); }
    get campaignAiBehaviours() { return this.collectionCache.getCollection(CampaignAiBehaviours$1.KEY, CampaignAiBehaviours$1.Entry); }
    get campaignAiManagers() { return this.collectionCache.getCollection(CampaignAiManagers$1.KEY, CampaignAiManagers$1.Entry); }
    get campaignAiManagerBehaviourJunctions() { return this.collectionCache.getCollection(CampaignAiManagerBehaviourJunctions$1.KEY, CampaignAiManagerBehaviourJunctions$1.Entry); }
    get campaignAiTechnologyManagers() { return this.collectionCache.getCollection(CampaignAiTechnologyManagers$1.KEY, CampaignAiTechnologyManagers$1.Entry); }
    get campaignAiTechnologyManagerPathJunctions() { return this.collectionCache.getCollection(CampaignAiTechnologyManagerPathJunctions$1.KEY, CampaignAiTechnologyManagerPathJunctions$1.Entry); }
    get campaignAiTechnologyPaths() { return this.collectionCache.getCollection(CampaignAiTechnologyPaths$1.KEY, CampaignAiTechnologyPaths$1.Entry); }
    get campaignAiTechnologyPathJunctions() { return this.collectionCache.getCollection(CampaignAiTechnologyPathJunctions$1.KEY, CampaignAiTechnologyPathJunctions$1.Entry); }
    get campaignAiTechnologyResearchProfiles() { return this.collectionCache.getCollection(CampaignAiTechnologyResearchProfiles.KEY, CampaignAiTechnologyResearchProfiles.Entry); }
    get campaignAmbushGroundTypes() { return this.collectionCache.getCollection(CampaignAmbushGroundTypes$1.KEY, CampaignAmbushGroundTypes$1.Entry); }
    get campaignAnimSetEnums() { return this.collectionCache.getCollection(CampaignAnimSetEnums$1.KEY, CampaignAnimSetEnums$1.Entry); }
    get campaignAutoresolverSkirmishEffectivenessRelativeToSpeeds() { return this.collectionCache.getCollection(CampaignAutoresolverSkirmishEffectivenessRelativeToSpeeds.KEY, CampaignAutoresolverSkirmishEffectivenessRelativeToSpeeds.Entry); }
    get campaignBattlePaths() { return this.collectionCache.getCollection(CampaignBattlePaths.KEY, CampaignBattlePaths.Entry); }
    get campaignBattlePresets() { return this.collectionCache.getCollection(CampaignBattlePresets$1.KEY, CampaignBattlePresets$1.Entry); }
    get campaignBattleScenes() { return this.collectionCache.getCollection(CampaignBattleScenes.KEY, CampaignBattleScenes.Entry); }
    get campaignBattleTypeEnums() { return this.collectionCache.getCollection(CampaignBattleTypeEnums$1.KEY, CampaignBattleTypeEnums$1.Entry); }
    get campaignBmdLayerGroupBmdExportTypesJunctions() { return this.collectionCache.getCollection(CampaignBmdLayerGroupBmdExportTypesJunctions.KEY, CampaignBmdLayerGroupBmdExportTypesJunctions.Entry); }
    get campaignBmdLayerGroupIds() { return this.collectionCache.getCollection(CampaignBmdLayerGroupIds.KEY, CampaignBmdLayerGroupIds.Entry); }
    get campaignBonusValueBattleContextBattleTypeJunctions() { return this.collectionCache.getCollection(CampaignBonusValueBattleContextBattleTypeJunctions$1.KEY, CampaignBonusValueBattleContextBattleTypeJunctions$1.Entry); }
    get campaignBonusValueBattleContextCultureJunctions() { return this.collectionCache.getCollection(CampaignBonusValueBattleContextCultureJunctions$1.KEY, CampaignBonusValueBattleContextCultureJunctions$1.Entry); }
    get campaignBonusValueBattleContextFactionJunctions() { return this.collectionCache.getCollection(CampaignBonusValueBattleContextFactionJunctions$1.KEY, CampaignBonusValueBattleContextFactionJunctions$1.Entry); }
    get campaignBonusValueBattleContextForceStatus() { return this.collectionCache.getCollection(CampaignBonusValueBattleContextForceStatus$1.KEY, CampaignBonusValueBattleContextForceStatus$1.Entry); }
    get campaignBonusValueBattleContextForceStatusJunctions() { return this.collectionCache.getCollection(CampaignBonusValueBattleContextForceStatusJunctions$1.KEY, CampaignBonusValueBattleContextForceStatusJunctions$1.Entry); }
    get campaignBonusValueBattleContextGroundTypeJunctions() { return this.collectionCache.getCollection(CampaignBonusValueBattleContextGroundTypeJunctions$1.KEY, CampaignBonusValueBattleContextGroundTypeJunctions$1.Entry); }
    get campaignBonusValueBattleContextSpecifiers() { return this.collectionCache.getCollection(CampaignBonusValueBattleContextSpecifiers$1.KEY, CampaignBonusValueBattleContextSpecifiers$1.Entry); }
    get campaignBonusValueBattleContextTerritoryStatus() { return this.collectionCache.getCollection(CampaignBonusValueBattleContextTerritoryStatus$1.KEY, CampaignBonusValueBattleContextTerritoryStatus$1.Entry); }
    get campaignBonusValueBattleContextTerritoryStatusJunctions() { return this.collectionCache.getCollection(CampaignBonusValueBattleContextTerritoryStatusJunctions$1.KEY, CampaignBonusValueBattleContextTerritoryStatusJunctions$1.Entry); }
    get campaignBonusValueIdsActionResultsAdditionalOutcomes() { return this.collectionCache.getCollection(CampaignBonusValueIdsActionResultsAdditionalOutcomes$1.KEY, CampaignBonusValueIdsActionResultsAdditionalOutcomes$1.Entry); }
    get campaignBonusValueIdsAgent() { return this.collectionCache.getCollection(CampaignBonusValueIdsAgent$1.KEY, CampaignBonusValueIdsAgent$1.Entry); }
    get campaignBonusValueIdsAgentActionRecords() { return this.collectionCache.getCollection(CampaignBonusValueIdsAgentActionRecords.KEY, CampaignBonusValueIdsAgentActionRecords.Entry); }
    get campaignBonusValueIdsAgentSubtypes() { return this.collectionCache.getCollection(CampaignBonusValueIdsAgentSubtypes.KEY, CampaignBonusValueIdsAgentSubtypes.Entry); }
    get campaignBonusValueIdsAttritionRecords() { return this.collectionCache.getCollection(CampaignBonusValueIdsAttritionRecords.KEY, CampaignBonusValueIdsAttritionRecords.Entry); }
    get campaignBonusValueIdsBasic() { return this.collectionCache.getCollection(CampaignBonusValueIdsBasic$1.KEY, CampaignBonusValueIdsBasic$1.Entry); }
    get campaignBonusValueIdsBattlefieldDeployables() { return this.collectionCache.getCollection(CampaignBonusValueIdsBattlefieldDeployables$1.KEY, CampaignBonusValueIdsBattlefieldDeployables$1.Entry); }
    get campaignBonusValueIdsBattleContexts() { return this.collectionCache.getCollection(CampaignBonusValueIdsBattleContexts$1.KEY, CampaignBonusValueIdsBattleContexts$1.Entry); }
    get campaignBonusValueIdsBattleContextArmySpecialAbilities() { return this.collectionCache.getCollection(CampaignBonusValueIdsBattleContextArmySpecialAbilities.KEY, CampaignBonusValueIdsBattleContextArmySpecialAbilities.Entry); }
    get campaignBonusValueIdsBattleContextUnitAbilities() { return this.collectionCache.getCollection(CampaignBonusValueIdsBattleContextUnitAbilities.KEY, CampaignBonusValueIdsBattleContextUnitAbilities.Entry); }
    get campaignBonusValueIdsBattleContextUnitAttributes() { return this.collectionCache.getCollection(CampaignBonusValueIdsBattleContextUnitAttributes.KEY, CampaignBonusValueIdsBattleContextUnitAttributes.Entry); }
    get campaignBonusValueIdsBuildingChain() { return this.collectionCache.getCollection(CampaignBonusValueIdsBuildingChain$1.KEY, CampaignBonusValueIdsBuildingChain$1.Entry); }
    get campaignBonusValueIdsBuildingSets() { return this.collectionCache.getCollection(CampaignBonusValueIdsBuildingSets$1.KEY, CampaignBonusValueIdsBuildingSets$1.Entry); }
    get campaignBonusValueIdsCommodity() { return this.collectionCache.getCollection(CampaignBonusValueIdsCommodity$1.KEY, CampaignBonusValueIdsCommodity$1.Entry); }
    get campaignBonusValueIdsFactions() { return this.collectionCache.getCollection(CampaignBonusValueIdsFactions.KEY, CampaignBonusValueIdsFactions.Entry); }
    get campaignBonusValueIdsLoyaltyEvents() { return this.collectionCache.getCollection(CampaignBonusValueIdsLoyaltyEvents.KEY, CampaignBonusValueIdsLoyaltyEvents.Entry); }
    get campaignBonusValueIdsMeleeWeapon() { return this.collectionCache.getCollection(CampaignBonusValueIdsMeleeWeapon$1.KEY, CampaignBonusValueIdsMeleeWeapon$1.Entry); }
    get campaignBonusValueIdsMilitaryForceAbilitys() { return this.collectionCache.getCollection(CampaignBonusValueIdsMilitaryForceAbilitys.KEY, CampaignBonusValueIdsMilitaryForceAbilitys.Entry); }
    get campaignBonusValueIdsMissileWeapon() { return this.collectionCache.getCollection(CampaignBonusValueIdsMissileWeapon$1.KEY, CampaignBonusValueIdsMissileWeapon$1.Entry); }
    get campaignBonusValueIdsNameRecords() { return this.collectionCache.getCollection(CampaignBonusValueIdsNameRecords.KEY, CampaignBonusValueIdsNameRecords.Entry); }
    get campaignBonusValueIdsPooledResources() { return this.collectionCache.getCollection(CampaignBonusValueIdsPooledResources.KEY, CampaignBonusValueIdsPooledResources.Entry); }
    get campaignBonusValueIdsPooledResourceFactors() { return this.collectionCache.getCollection(CampaignBonusValueIdsPooledResourceFactors.KEY, CampaignBonusValueIdsPooledResourceFactors.Entry); }
    get campaignBonusValueIdsPopulationClass() { return this.collectionCache.getCollection(CampaignBonusValueIdsPopulationClass$1.KEY, CampaignBonusValueIdsPopulationClass$1.Entry); }
    get campaignBonusValueIdsPopulationClassAndReligion() { return this.collectionCache.getCollection(CampaignBonusValueIdsPopulationClassAndReligion$1.KEY, CampaignBonusValueIdsPopulationClassAndReligion$1.Entry); }
    get campaignBonusValueIdsProjectile() { return this.collectionCache.getCollection(CampaignBonusValueIdsProjectile$1.KEY, CampaignBonusValueIdsProjectile$1.Entry); }
    get campaignBonusValueIdsProjectileShotTypeEnum() { return this.collectionCache.getCollection(CampaignBonusValueIdsProjectileShotTypeEnum$1.KEY, CampaignBonusValueIdsProjectileShotTypeEnum$1.Entry); }
    get campaignBonusValueIdsProjectileType() { return this.collectionCache.getCollection(CampaignBonusValueIdsProjectileType$1.KEY, CampaignBonusValueIdsProjectileType$1.Entry); }
    get campaignBonusValueIdsProvinceInitiatives() { return this.collectionCache.getCollection(CampaignBonusValueIdsProvinceInitiatives.KEY, CampaignBonusValueIdsProvinceInitiatives.Entry); }
    get campaignBonusValueIdsProvincialInitiativeEffectRecords() { return this.collectionCache.getCollection(CampaignBonusValueIdsProvincialInitiativeEffectRecords$1.KEY, CampaignBonusValueIdsProvincialInitiativeEffectRecords$1.Entry); }
    get campaignBonusValueIdsReligion() { return this.collectionCache.getCollection(CampaignBonusValueIdsReligion$1.KEY, CampaignBonusValueIdsReligion$1.Entry); }
    get campaignBonusValueIdsResource() { return this.collectionCache.getCollection(CampaignBonusValueIdsResource$1.KEY, CampaignBonusValueIdsResource$1.Entry); }
    get campaignBonusValueIdsRituals() { return this.collectionCache.getCollection(CampaignBonusValueIdsRituals.KEY, CampaignBonusValueIdsRituals.Entry); }
    get campaignBonusValueIdsRitualChains() { return this.collectionCache.getCollection(CampaignBonusValueIdsRitualChains.KEY, CampaignBonusValueIdsRitualChains.Entry); }
    get campaignBonusValueIdsSiegeItems() { return this.collectionCache.getCollection(CampaignBonusValueIdsSiegeItems$1.KEY, CampaignBonusValueIdsSiegeItems$1.Entry); }
    get campaignBonusValueIdsSpecialAbilityPhases() { return this.collectionCache.getCollection(CampaignBonusValueIdsSpecialAbilityPhases.KEY, CampaignBonusValueIdsSpecialAbilityPhases.Entry); }
    get campaignBonusValueIdsSubcultures() { return this.collectionCache.getCollection(CampaignBonusValueIdsSubcultures.KEY, CampaignBonusValueIdsSubcultures.Entry); }
    get campaignBonusValueIdsTechnologies() { return this.collectionCache.getCollection(CampaignBonusValueIdsTechnologies.KEY, CampaignBonusValueIdsTechnologies.Entry); }
    get campaignBonusValueIdsTechnologyCategories() { return this.collectionCache.getCollection(CampaignBonusValueIdsTechnologyCategories$1.KEY, CampaignBonusValueIdsTechnologyCategories$1.Entry); }
    get campaignBonusValueIdsUnitAbility() { return this.collectionCache.getCollection(CampaignBonusValueIdsUnitAbility$1.KEY, CampaignBonusValueIdsUnitAbility$1.Entry); }
    get campaignBonusValueIdsUnitAttributes() { return this.collectionCache.getCollection(CampaignBonusValueIdsUnitAttributes.KEY, CampaignBonusValueIdsUnitAttributes.Entry); }
    get campaignBonusValueIdsUnitCaste() { return this.collectionCache.getCollection(CampaignBonusValueIdsUnitCaste$1.KEY, CampaignBonusValueIdsUnitCaste$1.Entry); }
    get campaignBonusValueIdsUnitCategory() { return this.collectionCache.getCollection(CampaignBonusValueIdsUnitCategory$1.KEY, CampaignBonusValueIdsUnitCategory$1.Entry); }
    get campaignBonusValueIdsUnitClass() { return this.collectionCache.getCollection(CampaignBonusValueIdsUnitClass$1.KEY, CampaignBonusValueIdsUnitClass$1.Entry); }
    get campaignBonusValueIdsUnitRecords() { return this.collectionCache.getCollection(CampaignBonusValueIdsUnitRecords$1.KEY, CampaignBonusValueIdsUnitRecords$1.Entry); }
    get campaignBonusValueIdsUnitSets() { return this.collectionCache.getCollection(CampaignBonusValueIdsUnitSets$1.KEY, CampaignBonusValueIdsUnitSets$1.Entry); }
    get campaignBonusValueIdsUnitSetUnitAbilities() { return this.collectionCache.getCollection(CampaignBonusValueIdsUnitSetUnitAbilities.KEY, CampaignBonusValueIdsUnitSetUnitAbilities.Entry); }
    get campaignBonusValueIdsUnitSetUnitAttributes() { return this.collectionCache.getCollection(CampaignBonusValueIdsUnitSetUnitAttributes.KEY, CampaignBonusValueIdsUnitSetUnitAttributes.Entry); }
    get campaignBonusValueIdUnitMissileWeapons() { return this.collectionCache.getCollection(CampaignBonusValueIdUnitMissileWeapons.KEY, CampaignBonusValueIdUnitMissileWeapons.Entry); }
    get campaignBuildingChainSlotUnlocks() { return this.collectionCache.getCollection(CampaignBuildingChainSlotUnlocks.KEY, CampaignBuildingChainSlotUnlocks.Entry); }
    get campaignBuildingLevelFactorialEffectJunctions() { return this.collectionCache.getCollection(CampaignBuildingLevelFactorialEffectJunctions.KEY, CampaignBuildingLevelFactorialEffectJunctions.Entry); }
    get campaignCameraMapBounds() { return this.collectionCache.getCollection(CampaignCameraMapBounds.KEY, CampaignCameraMapBounds.Entry); }
    get campaignCharacterAnimStatus() { return this.collectionCache.getCollection(CampaignCharacterAnimStatus$1.KEY, CampaignCharacterAnimStatus$1.Entry); }
    get campaignCharacterArts() { return this.collectionCache.getCollection(CampaignCharacterArts$1.KEY, CampaignCharacterArts$1.Entry); }
    get campaignCharacterArtSets() { return this.collectionCache.getCollection(CampaignCharacterArtSets$1.KEY, CampaignCharacterArtSets$1.Entry); }
    get campaignCharacterArtSetCampaignJunctions() { return this.collectionCache.getCollection(CampaignCharacterArtSetCampaignJunctions$1.KEY, CampaignCharacterArtSetCampaignJunctions$1.Entry); }
    get campaignCharacterAttributeEffects() { return this.collectionCache.getCollection(CampaignCharacterAttributeEffects$1.KEY, CampaignCharacterAttributeEffects$1.Entry); }
    get campaignCharacterUniformAncillaryJunctions() { return this.collectionCache.getCollection(CampaignCharacterUniformAncillaryJunctions.KEY, CampaignCharacterUniformAncillaryJunctions.Entry); }
    get campaignClimateChangePhases() { return this.collectionCache.getCollection(CampaignClimateChangePhases.KEY, CampaignClimateChangePhases.Entry); }
    get campaignCompanionArmyDetails() { return this.collectionCache.getCollection(CampaignCompanionArmyDetails.KEY, CampaignCompanionArmyDetails.Entry); }
    get campaignCompositeScenes() { return this.collectionCache.getCollection(CampaignCompositeScenes.KEY, CampaignCompositeScenes.Entry); }
    get campaignCulturalRelations() { return this.collectionCache.getCollection(CampaignCulturalRelations.KEY, CampaignCulturalRelations.Entry); }
    get campaignDesignControlledFactorialCategories() { return this.collectionCache.getCollection(CampaignDesignControlledFactorialCategories.KEY, CampaignDesignControlledFactorialCategories.Entry); }
    get campaignDifficultyHandicapEffects() { return this.collectionCache.getCollection(CampaignDifficultyHandicapEffects$1.KEY, CampaignDifficultyHandicapEffects$1.Entry); }
    get campaignEffectScopes() { return this.collectionCache.getCollection(CampaignEffectScopes$1.KEY, CampaignEffectScopes$1.Entry); }
    get campaignEffectScopeAgentJunctions() { return this.collectionCache.getCollection(CampaignEffectScopeAgentJunctions$1.KEY, CampaignEffectScopeAgentJunctions$1.Entry); }
    get campaignEffectScopeCategories() { return this.collectionCache.getCollection(CampaignEffectScopeCategories.KEY, CampaignEffectScopeCategories.Entry); }
    get campaignEffectScopeCharacterForceRelationships() { return this.collectionCache.getCollection(CampaignEffectScopeCharacterForceRelationships$1.KEY, CampaignEffectScopeCharacterForceRelationships$1.Entry); }
    get campaignEffectScopeCharacterForceRelationshipJunctions() { return this.collectionCache.getCollection(CampaignEffectScopeCharacterForceRelationshipJunctions$1.KEY, CampaignEffectScopeCharacterForceRelationshipJunctions$1.Entry); }
    get campaignEffectScopeCharacterUnitRelationships() { return this.collectionCache.getCollection(CampaignEffectScopeCharacterUnitRelationships$1.KEY, CampaignEffectScopeCharacterUnitRelationships$1.Entry); }
    get campaignEffectScopeCharacterUnitRelationshipJunctions() { return this.collectionCache.getCollection(CampaignEffectScopeCharacterUnitRelationshipJunctions$1.KEY, CampaignEffectScopeCharacterUnitRelationshipJunctions$1.Entry); }
    get campaignEffectScopeLocations() { return this.collectionCache.getCollection(CampaignEffectScopeLocations$1.KEY, CampaignEffectScopeLocations$1.Entry); }
    get campaignEffectScopeObjects() { return this.collectionCache.getCollection(CampaignEffectScopeObjects$1.KEY, CampaignEffectScopeObjects$1.Entry); }
    get campaignEffectScopeOwnerships() { return this.collectionCache.getCollection(CampaignEffectScopeOwnerships$1.KEY, CampaignEffectScopeOwnerships$1.Entry); }
    get campaignEffectScopeTerritories() { return this.collectionCache.getCollection(CampaignEffectScopeTerritories.KEY, CampaignEffectScopeTerritories.Entry); }
    get campaignEffectScopeToCategoryJunctions() { return this.collectionCache.getCollection(CampaignEffectScopeToCategoryJunctions.KEY, CampaignEffectScopeToCategoryJunctions.Entry); }
    get campaignFactionFeatureForestOverrides() { return this.collectionCache.getCollection(CampaignFactionFeatureForestOverrides.KEY, CampaignFactionFeatureForestOverrides.Entry); }
    get campaignFactionReligionEffects() { return this.collectionCache.getCollection(CampaignFactionReligionEffects.KEY, CampaignFactionReligionEffects.Entry); }
    get campaignFactorialCategories() { return this.collectionCache.getCollection(CampaignFactorialCategories.KEY, CampaignFactorialCategories.Entry); }
    get campaignFactorialCategoryBaseThresholds() { return this.collectionCache.getCollection(CampaignFactorialCategoryBaseThresholds.KEY, CampaignFactorialCategoryBaseThresholds.Entry); }
    get campaignFactorialCategoryJunctions() { return this.collectionCache.getCollection(CampaignFactorialCategoryJunctions.KEY, CampaignFactorialCategoryJunctions.Entry); }
    get campaignFactorialScopes() { return this.collectionCache.getCollection(CampaignFactorialScopes.KEY, CampaignFactorialScopes.Entry); }
    get campaignFactorialUiInfos() { return this.collectionCache.getCollection(CampaignFactorialUiInfos.KEY, CampaignFactorialUiInfos.Entry); }
    get campaignFeatures() { return this.collectionCache.getCollection(CampaignFeatures.KEY, CampaignFeatures.Entry); }
    get campaignFeatureIds() { return this.collectionCache.getCollection(CampaignFeatureIds.KEY, CampaignFeatureIds.Entry); }
    get campaignGroundTypes() { return this.collectionCache.getCollection(CampaignGroundTypes$1.KEY, CampaignGroundTypes$1.Entry); }
    get campaignGroups() { return this.collectionCache.getCollection(CampaignGroups.KEY, CampaignGroups.Entry); }
    get campaignGroupAbandonedCulturesOverrides() { return this.collectionCache.getCollection(CampaignGroupAbandonedCulturesOverrides.KEY, CampaignGroupAbandonedCulturesOverrides.Entry); }
    get campaignGroupAgentActionCompositeScenes() { return this.collectionCache.getCollection(CampaignGroupAgentActionCompositeScenes.KEY, CampaignGroupAgentActionCompositeScenes.Entry); }
    get campaignGroupAgentActionForeignSlots() { return this.collectionCache.getCollection(CampaignGroupAgentActionForeignSlots.KEY, CampaignGroupAgentActionForeignSlots.Entry); }
    get campaignGroupCraftingInfos() { return this.collectionCache.getCollection(CampaignGroupCraftingInfos.KEY, CampaignGroupCraftingInfos.Entry); }
    get campaignGroupFoodEffects() { return this.collectionCache.getCollection(CampaignGroupFoodEffects.KEY, CampaignGroupFoodEffects.Entry); }
    get campaignGroupFoodUniqueAgentCharges() { return this.collectionCache.getCollection(CampaignGroupFoodUniqueAgentCharges.KEY, CampaignGroupFoodUniqueAgentCharges.Entry); }
    get campaignGroupLoyaltyDilemmas() { return this.collectionCache.getCollection(CampaignGroupLoyaltyDilemmas.KEY, CampaignGroupLoyaltyDilemmas.Entry); }
    get campaignGroupMembers() { return this.collectionCache.getCollection(CampaignGroupMembers.KEY, CampaignGroupMembers.Entry); }
    get campaignGroupMemberCriteriaActionResults() { return this.collectionCache.getCollection(CampaignGroupMemberCriteriaActionResults.KEY, CampaignGroupMemberCriteriaActionResults.Entry); }
    get campaignGroupMemberCriteriaActorGenders() { return this.collectionCache.getCollection(CampaignGroupMemberCriteriaActorGenders.KEY, CampaignGroupMemberCriteriaActorGenders.Entry); }
    get campaignGroupMemberCriteriaAgentSubtypes() { return this.collectionCache.getCollection(CampaignGroupMemberCriteriaAgentSubtypes.KEY, CampaignGroupMemberCriteriaAgentSubtypes.Entry); }
    get campaignGroupMemberCriteriaAgentTypes() { return this.collectionCache.getCollection(CampaignGroupMemberCriteriaAgentTypes.KEY, CampaignGroupMemberCriteriaAgentTypes.Entry); }
    get campaignGroupMemberCriteriaAttritionTypes() { return this.collectionCache.getCollection(CampaignGroupMemberCriteriaAttritionTypes.KEY, CampaignGroupMemberCriteriaAttritionTypes.Entry); }
    get campaignGroupMemberCriteriaCampaigns() { return this.collectionCache.getCollection(CampaignGroupMemberCriteriaCampaigns.KEY, CampaignGroupMemberCriteriaCampaigns.Entry); }
    get campaignGroupMemberCriteriaClimates() { return this.collectionCache.getCollection(CampaignGroupMemberCriteriaClimates.KEY, CampaignGroupMemberCriteriaClimates.Entry); }
    get campaignGroupMemberCriteriaCultures() { return this.collectionCache.getCollection(CampaignGroupMemberCriteriaCultures.KEY, CampaignGroupMemberCriteriaCultures.Entry); }
    get campaignGroupMemberCriteriaCultureSettlementOccupationOptions() { return this.collectionCache.getCollection(CampaignGroupMemberCriteriaCultureSettlementOccupationOptions.KEY, CampaignGroupMemberCriteriaCultureSettlementOccupationOptions.Entry); }
    get campaignGroupMemberCriteriaDiplomaticAttitudes() { return this.collectionCache.getCollection(CampaignGroupMemberCriteriaDiplomaticAttitudes.KEY, CampaignGroupMemberCriteriaDiplomaticAttitudes.Entry); }
    get campaignGroupMemberCriteriaDiplomaticStances() { return this.collectionCache.getCollection(CampaignGroupMemberCriteriaDiplomaticStances.KEY, CampaignGroupMemberCriteriaDiplomaticStances.Entry); }
    get campaignGroupMemberCriteriaFactions() { return this.collectionCache.getCollection(CampaignGroupMemberCriteriaFactions.KEY, CampaignGroupMemberCriteriaFactions.Entry); }
    get campaignGroupMemberCriteriaInvolvesSettlements() { return this.collectionCache.getCollection(CampaignGroupMemberCriteriaInvolvesSettlements.KEY, CampaignGroupMemberCriteriaInvolvesSettlements.Entry); }
    get campaignGroupMemberCriteriaIsDead() { return this.collectionCache.getCollection(CampaignGroupMemberCriteriaIsDead.KEY, CampaignGroupMemberCriteriaIsDead.Entry); }
    get campaignGroupMemberCriteriaMinisterialPositions() { return this.collectionCache.getCollection(CampaignGroupMemberCriteriaMinisterialPositions.KEY, CampaignGroupMemberCriteriaMinisterialPositions.Entry); }
    get campaignGroupMemberCriteriaNumericRanges() { return this.collectionCache.getCollection(CampaignGroupMemberCriteriaNumericRanges.KEY, CampaignGroupMemberCriteriaNumericRanges.Entry); }
    get campaignGroupMemberCriteriaOnSeas() { return this.collectionCache.getCollection(CampaignGroupMemberCriteriaOnSeas.KEY, CampaignGroupMemberCriteriaOnSeas.Entry); }
    get campaignGroupMemberCriteriaOriginatingCultures() { return this.collectionCache.getCollection(CampaignGroupMemberCriteriaOriginatingCultures.KEY, CampaignGroupMemberCriteriaOriginatingCultures.Entry); }
    get campaignGroupMemberCriteriaOriginatingFactions() { return this.collectionCache.getCollection(CampaignGroupMemberCriteriaOriginatingFactions.KEY, CampaignGroupMemberCriteriaOriginatingFactions.Entry); }
    get campaignGroupMemberCriteriaOriginatingSubcultures() { return this.collectionCache.getCollection(CampaignGroupMemberCriteriaOriginatingSubcultures.KEY, CampaignGroupMemberCriteriaOriginatingSubcultures.Entry); }
    get campaignGroupMemberCriteriaPooledResources() { return this.collectionCache.getCollection(CampaignGroupMemberCriteriaPooledResources.KEY, CampaignGroupMemberCriteriaPooledResources.Entry); }
    get campaignGroupMemberCriteriaProduceResources() { return this.collectionCache.getCollection(CampaignGroupMemberCriteriaProduceResources.KEY, CampaignGroupMemberCriteriaProduceResources.Entry); }
    get campaignGroupMemberCriteriaRegions() { return this.collectionCache.getCollection(CampaignGroupMemberCriteriaRegions.KEY, CampaignGroupMemberCriteriaRegions.Entry); }
    get campaignGroupMemberCriteriaRegionOwnerSubcultures() { return this.collectionCache.getCollection(CampaignGroupMemberCriteriaRegionOwnerSubcultures.KEY, CampaignGroupMemberCriteriaRegionOwnerSubcultures.Entry); }
    get campaignGroupMemberCriteriaReligions() { return this.collectionCache.getCollection(CampaignGroupMemberCriteriaReligions.KEY, CampaignGroupMemberCriteriaReligions.Entry); }
    get campaignGroupMemberCriteriaSubcultures() { return this.collectionCache.getCollection(CampaignGroupMemberCriteriaSubcultures.KEY, CampaignGroupMemberCriteriaSubcultures.Entry); }
    get campaignGroupMemberCriteriaValues() { return this.collectionCache.getCollection(CampaignGroupMemberCriteriaValues.KEY, CampaignGroupMemberCriteriaValues.Entry); }
    get campaignGroupMoraleEffects() { return this.collectionCache.getCollection(CampaignGroupMoraleEffects.KEY, CampaignGroupMoraleEffects.Entry); }
    get campaignGroupOccupationPurchasablePrimarySlotLevels() { return this.collectionCache.getCollection(CampaignGroupOccupationPurchasablePrimarySlotLevels.KEY, CampaignGroupOccupationPurchasablePrimarySlotLevels.Entry); }
    get campaignGroupPendingBattlePurchasableEffects() { return this.collectionCache.getCollection(CampaignGroupPendingBattlePurchasableEffects.KEY, CampaignGroupPendingBattlePurchasableEffects.Entry); }
    get campaignGroupPlagues() { return this.collectionCache.getCollection(CampaignGroupPlagues.KEY, CampaignGroupPlagues.Entry); }
    get campaignGroupPlagueMilitaryForceEffects() { return this.collectionCache.getCollection(CampaignGroupPlagueMilitaryForceEffects.KEY, CampaignGroupPlagueMilitaryForceEffects.Entry); }
    get campaignGroupPlagueRegionEffects() { return this.collectionCache.getCollection(CampaignGroupPlagueRegionEffects.KEY, CampaignGroupPlagueRegionEffects.Entry); }
    get campaignGroupPooledResources() { return this.collectionCache.getCollection(CampaignGroupPooledResources.KEY, CampaignGroupPooledResources.Entry); }
    get campaignGroupPooledResourceEffects() { return this.collectionCache.getCollection(CampaignGroupPooledResourceEffects.KEY, CampaignGroupPooledResourceEffects.Entry); }
    get campaignGroupPostBattleLootedPooledResources() { return this.collectionCache.getCollection(CampaignGroupPostBattleLootedPooledResources.KEY, CampaignGroupPostBattleLootedPooledResources.Entry); }
    get campaignGroupRacialSuitabilityEffects() { return this.collectionCache.getCollection(CampaignGroupRacialSuitabilityEffects.KEY, CampaignGroupRacialSuitabilityEffects.Entry); }
    get campaignGroupRituals() { return this.collectionCache.getCollection(CampaignGroupRituals.KEY, CampaignGroupRituals.Entry); }
    get campaignGroupRitualChains() { return this.collectionCache.getCollection(CampaignGroupRitualChains.KEY, CampaignGroupRitualChains.Entry); }
    get campaignGroupSettlementOccupationGiftFactions() { return this.collectionCache.getCollection(CampaignGroupSettlementOccupationGiftFactions.KEY, CampaignGroupSettlementOccupationGiftFactions.Entry); }
    get campaignGroupSettlementOccupationLootedPooledResources() { return this.collectionCache.getCollection(CampaignGroupSettlementOccupationLootedPooledResources.KEY, CampaignGroupSettlementOccupationLootedPooledResources.Entry); }
    get campaignGroupSettlementOccupationOptionForeignSlots() { return this.collectionCache.getCollection(CampaignGroupSettlementOccupationOptionForeignSlots.KEY, CampaignGroupSettlementOccupationOptionForeignSlots.Entry); }
    get campaignGroupUniqueAgents() { return this.collectionCache.getCollection(CampaignGroupUniqueAgents.KEY, CampaignGroupUniqueAgents.Entry); }
    get campaignHiddenSettlementOverrides() { return this.collectionCache.getCollection(CampaignHiddenSettlementOverrides.KEY, CampaignHiddenSettlementOverrides.Entry); }
    get campaignInitialLoyaltyDistribution() { return this.collectionCache.getCollection(CampaignInitialLoyaltyDistribution.KEY, CampaignInitialLoyaltyDistribution.Entry); }
    get campaignInteractableMarkerInfos() { return this.collectionCache.getCollection(CampaignInteractableMarkerInfos.KEY, CampaignInteractableMarkerInfos.Entry); }
    get campaignLocalisedStrings() { return this.collectionCache.getCollection(CampaignLocalisedStrings$1.KEY, CampaignLocalisedStrings$1.Entry); }
    get campaignMaps() { return this.collectionCache.getCollection(CampaignMaps$1.KEY, CampaignMaps$1.Entry); }
    get campaignMapAttritions() { return this.collectionCache.getCollection(CampaignMapAttritions$1.KEY, CampaignMapAttritions$1.Entry); }
    get campaignMapAttritionDamages() { return this.collectionCache.getCollection(CampaignMapAttritionDamages$1.KEY, CampaignMapAttritionDamages$1.Entry); }
    get campaignMapAttritionFactionImmunities() { return this.collectionCache.getCollection(CampaignMapAttritionFactionImmunities$1.KEY, CampaignMapAttritionFactionImmunities$1.Entry); }
    get campaignMapAttritionTypes() { return this.collectionCache.getCollection(CampaignMapAttritionTypes$1.KEY, CampaignMapAttritionTypes$1.Entry); }
    get campaignMapAttritionUnitImmunities() { return this.collectionCache.getCollection(CampaignMapAttritionUnitImmunities$1.KEY, CampaignMapAttritionUnitImmunities$1.Entry); }
    get campaignMapMasks() { return this.collectionCache.getCollection(CampaignMapMasks.KEY, CampaignMapMasks.Entry); }
    get campaignMapMasksToExcludedRegions() { return this.collectionCache.getCollection(CampaignMapMasksToExcludedRegions.KEY, CampaignMapMasksToExcludedRegions.Entry); }
    get campaignMapPlayableAreas() { return this.collectionCache.getCollection(CampaignMapPlayableAreas$1.KEY, CampaignMapPlayableAreas$1.Entry); }
    get campaignMapRegions() { return this.collectionCache.getCollection(CampaignMapRegions$1.KEY, CampaignMapRegions$1.Entry); }
    get campaignMapRoads() { return this.collectionCache.getCollection(CampaignMapRoads$1.KEY, CampaignMapRoads$1.Entry); }
    get campaignMapSettlements() { return this.collectionCache.getCollection(CampaignMapSettlements$1.KEY, CampaignMapSettlements$1.Entry); }
    get campaignMapTooltips() { return this.collectionCache.getCollection(CampaignMapTooltips$1.KEY, CampaignMapTooltips$1.Entry); }
    get campaignMapTooltipOverContexts() { return this.collectionCache.getCollection(CampaignMapTooltipOverContexts$1.KEY, CampaignMapTooltipOverContexts$1.Entry); }
    get campaignMapTooltipSelectContexts() { return this.collectionCache.getCollection(CampaignMapTooltipSelectContexts$1.KEY, CampaignMapTooltipSelectContexts$1.Entry); }
    get campaignMapTooltipTexts() { return this.collectionCache.getCollection(CampaignMapTooltipTexts$1.KEY, CampaignMapTooltipTexts$1.Entry); }
    get campaignMapTransitionAreas() { return this.collectionCache.getCollection(CampaignMapTransitionAreas$1.KEY, CampaignMapTransitionAreas$1.Entry); }
    get campaignMapTransitionLinks() { return this.collectionCache.getCollection(CampaignMapTransitionLinks$1.KEY, CampaignMapTransitionLinks$1.Entry); }
    get campaignMapWindsOfMagicAreas() { return this.collectionCache.getCollection(CampaignMapWindsOfMagicAreas.KEY, CampaignMapWindsOfMagicAreas.Entry); }
    get campaignMapWindsOfMagicPersistentRegionStrengths() { return this.collectionCache.getCollection(CampaignMapWindsOfMagicPersistentRegionStrengths.KEY, CampaignMapWindsOfMagicPersistentRegionStrengths.Entry); }
    get campaignMapWindsOfMagicStrengths() { return this.collectionCache.getCollection(CampaignMapWindsOfMagicStrengths.KEY, CampaignMapWindsOfMagicStrengths.Entry); }
    get campaignMarkers() { return this.collectionCache.getCollection(CampaignMarkers.KEY, CampaignMarkers.Entry); }
    get campaignMarkerTypes() { return this.collectionCache.getCollection(CampaignMarkerTypes.KEY, CampaignMarkerTypes.Entry); }
    get campaignMercenaryUnitCharacterLevelRestrictions() { return this.collectionCache.getCollection(CampaignMercenaryUnitCharacterLevelRestrictions.KEY, CampaignMercenaryUnitCharacterLevelRestrictions.Entry); }
    get campaignMounts() { return this.collectionCache.getCollection(CampaignMounts.KEY, CampaignMounts.Entry); }
    get campaignMountAnimationSetOverrides() { return this.collectionCache.getCollection(CampaignMountAnimationSetOverrides.KEY, CampaignMountAnimationSetOverrides.Entry); }
    get campaignMovementSplineMaterials() { return this.collectionCache.getCollection(CampaignMovementSplineMaterials.KEY, CampaignMovementSplineMaterials.Entry); }
    get campaignMpCoopGroups() { return this.collectionCache.getCollection(CampaignMpCoopGroups$1.KEY, CampaignMpCoopGroups$1.Entry); }
    get campaignMpCoopGroupsToFactions() { return this.collectionCache.getCollection(CampaignMpCoopGroupsToFactions$1.KEY, CampaignMpCoopGroupsToFactions$1.Entry); }
    get campaignPayloadUiDetails() { return this.collectionCache.getCollection(CampaignPayloadUiDetails.KEY, CampaignPayloadUiDetails.Entry); }
    get campaignPoliticsStrings() { return this.collectionCache.getCollection(CampaignPoliticsStrings$1.KEY, CampaignPoliticsStrings$1.Entry); }
    get campaignPostBattleCaptiveOptions() { return this.collectionCache.getCollection(CampaignPostBattleCaptiveOptions.KEY, CampaignPostBattleCaptiveOptions.Entry); }
    get campaignPostBattleCaptiveOptionIds() { return this.collectionCache.getCollection(CampaignPostBattleCaptiveOptionIds.KEY, CampaignPostBattleCaptiveOptionIds.Entry); }
    get campaignPublicOrderPopulaceEffects() { return this.collectionCache.getCollection(CampaignPublicOrderPopulaceEffects$1.KEY, CampaignPublicOrderPopulaceEffects$1.Entry); }
    get campaignRegionTransformationCompositeScenes() { return this.collectionCache.getCollection(CampaignRegionTransformationCompositeScenes.KEY, CampaignRegionTransformationCompositeScenes.Entry); }
    get campaignReligiousRelations() { return this.collectionCache.getCollection(CampaignReligiousRelations.KEY, CampaignReligiousRelations.Entry); }
    get campaignRogueArmyGroups() { return this.collectionCache.getCollection(CampaignRogueArmyGroups.KEY, CampaignRogueArmyGroups.Entry); }
    get campaignRogueArmyGroupUnits() { return this.collectionCache.getCollection(CampaignRogueArmyGroupUnits.KEY, CampaignRogueArmyGroupUnits.Entry); }
    get campaignRogueArmyLeaders() { return this.collectionCache.getCollection(CampaignRogueArmyLeaders.KEY, CampaignRogueArmyLeaders.Entry); }
    get campaignRogueArmySetups() { return this.collectionCache.getCollection(CampaignRogueArmySetups.KEY, CampaignRogueArmySetups.Entry); }
    get campaignRogueArmySpawnGroups() { return this.collectionCache.getCollection(CampaignRogueArmySpawnGroups.KEY, CampaignRogueArmySpawnGroups.Entry); }
    get campaignRogueArmySpawnLocations() { return this.collectionCache.getCollection(CampaignRogueArmySpawnLocations.KEY, CampaignRogueArmySpawnLocations.Entry); }
    get campaignRogueArmySpawnRegions() { return this.collectionCache.getCollection(CampaignRogueArmySpawnRegions.KEY, CampaignRogueArmySpawnRegions.Entry); }
    get campaignSettlementDisplayBuildings() { return this.collectionCache.getCollection(CampaignSettlementDisplayBuildings$1.KEY, CampaignSettlementDisplayBuildings$1.Entry); }
    get campaignSettlementDisplayBuildingsEnums() { return this.collectionCache.getCollection(CampaignSettlementDisplayBuildingsEnums$1.KEY, CampaignSettlementDisplayBuildingsEnums$1.Entry); }
    get campaignSettlementDisplayBuildingsOverlays() { return this.collectionCache.getCollection(CampaignSettlementDisplayBuildingsOverlays.KEY, CampaignSettlementDisplayBuildingsOverlays.Entry); }
    get campaignSettlementDisplayBuildingCultureOverlays() { return this.collectionCache.getCollection(CampaignSettlementDisplayBuildingCultureOverlays.KEY, CampaignSettlementDisplayBuildingCultureOverlays.Entry); }
    get campaignSettlementDisplayBuildingIds() { return this.collectionCache.getCollection(CampaignSettlementDisplayBuildingIds$1.KEY, CampaignSettlementDisplayBuildingIds$1.Entry); }
    get campaignSettlementDisplayBuildingModelIds() { return this.collectionCache.getCollection(CampaignSettlementDisplayBuildingModelIds.KEY, CampaignSettlementDisplayBuildingModelIds.Entry); }
    get campaignSettlementDisplayBuildingSiegeModels() { return this.collectionCache.getCollection(CampaignSettlementDisplayBuildingSiegeModels.KEY, CampaignSettlementDisplayBuildingSiegeModels.Entry); }
    get campaignSettlementDisplaySettlementRotations() { return this.collectionCache.getCollection(CampaignSettlementDisplaySettlementRotations.KEY, CampaignSettlementDisplaySettlementRotations.Entry); }
    get campaignSettlementDisplaySprawlPieces() { return this.collectionCache.getCollection(CampaignSettlementDisplaySprawlPieces$1.KEY, CampaignSettlementDisplaySprawlPieces$1.Entry); }
    get campaignStances() { return this.collectionCache.getCollection(CampaignStances$1.KEY, CampaignStances$1.Entry); }
    get campaignStancesCompositeScenes() { return this.collectionCache.getCollection(CampaignStancesCompositeScenes.KEY, CampaignStancesCompositeScenes.Entry); }
    get campaignStancesFactionsJunctions() { return this.collectionCache.getCollection(CampaignStancesFactionsJunctions.KEY, CampaignStancesFactionsJunctions.Entry); }
    get campaignStanceEffectsJunctions() { return this.collectionCache.getCollection(CampaignStanceEffectsJunctions$1.KEY, CampaignStanceEffectsJunctions$1.Entry); }
    get campaignStatisticsCategories() { return this.collectionCache.getCollection(CampaignStatisticsCategories$1.KEY, CampaignStatisticsCategories$1.Entry); }
    get campaignStatisticsEnums() { return this.collectionCache.getCollection(CampaignStatisticsEnums$1.KEY, CampaignStatisticsEnums$1.Entry); }
    get campaignStatisticsStrings() { return this.collectionCache.getCollection(CampaignStatisticsStrings$1.KEY, CampaignStatisticsStrings$1.Entry); }
    get campaignStorms() { return this.collectionCache.getCollection(CampaignStorms.KEY, CampaignStorms.Entry); }
    get campaignStormsExcludedRegions() { return this.collectionCache.getCollection(CampaignStormsExcludedRegions.KEY, CampaignStormsExcludedRegions.Entry); }
    get campaignStormRegionDisplaySettings() { return this.collectionCache.getCollection(CampaignStormRegionDisplaySettings.KEY, CampaignStormRegionDisplaySettings.Entry); }
    get campaignStormTypes() { return this.collectionCache.getCollection(CampaignStormTypes.KEY, CampaignStormTypes.Entry); }
    get campaignStringVariables() { return this.collectionCache.getCollection(CampaignStringVariables.KEY, CampaignStringVariables.Entry); }
    get campaignSubjects() { return this.collectionCache.getCollection(CampaignSubjects$1.KEY, CampaignSubjects$1.Entry); }
    get campaignSubjectEvolutions() { return this.collectionCache.getCollection(CampaignSubjectEvolutions$1.KEY, CampaignSubjectEvolutions$1.Entry); }
    get campaignSubjectEvolutionLinks() { return this.collectionCache.getCollection(CampaignSubjectEvolutionLinks$1.KEY, CampaignSubjectEvolutionLinks$1.Entry); }
    get campaignSubjectFactionRestrictionJunctions() { return this.collectionCache.getCollection(CampaignSubjectFactionRestrictionJunctions$1.KEY, CampaignSubjectFactionRestrictionJunctions$1.Entry); }
    get campaignSubjectStrings() { return this.collectionCache.getCollection(CampaignSubjectStrings$1.KEY, CampaignSubjectStrings$1.Entry); }
    get campaignTreeIds() { return this.collectionCache.getCollection(CampaignTreeIds.KEY, CampaignTreeIds.Entry); }
    get campaignTreeTypes() { return this.collectionCache.getCollection(CampaignTreeTypes.KEY, CampaignTreeTypes.Entry); }
    get campaignTreeTypeCultures() { return this.collectionCache.getCollection(CampaignTreeTypeCultures.KEY, CampaignTreeTypeCultures.Entry); }
    get campaignTreeVariants() { return this.collectionCache.getCollection(CampaignTreeVariants.KEY, CampaignTreeVariants.Entry); }
    get campaignTunnellingExcludedRegions() { return this.collectionCache.getCollection(CampaignTunnellingExcludedRegions.KEY, CampaignTunnellingExcludedRegions.Entry); }
    get campaignUnitStatBonuses() { return this.collectionCache.getCollection(CampaignUnitStatBonuses$1.KEY, CampaignUnitStatBonuses$1.Entry); }
    get campaignVariables() { return this.collectionCache.getCollection(CampaignVariables$1.KEY, CampaignVariables$1.Entry); }
    get campaignVfxCampaignVfxEventIds() { return this.collectionCache.getCollection(CampaignVfxCampaignVfxEventIds$1.KEY, CampaignVfxCampaignVfxEventIds$1.Entry); }
    get campaignVfxDescriptions() { return this.collectionCache.getCollection(CampaignVfxDescriptions$1.KEY, CampaignVfxDescriptions$1.Entry); }
    get campaignVfxLookups() { return this.collectionCache.getCollection(CampaignVfxLookups$1.KEY, CampaignVfxLookups$1.Entry); }
    get campaignVideos() { return this.collectionCache.getCollection(CampaignVideos.KEY, CampaignVideos.Entry); }
    get capturePointTypes() { return this.collectionCache.getCollection(CapturePointTypes$1.KEY, CapturePointTypes$1.Entry); }
    get cdirCampaignJunctions() { return this.collectionCache.getCollection(CdirCampaignJunctions$1.KEY, CdirCampaignJunctions$1.Entry); }
    get cdirConfigs() { return this.collectionCache.getCollection(CdirConfigs$1.KEY, CdirConfigs$1.Entry); }
    get cdirConfigValues() { return this.collectionCache.getCollection(CdirConfigValues$1.KEY, CdirConfigValues$1.Entry); }
    get cdirDesires() { return this.collectionCache.getCollection(CdirDesires$1.KEY, CdirDesires$1.Entry); }
    get cdirDesirePriorities() { return this.collectionCache.getCollection(CdirDesirePriorities$1.KEY, CdirDesirePriorities$1.Entry); }
    get cdirEventsCategories() { return this.collectionCache.getCollection(CdirEventsCategories.KEY, CdirEventsCategories.Entry); }
    get cdirEventsDilemmaChoices() { return this.collectionCache.getCollection(CdirEventsDilemmaChoices$1.KEY, CdirEventsDilemmaChoices$1.Entry); }
    get cdirEventsDilemmaChoiceDetails() { return this.collectionCache.getCollection(CdirEventsDilemmaChoiceDetails$1.KEY, CdirEventsDilemmaChoiceDetails$1.Entry); }
    get cdirEventsDilemmaFollowupDilemmas() { return this.collectionCache.getCollection(CdirEventsDilemmaFollowupDilemmas$1.KEY, CdirEventsDilemmaFollowupDilemmas$1.Entry); }
    get cdirEventsDilemmaFollowupMissions() { return this.collectionCache.getCollection(CdirEventsDilemmaFollowupMissions$1.KEY, CdirEventsDilemmaFollowupMissions$1.Entry); }
    get cdirEventsDilemmaIncidents() { return this.collectionCache.getCollection(CdirEventsDilemmaIncidents$1.KEY, CdirEventsDilemmaIncidents$1.Entry); }
    get cdirEventsDilemmaOptions() { return this.collectionCache.getCollection(CdirEventsDilemmaOptions$1.KEY, CdirEventsDilemmaOptions$1.Entry); }
    get cdirEventsDilemmaOptionJunctions() { return this.collectionCache.getCollection(CdirEventsDilemmaOptionJunctions$1.KEY, CdirEventsDilemmaOptionJunctions$1.Entry); }
    get cdirEventsDilemmaPayloads() { return this.collectionCache.getCollection(CdirEventsDilemmaPayloads$1.KEY, CdirEventsDilemmaPayloads$1.Entry); }
    get cdirEventsIncidentFollowupDilemmas() { return this.collectionCache.getCollection(CdirEventsIncidentFollowupDilemmas$1.KEY, CdirEventsIncidentFollowupDilemmas$1.Entry); }
    get cdirEventsIncidentFollowupIncidents() { return this.collectionCache.getCollection(CdirEventsIncidentFollowupIncidents$1.KEY, CdirEventsIncidentFollowupIncidents$1.Entry); }
    get cdirEventsIncidentFollowupMissions() { return this.collectionCache.getCollection(CdirEventsIncidentFollowupMissions$1.KEY, CdirEventsIncidentFollowupMissions$1.Entry); }
    get cdirEventsIncidentOptions() { return this.collectionCache.getCollection(CdirEventsIncidentOptions$1.KEY, CdirEventsIncidentOptions$1.Entry); }
    get cdirEventsIncidentOptionJunctions() { return this.collectionCache.getCollection(CdirEventsIncidentOptionJunctions$1.KEY, CdirEventsIncidentOptionJunctions$1.Entry); }
    get cdirEventsIncidentPayloads() { return this.collectionCache.getCollection(CdirEventsIncidentPayloads$1.KEY, CdirEventsIncidentPayloads$1.Entry); }
    get cdirEventsMissionFollowupDilemmas() { return this.collectionCache.getCollection(CdirEventsMissionFollowupDilemmas$1.KEY, CdirEventsMissionFollowupDilemmas$1.Entry); }
    get cdirEventsMissionFollowupMissions() { return this.collectionCache.getCollection(CdirEventsMissionFollowupMissions$1.KEY, CdirEventsMissionFollowupMissions$1.Entry); }
    get cdirEventsMissionIncidents() { return this.collectionCache.getCollection(CdirEventsMissionIncidents$1.KEY, CdirEventsMissionIncidents$1.Entry); }
    get cdirEventsMissionIssuerJunctions() { return this.collectionCache.getCollection(CdirEventsMissionIssuerJunctions$1.KEY, CdirEventsMissionIssuerJunctions$1.Entry); }
    get cdirEventsMissionOptions() { return this.collectionCache.getCollection(CdirEventsMissionOptions$1.KEY, CdirEventsMissionOptions$1.Entry); }
    get cdirEventsMissionOptionJunctions() { return this.collectionCache.getCollection(CdirEventsMissionOptionJunctions$1.KEY, CdirEventsMissionOptionJunctions$1.Entry); }
    get cdirEventsMissionPayloads() { return this.collectionCache.getCollection(CdirEventsMissionPayloads$1.KEY, CdirEventsMissionPayloads$1.Entry); }
    get cdirEventsMissionStatuses() { return this.collectionCache.getCollection(CdirEventsMissionStatuses$1.KEY, CdirEventsMissionStatuses$1.Entry); }
    get cdirEventsOptions() { return this.collectionCache.getCollection(CdirEventsOptions.KEY, CdirEventsOptions.Entry); }
    get cdirEventsPayloads() { return this.collectionCache.getCollection(CdirEventsPayloads$1.KEY, CdirEventsPayloads$1.Entry); }
    get cdirFactionJunctions() { return this.collectionCache.getCollection(CdirFactionJunctions$1.KEY, CdirFactionJunctions$1.Entry); }
    get cdirMilitaryGeneratorConfigs() { return this.collectionCache.getCollection(CdirMilitaryGeneratorConfigs$1.KEY, CdirMilitaryGeneratorConfigs$1.Entry); }
    get cdirMilitaryGeneratorTemplates() { return this.collectionCache.getCollection(CdirMilitaryGeneratorTemplates$1.KEY, CdirMilitaryGeneratorTemplates$1.Entry); }
    get cdirMilitaryGeneratorTemplatePriorities() { return this.collectionCache.getCollection(CdirMilitaryGeneratorTemplatePriorities$1.KEY, CdirMilitaryGeneratorTemplatePriorities$1.Entry); }
    get cdirMilitaryGeneratorTemplateRatios() { return this.collectionCache.getCollection(CdirMilitaryGeneratorTemplateRatios$1.KEY, CdirMilitaryGeneratorTemplateRatios$1.Entry); }
    get cdirMilitaryGeneratorUnitGroups() { return this.collectionCache.getCollection(CdirMilitaryGeneratorUnitGroups$1.KEY, CdirMilitaryGeneratorUnitGroups$1.Entry); }
    get cdirMilitaryGeneratorUnitQualities() { return this.collectionCache.getCollection(CdirMilitaryGeneratorUnitQualities$1.KEY, CdirMilitaryGeneratorUnitQualities$1.Entry); }
    get characterExperienceSkillTiers() { return this.collectionCache.getCollection(CharacterExperienceSkillTiers$1.KEY, CharacterExperienceSkillTiers$1.Entry); }
    get characterSkills() { return this.collectionCache.getCollection(CharacterSkills$1.KEY, CharacterSkills$1.Entry); }
    get characterSkillsToQuestAncillaries() { return this.collectionCache.getCollection(CharacterSkillsToQuestAncillaries.KEY, CharacterSkillsToQuestAncillaries.Entry); }
    get characterSkillCategories() { return this.collectionCache.getCollection(CharacterSkillCategories.KEY, CharacterSkillCategories.Entry); }
    get characterSkillLevelDetails() { return this.collectionCache.getCollection(CharacterSkillLevelDetails$1.KEY, CharacterSkillLevelDetails$1.Entry); }
    get characterSkillLevelToAncillariesJunctions() { return this.collectionCache.getCollection(CharacterSkillLevelToAncillariesJunctions.KEY, CharacterSkillLevelToAncillariesJunctions.Entry); }
    get characterSkillLevelToDilemmasJunctions() { return this.collectionCache.getCollection(CharacterSkillLevelToDilemmasJunctions.KEY, CharacterSkillLevelToDilemmasJunctions.Entry); }
    get characterSkillLevelToEffectsJunctions() { return this.collectionCache.getCollection(CharacterSkillLevelToEffectsJunctions$1.KEY, CharacterSkillLevelToEffectsJunctions$1.Entry); }
    get characterSkillLevelToIncidentsJunctions() { return this.collectionCache.getCollection(CharacterSkillLevelToIncidentsJunctions.KEY, CharacterSkillLevelToIncidentsJunctions.Entry); }
    get characterSkillLevelToMissionsJunctions() { return this.collectionCache.getCollection(CharacterSkillLevelToMissionsJunctions.KEY, CharacterSkillLevelToMissionsJunctions.Entry); }
    get characterSkillNodes() { return this.collectionCache.getCollection(CharacterSkillNodes$1.KEY, CharacterSkillNodes$1.Entry); }
    get characterSkillNodesSkillLocks() { return this.collectionCache.getCollection(CharacterSkillNodesSkillLocks.KEY, CharacterSkillNodesSkillLocks.Entry); }
    get characterSkillNodeAncillaryLocks() { return this.collectionCache.getCollection(CharacterSkillNodeAncillaryLocks.KEY, CharacterSkillNodeAncillaryLocks.Entry); }
    get characterSkillNodeLinks() { return this.collectionCache.getCollection(CharacterSkillNodeLinks$1.KEY, CharacterSkillNodeLinks$1.Entry); }
    get characterSkillNodeLinkTypes() { return this.collectionCache.getCollection(CharacterSkillNodeLinkTypes.KEY, CharacterSkillNodeLinkTypes.Entry); }
    get characterSkillNodeSets() { return this.collectionCache.getCollection(CharacterSkillNodeSets$1.KEY, CharacterSkillNodeSets$1.Entry); }
    get characterSkillUtilizationHints() { return this.collectionCache.getCollection(CharacterSkillUtilizationHints.KEY, CharacterSkillUtilizationHints.Entry); }
    get characterSkillUtilizationHintsJunctions() { return this.collectionCache.getCollection(CharacterSkillUtilizationHintsJunctions.KEY, CharacterSkillUtilizationHintsJunctions.Entry); }
    get characterTraits() { return this.collectionCache.getCollection(CharacterTraits$1.KEY, CharacterTraits$1.Entry); }
    get characterTraitLevels() { return this.collectionCache.getCollection(CharacterTraitLevels$1.KEY, CharacterTraitLevels$1.Entry); }
    get chatShortcuts() { return this.collectionCache.getCollection(ChatShortcuts$1.KEY, ChatShortcuts$1.Entry); }
    get climates() { return this.collectionCache.getCollection(Climates$1.KEY, Climates$1.Entry); }
    get climbingLaddersMeshesDefinitions() { return this.collectionCache.getCollection(ClimbingLaddersMeshesDefinitions.KEY, ClimbingLaddersMeshesDefinitions.Entry); }
    get combatPotentialsAdjustmentsForBannersJunctions() { return this.collectionCache.getCollection(CombatPotentialsAdjustmentsForBannersJunctions.KEY, CombatPotentialsAdjustmentsForBannersJunctions.Entry); }
    get combatPotentialsAdjustmentTypes() { return this.collectionCache.getCollection(CombatPotentialsAdjustmentTypes.KEY, CombatPotentialsAdjustmentTypes.Entry); }
    get combatPotentialsTypes() { return this.collectionCache.getCollection(CombatPotentialsTypes.KEY, CombatPotentialsTypes.Entry); }
    get commanderUnitPermissions() { return this.collectionCache.getCollection(CommanderUnitPermissions$1.KEY, CommanderUnitPermissions$1.Entry); }
    get commodities() { return this.collectionCache.getCollection(Commodities$1.KEY, Commodities$1.Entry); }
    get commodityUnitNames() { return this.collectionCache.getCollection(CommodityUnitNames$1.KEY, CommodityUnitNames$1.Entry); }
    get compositeSceneFiles() { return this.collectionCache.getCollection(CompositeSceneFiles.KEY, CompositeSceneFiles.Entry); }
    get confederationEffectBundles() { return this.collectionCache.getCollection(ConfederationEffectBundles.KEY, ConfederationEffectBundles.Entry); }
    get cultures() { return this.collectionCache.getCollection(Cultures$1.KEY, Cultures$1.Entry); }
    get culturesSubcultures() { return this.collectionCache.getCollection(CulturesSubcultures$1.KEY, CulturesSubcultures$1.Entry); }
    get cultureCampaignDestructionCompositeSceneJunctions() { return this.collectionCache.getCollection(CultureCampaignDestructionCompositeSceneJunctions.KEY, CultureCampaignDestructionCompositeSceneJunctions.Entry); }
    get culturePacks() { return this.collectionCache.getCollection(CulturePacks.KEY, CulturePacks.Entry); }
    get culturePackIds() { return this.collectionCache.getCollection(CulturePackIds.KEY, CulturePackIds.Entry); }
    get cultureSettlementOccupationOptions() { return this.collectionCache.getCollection(CultureSettlementOccupationOptions$1.KEY, CultureSettlementOccupationOptions$1.Entry); }
    get cultureToBattleAnimationTables() { return this.collectionCache.getCollection(CultureToBattleAnimationTables.KEY, CultureToBattleAnimationTables.Entry); }
    get cursors() { return this.collectionCache.getCollection(Cursors$1.KEY, Cursors$1.Entry); }
    get cursorMouseEvents() { return this.collectionCache.getCollection(CursorMouseEvents$1.KEY, CursorMouseEvents$1.Entry); }
    get cursorTransitions() { return this.collectionCache.getCollection(CursorTransitions$1.KEY, CursorTransitions$1.Entry); }
    get cursusHonorumLevelRequirements() { return this.collectionCache.getCollection(CursusHonorumLevelRequirements$1.KEY, CursusHonorumLevelRequirements$1.Entry); }
    get cursusHonorumTraitJunctions() { return this.collectionCache.getCollection(CursusHonorumTraitJunctions$1.KEY, CursusHonorumTraitJunctions$1.Entry); }
    get customBattleFactions() { return this.collectionCache.getCollection(CustomBattleFactions.KEY, CustomBattleFactions.Entry); }
    get customLoadingScreens() { return this.collectionCache.getCollection(CustomLoadingScreens.KEY, CustomLoadingScreens.Entry); }
    get customLoadingScreenComponents() { return this.collectionCache.getCollection(CustomLoadingScreenComponents.KEY, CustomLoadingScreenComponents.Entry); }
    get davePermissions() { return this.collectionCache.getCollection(DavePermissions$1.KEY, DavePermissions$1.Entry); }
    get daveRestrictedTables() { return this.collectionCache.getCollection(DaveRestrictedTables$1.KEY, DaveRestrictedTables$1.Entry); }
    get daveUserTablePermissions() { return this.collectionCache.getCollection(DaveUserTablePermissions$1.KEY, DaveUserTablePermissions$1.Entry); }
    get deathTypes() { return this.collectionCache.getCollection(DeathTypes$1.KEY, DeathTypes$1.Entry); }
    get deployables() { return this.collectionCache.getCollection(Deployables$1.KEY, Deployables$1.Entry); }
    get deployablesAbilities() { return this.collectionCache.getCollection(DeployablesAbilities.KEY, DeployablesAbilities.Entry); }
    get deployablesCategories() { return this.collectionCache.getCollection(DeployablesCategories.KEY, DeployablesCategories.Entry); }
    get deployablesCustomBattles() { return this.collectionCache.getCollection(DeployablesCustomBattles$1.KEY, DeployablesCustomBattles$1.Entry); }
    get deploymentAreaDisplays() { return this.collectionCache.getCollection(DeploymentAreaDisplays.KEY, DeploymentAreaDisplays.Entry); }
    get destructionZoneMaskTypes() { return this.collectionCache.getCollection(DestructionZoneMaskTypes.KEY, DestructionZoneMaskTypes.Entry); }
    get dilemmas() { return this.collectionCache.getCollection(Dilemmas$1.KEY, Dilemmas$1.Entry); }
    get dilemmaToCampaignSubjectJunctions() { return this.collectionCache.getCollection(DilemmaToCampaignSubjectJunctions$1.KEY, DilemmaToCampaignSubjectJunctions$1.Entry); }
    get diplomacyComponents() { return this.collectionCache.getCollection(DiplomacyComponents.KEY, DiplomacyComponents.Entry); }
    get diplomacyCurrentTreatiesToDiplomaticOptions() { return this.collectionCache.getCollection(DiplomacyCurrentTreatiesToDiplomaticOptions$1.KEY, DiplomacyCurrentTreatiesToDiplomaticOptions$1.Entry); }
    get diplomacyKeys() { return this.collectionCache.getCollection(DiplomacyKeys$1.KEY, DiplomacyKeys$1.Entry); }
    get diplomacyKeysToDiplomacyKeyGroups() { return this.collectionCache.getCollection(DiplomacyKeysToDiplomacyKeyGroups.KEY, DiplomacyKeysToDiplomacyKeyGroups.Entry); }
    get diplomacyKeyGroups() { return this.collectionCache.getCollection(DiplomacyKeyGroups.KEY, DiplomacyKeyGroups.Entry); }
    get diplomacyNegotiationAttitudes() { return this.collectionCache.getCollection(DiplomacyNegotiationAttitudes$1.KEY, DiplomacyNegotiationAttitudes$1.Entry); }
    get diplomacyNegotiationStringOptions() { return this.collectionCache.getCollection(DiplomacyNegotiationStringOptions$1.KEY, DiplomacyNegotiationStringOptions$1.Entry); }
    get diplomacyStrings() { return this.collectionCache.getCollection(DiplomacyStrings$1.KEY, DiplomacyStrings$1.Entry); }
    get diplomaticActions() { return this.collectionCache.getCollection(DiplomaticActions.KEY, DiplomaticActions.Entry); }
    get diplomaticActionFactionRestrictions() { return this.collectionCache.getCollection(DiplomaticActionFactionRestrictions$1.KEY, DiplomaticActionFactionRestrictions$1.Entry); }
    get diplomaticActionSubcultureRestrictions() { return this.collectionCache.getCollection(DiplomaticActionSubcultureRestrictions$1.KEY, DiplomaticActionSubcultureRestrictions$1.Entry); }
    get diplomaticRelationsAttitudes() { return this.collectionCache.getCollection(DiplomaticRelationsAttitudes$1.KEY, DiplomaticRelationsAttitudes$1.Entry); }
    get diplomaticRelationsReligion() { return this.collectionCache.getCollection(DiplomaticRelationsReligion$1.KEY, DiplomaticRelationsReligion$1.Entry); }
    get effects() { return this.collectionCache.getCollection(Effects$1.KEY, Effects$1.Entry); }
    get effectsAdditionalTooltipDetails() { return this.collectionCache.getCollection(EffectsAdditionalTooltipDetails.KEY, EffectsAdditionalTooltipDetails.Entry); }
    get effectBonusValueAgentActionRecordJunctions() { return this.collectionCache.getCollection(EffectBonusValueAgentActionRecordJunctions.KEY, EffectBonusValueAgentActionRecordJunctions.Entry); }
    get effectBonusValueAgentJunction() { return this.collectionCache.getCollection(EffectBonusValueAgentJunction$1.KEY, EffectBonusValueAgentJunction$1.Entry); }
    get effectBonusValueAgentSubtypeJunctions() { return this.collectionCache.getCollection(EffectBonusValueAgentSubtypeJunctions.KEY, EffectBonusValueAgentSubtypeJunctions.Entry); }
    get effectBonusValueAttritionRecordJunctions() { return this.collectionCache.getCollection(EffectBonusValueAttritionRecordJunctions.KEY, EffectBonusValueAttritionRecordJunctions.Entry); }
    get effectBonusValueBasicJunction() { return this.collectionCache.getCollection(EffectBonusValueBasicJunction$1.KEY, EffectBonusValueBasicJunction$1.Entry); }
    get effectBonusValueBattlefieldDeployablesJunctions() { return this.collectionCache.getCollection(EffectBonusValueBattlefieldDeployablesJunctions$1.KEY, EffectBonusValueBattlefieldDeployablesJunctions$1.Entry); }
    get effectBonusValueBattleContextArmySpecialAbilityJunctions() { return this.collectionCache.getCollection(EffectBonusValueBattleContextArmySpecialAbilityJunctions.KEY, EffectBonusValueBattleContextArmySpecialAbilityJunctions.Entry); }
    get effectBonusValueBattleContextJunctions() { return this.collectionCache.getCollection(EffectBonusValueBattleContextJunctions$1.KEY, EffectBonusValueBattleContextJunctions$1.Entry); }
    get effectBonusValueBattleContextUnitAbilityJunctions() { return this.collectionCache.getCollection(EffectBonusValueBattleContextUnitAbilityJunctions.KEY, EffectBonusValueBattleContextUnitAbilityJunctions.Entry); }
    get effectBonusValueBattleContextUnitAttributeJunctions() { return this.collectionCache.getCollection(EffectBonusValueBattleContextUnitAttributeJunctions.KEY, EffectBonusValueBattleContextUnitAttributeJunctions.Entry); }
    get effectBonusValueBuildingChainJunctions() { return this.collectionCache.getCollection(EffectBonusValueBuildingChainJunctions$1.KEY, EffectBonusValueBuildingChainJunctions$1.Entry); }
    get effectBonusValueBuildingSetJunctions() { return this.collectionCache.getCollection(EffectBonusValueBuildingSetJunctions$1.KEY, EffectBonusValueBuildingSetJunctions$1.Entry); }
    get effectBonusValueCommodityJunction() { return this.collectionCache.getCollection(EffectBonusValueCommodityJunction$1.KEY, EffectBonusValueCommodityJunction$1.Entry); }
    get effectBonusValueFactionJunctions() { return this.collectionCache.getCollection(EffectBonusValueFactionJunctions.KEY, EffectBonusValueFactionJunctions.Entry); }
    get effectBonusValueIdsUnitSets() { return this.collectionCache.getCollection(EffectBonusValueIdsUnitSets$1.KEY, EffectBonusValueIdsUnitSets$1.Entry); }
    get effectBonusValueIdActionResultsAdditionalOutcomesJunctions() { return this.collectionCache.getCollection(EffectBonusValueIdActionResultsAdditionalOutcomesJunctions$1.KEY, EffectBonusValueIdActionResultsAdditionalOutcomesJunctions$1.Entry); }
    get effectBonusValueLoyaltyEventJunctions() { return this.collectionCache.getCollection(EffectBonusValueLoyaltyEventJunctions.KEY, EffectBonusValueLoyaltyEventJunctions.Entry); }
    get effectBonusValueMeleeWeaponJunction() { return this.collectionCache.getCollection(EffectBonusValueMeleeWeaponJunction$1.KEY, EffectBonusValueMeleeWeaponJunction$1.Entry); }
    get effectBonusValueMilitaryForceAbilityJunctions() { return this.collectionCache.getCollection(EffectBonusValueMilitaryForceAbilityJunctions.KEY, EffectBonusValueMilitaryForceAbilityJunctions.Entry); }
    get effectBonusValueMissileWeaponJunctions() { return this.collectionCache.getCollection(EffectBonusValueMissileWeaponJunctions.KEY, EffectBonusValueMissileWeaponJunctions.Entry); }
    get effectBonusValueNameRecordJunctions() { return this.collectionCache.getCollection(EffectBonusValueNameRecordJunctions.KEY, EffectBonusValueNameRecordJunctions.Entry); }
    get effectBonusValuePooledResourceFactorJunctions() { return this.collectionCache.getCollection(EffectBonusValuePooledResourceFactorJunctions.KEY, EffectBonusValuePooledResourceFactorJunctions.Entry); }
    get effectBonusValuePooledResourceJunctions() { return this.collectionCache.getCollection(EffectBonusValuePooledResourceJunctions.KEY, EffectBonusValuePooledResourceJunctions.Entry); }
    get effectBonusValuePopulationClassAndReligionJunction() { return this.collectionCache.getCollection(EffectBonusValuePopulationClassAndReligionJunction$1.KEY, EffectBonusValuePopulationClassAndReligionJunction$1.Entry); }
    get effectBonusValuePopulationClassJunction() { return this.collectionCache.getCollection(EffectBonusValuePopulationClassJunction$1.KEY, EffectBonusValuePopulationClassJunction$1.Entry); }
    get effectBonusValueProjectileJunctions() { return this.collectionCache.getCollection(EffectBonusValueProjectileJunctions$1.KEY, EffectBonusValueProjectileJunctions$1.Entry); }
    get effectBonusValueProvinceInitiativeJunctions() { return this.collectionCache.getCollection(EffectBonusValueProvinceInitiativeJunctions.KEY, EffectBonusValueProvinceInitiativeJunctions.Entry); }
    get effectBonusValueProvincialInitiativeEffectRecordJunctions() { return this.collectionCache.getCollection(EffectBonusValueProvincialInitiativeEffectRecordJunctions$1.KEY, EffectBonusValueProvincialInitiativeEffectRecordJunctions$1.Entry); }
    get effectBonusValueReligionJunction() { return this.collectionCache.getCollection(EffectBonusValueReligionJunction$1.KEY, EffectBonusValueReligionJunction$1.Entry); }
    get effectBonusValueResourceJunction() { return this.collectionCache.getCollection(EffectBonusValueResourceJunction$1.KEY, EffectBonusValueResourceJunction$1.Entry); }
    get effectBonusValueRitualChainsJunctions() { return this.collectionCache.getCollection(EffectBonusValueRitualChainsJunctions.KEY, EffectBonusValueRitualChainsJunctions.Entry); }
    get effectBonusValueRitualJunctions() { return this.collectionCache.getCollection(EffectBonusValueRitualJunctions.KEY, EffectBonusValueRitualJunctions.Entry); }
    get effectBonusValueShotTypeJunctions() { return this.collectionCache.getCollection(EffectBonusValueShotTypeJunctions$1.KEY, EffectBonusValueShotTypeJunctions$1.Entry); }
    get effectBonusValueSiegeItemJunctions() { return this.collectionCache.getCollection(EffectBonusValueSiegeItemJunctions$1.KEY, EffectBonusValueSiegeItemJunctions$1.Entry); }
    get effectBonusValueSpecialAbilityPhaseRecordJunctions() { return this.collectionCache.getCollection(EffectBonusValueSpecialAbilityPhaseRecordJunctions.KEY, EffectBonusValueSpecialAbilityPhaseRecordJunctions.Entry); }
    get effectBonusValueSubcultureJunctions() { return this.collectionCache.getCollection(EffectBonusValueSubcultureJunctions.KEY, EffectBonusValueSubcultureJunctions.Entry); }
    get effectBonusValueTechnologyCategoryJunctions() { return this.collectionCache.getCollection(EffectBonusValueTechnologyCategoryJunctions$1.KEY, EffectBonusValueTechnologyCategoryJunctions$1.Entry); }
    get effectBonusValueTechnologyJunctions() { return this.collectionCache.getCollection(EffectBonusValueTechnologyJunctions.KEY, EffectBonusValueTechnologyJunctions.Entry); }
    get effectBonusValueUnitAbilityJunctions() { return this.collectionCache.getCollection(EffectBonusValueUnitAbilityJunctions$1.KEY, EffectBonusValueUnitAbilityJunctions$1.Entry); }
    get effectBonusValueUnitAttributeJunctions() { return this.collectionCache.getCollection(EffectBonusValueUnitAttributeJunctions.KEY, EffectBonusValueUnitAttributeJunctions.Entry); }
    get effectBonusValueUnitCasteJunctions() { return this.collectionCache.getCollection(EffectBonusValueUnitCasteJunctions$1.KEY, EffectBonusValueUnitCasteJunctions$1.Entry); }
    get effectBonusValueUnitCasteStatModifiersJunctions() { return this.collectionCache.getCollection(EffectBonusValueUnitCasteStatModifiersJunctions$1.KEY, EffectBonusValueUnitCasteStatModifiersJunctions$1.Entry); }
    get effectBonusValueUnitCategoryJunction() { return this.collectionCache.getCollection(EffectBonusValueUnitCategoryJunction$1.KEY, EffectBonusValueUnitCategoryJunction$1.Entry); }
    get effectBonusValueUnitCategoryStatModifiersJunctions() { return this.collectionCache.getCollection(EffectBonusValueUnitCategoryStatModifiersJunctions$1.KEY, EffectBonusValueUnitCategoryStatModifiersJunctions$1.Entry); }
    get effectBonusValueUnitClassJunction() { return this.collectionCache.getCollection(EffectBonusValueUnitClassJunction$1.KEY, EffectBonusValueUnitClassJunction$1.Entry); }
    get effectBonusValueUnitClassStatModifiersJunctions() { return this.collectionCache.getCollection(EffectBonusValueUnitClassStatModifiersJunctions$1.KEY, EffectBonusValueUnitClassStatModifiersJunctions$1.Entry); }
    get effectBonusValueUnitRecordJunctions() { return this.collectionCache.getCollection(EffectBonusValueUnitRecordJunctions$1.KEY, EffectBonusValueUnitRecordJunctions$1.Entry); }
    get effectBonusValueUnitSetUnitAbilityJunctions() { return this.collectionCache.getCollection(EffectBonusValueUnitSetUnitAbilityJunctions.KEY, EffectBonusValueUnitSetUnitAbilityJunctions.Entry); }
    get effectBonusValueUnitSetUnitAttributeJunctions() { return this.collectionCache.getCollection(EffectBonusValueUnitSetUnitAttributeJunctions.KEY, EffectBonusValueUnitSetUnitAttributeJunctions.Entry); }
    get effectBonusValueUnitStatModifiersJunctions() { return this.collectionCache.getCollection(EffectBonusValueUnitStatModifiersJunctions$1.KEY, EffectBonusValueUnitStatModifiersJunctions$1.Entry); }
    get effectBundles() { return this.collectionCache.getCollection(EffectBundles$1.KEY, EffectBundles$1.Entry); }
    get effectBundlesToEffectsJunctions() { return this.collectionCache.getCollection(EffectBundlesToEffectsJunctions$1.KEY, EffectBundlesToEffectsJunctions$1.Entry); }
    get effectBundleAdvancementStages() { return this.collectionCache.getCollection(EffectBundleAdvancementStages$1.KEY, EffectBundleAdvancementStages$1.Entry); }
    get effectBundleTargets() { return this.collectionCache.getCollection(EffectBundleTargets$1.KEY, EffectBundleTargets$1.Entry); }
    get effectCategories() { return this.collectionCache.getCollection(EffectCategories.KEY, EffectCategories.Entry); }
    get electorCounts() { return this.collectionCache.getCollection(ElectorCounts.KEY, ElectorCounts.Entry); }
    get electorCountRegionToCapitalRegionJunctions() { return this.collectionCache.getCollection(ElectorCountRegionToCapitalRegionJunctions.KEY, ElectorCountRegionToCapitalRegionJunctions.Entry); }
    get encyclopediaAgentManualBlockLinks() { return this.collectionCache.getCollection(EncyclopediaAgentManualBlockLinks$1.KEY, EncyclopediaAgentManualBlockLinks$1.Entry); }
    get encyclopediaAgentManualPageLinks() { return this.collectionCache.getCollection(EncyclopediaAgentManualPageLinks$1.KEY, EncyclopediaAgentManualPageLinks$1.Entry); }
    get encyclopediaBlocks() { return this.collectionCache.getCollection(EncyclopediaBlocks$1.KEY, EncyclopediaBlocks$1.Entry); }
    get encyclopediaBuildingChainGroups() { return this.collectionCache.getCollection(EncyclopediaBuildingChainGroups$1.KEY, EncyclopediaBuildingChainGroups$1.Entry); }
    get encyclopediaBuildingRedirects() { return this.collectionCache.getCollection(EncyclopediaBuildingRedirects$1.KEY, EncyclopediaBuildingRedirects$1.Entry); }
    get encyclopediaFactionGroupings() { return this.collectionCache.getCollection(EncyclopediaFactionGroupings$1.KEY, EncyclopediaFactionGroupings$1.Entry); }
    get encyclopediaFactionGroups() { return this.collectionCache.getCollection(EncyclopediaFactionGroups$1.KEY, EncyclopediaFactionGroups$1.Entry); }
    get encyclopediaFactionIconicUnits() { return this.collectionCache.getCollection(EncyclopediaFactionIconicUnits$1.KEY, EncyclopediaFactionIconicUnits$1.Entry); }
    get encyclopediaGlossaryBlocks() { return this.collectionCache.getCollection(EncyclopediaGlossaryBlocks$1.KEY, EncyclopediaGlossaryBlocks$1.Entry); }
    get encyclopediaGlossaryPages() { return this.collectionCache.getCollection(EncyclopediaGlossaryPages$1.KEY, EncyclopediaGlossaryPages$1.Entry); }
    get encyclopediaGlossaryPageLinkages() { return this.collectionCache.getCollection(EncyclopediaGlossaryPageLinkages$1.KEY, EncyclopediaGlossaryPageLinkages$1.Entry); }
    get encyclopediaHistoricalInfoBlocks() { return this.collectionCache.getCollection(EncyclopediaHistoricalInfoBlocks$1.KEY, EncyclopediaHistoricalInfoBlocks$1.Entry); }
    get encyclopediaHistoricalInfoPages() { return this.collectionCache.getCollection(EncyclopediaHistoricalInfoPages$1.KEY, EncyclopediaHistoricalInfoPages$1.Entry); }
    get encyclopediaHistoricalInfoPageLinkages() { return this.collectionCache.getCollection(EncyclopediaHistoricalInfoPageLinkages$1.KEY, EncyclopediaHistoricalInfoPageLinkages$1.Entry); }
    get encyclopediaIndexPages() { return this.collectionCache.getCollection(EncyclopediaIndexPages$1.KEY, EncyclopediaIndexPages$1.Entry); }
    get encyclopediaMultiplayerBlocks() { return this.collectionCache.getCollection(EncyclopediaMultiplayerBlocks$1.KEY, EncyclopediaMultiplayerBlocks$1.Entry); }
    get encyclopediaMultiplayerPages() { return this.collectionCache.getCollection(EncyclopediaMultiplayerPages$1.KEY, EncyclopediaMultiplayerPages$1.Entry); }
    get encyclopediaMultiplayerPageLinkages() { return this.collectionCache.getCollection(EncyclopediaMultiplayerPageLinkages$1.KEY, EncyclopediaMultiplayerPageLinkages$1.Entry); }
    get encyclopediaPages() { return this.collectionCache.getCollection(EncyclopediaPages$1.KEY, EncyclopediaPages$1.Entry); }
    get encyclopediaPageLinkages() { return this.collectionCache.getCollection(EncyclopediaPageLinkages$1.KEY, EncyclopediaPageLinkages$1.Entry); }
    get encyclopediaPageRelatedLinks() { return this.collectionCache.getCollection(EncyclopediaPageRelatedLinks$1.KEY, EncyclopediaPageRelatedLinks$1.Entry); }
    get encyclopediaProjectileShotTypeLinks() { return this.collectionCache.getCollection(EncyclopediaProjectileShotTypeLinks$1.KEY, EncyclopediaProjectileShotTypeLinks$1.Entry); }
    get encyclopediaSettings() { return this.collectionCache.getCollection(EncyclopediaSettings$1.KEY, EncyclopediaSettings$1.Entry); }
    get encyclopediaTemplateStrings() { return this.collectionCache.getCollection(EncyclopediaTemplateStrings$1.KEY, EncyclopediaTemplateStrings$1.Entry); }
    get encyclopediaTriggers() { return this.collectionCache.getCollection(EncyclopediaTriggers$1.KEY, EncyclopediaTriggers$1.Entry); }
    get encyclopediaTutorialSections() { return this.collectionCache.getCollection(EncyclopediaTutorialSections$1.KEY, EncyclopediaTutorialSections$1.Entry); }
    get encyclopediaTutorialVideos() { return this.collectionCache.getCollection(EncyclopediaTutorialVideos$1.KEY, EncyclopediaTutorialVideos$1.Entry); }
    get encyclopediaTutorialVideosDefaultSubtitles() { return this.collectionCache.getCollection(EncyclopediaTutorialVideosDefaultSubtitles$1.KEY, EncyclopediaTutorialVideosDefaultSubtitles$1.Entry); }
    get encyclopediaTutorialVideoSubtitles() { return this.collectionCache.getCollection(EncyclopediaTutorialVideoSubtitles$1.KEY, EncyclopediaTutorialVideoSubtitles$1.Entry); }
    get encyclopediaUnitAbilitiesLinks() { return this.collectionCache.getCollection(EncyclopediaUnitAbilitiesLinks$1.KEY, EncyclopediaUnitAbilitiesLinks$1.Entry); }
    get encyclopediaUnitAttributesLinks() { return this.collectionCache.getCollection(EncyclopediaUnitAttributesLinks$1.KEY, EncyclopediaUnitAttributesLinks$1.Entry); }
    get encyclopediaUnitRedirects() { return this.collectionCache.getCollection(EncyclopediaUnitRedirects$1.KEY, EncyclopediaUnitRedirects$1.Entry); }
    get encyclopediaUrls() { return this.collectionCache.getCollection(EncyclopediaUrls$1.KEY, EncyclopediaUrls$1.Entry); }
    get entityVfxAttachTypes() { return this.collectionCache.getCollection(EntityVfxAttachTypes.KEY, EntityVfxAttachTypes.Entry); }
    get events() { return this.collectionCache.getCollection(Events$1.KEY, Events$1.Entry); }
    get eventsEffectsJunct() { return this.collectionCache.getCollection(EventsEffectsJunct$1.KEY, EventsEffectsJunct$1.Entry); }
    get eventFeedCategories() { return this.collectionCache.getCollection(EventFeedCategories.KEY, EventFeedCategories.Entry); }
    get eventFeedEvents() { return this.collectionCache.getCollection(EventFeedEvents.KEY, EventFeedEvents.Entry); }
    get eventFeedGroups() { return this.collectionCache.getCollection(EventFeedGroups.KEY, EventFeedGroups.Entry); }
    get eventFeedGroupMembers() { return this.collectionCache.getCollection(EventFeedGroupMembers.KEY, EventFeedGroupMembers.Entry); }
    get eventFeedMessageEvents() { return this.collectionCache.getCollection(EventFeedMessageEvents.KEY, EventFeedMessageEvents.Entry); }
    get eventFeedStrings() { return this.collectionCache.getCollection(EventFeedStrings.KEY, EventFeedStrings.Entry); }
    get eventFeedSubcategories() { return this.collectionCache.getCollection(EventFeedSubcategories.KEY, EventFeedSubcategories.Entry); }
    get eventFeedSummaryEvents() { return this.collectionCache.getCollection(EventFeedSummaryEvents.KEY, EventFeedSummaryEvents.Entry); }
    get eventFeedTargetedEvents() { return this.collectionCache.getCollection(EventFeedTargetedEvents.KEY, EventFeedTargetedEvents.Entry); }
    get experienceTriggers() { return this.collectionCache.getCollection(ExperienceTriggers$1.KEY, ExperienceTriggers$1.Entry); }
    get experienceTriggersTargets() { return this.collectionCache.getCollection(ExperienceTriggersTargets$1.KEY, ExperienceTriggersTargets$1.Entry); }
    get factions() { return this.collectionCache.getCollection(Factions$1.KEY, Factions$1.Entry); }
    get factionwideRecruitmentUnitExclusionsSets() { return this.collectionCache.getCollection(FactionwideRecruitmentUnitExclusionsSets.KEY, FactionwideRecruitmentUnitExclusionsSets.Entry); }
    get factionwideRecruitmentUnitExclusionsUnitsSetsJunctions() { return this.collectionCache.getCollection(FactionwideRecruitmentUnitExclusionsUnitsSetsJunctions.KEY, FactionwideRecruitmentUnitExclusionsUnitsSetsJunctions.Entry); }
    get factionAgentPermittedSubtypes() { return this.collectionCache.getCollection(FactionAgentPermittedSubtypes.KEY, FactionAgentPermittedSubtypes.Entry); }
    get factionBanners() { return this.collectionCache.getCollection(FactionBanners$1.KEY, FactionBanners$1.Entry); }
    get factionCivilWarSetups() { return this.collectionCache.getCollection(FactionCivilWarSetups$1.KEY, FactionCivilWarSetups$1.Entry); }
    get factionFactionwideRecruitmentUnitExclusionsSetJunctions() { return this.collectionCache.getCollection(FactionFactionwideRecruitmentUnitExclusionsSetJunctions.KEY, FactionFactionwideRecruitmentUnitExclusionsSetJunctions.Entry); }
    get factionFeatures() { return this.collectionCache.getCollection(FactionFeatures.KEY, FactionFeatures.Entry); }
    get factionFeatureForests() { return this.collectionCache.getCollection(FactionFeatureForests.KEY, FactionFeatureForests.Entry); }
    get factionFeatureSetMilitaryForceTypes() { return this.collectionCache.getCollection(FactionFeatureSetMilitaryForceTypes.KEY, FactionFeatureSetMilitaryForceTypes.Entry); }
    get factionFeatureTrees() { return this.collectionCache.getCollection(FactionFeatureTrees.KEY, FactionFeatureTrees.Entry); }
    get factionFeatureTreeToTransitions() { return this.collectionCache.getCollection(FactionFeatureTreeToTransitions.KEY, FactionFeatureTreeToTransitions.Entry); }
    get factionGroups() { return this.collectionCache.getCollection(FactionGroups$1.KEY, FactionGroups$1.Entry); }
    get factionPoliticalPartiesJunctions() { return this.collectionCache.getCollection(FactionPoliticalPartiesJunctions$1.KEY, FactionPoliticalPartiesJunctions$1.Entry); }
    get factionRebellionUnitsJunctions() { return this.collectionCache.getCollection(FactionRebellionUnitsJunctions$1.KEY, FactionRebellionUnitsJunctions$1.Entry); }
    get factionResourceConsumptions() { return this.collectionCache.getCollection(FactionResourceConsumptions$1.KEY, FactionResourceConsumptions$1.Entry); }
    get factionSets() { return this.collectionCache.getCollection(FactionSets.KEY, FactionSets.Entry); }
    get factionSetItems() { return this.collectionCache.getCollection(FactionSetItems.KEY, FactionSetItems.Entry); }
    get factionToFactionGroupsJunctions() { return this.collectionCache.getCollection(FactionToFactionGroupsJunctions$1.KEY, FactionToFactionGroupsJunctions$1.Entry); }
    get factionToMercenarySetJunctions() { return this.collectionCache.getCollection(FactionToMercenarySetJunctions$1.KEY, FactionToMercenarySetJunctions$1.Entry); }
    get factionUniformColours() { return this.collectionCache.getCollection(FactionUniformColours$1.KEY, FactionUniformColours$1.Entry); }
    get factorialEffects() { return this.collectionCache.getCollection(FactorialEffects.KEY, FactorialEffects.Entry); }
    get fameLevels() { return this.collectionCache.getCollection(FameLevels$1.KEY, FameLevels$1.Entry); }
    get fameLevelAgentRecordJunctions() { return this.collectionCache.getCollection(FameLevelAgentRecordJunctions.KEY, FameLevelAgentRecordJunctions.Entry); }
    get familyRelationshipTypes() { return this.collectionCache.getCollection(FamilyRelationshipTypes$1.KEY, FamilyRelationshipTypes$1.Entry); }
    get famousBattlePools() { return this.collectionCache.getCollection(FamousBattlePools$1.KEY, FamousBattlePools$1.Entry); }
    get featureSets() { return this.collectionCache.getCollection(FeatureSets.KEY, FeatureSets.Entry); }
    get featureSetToFactionFeatures() { return this.collectionCache.getCollection(FeatureSetToFactionFeatures.KEY, FeatureSetToFactionFeatures.Entry); }
    get featureSetTransitions() { return this.collectionCache.getCollection(FeatureSetTransitions.KEY, FeatureSetTransitions.Entry); }
    get featureSetTransitionHandlers() { return this.collectionCache.getCollection(FeatureSetTransitionHandlers.KEY, FeatureSetTransitionHandlers.Entry); }
    get featureTreeToFeatureForests() { return this.collectionCache.getCollection(FeatureTreeToFeatureForests.KEY, FeatureTreeToFeatureForests.Entry); }
    get fertilityLevels() { return this.collectionCache.getCollection(FertilityLevels.KEY, FertilityLevels.Entry); }
    get firstPersonEngines() { return this.collectionCache.getCollection(FirstPersonEngines$1.KEY, FirstPersonEngines$1.Entry); }
    get fonts() { return this.collectionCache.getCollection(Fonts$1.KEY, Fonts$1.Entry); }
    get fontNames() { return this.collectionCache.getCollection(FontNames$1.KEY, FontNames$1.Entry); }
    get foodFactors() { return this.collectionCache.getCollection(FoodFactors.KEY, FoodFactors.Entry); }
    get formations() { return this.collectionCache.getCollection(Formations$1.KEY, Formations$1.Entry); }
    get formationsToSubcultures() { return this.collectionCache.getCollection(FormationsToSubcultures$1.KEY, FormationsToSubcultures$1.Entry); }
    get frontendFactions() { return this.collectionCache.getCollection(FrontendFactions.KEY, FrontendFactions.Entry); }
    get frontendFactionEffectGroups() { return this.collectionCache.getCollection(FrontendFactionEffectGroups.KEY, FrontendFactionEffectGroups.Entry); }
    get frontendFactionEffectJunctions() { return this.collectionCache.getCollection(FrontendFactionEffectJunctions.KEY, FrontendFactionEffectJunctions.Entry); }
    get frontendFactionGroups() { return this.collectionCache.getCollection(FrontendFactionGroups.KEY, FrontendFactionGroups.Entry); }
    get frontendFactionGroupsToFactions() { return this.collectionCache.getCollection(FrontendFactionGroupsToFactions.KEY, FrontendFactionGroupsToFactions.Entry); }
    get frontendFactionLeaders() { return this.collectionCache.getCollection(FrontendFactionLeaders$1.KEY, FrontendFactionLeaders$1.Entry); }
    get frontendFactionTopUnits() { return this.collectionCache.getCollection(FrontendFactionTopUnits.KEY, FrontendFactionTopUnits.Entry); }
    get gameAreaEnums() { return this.collectionCache.getCollection(GameAreaEnums$1.KEY, GameAreaEnums$1.Entry); }
    get genders() { return this.collectionCache.getCollection(Genders$1.KEY, Genders$1.Entry); }
    get geomanticWebLinks() { return this.collectionCache.getCollection(GeomanticWebLinks.KEY, GeomanticWebLinks.Entry); }
    get governmentTypes() { return this.collectionCache.getCollection(GovernmentTypes$1.KEY, GovernmentTypes$1.Entry); }
    get governmentTypesToEffects() { return this.collectionCache.getCollection(GovernmentTypesToEffects$1.KEY, GovernmentTypesToEffects$1.Entry); }
    get governorships() { return this.collectionCache.getCollection(Governorships$1.KEY, Governorships$1.Entry); }
    get graphicsSettings() { return this.collectionCache.getCollection(GraphicsSettings.KEY, GraphicsSettings.Entry); }
    get graphicsSettingsOptions() { return this.collectionCache.getCollection(GraphicsSettingsOptions.KEY, GraphicsSettingsOptions.Entry); }
    get graphicsSettingsToGraphicsOptionsJunctions() { return this.collectionCache.getCollection(GraphicsSettingsToGraphicsOptionsJunctions.KEY, GraphicsSettingsToGraphicsOptionsJunctions.Entry); }
    get groundTypes() { return this.collectionCache.getCollection(GroundTypes$1.KEY, GroundTypes$1.Entry); }
    get groundTypeStatEffectGroups() { return this.collectionCache.getCollection(GroundTypeStatEffectGroups.KEY, GroundTypeStatEffectGroups.Entry); }
    get groundTypeToStatEffects() { return this.collectionCache.getCollection(GroundTypeToStatEffects$1.KEY, GroundTypeToStatEffects$1.Entry); }
    get groundTypeToTextureGroups() { return this.collectionCache.getCollection(GroundTypeToTextureGroups.KEY, GroundTypeToTextureGroups.Entry); }
    get groupingsMilitary() { return this.collectionCache.getCollection(GroupingsMilitary$1.KEY, GroupingsMilitary$1.Entry); }
    get gunTypesEnum() { return this.collectionCache.getCollection(GunTypesEnum$1.KEY, GunTypesEnum$1.Entry); }
    get helpPageIndexRecords() { return this.collectionCache.getCollection(HelpPageIndexRecords.KEY, HelpPageIndexRecords.Entry); }
    get helpPageStrings() { return this.collectionCache.getCollection(HelpPageStrings.KEY, HelpPageStrings.Entry); }
    get historicalBattlesUiLocations() { return this.collectionCache.getCollection(HistoricalBattlesUiLocations$1.KEY, HistoricalBattlesUiLocations$1.Entry); }
    get historicalCharacters() { return this.collectionCache.getCollection(HistoricalCharacters$1.KEY, HistoricalCharacters$1.Entry); }
    get historicalCharacterTraits() { return this.collectionCache.getCollection(HistoricalCharacterTraits$1.KEY, HistoricalCharacterTraits$1.Entry); }
    get honourEffects() { return this.collectionCache.getCollection(HonourEffects$1.KEY, HonourEffects$1.Entry); }
    get honourFactors() { return this.collectionCache.getCollection(HonourFactors$1.KEY, HonourFactors$1.Entry); }
    get incidents() { return this.collectionCache.getCollection(Incidents$1.KEY, Incidents$1.Entry); }
    get instantExpenditureTypes() { return this.collectionCache.getCollection(InstantExpenditureTypes.KEY, InstantExpenditureTypes.Entry); }
    get instantIncomeTypes() { return this.collectionCache.getCollection(InstantIncomeTypes.KEY, InstantIncomeTypes.Entry); }
    get interfactionLoyaltyFactors() { return this.collectionCache.getCollection(InterfactionLoyaltyFactors.KEY, InterfactionLoyaltyFactors.Entry); }
    get intrigueActionsIncidentsJunctions() { return this.collectionCache.getCollection(IntrigueActionsIncidentsJunctions.KEY, IntrigueActionsIncidentsJunctions.Entry); }
    get labSettings() { return this.collectionCache.getCollection(LabSettings.KEY, LabSettings.Entry); }
    get landUnits() { return this.collectionCache.getCollection(LandUnits$1.KEY, LandUnits$1.Entry); }
    get landUnitsAdditionalPersonalitiesGroups() { return this.collectionCache.getCollection(LandUnitsAdditionalPersonalitiesGroups.KEY, LandUnitsAdditionalPersonalitiesGroups.Entry); }
    get landUnitsAdditionalPersonalitiesGroupsJunctions() { return this.collectionCache.getCollection(LandUnitsAdditionalPersonalitiesGroupsJunctions.KEY, LandUnitsAdditionalPersonalitiesGroupsJunctions.Entry); }
    get landUnitsOfficers() { return this.collectionCache.getCollection(LandUnitsOfficers$1.KEY, LandUnitsOfficers$1.Entry); }
    get landUnitsToDeployablesAbilitiesJunctions() { return this.collectionCache.getCollection(LandUnitsToDeployablesAbilitiesJunctions.KEY, LandUnitsToDeployablesAbilitiesJunctions.Entry); }
    get landUnitsToUnitAbilitesJunctions() { return this.collectionCache.getCollection(LandUnitsToUnitAbilitesJunctions$1.KEY, LandUnitsToUnitAbilitesJunctions$1.Entry); }
    get landUnitArticulatedVehicles() { return this.collectionCache.getCollection(LandUnitArticulatedVehicles$1.KEY, LandUnitArticulatedVehicles$1.Entry); }
    get languages() { return this.collectionCache.getCollection(Languages$1.KEY, Languages$1.Entry); }
    get loadingScreenQuotes() { return this.collectionCache.getCollection(LoadingScreenQuotes.KEY, LoadingScreenQuotes.Entry); }
    get loadingScreenQuotesCategories() { return this.collectionCache.getCollection(LoadingScreenQuotesCategories.KEY, LoadingScreenQuotesCategories.Entry); }
    get loadingScreenQuotesToCampaigns() { return this.collectionCache.getCollection(LoadingScreenQuotesToCampaigns.KEY, LoadingScreenQuotesToCampaigns.Entry); }
    get loadingScreenQuotesToCultures() { return this.collectionCache.getCollection(LoadingScreenQuotesToCultures.KEY, LoadingScreenQuotesToCultures.Entry); }
    get loadingScreenQuotesToQuestBattles() { return this.collectionCache.getCollection(LoadingScreenQuotesToQuestBattles.KEY, LoadingScreenQuotesToQuestBattles.Entry); }
    get loadingScreenQuotesToUnits() { return this.collectionCache.getCollection(LoadingScreenQuotesToUnits.KEY, LoadingScreenQuotesToUnits.Entry); }
    get loadingScreenTexts() { return this.collectionCache.getCollection(LoadingScreenTexts.KEY, LoadingScreenTexts.Entry); }
    get loyaltyEffects() { return this.collectionCache.getCollection(LoyaltyEffects$1.KEY, LoyaltyEffects$1.Entry); }
    get loyaltyEventEffects() { return this.collectionCache.getCollection(LoyaltyEventEffects.KEY, LoyaltyEventEffects.Entry); }
    get loyaltyFactors() { return this.collectionCache.getCollection(LoyaltyFactors$1.KEY, LoyaltyFactors$1.Entry); }
    get mainUnits() { return this.collectionCache.getCollection(MainUnits$1.KEY, MainUnits$1.Entry); }
    get meleeWeapons() { return this.collectionCache.getCollection(MeleeWeapons$1.KEY, MeleeWeapons$1.Entry); }
    get mercenaryPools() { return this.collectionCache.getCollection(MercenaryPools$1.KEY, MercenaryPools$1.Entry); }
    get mercenaryPoolModifiers() { return this.collectionCache.getCollection(MercenaryPoolModifiers$1.KEY, MercenaryPoolModifiers$1.Entry); }
    get mercenaryPoolToGroupsJunctions() { return this.collectionCache.getCollection(MercenaryPoolToGroupsJunctions$1.KEY, MercenaryPoolToGroupsJunctions$1.Entry); }
    get mercenaryPoolTypeEnums() { return this.collectionCache.getCollection(MercenaryPoolTypeEnums$1.KEY, MercenaryPoolTypeEnums$1.Entry); }
    get mercenaryUnitGroups() { return this.collectionCache.getCollection(MercenaryUnitGroups$1.KEY, MercenaryUnitGroups$1.Entry); }
    get messageEvents() { return this.collectionCache.getCollection(MessageEvents$1.KEY, MessageEvents$1.Entry); }
    get messageEventLayoutTypes() { return this.collectionCache.getCollection(MessageEventLayoutTypes$1.KEY, MessageEventLayoutTypes$1.Entry); }
    get messageEventStrings() { return this.collectionCache.getCollection(MessageEventStrings$1.KEY, MessageEventStrings$1.Entry); }
    get messageEventText() { return this.collectionCache.getCollection(MessageEventText$1.KEY, MessageEventText$1.Entry); }
    get militaryForceLegacyEmblems() { return this.collectionCache.getCollection(MilitaryForceLegacyEmblems$1.KEY, MilitaryForceLegacyEmblems$1.Entry); }
    get militaryForceLegacyNames() { return this.collectionCache.getCollection(MilitaryForceLegacyNames$1.KEY, MilitaryForceLegacyNames$1.Entry); }
    get militaryForceTypes() { return this.collectionCache.getCollection(MilitaryForceTypes.KEY, MilitaryForceTypes.Entry); }
    get militaryForceTypeConversions() { return this.collectionCache.getCollection(MilitaryForceTypeConversions.KEY, MilitaryForceTypeConversions.Entry); }
    get militaryForceTypeFeatures() { return this.collectionCache.getCollection(MilitaryForceTypeFeatures.KEY, MilitaryForceTypeFeatures.Entry); }
    get militaryForceTypeFeatureJunctions() { return this.collectionCache.getCollection(MilitaryForceTypeFeatureJunctions.KEY, MilitaryForceTypeFeatureJunctions.Entry); }
    get militaryForceTypeHordeDetails() { return this.collectionCache.getCollection(MilitaryForceTypeHordeDetails.KEY, MilitaryForceTypeHordeDetails.Entry); }
    get ministerialEffectivenessModifiers() { return this.collectionCache.getCollection(MinisterialEffectivenessModifiers$1.KEY, MinisterialEffectivenessModifiers$1.Entry); }
    get ministerialPositions() { return this.collectionCache.getCollection(MinisterialPositions$1.KEY, MinisterialPositions$1.Entry); }
    get ministerialPositionsCultureDetails() { return this.collectionCache.getCollection(MinisterialPositionsCultureDetails.KEY, MinisterialPositionsCultureDetails.Entry); }
    get ministerialPositionsStrings() { return this.collectionCache.getCollection(MinisterialPositionsStrings$1.KEY, MinisterialPositionsStrings$1.Entry); }
    get ministerialPositionsToGovernorships() { return this.collectionCache.getCollection(MinisterialPositionsToGovernorships$1.KEY, MinisterialPositionsToGovernorships$1.Entry); }
    get ministerialPositionsToRegionRestrictions() { return this.collectionCache.getCollection(MinisterialPositionsToRegionRestrictions.KEY, MinisterialPositionsToRegionRestrictions.Entry); }
    get ministerialPositionEffectBundles() { return this.collectionCache.getCollection(MinisterialPositionEffectBundles.KEY, MinisterialPositionEffectBundles.Entry); }
    get ministerialPositionToRequiredBuildingJunctions() { return this.collectionCache.getCollection(MinisterialPositionToRequiredBuildingJunctions.KEY, MinisterialPositionToRequiredBuildingJunctions.Entry); }
    get ministerialPosititionToSubtypeRestrictions() { return this.collectionCache.getCollection(MinisterialPosititionToSubtypeRestrictions.KEY, MinisterialPosititionToSubtypeRestrictions.Entry); }
    get missileWeapons() { return this.collectionCache.getCollection(MissileWeapons$1.KEY, MissileWeapons$1.Entry); }
    get missileWeaponsToProjectiles() { return this.collectionCache.getCollection(MissileWeaponsToProjectiles$1.KEY, MissileWeaponsToProjectiles$1.Entry); }
    get missions() { return this.collectionCache.getCollection(Missions$1.KEY, Missions$1.Entry); }
    get missionCategoryAgeMultipliers() { return this.collectionCache.getCollection(MissionCategoryAgeMultipliers.KEY, MissionCategoryAgeMultipliers.Entry); }
    get missionCategoryThresholds() { return this.collectionCache.getCollection(MissionCategoryThresholds.KEY, MissionCategoryThresholds.Entry); }
    get missionCategoryThresholdValidSubcultures() { return this.collectionCache.getCollection(MissionCategoryThresholdValidSubcultures.KEY, MissionCategoryThresholdValidSubcultures.Entry); }
    get missionGroups() { return this.collectionCache.getCollection(MissionGroups.KEY, MissionGroups.Entry); }
    get missionGroupsToMissions() { return this.collectionCache.getCollection(MissionGroupsToMissions.KEY, MissionGroupsToMissions.Entry); }
    get missionIssuers() { return this.collectionCache.getCollection(MissionIssuers$1.KEY, MissionIssuers$1.Entry); }
    get missionText() { return this.collectionCache.getCollection(MissionText$1.KEY, MissionText$1.Entry); }
    get missionTypes() { return this.collectionCache.getCollection(MissionTypes$1.KEY, MissionTypes$1.Entry); }
    get missionWeights() { return this.collectionCache.getCollection(MissionWeights.KEY, MissionWeights.Entry); }
    get modelsArtillery() { return this.collectionCache.getCollection(ModelsArtillery$1.KEY, ModelsArtillery$1.Entry); }
    get modelsBuilding() { return this.collectionCache.getCollection(ModelsBuilding$1.KEY, ModelsBuilding$1.Entry); }
    get modelsDeployables() { return this.collectionCache.getCollection(ModelsDeployables$1.KEY, ModelsDeployables$1.Entry); }
    get modelsEntityWeapons() { return this.collectionCache.getCollection(ModelsEntityWeapons$1.KEY, ModelsEntityWeapons$1.Entry); }
    get modelsFoot() { return this.collectionCache.getCollection(ModelsFoot$1.KEY, ModelsFoot$1.Entry); }
    get modelsMount() { return this.collectionCache.getCollection(ModelsMount$1.KEY, ModelsMount$1.Entry); }
    get modelsNaval() { return this.collectionCache.getCollection(ModelsNaval$1.KEY, ModelsNaval$1.Entry); }
    get modelsOars() { return this.collectionCache.getCollection(ModelsOars$1.KEY, ModelsOars$1.Entry); }
    get modelsSieges() { return this.collectionCache.getCollection(ModelsSieges$1.KEY, ModelsSieges$1.Entry); }
    get modifiableUnitStats() { return this.collectionCache.getCollection(ModifiableUnitStats.KEY, ModifiableUnitStats.Entry); }
    get mortuaryCultCategories() { return this.collectionCache.getCollection(MortuaryCultCategories.KEY, MortuaryCultCategories.Entry); }
    get mortuaryCultCategoriesToRituals() { return this.collectionCache.getCollection(MortuaryCultCategoriesToRituals.KEY, MortuaryCultCategoriesToRituals.Entry); }
    get mountableArtilleryUnits() { return this.collectionCache.getCollection(MountableArtilleryUnits$1.KEY, MountableArtilleryUnits$1.Entry); }
    get mountableArtilleryUnitsCustomBattles() { return this.collectionCache.getCollection(MountableArtilleryUnitsCustomBattles$1.KEY, MountableArtilleryUnitsCustomBattles$1.Entry); }
    get mounts() { return this.collectionCache.getCollection(Mounts$1.KEY, Mounts$1.Entry); }
    get movementTypes() { return this.collectionCache.getCollection(MovementTypes$1.KEY, MovementTypes$1.Entry); }
    get movieEvents() { return this.collectionCache.getCollection(MovieEvents.KEY, MovieEvents.Entry); }
    get movieEventStrings() { return this.collectionCache.getCollection(MovieEventStrings$1.KEY, MovieEventStrings$1.Entry); }
    get mpBudgets() { return this.collectionCache.getCollection(MpBudgets$1.KEY, MpBudgets$1.Entry); }
    get mpBudgetSizes() { return this.collectionCache.getCollection(MpBudgetSizes$1.KEY, MpBudgetSizes$1.Entry); }
    get mpForceGenCompositions() { return this.collectionCache.getCollection(MpForceGenCompositions.KEY, MpForceGenCompositions.Entry); }
    get mpForceGenTemplates() { return this.collectionCache.getCollection(MpForceGenTemplates$1.KEY, MpForceGenTemplates$1.Entry); }
    get mpForceGenTemplateJunctions() { return this.collectionCache.getCollection(MpForceGenTemplateJunctions$1.KEY, MpForceGenTemplateJunctions$1.Entry); }
    get nakaiTemples() { return this.collectionCache.getCollection(NakaiTemples.KEY, NakaiTemples.Entry); }
    get nakaiTempleLevels() { return this.collectionCache.getCollection(NakaiTempleLevels.KEY, NakaiTempleLevels.Entry); }
    get names() { return this.collectionCache.getCollection(Names$1.KEY, Names$1.Entry); }
    get namesGroups() { return this.collectionCache.getCollection(NamesGroups$1.KEY, NamesGroups$1.Entry); }
    get nameOrders() { return this.collectionCache.getCollection(NameOrders$1.KEY, NameOrders$1.Entry); }
    get nameOrderOverrides() { return this.collectionCache.getCollection(NameOrderOverrides$1.KEY, NameOrderOverrides$1.Entry); }
    get nameTypes() { return this.collectionCache.getCollection(NameTypes$1.KEY, NameTypes$1.Entry); }
    get navalEffects() { return this.collectionCache.getCollection(NavalEffects$1.KEY, NavalEffects$1.Entry); }
    get navalOarEnums() { return this.collectionCache.getCollection(NavalOarEnums$1.KEY, NavalOarEnums$1.Entry); }
    get navalRammingEvents() { return this.collectionCache.getCollection(NavalRammingEvents$1.KEY, NavalRammingEvents$1.Entry); }
    get navalUnits() { return this.collectionCache.getCollection(NavalUnits$1.KEY, NavalUnits$1.Entry); }
    get navalUnitsToUnitAbilitesJunctions() { return this.collectionCache.getCollection(NavalUnitsToUnitAbilitesJunctions$1.KEY, NavalUnitsToUnitAbilitesJunctions$1.Entry); }
    get navalWeapons() { return this.collectionCache.getCollection(NavalWeapons$1.KEY, NavalWeapons$1.Entry); }
    get navalWeaponsEnums() { return this.collectionCache.getCollection(NavalWeaponsEnums$1.KEY, NavalWeaponsEnums$1.Entry); }
    get newContentAlerts() { return this.collectionCache.getCollection(NewContentAlerts.KEY, NewContentAlerts.Entry); }
    get particleEffects() { return this.collectionCache.getCollection(ParticleEffects$1.KEY, ParticleEffects$1.Entry); }
    get pdlc() { return this.collectionCache.getCollection(Pdlc$1.KEY, Pdlc$1.Entry); }
    get personalityLocationEnums() { return this.collectionCache.getCollection(PersonalityLocationEnums$1.KEY, PersonalityLocationEnums$1.Entry); }
    get plagues() { return this.collectionCache.getCollection(Plagues$1.KEY, Plagues$1.Entry); }
    get plagueTypes() { return this.collectionCache.getCollection(PlagueTypes.KEY, PlagueTypes.Entry); }
    get politicalActions() { return this.collectionCache.getCollection(PoliticalActions$1.KEY, PoliticalActions$1.Entry); }
    get politicalActionsDilemmaJunctions() { return this.collectionCache.getCollection(PoliticalActionsDilemmaJunctions$1.KEY, PoliticalActionsDilemmaJunctions$1.Entry); }
    get politicalActionsIncidentsJunctions() { return this.collectionCache.getCollection(PoliticalActionsIncidentsJunctions$1.KEY, PoliticalActionsIncidentsJunctions$1.Entry); }
    get politicalActionsMissionJunctions() { return this.collectionCache.getCollection(PoliticalActionsMissionJunctions$1.KEY, PoliticalActionsMissionJunctions$1.Entry); }
    get politicalParties() { return this.collectionCache.getCollection(PoliticalParties$1.KEY, PoliticalParties$1.Entry); }
    get politicalPartiesFrontendLeadersJunctions() { return this.collectionCache.getCollection(PoliticalPartiesFrontendLeadersJunctions.KEY, PoliticalPartiesFrontendLeadersJunctions.Entry); }
    get pooledResources() { return this.collectionCache.getCollection(PooledResources.KEY, PooledResources.Entry); }
    get pooledResourceEffectTypes() { return this.collectionCache.getCollection(PooledResourceEffectTypes.KEY, PooledResourceEffectTypes.Entry); }
    get pooledResourceFactors() { return this.collectionCache.getCollection(PooledResourceFactors.KEY, PooledResourceFactors.Entry); }
    get pooledResourceFactorJunctions() { return this.collectionCache.getCollection(PooledResourceFactorJunctions.KEY, PooledResourceFactorJunctions.Entry); }
    get pooledResourceInfluenceOverrides() { return this.collectionCache.getCollection(PooledResourceInfluenceOverrides.KEY, PooledResourceInfluenceOverrides.Entry); }
    get populationClasses() { return this.collectionCache.getCollection(PopulationClasses$1.KEY, PopulationClasses$1.Entry); }
    get prefabTypes() { return this.collectionCache.getCollection(PrefabTypes.KEY, PrefabTypes.Entry); }
    get preBattleSpeeches() { return this.collectionCache.getCollection(PreBattleSpeeches$1.KEY, PreBattleSpeeches$1.Entry); }
    get preBattleSpeechParametersEnum() { return this.collectionCache.getCollection(PreBattleSpeechParametersEnum$1.KEY, PreBattleSpeechParametersEnum$1.Entry); }
    get preBattleSpeechTypesEnum() { return this.collectionCache.getCollection(PreBattleSpeechTypesEnum$1.KEY, PreBattleSpeechTypesEnum$1.Entry); }
    get projectiles() { return this.collectionCache.getCollection(Projectiles$1.KEY, Projectiles$1.Entry); }
    get projectilesDetonationTypesEnum() { return this.collectionCache.getCollection(ProjectilesDetonationTypesEnum$1.KEY, ProjectilesDetonationTypesEnum$1.Entry); }
    get projectilesDetonatorTypesEnum() { return this.collectionCache.getCollection(ProjectilesDetonatorTypesEnum$1.KEY, ProjectilesDetonatorTypesEnum$1.Entry); }
    get projectilesExplosions() { return this.collectionCache.getCollection(ProjectilesExplosions$1.KEY, ProjectilesExplosions$1.Entry); }
    get projectilesScalingDamages() { return this.collectionCache.getCollection(ProjectilesScalingDamages.KEY, ProjectilesScalingDamages.Entry); }
    get projectilesSpinTypeEnum() { return this.collectionCache.getCollection(ProjectilesSpinTypeEnum$1.KEY, ProjectilesSpinTypeEnum$1.Entry); }
    get projectileBombardments() { return this.collectionCache.getCollection(ProjectileBombardments.KEY, ProjectileBombardments.Entry); }
    get projectileBombardmentLaunchSources() { return this.collectionCache.getCollection(ProjectileBombardmentLaunchSources.KEY, ProjectileBombardmentLaunchSources.Entry); }
    get projectileCategoryEnum() { return this.collectionCache.getCollection(ProjectileCategoryEnum$1.KEY, ProjectileCategoryEnum$1.Entry); }
    get projectileDisplays() { return this.collectionCache.getCollection(ProjectileDisplays$1.KEY, ProjectileDisplays$1.Entry); }
    get projectileFirstPersonParams() { return this.collectionCache.getCollection(ProjectileFirstPersonParams.KEY, ProjectileFirstPersonParams.Entry); }
    get projectileHomingParams() { return this.collectionCache.getCollection(ProjectileHomingParams.KEY, ProjectileHomingParams.Entry); }
    get projectileImpacts() { return this.collectionCache.getCollection(ProjectileImpacts$1.KEY, ProjectileImpacts$1.Entry); }
    get projectileIncendiaryEnum() { return this.collectionCache.getCollection(ProjectileIncendiaryEnum$1.KEY, ProjectileIncendiaryEnum$1.Entry); }
    get projectilePenetrationJunctions() { return this.collectionCache.getCollection(ProjectilePenetrationJunctions.KEY, ProjectilePenetrationJunctions.Entry); }
    get projectileShotTypeEnum() { return this.collectionCache.getCollection(ProjectileShotTypeEnum$1.KEY, ProjectileShotTypeEnum$1.Entry); }
    get projectileShrapnels() { return this.collectionCache.getCollection(ProjectileShrapnels.KEY, ProjectileShrapnels.Entry); }
    get projectileTrajectorySightEnum() { return this.collectionCache.getCollection(ProjectileTrajectorySightEnum$1.KEY, ProjectileTrajectorySightEnum$1.Entry); }
    get prologueChapters() { return this.collectionCache.getCollection(PrologueChapters$1.KEY, PrologueChapters$1.Entry); }
    get prophecyOfSotekStages() { return this.collectionCache.getCollection(ProphecyOfSotekStages.KEY, ProphecyOfSotekStages.Entry); }
    get prophecyOfSotekStagesToMissions() { return this.collectionCache.getCollection(ProphecyOfSotekStagesToMissions.KEY, ProphecyOfSotekStagesToMissions.Entry); }
    get provinces() { return this.collectionCache.getCollection(Provinces$1.KEY, Provinces$1.Entry); }
    get provincesToRegionGroupsJunctions() { return this.collectionCache.getCollection(ProvincesToRegionGroupsJunctions.KEY, ProvincesToRegionGroupsJunctions.Entry); }
    get provinceToMercenarySetJunctions() { return this.collectionCache.getCollection(ProvinceToMercenarySetJunctions$1.KEY, ProvinceToMercenarySetJunctions$1.Entry); }
    get provincialInitiativesToSubcultureJunctions() { return this.collectionCache.getCollection(ProvincialInitiativesToSubcultureJunctions$1.KEY, ProvincialInitiativesToSubcultureJunctions$1.Entry); }
    get provincialInitiativeRecords() { return this.collectionCache.getCollection(ProvincialInitiativeRecords$1.KEY, ProvincialInitiativeRecords$1.Entry); }
    get provincialInitiativeStrengthLevels() { return this.collectionCache.getCollection(ProvincialInitiativeStrengthLevels.KEY, ProvincialInitiativeStrengthLevels.Entry); }
    get provincialInitiativeStrengthProvinceToProvinceJunctions() { return this.collectionCache.getCollection(ProvincialInitiativeStrengthProvinceToProvinceJunctions.KEY, ProvincialInitiativeStrengthProvinceToProvinceJunctions.Entry); }
    get purchasableEffects() { return this.collectionCache.getCollection(PurchasableEffects.KEY, PurchasableEffects.Entry); }
    get purchasableEffectLevels() { return this.collectionCache.getCollection(PurchasableEffectLevels.KEY, PurchasableEffectLevels.Entry); }
    get quotes() { return this.collectionCache.getCollection(Quotes$1.KEY, Quotes$1.Entry); }
    get quotesPeople() { return this.collectionCache.getCollection(QuotesPeople$1.KEY, QuotesPeople$1.Entry); }
    get randomLocalisationStrings() { return this.collectionCache.getCollection(RandomLocalisationStrings$1.KEY, RandomLocalisationStrings$1.Entry); }
    get randomUnlocalisedStrings() { return this.collectionCache.getCollection(RandomUnlocalisedStrings.KEY, RandomUnlocalisedStrings.Entry); }
    get regions() { return this.collectionCache.getCollection(Regions$1.KEY, Regions$1.Entry); }
    get regionsToRegionGroupsJunctions() { return this.collectionCache.getCollection(RegionsToRegionGroupsJunctions$1.KEY, RegionsToRegionGroupsJunctions$1.Entry); }
    get regionGroups() { return this.collectionCache.getCollection(RegionGroups$1.KEY, RegionGroups$1.Entry); }
    get regionReligions() { return this.collectionCache.getCollection(RegionReligions$1.KEY, RegionReligions$1.Entry); }
    get regionToProvinceJunctions() { return this.collectionCache.getCollection(RegionToProvinceJunctions$1.KEY, RegionToProvinceJunctions$1.Entry); }
    get regionUnitResources() { return this.collectionCache.getCollection(RegionUnitResources$1.KEY, RegionUnitResources$1.Entry); }
    get religions() { return this.collectionCache.getCollection(Religions$1.KEY, Religions$1.Entry); }
    get religionConversionMods() { return this.collectionCache.getCollection(ReligionConversionMods$1.KEY, ReligionConversionMods$1.Entry); }
    get religiousRebellions() { return this.collectionCache.getCollection(ReligiousRebellions.KEY, ReligiousRebellions.Entry); }
    get resources() { return this.collectionCache.getCollection(Resources$1.KEY, Resources$1.Entry); }
    get resourcesToCampaignGroupJunctions() { return this.collectionCache.getCollection(ResourcesToCampaignGroupJunctions.KEY, ResourcesToCampaignGroupJunctions.Entry); }
    get resourcesToCampaignJunctions() { return this.collectionCache.getCollection(ResourcesToCampaignJunctions.KEY, ResourcesToCampaignJunctions.Entry); }
    get resourceCosts() { return this.collectionCache.getCollection(ResourceCosts.KEY, ResourceCosts.Entry); }
    get resourceCostAncillaryJunctions() { return this.collectionCache.getCollection(ResourceCostAncillaryJunctions.KEY, ResourceCostAncillaryJunctions.Entry); }
    get resourceCostPooledResourceJunctions() { return this.collectionCache.getCollection(ResourceCostPooledResourceJunctions.KEY, ResourceCostPooledResourceJunctions.Entry); }
    get resourceCostTradeResourceJunctions() { return this.collectionCache.getCollection(ResourceCostTradeResourceJunctions.KEY, ResourceCostTradeResourceJunctions.Entry); }
    get resourceEffects() { return this.collectionCache.getCollection(ResourceEffects$1.KEY, ResourceEffects$1.Entry); }
    get resourceUiOverrides() { return this.collectionCache.getCollection(ResourceUiOverrides.KEY, ResourceUiOverrides.Entry); }
    get rituals() { return this.collectionCache.getCollection(Rituals.KEY, Rituals.Entry); }
    get ritualsToNakaiTempleLevels() { return this.collectionCache.getCollection(RitualsToNakaiTempleLevels.KEY, RitualsToNakaiTempleLevels.Entry); }
    get ritualsToRitualChains() { return this.collectionCache.getCollection(RitualsToRitualChains.KEY, RitualsToRitualChains.Entry); }
    get ritualAdditionalUiExplanationTexts() { return this.collectionCache.getCollection(RitualAdditionalUiExplanationTexts.KEY, RitualAdditionalUiExplanationTexts.Entry); }
    get ritualBeams() { return this.collectionCache.getCollection(RitualBeams.KEY, RitualBeams.Entry); }
    get ritualBeamTypes() { return this.collectionCache.getCollection(RitualBeamTypes.KEY, RitualBeamTypes.Entry); }
    get ritualCategories() { return this.collectionCache.getCollection(RitualCategories.KEY, RitualCategories.Entry); }
    get ritualChains() { return this.collectionCache.getCollection(RitualChains.KEY, RitualChains.Entry); }
    get ritualFactionTargetCriterias() { return this.collectionCache.getCollection(RitualFactionTargetCriterias.KEY, RitualFactionTargetCriterias.Entry); }
    get ritualIncursionStrengths() { return this.collectionCache.getCollection(RitualIncursionStrengths.KEY, RitualIncursionStrengths.Entry); }
    get ritualMilitaryForceTargetCriterias() { return this.collectionCache.getCollection(RitualMilitaryForceTargetCriterias.KEY, RitualMilitaryForceTargetCriterias.Entry); }
    get ritualPayloads() { return this.collectionCache.getCollection(RitualPayloads.KEY, RitualPayloads.Entry); }
    get ritualPayloadAncillaries() { return this.collectionCache.getCollection(RitualPayloadAncillaries.KEY, RitualPayloadAncillaries.Entry); }
    get ritualPayloadBasicComponents() { return this.collectionCache.getCollection(RitualPayloadBasicComponents.KEY, RitualPayloadBasicComponents.Entry); }
    get ritualPayloadBasicComponentTypes() { return this.collectionCache.getCollection(RitualPayloadBasicComponentTypes.KEY, RitualPayloadBasicComponentTypes.Entry); }
    get ritualPayloadDiplomaticAttitudeChanges() { return this.collectionCache.getCollection(RitualPayloadDiplomaticAttitudeChanges.KEY, RitualPayloadDiplomaticAttitudeChanges.Entry); }
    get ritualPayloadEffectBundles() { return this.collectionCache.getCollection(RitualPayloadEffectBundles.KEY, RitualPayloadEffectBundles.Entry); }
    get ritualPayloadResourceTransactions() { return this.collectionCache.getCollection(RitualPayloadResourceTransactions.KEY, RitualPayloadResourceTransactions.Entry); }
    get ritualPayloadSpawnAgents() { return this.collectionCache.getCollection(RitualPayloadSpawnAgents.KEY, RitualPayloadSpawnAgents.Entry); }
    get ritualPayloadSpawnArmies() { return this.collectionCache.getCollection(RitualPayloadSpawnArmies.KEY, RitualPayloadSpawnArmies.Entry); }
    get ritualPayloadSpawnMercenaries() { return this.collectionCache.getCollection(RitualPayloadSpawnMercenaries.KEY, RitualPayloadSpawnMercenaries.Entry); }
    get ritualPayloadSpawnStorms() { return this.collectionCache.getCollection(RitualPayloadSpawnStorms.KEY, RitualPayloadSpawnStorms.Entry); }
    get ritualPayloadTriggerDilemmas() { return this.collectionCache.getCollection(RitualPayloadTriggerDilemmas.KEY, RitualPayloadTriggerDilemmas.Entry); }
    get ritualPerformingCharacters() { return this.collectionCache.getCollection(RitualPerformingCharacters.KEY, RitualPerformingCharacters.Entry); }
    get ritualPerformingCharacterJunctions() { return this.collectionCache.getCollection(RitualPerformingCharacterJunctions.KEY, RitualPerformingCharacterJunctions.Entry); }
    get ritualReactionConstraints() { return this.collectionCache.getCollection(RitualReactionConstraints.KEY, RitualReactionConstraints.Entry); }
    get ritualRegionTargetCriterias() { return this.collectionCache.getCollection(RitualRegionTargetCriterias.KEY, RitualRegionTargetCriterias.Entry); }
    get ritualTargets() { return this.collectionCache.getCollection(RitualTargets.KEY, RitualTargets.Entry); }
    get sacrificesToSotekRituals() { return this.collectionCache.getCollection(SacrificesToSotekRituals.KEY, SacrificesToSotekRituals.Entry); }
    get scriptedObjectives() { return this.collectionCache.getCollection(ScriptedObjectives$1.KEY, ScriptedObjectives$1.Entry); }
    get scriptedSubtitles() { return this.collectionCache.getCollection(ScriptedSubtitles$1.KEY, ScriptedSubtitles$1.Entry); }
    get seasons() { return this.collectionCache.getCollection(Seasons$1.KEY, Seasons$1.Entry); }
    get seasonAttritions() { return this.collectionCache.getCollection(SeasonAttritions$1.KEY, SeasonAttritions$1.Entry); }
    get seasonProvinceEffectBundles() { return this.collectionCache.getCollection(SeasonProvinceEffectBundles$1.KEY, SeasonProvinceEffectBundles$1.Entry); }
    get seaSurfaces() { return this.collectionCache.getCollection(SeaSurfaces$1.KEY, SeaSurfaces$1.Entry); }
    get settlementAbandomentBuildings() { return this.collectionCache.getCollection(SettlementAbandomentBuildings.KEY, SettlementAbandomentBuildings.Entry); }
    get settlementClimateTypes() { return this.collectionCache.getCollection(SettlementClimateTypes.KEY, SettlementClimateTypes.Entry); }
    get settlementOccupationOptions() { return this.collectionCache.getCollection(SettlementOccupationOptions.KEY, SettlementOccupationOptions.Entry); }
    get settlementVandalisationBuildings() { return this.collectionCache.getCollection(SettlementVandalisationBuildings.KEY, SettlementVandalisationBuildings.Entry); }
    get shipDbs() { return this.collectionCache.getCollection(ShipDbs$1.KEY, ShipDbs$1.Entry); }
    get shipNames() { return this.collectionCache.getCollection(ShipNames$1.KEY, ShipNames$1.Entry); }
    get shortcutLocalisation() { return this.collectionCache.getCollection(ShortcutLocalisation$1.KEY, ShortcutLocalisation$1.Entry); }
    get shrapnelLaunchTypeEnums() { return this.collectionCache.getCollection(ShrapnelLaunchTypeEnums.KEY, ShrapnelLaunchTypeEnums.Entry); }
    get slotSets() { return this.collectionCache.getCollection(SlotSets.KEY, SlotSets.Entry); }
    get slotSetItems() { return this.collectionCache.getCollection(SlotSetItems.KEY, SlotSetItems.Entry); }
    get slotTemplates() { return this.collectionCache.getCollection(SlotTemplates$1.KEY, SlotTemplates$1.Entry); }
    get slotTemplateToBuildingSuperchainJunctions() { return this.collectionCache.getCollection(SlotTemplateToBuildingSuperchainJunctions$1.KEY, SlotTemplateToBuildingSuperchainJunctions$1.Entry); }
    get slotTypes() { return this.collectionCache.getCollection(SlotTypes$1.KEY, SlotTypes$1.Entry); }
    get sotekTooltipTypes() { return this.collectionCache.getCollection(SotekTooltipTypes.KEY, SotekTooltipTypes.Entry); }
    get spawnableForces() { return this.collectionCache.getCollection(SpawnableForces.KEY, SpawnableForces.Entry); }
    get spawnableForceUnitJunctions() { return this.collectionCache.getCollection(SpawnableForceUnitJunctions.KEY, SpawnableForceUnitJunctions.Entry); }
    get spawnableForceUnitListJunctions() { return this.collectionCache.getCollection(SpawnableForceUnitListJunctions.KEY, SpawnableForceUnitListJunctions.Entry); }
    get specialAbilitiesSpecificBehaviourTypes() { return this.collectionCache.getCollection(SpecialAbilitiesSpecificBehaviourTypes$1.KEY, SpecialAbilitiesSpecificBehaviourTypes$1.Entry); }
    get specialAbilityDisplays() { return this.collectionCache.getCollection(SpecialAbilityDisplays.KEY, SpecialAbilityDisplays.Entry); }
    get specialAbilityGroups() { return this.collectionCache.getCollection(SpecialAbilityGroups$1.KEY, SpecialAbilityGroups$1.Entry); }
    get specialAbilityGroupsToUnitsJunctions() { return this.collectionCache.getCollection(SpecialAbilityGroupsToUnitsJunctions.KEY, SpecialAbilityGroupsToUnitsJunctions.Entry); }
    get specialAbilityGroupsToUnitAbilitiesJunctions() { return this.collectionCache.getCollection(SpecialAbilityGroupsToUnitAbilitiesJunctions$1.KEY, SpecialAbilityGroupsToUnitAbilitiesJunctions$1.Entry); }
    get specialAbilityGroupParents() { return this.collectionCache.getCollection(SpecialAbilityGroupParents.KEY, SpecialAbilityGroupParents.Entry); }
    get specialAbilityInvalidUsageFlags() { return this.collectionCache.getCollection(SpecialAbilityInvalidUsageFlags$1.KEY, SpecialAbilityInvalidUsageFlags$1.Entry); }
    get specialAbilityPhases() { return this.collectionCache.getCollection(SpecialAbilityPhases$1.KEY, SpecialAbilityPhases$1.Entry); }
    get specialAbilityPhaseAttributeEffects() { return this.collectionCache.getCollection(SpecialAbilityPhaseAttributeEffects$1.KEY, SpecialAbilityPhaseAttributeEffects$1.Entry); }
    get specialAbilityPhaseDisplays() { return this.collectionCache.getCollection(SpecialAbilityPhaseDisplays.KEY, SpecialAbilityPhaseDisplays.Entry); }
    get specialAbilityPhaseEffectTypes() { return this.collectionCache.getCollection(SpecialAbilityPhaseEffectTypes$1.KEY, SpecialAbilityPhaseEffectTypes$1.Entry); }
    get specialAbilityPhaseStatEffects() { return this.collectionCache.getCollection(SpecialAbilityPhaseStatEffects$1.KEY, SpecialAbilityPhaseStatEffects$1.Entry); }
    get specialAbilitySpawnTypes() { return this.collectionCache.getCollection(SpecialAbilitySpawnTypes.KEY, SpecialAbilitySpawnTypes.Entry); }
    get specialAbilityStanceEnums() { return this.collectionCache.getCollection(SpecialAbilityStanceEnums$1.KEY, SpecialAbilityStanceEnums$1.Entry); }
    get specialAbilityToAutoDeactivateFlags() { return this.collectionCache.getCollection(SpecialAbilityToAutoDeactivateFlags$1.KEY, SpecialAbilityToAutoDeactivateFlags$1.Entry); }
    get specialAbilityToInvalidTargetFlags() { return this.collectionCache.getCollection(SpecialAbilityToInvalidTargetFlags.KEY, SpecialAbilityToInvalidTargetFlags.Entry); }
    get specialAbilityToInvalidUsageFlags() { return this.collectionCache.getCollection(SpecialAbilityToInvalidUsageFlags$1.KEY, SpecialAbilityToInvalidUsageFlags$1.Entry); }
    get specialAbilityToRechargeContexts() { return this.collectionCache.getCollection(SpecialAbilityToRechargeContexts.KEY, SpecialAbilityToRechargeContexts.Entry); }
    get specialAbilityToSpecialAbilityPhaseJunctions() { return this.collectionCache.getCollection(SpecialAbilityToSpecialAbilityPhaseJunctions$1.KEY, SpecialAbilityToSpecialAbilityPhaseJunctions$1.Entry); }
    get specialUnitCategories() { return this.collectionCache.getCollection(SpecialUnitCategories.KEY, SpecialUnitCategories.Entry); }
    get stances() { return this.collectionCache.getCollection(Stances$1.KEY, Stances$1.Entry); }
    get startPosCalendars() { return this.collectionCache.getCollection(StartPosCalendars$1.KEY, StartPosCalendars$1.Entry); }
    get startPosCharacters() { return this.collectionCache.getCollection(StartPosCharacters$1.KEY, StartPosCharacters$1.Entry); }
    get startPosCharacterAncillaries() { return this.collectionCache.getCollection(StartPosCharacterAncillaries$1.KEY, StartPosCharacterAncillaries$1.Entry); }
    get startPosCharacterToSettlements() { return this.collectionCache.getCollection(StartPosCharacterToSettlements$1.KEY, StartPosCharacterToSettlements$1.Entry); }
    get startPosCharacterTraits() { return this.collectionCache.getCollection(StartPosCharacterTraits$1.KEY, StartPosCharacterTraits$1.Entry); }
    get startPosDiplomacy() { return this.collectionCache.getCollection(StartPosDiplomacy$1.KEY, StartPosDiplomacy$1.Entry); }
    get startPosDiplomacyDeals() { return this.collectionCache.getCollection(StartPosDiplomacyDeals.KEY, StartPosDiplomacyDeals.Entry); }
    get startPosDiplomacyDealActions() { return this.collectionCache.getCollection(StartPosDiplomacyDealActions.KEY, StartPosDiplomacyDealActions.Entry); }
    get startPosDiplomacyDealComponents() { return this.collectionCache.getCollection(StartPosDiplomacyDealComponents.KEY, StartPosDiplomacyDealComponents.Entry); }
    get startPosDiplomacyDetails() { return this.collectionCache.getCollection(StartPosDiplomacyDetails.KEY, StartPosDiplomacyDetails.Entry); }
    get startPosFactions() { return this.collectionCache.getCollection(StartPosFactions$1.KEY, StartPosFactions$1.Entry); }
    get startPosFactionEffectBundles() { return this.collectionCache.getCollection(StartPosFactionEffectBundles$1.KEY, StartPosFactionEffectBundles$1.Entry); }
    get startPosFamilyRelationships() { return this.collectionCache.getCollection(StartPosFamilyRelationships$1.KEY, StartPosFamilyRelationships$1.Entry); }
    get startPosHordeDetails() { return this.collectionCache.getCollection(StartPosHordeDetails.KEY, StartPosHordeDetails.Entry); }
    get startPosLandUnits() { return this.collectionCache.getCollection(StartPosLandUnits$1.KEY, StartPosLandUnits$1.Entry); }
    get startPosNavalUnits() { return this.collectionCache.getCollection(StartPosNavalUnits$1.KEY, StartPosNavalUnits$1.Entry); }
    get startPosPastEvents() { return this.collectionCache.getCollection(StartPosPastEvents$1.KEY, StartPosPastEvents$1.Entry); }
    get startPosRegions() { return this.collectionCache.getCollection(StartPosRegions$1.KEY, StartPosRegions$1.Entry); }
    get startPosRegionsToUnitResources() { return this.collectionCache.getCollection(StartPosRegionsToUnitResources$1.KEY, StartPosRegionsToUnitResources$1.Entry); }
    get startPosRegionForeignSlots() { return this.collectionCache.getCollection(StartPosRegionForeignSlots.KEY, StartPosRegionForeignSlots.Entry); }
    get startPosRegionReligions() { return this.collectionCache.getCollection(StartPosRegionReligions$1.KEY, StartPosRegionReligions$1.Entry); }
    get startPosRegionSlotSets() { return this.collectionCache.getCollection(StartPosRegionSlotSets.KEY, StartPosRegionSlotSets.Entry); }
    get startPosRegionSlotSetItems() { return this.collectionCache.getCollection(StartPosRegionSlotSetItems.KEY, StartPosRegionSlotSetItems.Entry); }
    get startPosRegionSlotTemplates() { return this.collectionCache.getCollection(StartPosRegionSlotTemplates$1.KEY, StartPosRegionSlotTemplates$1.Entry); }
    get startPosSettlements() { return this.collectionCache.getCollection(StartPosSettlements$1.KEY, StartPosSettlements$1.Entry); }
    get startPosSettlementGarrisons() { return this.collectionCache.getCollection(StartPosSettlementGarrisons$1.KEY, StartPosSettlementGarrisons$1.Entry); }
    get startPosStartingGeneralOptions() { return this.collectionCache.getCollection(StartPosStartingGeneralOptions.KEY, StartPosStartingGeneralOptions.Entry); }
    get startPosStartingGeneralOptionAdditionalUnits() { return this.collectionCache.getCollection(StartPosStartingGeneralOptionAdditionalUnits.KEY, StartPosStartingGeneralOptionAdditionalUnits.Entry); }
    get startPosTechnologies() { return this.collectionCache.getCollection(StartPosTechnologies$1.KEY, StartPosTechnologies$1.Entry); }
    get startPosVictoryConditions() { return this.collectionCache.getCollection(StartPosVictoryConditions$1.KEY, StartPosVictoryConditions$1.Entry); }
    get stats() { return this.collectionCache.getCollection(Stats$1.KEY, Stats$1.Entry); }
    get subcultureSettlementOccupationEffectBundleSuitabilities() { return this.collectionCache.getCollection(SubcultureSettlementOccupationEffectBundleSuitabilities.KEY, SubcultureSettlementOccupationEffectBundleSuitabilities.Entry); }
    get subcultureSettlementOccupationSuitabilityTypes() { return this.collectionCache.getCollection(SubcultureSettlementOccupationSuitabilityTypes.KEY, SubcultureSettlementOccupationSuitabilityTypes.Entry); }
    get subcultureTreasureHuntDilemmaCategories() { return this.collectionCache.getCollection(SubcultureTreasureHuntDilemmaCategories.KEY, SubcultureTreasureHuntDilemmaCategories.Entry); }
    get subtitleTimings() { return this.collectionCache.getCollection(SubtitleTimings$1.KEY, SubtitleTimings$1.Entry); }
    get taxesClasses() { return this.collectionCache.getCollection(TaxesClasses$1.KEY, TaxesClasses$1.Entry); }
    get taxesEffectsJct() { return this.collectionCache.getCollection(TaxesEffectsJct$1.KEY, TaxesEffectsJct$1.Entry); }
    get taxesKeys() { return this.collectionCache.getCollection(TaxesKeys$1.KEY, TaxesKeys$1.Entry); }
    get taxesLevels() { return this.collectionCache.getCollection(TaxesLevels$1.KEY, TaxesLevels$1.Entry); }
    get technologies() { return this.collectionCache.getCollection(Technologies$1.KEY, Technologies$1.Entry); }
    get technologyCategories() { return this.collectionCache.getCollection(TechnologyCategories$1.KEY, TechnologyCategories$1.Entry); }
    get technologyCategoryModules() { return this.collectionCache.getCollection(TechnologyCategoryModules$1.KEY, TechnologyCategoryModules$1.Entry); }
    get technologyCategoryParents() { return this.collectionCache.getCollection(TechnologyCategoryParents$1.KEY, TechnologyCategoryParents$1.Entry); }
    get technologyCharacterTraitsJunctions() { return this.collectionCache.getCollection(TechnologyCharacterTraitsJunctions.KEY, TechnologyCharacterTraitsJunctions.Entry); }
    get technologyEffectsJunction() { return this.collectionCache.getCollection(TechnologyEffectsJunction$1.KEY, TechnologyEffectsJunction$1.Entry); }
    get technologyNodes() { return this.collectionCache.getCollection(TechnologyNodes$1.KEY, TechnologyNodes$1.Entry); }
    get technologyNodesToAncillariesJunctions() { return this.collectionCache.getCollection(TechnologyNodesToAncillariesJunctions.KEY, TechnologyNodesToAncillariesJunctions.Entry); }
    get technologyNodeLinks() { return this.collectionCache.getCollection(TechnologyNodeLinks$1.KEY, TechnologyNodeLinks$1.Entry); }
    get technologyNodeSets() { return this.collectionCache.getCollection(TechnologyNodeSets$1.KEY, TechnologyNodeSets$1.Entry); }
    get technologyRequiredBuildingLevelsJunctions() { return this.collectionCache.getCollection(TechnologyRequiredBuildingLevelsJunctions$1.KEY, TechnologyRequiredBuildingLevelsJunctions$1.Entry); }
    get technologyRequiredTechnologyJunctions() { return this.collectionCache.getCollection(TechnologyRequiredTechnologyJunctions$1.KEY, TechnologyRequiredTechnologyJunctions$1.Entry); }
    get technologyUiGroups() { return this.collectionCache.getCollection(TechnologyUiGroups.KEY, TechnologyUiGroups.Entry); }
    get technologyUiGroupsToTechnologyNodesJunctions() { return this.collectionCache.getCollection(TechnologyUiGroupsToTechnologyNodesJunctions.KEY, TechnologyUiGroupsToTechnologyNodesJunctions.Entry); }
    get technologyUnitUpgrades() { return this.collectionCache.getCollection(TechnologyUnitUpgrades$1.KEY, TechnologyUnitUpgrades$1.Entry); }
    get tExcCampaignMapProcessingExports() { return this.collectionCache.getCollection(TExcCampaignMapProcessingExports$1.KEY, TExcCampaignMapProcessingExports$1.Entry); }
    get texcExpansions() { return this.collectionCache.getCollection(TexcExpansions$1.KEY, TexcExpansions$1.Entry); }
    get texcExpansionDependencies() { return this.collectionCache.getCollection(TexcExpansionDependencies.KEY, TexcExpansionDependencies.Entry); }
    get tExcImplementedTables() { return this.collectionCache.getCollection(TExcImplementedTables$1.KEY, TExcImplementedTables$1.Entry); }
    get tExcLocalisableFields() { return this.collectionCache.getCollection(TExcLocalisableFields$1.KEY, TExcLocalisableFields$1.Entry); }
    get tExcMissingConditions() { return this.collectionCache.getCollection(TExcMissingConditions$1.KEY, TExcMissingConditions$1.Entry); }
    get tExcPackCategories() { return this.collectionCache.getCollection(TExcPackCategories$1.KEY, TExcPackCategories$1.Entry); }
    get tExcPackFiles() { return this.collectionCache.getCollection(TExcPackFiles$1.KEY, TExcPackFiles$1.Entry); }
    get tExcScriptConditions() { return this.collectionCache.getCollection(TExcScriptConditions$1.KEY, TExcScriptConditions$1.Entry); }
    get tExcTableExportCategories() { return this.collectionCache.getCollection(TExcTableExportCategories$1.KEY, TExcTableExportCategories$1.Entry); }
    get tExcTableExportGroups() { return this.collectionCache.getCollection(TExcTableExportGroups$1.KEY, TExcTableExportGroups$1.Entry); }
    get tExcUnrestCauses() { return this.collectionCache.getCollection(TExcUnrestCauses$1.KEY, TExcUnrestCauses$1.Entry); }
    get tExcUnrestDemands() { return this.collectionCache.getCollection(TExcUnrestDemands$1.KEY, TExcUnrestDemands$1.Entry); }
    get tradeDisplayGroups() { return this.collectionCache.getCollection(TradeDisplayGroups.KEY, TradeDisplayGroups.Entry); }
    get tradeDisplayTradeModels() { return this.collectionCache.getCollection(TradeDisplayTradeModels$1.KEY, TradeDisplayTradeModels$1.Entry); }
    get tradeNodes() { return this.collectionCache.getCollection(TradeNodes$1.KEY, TradeNodes$1.Entry); }
    get tradeNodeGroups() { return this.collectionCache.getCollection(TradeNodeGroups$1.KEY, TradeNodeGroups$1.Entry); }
    get traitCategories() { return this.collectionCache.getCollection(TraitCategories$1.KEY, TraitCategories$1.Entry); }
    get traitInfo() { return this.collectionCache.getCollection(TraitInfo$1.KEY, TraitInfo$1.Entry); }
    get traitLevelEffects() { return this.collectionCache.getCollection(TraitLevelEffects$1.KEY, TraitLevelEffects$1.Entry); }
    get traitLevelStringSubcultureOverrides() { return this.collectionCache.getCollection(TraitLevelStringSubcultureOverrides.KEY, TraitLevelStringSubcultureOverrides.Entry); }
    get traitToAntitraits() { return this.collectionCache.getCollection(TraitToAntitraits$1.KEY, TraitToAntitraits$1.Entry); }
    get traitToIncludedAgents() { return this.collectionCache.getCollection(TraitToIncludedAgents$1.KEY, TraitToIncludedAgents$1.Entry); }
    get traitTriggers() { return this.collectionCache.getCollection(TraitTriggers$1.KEY, TraitTriggers$1.Entry); }
    get translatedTexts() { return this.collectionCache.getCollection(TranslatedTexts$1.KEY, TranslatedTexts$1.Entry); }
    get treasureHuntExtraInformations() { return this.collectionCache.getCollection(TreasureHuntExtraInformations.KEY, TreasureHuntExtraInformations.Entry); }
    get triggerEffects() { return this.collectionCache.getCollection(TriggerEffects$1.KEY, TriggerEffects$1.Entry); }
    get triggerEvents() { return this.collectionCache.getCollection(TriggerEvents$1.KEY, TriggerEvents$1.Entry); }
    get triggerEventToExcludedAgentTypes() { return this.collectionCache.getCollection(TriggerEventToExcludedAgentTypes$1.KEY, TriggerEventToExcludedAgentTypes$1.Entry); }
    get tristates() { return this.collectionCache.getCollection(Tristates.KEY, Tristates.Entry); }
    get uiedComponentAddressesToTexts() { return this.collectionCache.getCollection(UiedComponentAddressesToTexts$1.KEY, UiedComponentAddressesToTexts$1.Entry); }
    get uiedComponentTexts() { return this.collectionCache.getCollection(UiedComponentTexts$1.KEY, UiedComponentTexts$1.Entry); }
    get uiedTextLayouts() { return this.collectionCache.getCollection(UiedTextLayouts$1.KEY, UiedTextLayouts$1.Entry); }
    get uiColours() { return this.collectionCache.getCollection(UiColours.KEY, UiColours.Entry); }
    get uiColourProfiles() { return this.collectionCache.getCollection(UiColourProfiles.KEY, UiColourProfiles.Entry); }
    get uiColourProfileColourOverrides() { return this.collectionCache.getCollection(UiColourProfileColourOverrides.KEY, UiColourProfileColourOverrides.Entry); }
    get uiComponentAddressesWithLocalisation() { return this.collectionCache.getCollection(UiComponentAddressesWithLocalisation$1.KEY, UiComponentAddressesWithLocalisation$1.Entry); }
    get uiComponentLocalisation() { return this.collectionCache.getCollection(UiComponentLocalisation$1.KEY, UiComponentLocalisation$1.Entry); }
    get uiInfoRitualTargetCriterias() { return this.collectionCache.getCollection(UiInfoRitualTargetCriterias.KEY, UiInfoRitualTargetCriterias.Entry); }
    get uiLargeImages() { return this.collectionCache.getCollection(UiLargeImages.KEY, UiLargeImages.Entry); }
    get uiTaggedImages() { return this.collectionCache.getCollection(UiTaggedImages.KEY, UiTaggedImages.Entry); }
    get uiTextReplacements() { return this.collectionCache.getCollection(UiTextReplacements.KEY, UiTextReplacements.Entry); }
    get uiTooltips() { return this.collectionCache.getCollection(UiTooltips.KEY, UiTooltips.Entry); }
    get uiTooltipComponents() { return this.collectionCache.getCollection(UiTooltipComponents.KEY, UiTooltipComponents.Entry); }
    get uiUnitBulletPointsGenerations() { return this.collectionCache.getCollection(UiUnitBulletPointsGenerations.KEY, UiUnitBulletPointsGenerations.Entry); }
    get uiUnitBulletPointEnums() { return this.collectionCache.getCollection(UiUnitBulletPointEnums.KEY, UiUnitBulletPointEnums.Entry); }
    get uiUnitBulletPointUnitOverrides() { return this.collectionCache.getCollection(UiUnitBulletPointUnitOverrides.KEY, UiUnitBulletPointUnitOverrides.Entry); }
    get uiUnitGroupings() { return this.collectionCache.getCollection(UiUnitGroupings.KEY, UiUnitGroupings.Entry); }
    get uiUnitGroupParents() { return this.collectionCache.getCollection(UiUnitGroupParents.KEY, UiUnitGroupParents.Entry); }
    get uiUnitStats() { return this.collectionCache.getCollection(UiUnitStats$1.KEY, UiUnitStats$1.Entry); }
    get uiUnitStatsFilters() { return this.collectionCache.getCollection(UiUnitStatsFilters$1.KEY, UiUnitStatsFilters$1.Entry); }
    get uiUnitStatuses() { return this.collectionCache.getCollection(UiUnitStatuses.KEY, UiUnitStatuses.Entry); }
    get uiUnitStatToClasses() { return this.collectionCache.getCollection(UiUnitStatToClasses$1.KEY, UiUnitStatToClasses$1.Entry); }
    get uiUnitStatToUnitCastes() { return this.collectionCache.getCollection(UiUnitStatToUnitCastes.KEY, UiUnitStatToUnitCastes.Entry); }
    get uiVfxs() { return this.collectionCache.getCollection(UiVfxs.KEY, UiVfxs.Entry); }
    get uniformTypeEnums() { return this.collectionCache.getCollection(UniformTypeEnums$1.KEY, UniformTypeEnums$1.Entry); }
    get uniqueAgents() { return this.collectionCache.getCollection(UniqueAgents.KEY, UniqueAgents.Entry); }
    get uniqueAgentComponents() { return this.collectionCache.getCollection(UniqueAgentComponents.KEY, UniqueAgentComponents.Entry); }
    get uniqueAgentComponentJunctions() { return this.collectionCache.getCollection(UniqueAgentComponentJunctions.KEY, UniqueAgentComponentJunctions.Entry); }
    get uniqueAgentSpawnBehaviours() { return this.collectionCache.getCollection(UniqueAgentSpawnBehaviours.KEY, UniqueAgentSpawnBehaviours.Entry); }
    get uniqueAgentSpawnVfxJunctions() { return this.collectionCache.getCollection(UniqueAgentSpawnVfxJunctions.KEY, UniqueAgentSpawnVfxJunctions.Entry); }
    get units() { return this.collectionCache.getCollection(Units$1.KEY, Units$1.Entry); }
    get unitsCustomBattleMounts() { return this.collectionCache.getCollection(UnitsCustomBattleMounts.KEY, UnitsCustomBattleMounts.Entry); }
    get unitsCustomBattlePermissions() { return this.collectionCache.getCollection(UnitsCustomBattlePermissions$1.KEY, UnitsCustomBattlePermissions$1.Entry); }
    get unitsToExclusiveFactionPermissions() { return this.collectionCache.getCollection(UnitsToExclusiveFactionPermissions$1.KEY, UnitsToExclusiveFactionPermissions$1.Entry); }
    get unitsToGovTypesConversionJcts() { return this.collectionCache.getCollection(UnitsToGovTypesConversionJcts$1.KEY, UnitsToGovTypesConversionJcts$1.Entry); }
    get unitsToGovTypeOutcomes() { return this.collectionCache.getCollection(UnitsToGovTypeOutcomes$1.KEY, UnitsToGovTypeOutcomes$1.Entry); }
    get unitsToGovTypeOutcomesEnum() { return this.collectionCache.getCollection(UnitsToGovTypeOutcomesEnum$1.KEY, UnitsToGovTypeOutcomesEnum$1.Entry); }
    get unitsToGovTypePermissions() { return this.collectionCache.getCollection(UnitsToGovTypePermissions$1.KEY, UnitsToGovTypePermissions$1.Entry); }
    get unitsToGroupingsMilitaryPermissions() { return this.collectionCache.getCollection(UnitsToGroupingsMilitaryPermissions$1.KEY, UnitsToGroupingsMilitaryPermissions$1.Entry); }
    get unitAbilities() { return this.collectionCache.getCollection(UnitAbilities$1.KEY, UnitAbilities$1.Entry); }
    get unitAbilitiesAdditionalUiEffects() { return this.collectionCache.getCollection(UnitAbilitiesAdditionalUiEffects.KEY, UnitAbilitiesAdditionalUiEffects.Entry); }
    get unitAbilitiesToAdditionalUiEffectsJuncs() { return this.collectionCache.getCollection(UnitAbilitiesToAdditionalUiEffectsJuncs.KEY, UnitAbilitiesToAdditionalUiEffectsJuncs.Entry); }
    get unitAbilitySourceTypes() { return this.collectionCache.getCollection(UnitAbilitySourceTypes.KEY, UnitAbilitySourceTypes.Entry); }
    get unitAbilityTypes() { return this.collectionCache.getCollection(UnitAbilityTypes.KEY, UnitAbilityTypes.Entry); }
    get unitArmourTypes() { return this.collectionCache.getCollection(UnitArmourTypes$1.KEY, UnitArmourTypes$1.Entry); }
    get unitAttributes() { return this.collectionCache.getCollection(UnitAttributes$1.KEY, UnitAttributes$1.Entry); }
    get unitAttributesGroups() { return this.collectionCache.getCollection(UnitAttributesGroups$1.KEY, UnitAttributesGroups$1.Entry); }
    get unitAttributesToGroupsJunctions() { return this.collectionCache.getCollection(UnitAttributesToGroupsJunctions$1.KEY, UnitAttributesToGroupsJunctions$1.Entry); }
    get unitBanners() { return this.collectionCache.getCollection(UnitBanners.KEY, UnitBanners.Entry); }
    get unitBannerUnitHeightOffsets() { return this.collectionCache.getCollection(UnitBannerUnitHeightOffsets.KEY, UnitBannerUnitHeightOffsets.Entry); }
    get unitCastes() { return this.collectionCache.getCollection(UnitCastes$1.KEY, UnitCastes$1.Entry); }
    get unitCategory() { return this.collectionCache.getCollection(UnitCategory$1.KEY, UnitCategory$1.Entry); }
    get unitClass() { return this.collectionCache.getCollection(UnitClass$1.KEY, UnitClass$1.Entry); }
    get unitDescriptionHistoricalTexts() { return this.collectionCache.getCollection(UnitDescriptionHistoricalTexts$1.KEY, UnitDescriptionHistoricalTexts$1.Entry); }
    get unitDescriptionShortTexts() { return this.collectionCache.getCollection(UnitDescriptionShortTexts$1.KEY, UnitDescriptionShortTexts$1.Entry); }
    get unitDescriptionStrengthsWeaknessesTexts() { return this.collectionCache.getCollection(UnitDescriptionStrengthsWeaknessesTexts$1.KEY, UnitDescriptionStrengthsWeaknessesTexts$1.Entry); }
    get unitDescriptionTexts() { return this.collectionCache.getCollection(UnitDescriptionTexts$1.KEY, UnitDescriptionTexts$1.Entry); }
    get unitExperienceBonuses() { return this.collectionCache.getCollection(UnitExperienceBonuses$1.KEY, UnitExperienceBonuses$1.Entry); }
    get unitExperienceThresholds() { return this.collectionCache.getCollection(UnitExperienceThresholds$1.KEY, UnitExperienceThresholds$1.Entry); }
    get unitExperienceThresholdModifiers() { return this.collectionCache.getCollection(UnitExperienceThresholdModifiers$1.KEY, UnitExperienceThresholdModifiers$1.Entry); }
    get unitFatigueEffects() { return this.collectionCache.getCollection(UnitFatigueEffects$1.KEY, UnitFatigueEffects$1.Entry); }
    get unitLists() { return this.collectionCache.getCollection(UnitLists.KEY, UnitLists.Entry); }
    get unitMeleeWeaponsEnum() { return this.collectionCache.getCollection(UnitMeleeWeaponsEnum$1.KEY, UnitMeleeWeaponsEnum$1.Entry); }
    get unitMissileWeaponJunctions() { return this.collectionCache.getCollection(UnitMissileWeaponJunctions.KEY, UnitMissileWeaponJunctions.Entry); }
    get unitNavalArtilleryPositions() { return this.collectionCache.getCollection(UnitNavalArtilleryPositions$1.KEY, UnitNavalArtilleryPositions$1.Entry); }
    get unitNavalDamageSites() { return this.collectionCache.getCollection(UnitNavalDamageSites$1.KEY, UnitNavalDamageSites$1.Entry); }
    get unitPortholeCameraSettings() { return this.collectionCache.getCollection(UnitPortholeCameraSettings.KEY, UnitPortholeCameraSettings.Entry); }
    get unitRegimentNames() { return this.collectionCache.getCollection(UnitRegimentNames$1.KEY, UnitRegimentNames$1.Entry); }
    get unitRegimentNamesLocalisationLookup() { return this.collectionCache.getCollection(UnitRegimentNamesLocalisationLookup$1.KEY, UnitRegimentNamesLocalisationLookup$1.Entry); }
    get unitRequiredTechnologyJunctions() { return this.collectionCache.getCollection(UnitRequiredTechnologyJunctions$1.KEY, UnitRequiredTechnologyJunctions$1.Entry); }
    get unitSets() { return this.collectionCache.getCollection(UnitSets$1.KEY, UnitSets$1.Entry); }
    get unitSetToMpUnitCaps() { return this.collectionCache.getCollection(UnitSetToMpUnitCaps.KEY, UnitSetToMpUnitCaps.Entry); }
    get unitSetToUnitJunctions() { return this.collectionCache.getCollection(UnitSetToUnitJunctions$1.KEY, UnitSetToUnitJunctions$1.Entry); }
    get unitSetUnitAbilityJunctions() { return this.collectionCache.getCollection(UnitSetUnitAbilityJunctions.KEY, UnitSetUnitAbilityJunctions.Entry); }
    get unitSetUnitAttributeJunctions() { return this.collectionCache.getCollection(UnitSetUnitAttributeJunctions.KEY, UnitSetUnitAttributeJunctions.Entry); }
    get unitShieldTypes() { return this.collectionCache.getCollection(UnitShieldTypes$1.KEY, UnitShieldTypes$1.Entry); }
    get unitSpacings() { return this.collectionCache.getCollection(UnitSpacings$1.KEY, UnitSpacings$1.Entry); }
    get unitSpecialAbilities() { return this.collectionCache.getCollection(UnitSpecialAbilities$1.KEY, UnitSpecialAbilities$1.Entry); }
    get unitStatsLandExperienceBonuses() { return this.collectionCache.getCollection(UnitStatsLandExperienceBonuses$1.KEY, UnitStatsLandExperienceBonuses$1.Entry); }
    get unitStatsNavalCrew() { return this.collectionCache.getCollection(UnitStatsNavalCrew$1.KEY, UnitStatsNavalCrew$1.Entry); }
    get unitStatsNavalExperienceBonuses() { return this.collectionCache.getCollection(UnitStatsNavalExperienceBonuses$1.KEY, UnitStatsNavalExperienceBonuses$1.Entry); }
    get unitStatLocalisations() { return this.collectionCache.getCollection(UnitStatLocalisations.KEY, UnitStatLocalisations.Entry); }
    get unitStatModifiers() { return this.collectionCache.getCollection(UnitStatModifiers$1.KEY, UnitStatModifiers$1.Entry); }
    get unitStatModifiersHowEnums() { return this.collectionCache.getCollection(UnitStatModifiersHowEnums$1.KEY, UnitStatModifiersHowEnums$1.Entry); }
    get unitToUnitListJunctions() { return this.collectionCache.getCollection(UnitToUnitListJunctions.KEY, UnitToUnitListJunctions.Entry); }
    get unitTrainingLevelEnum() { return this.collectionCache.getCollection(UnitTrainingLevelEnum$1.KEY, UnitTrainingLevelEnum$1.Entry); }
    get unitVariants() { return this.collectionCache.getCollection(UnitVariants$1.KEY, UnitVariants$1.Entry); }
    get unitVariantsColours() { return this.collectionCache.getCollection(UnitVariantsColours$1.KEY, UnitVariantsColours$1.Entry); }
    get unitVariantsShips() { return this.collectionCache.getCollection(UnitVariantsShips.KEY, UnitVariantsShips.Entry); }
    get unitVariantUpgrades() { return this.collectionCache.getCollection(UnitVariantUpgrades.KEY, UnitVariantUpgrades.Entry); }
    get unitWeights() { return this.collectionCache.getCollection(UnitWeights$1.KEY, UnitWeights$1.Entry); }
    get vampireMercenarySetJunctions() { return this.collectionCache.getCollection(VampireMercenarySetJunctions.KEY, VampireMercenarySetJunctions.Entry); }
    get variants() { return this.collectionCache.getCollection(Variants$1.KEY, Variants$1.Entry); }
    get victoryConditions() { return this.collectionCache.getCollection(VictoryConditions$1.KEY, VictoryConditions$1.Entry); }
    get victoryTypes() { return this.collectionCache.getCollection(VictoryTypes$1.KEY, VictoryTypes$1.Entry); }
    get victoryTypeLinks() { return this.collectionCache.getCollection(VictoryTypeLinks.KEY, VictoryTypeLinks.Entry); }
    get videos() { return this.collectionCache.getCollection(Videos$1.KEY, Videos$1.Entry); }
    get videoTypes() { return this.collectionCache.getCollection(VideoTypes$1.KEY, VideoTypes$1.Entry); }
    get voCampaignAgentTexts() { return this.collectionCache.getCollection(VoCampaignAgentTexts$1.KEY, VoCampaignAgentTexts$1.Entry); }
    get voCharacters() { return this.collectionCache.getCollection(VoCharacters$1.KEY, VoCharacters$1.Entry); }
    get voContextSensitiveTexts() { return this.collectionCache.getCollection(VoContextSensitiveTexts$1.KEY, VoContextSensitiveTexts$1.Entry); }
    get voDiplomacyTexts() { return this.collectionCache.getCollection(VoDiplomacyTexts$1.KEY, VoDiplomacyTexts$1.Entry); }
    get voFactionIntroTexts() { return this.collectionCache.getCollection(VoFactionIntroTexts$1.KEY, VoFactionIntroTexts$1.Entry); }
    get voFmvTexts() { return this.collectionCache.getCollection(VoFmvTexts$1.KEY, VoFmvTexts$1.Entry); }
    get voHistoricalBattleTexts() { return this.collectionCache.getCollection(VoHistoricalBattleTexts$1.KEY, VoHistoricalBattleTexts$1.Entry); }
    get voScripts() { return this.collectionCache.getCollection(VoScripts$1.KEY, VoScripts$1.Entry); }
    get voSpeechTexts() { return this.collectionCache.getCollection(VoSpeechTexts$1.KEY, VoSpeechTexts$1.Entry); }
    get voTexts() { return this.collectionCache.getCollection(VoTexts$1.KEY, VoTexts$1.Entry); }
    get voTextCharacters() { return this.collectionCache.getCollection(VoTextCharacters$1.KEY, VoTextCharacters$1.Entry); }
    get voTutorialFmvTexts() { return this.collectionCache.getCollection(VoTutorialFmvTexts$1.KEY, VoTutorialFmvTexts$1.Entry); }
    get voUnitTexts() { return this.collectionCache.getCollection(VoUnitTexts$1.KEY, VoUnitTexts$1.Entry); }
    get warscapeAnimated() { return this.collectionCache.getCollection(WarscapeAnimated$1.KEY, WarscapeAnimated$1.Entry); }
    get warscapeAnimatedLod() { return this.collectionCache.getCollection(WarscapeAnimatedLod$1.KEY, WarscapeAnimatedLod$1.Entry); }
    get warscapeCategories() { return this.collectionCache.getCollection(WarscapeCategories$1.KEY, WarscapeCategories$1.Entry); }
    get windLevels() { return this.collectionCache.getCollection(WindLevels$1.KEY, WindLevels$1.Entry); }
    get workshopCategories() { return this.collectionCache.getCollection(WorkshopCategories.KEY, WorkshopCategories.Entry); }
    get workshopCategoriesProgressLevels() { return this.collectionCache.getCollection(WorkshopCategoriesProgressLevels.KEY, WorkshopCategoriesProgressLevels.Entry); }
    get workshopCategoriesToRituals() { return this.collectionCache.getCollection(WorkshopCategoriesToRituals.KEY, WorkshopCategoriesToRituals.Entry); }
    get kvBattleAiAbilityUsageVariables() { return this.collectionCache.getCollection(KvBattleAiAbilityUsageVariables.KEY, KvBattleAiAbilityUsageVariables.Entry); }
    get kvExperienceBonuses() { return this.collectionCache.getCollection(KvExperienceBonuses$1.KEY, KvExperienceBonuses$1.Entry); }
    get kvFatigue() { return this.collectionCache.getCollection(KvFatigue$1.KEY, KvFatigue$1.Entry); }
    get kvFireValues() { return this.collectionCache.getCollection(KvFireValues.KEY, KvFireValues.Entry); }
    get kvKeyBuildings() { return this.collectionCache.getCollection(KvKeyBuildings$1.KEY, KvKeyBuildings$1.Entry); }
    get kvMorale() { return this.collectionCache.getCollection(KvMorale$1.KEY, KvMorale$1.Entry); }
    get kvNavalMorale() { return this.collectionCache.getCollection(KvNavalMorale$1.KEY, KvNavalMorale$1.Entry); }
    get kvNavalRules() { return this.collectionCache.getCollection(KvNavalRules.KEY, KvNavalRules.Entry); }
    get kvRules() { return this.collectionCache.getCollection(KvRules$1.KEY, KvRules$1.Entry); }
    get kvUiTweakers() { return this.collectionCache.getCollection(KvUiTweakers.KEY, KvUiTweakers.Entry); }
    get kvUnitAbilityScalingRules() { return this.collectionCache.getCollection(KvUnitAbilityScalingRules.KEY, KvUnitAbilityScalingRules.Entry); }
    get kvWindsOfMagicParams() { return this.collectionCache.getCollection(KvWindsOfMagicParams.KEY, KvWindsOfMagicParams.Entry); }
}

function createInstanceRome2(pathToDbDir) {
    return new Database(pathToDbDir);
}
function createInstanceWarhammer2(pathToDbDir) {
    return new Database$1(pathToDbDir);
}
function createInstanceThreeKingdoms(pathToDbDir) {
    return new Database$1(pathToDbDir);
}

exports.createInstanceRome2 = createInstanceRome2;
exports.createInstanceThreeKingdoms = createInstanceThreeKingdoms;
exports.createInstanceWarhammer2 = createInstanceWarhammer2;
