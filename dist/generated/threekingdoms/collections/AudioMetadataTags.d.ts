import { CollectionCache, CollectionKey } from "../../../common";
import { AudioMeleeHitCategories } from "./AudioMeleeHitCategories";
import { AudioMeleeHitTypes } from "./AudioMeleeHitTypes";
import { AudioRtpcAssignments } from "./AudioRtpcAssignments";
import { TexcExpansions } from "./TexcExpansions";
export declare namespace AudioMetadataTags {
    const KEY: CollectionKey;
    class Entry {
        private readonly collectionCache;
        readonly key: string;
        readonly path: string;
        readonly colourRed: number;
        readonly colourGreen: number;
        readonly colourBlue: number;
        readonly soundEventBattleStart: string;
        readonly soundEventBattleStop: string;
        readonly soundEventCampaignStart: string;
        readonly soundEventCampaignStop: string;
        readonly limitationScale: number;
        readonly entityTypeSwitch: string;
        readonly _meleeHitCategory: string;
        readonly _meleeHitTypeOverride: string;
        readonly rtpc1Name: string;
        readonly _rtpc1Assignment: string;
        readonly rtpc2Name: string;
        readonly _rtpc2Assignment: string;
        readonly scaledSoundUpsize: number;
        readonly scaledMaxDelay: number;
        readonly _scaledSoundNext: string;
        readonly isVocalisation: boolean;
        readonly playAtBone: boolean;
        readonly playAtPosition: boolean;
        readonly playAtBase: boolean;
        readonly requireGroundTypeLimited: boolean;
        readonly requireGroundType: boolean;
        readonly requireArmourType: boolean;
        readonly requireMeleeWeaponType: boolean;
        readonly requireShieldType: boolean;
        readonly triggersBlood: boolean;
        readonly isTracked: boolean;
        readonly requireReverb: boolean;
        readonly requireObstruction: boolean;
        readonly canPlayUnderSplice: boolean;
        readonly ignoreIfHeadless: boolean;
        readonly playOnLoopingSound: boolean;
        readonly cinematicOnly: boolean;
        readonly requiresCinematic: boolean;
        readonly flipDirection: boolean;
        readonly dopplerRtpcName: string;
        readonly bloodEnabledOnly: boolean;
        readonly _gameExpansionKey: string;
        readonly minProbability: number;
        readonly maxProbability: number;
        readonly requireElement: boolean;
        readonly requireGenericHeroId: boolean;
        readonly requireHeroOpponent: boolean;
        constructor(collectionCache: CollectionCache, values: any);
        get meleeHitCategory(): AudioMeleeHitCategories.Entry | undefined;
        get meleeHitTypeOverride(): AudioMeleeHitTypes.Entry | undefined;
        get rtpc1Assignment(): AudioRtpcAssignments.Entry | undefined;
        get rtpc2Assignment(): AudioRtpcAssignments.Entry | undefined;
        get scaledSoundNext(): AudioMetadataTags.Entry | undefined;
        get gameExpansionKey(): TexcExpansions.Entry | undefined;
    }
}
export default AudioMetadataTags;
