import { CollectionCache, CollectionKey } from "../../../common";
import { BuildingChains } from "./BuildingChains";
import { Commodities } from "./Commodities";
import { Religions } from "./Religions";
import { EffectBundles } from "./EffectBundles";
import { Resources } from "./Resources";
import { WarscapeRigid } from "./WarscapeRigid";
import { BuildingInstances } from "./BuildingInstances";
import { AudioCampaignBuildingEnums } from "./AudioCampaignBuildingEnums";
export declare namespace BuildingLevels {
    const KEY: CollectionKey;
    class Entry {
        private readonly collectionCache;
        readonly levelName: string;
        readonly _chain: string;
        readonly level: number;
        readonly condition: string;
        readonly onlyInCapital: boolean;
        readonly createTime: number;
        readonly createCost: number;
        readonly upkeepCost: number;
        readonly demolitionCost: number;
        readonly zoc: number;
        readonly lowerHappiness: number;
        readonly upperHappiness: number;
        readonly repression: number;
        readonly gdp: number;
        readonly townWealthGrowth: number;
        readonly popChange: number;
        readonly maxpopChange: number;
        readonly _commodity: string;
        readonly commodityVol: number;
        readonly _buildingCategory: any;
        readonly _govTypeKey: any;
        readonly militaryPrestige: number;
        readonly navalPrestige: number;
        readonly economicPrestige: number;
        readonly enlightenmentPrestige: number;
        readonly destructionTerminator: boolean;
        readonly factionUnique: boolean;
        readonly _religionRequirement: string;
        readonly _firstInWorldBundle: string;
        readonly _resourceRequirement: string;
        readonly _workingModel: string;
        readonly uniqueIndex: number;
        readonly canConvert: boolean;
        readonly _buildingInstanceKey: string;
        readonly _audioBuildingType: string;
        readonly shouldShowBuildingLevelInUiForTechnology: boolean;
        readonly isNew: boolean;
        constructor(collectionCache: CollectionCache, values: any);
        readonly chain: BuildingChains.Entry | undefined;
        readonly commodity: Commodities.Entry | undefined;
        readonly religionRequirement: Religions.Entry | undefined;
        readonly firstInWorldBundle: EffectBundles.Entry | undefined;
        readonly resourceRequirement: Resources.Entry | undefined;
        readonly workingModel: WarscapeRigid.Entry | undefined;
        readonly buildingInstanceKey: BuildingInstances.Entry | undefined;
        readonly audioBuildingType: AudioCampaignBuildingEnums.Entry | undefined;
    }
}
export default BuildingLevels;
