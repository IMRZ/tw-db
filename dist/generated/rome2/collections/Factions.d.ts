import { CollectionCache, CollectionKey } from "../../../common";
import { CulturesSubcultures } from "./CulturesSubcultures";
import { NamesGroups } from "./NamesGroups";
import { GroupingsMilitary } from "./GroupingsMilitary";
import { PreBattleSpeechParametersEnum } from "./PreBattleSpeechParametersEnum";
import { Cultures } from "./Cultures";
export declare namespace Factions {
    const KEY: CollectionKey;
    class Entry {
        private readonly collectionCache;
        readonly key: string;
        readonly index: number;
        readonly _subculture: string;
        readonly category: string;
        readonly screenName: string;
        readonly screenNameWhenRebels: string;
        readonly screenAdjective: string;
        readonly _nameGroup: number;
        readonly skin: string;
        readonly isRebel: boolean;
        readonly iconsPathUnits: string;
        readonly flagsPath: string;
        readonly republicanFlagPath: string;
        readonly sameGovTypeRevolutionFlagPath: string;
        readonly primaryColourR: number;
        readonly primaryColourG: number;
        readonly primaryColourB: number;
        readonly altPrimaryColourR: number;
        readonly altPrimaryColourG: number;
        readonly altPrimaryColourB: number;
        readonly secondaryColourR: number;
        readonly secondaryColourG: number;
        readonly secondaryColourB: number;
        readonly altSecondaryColourR: number;
        readonly altSecondaryColourG: number;
        readonly altSecondaryColourB: number;
        readonly rebelColourR: number;
        readonly rebelColourG: number;
        readonly rebelColourB: number;
        readonly uniformColourR: number;
        readonly uniformColourG: number;
        readonly uniformColourB: number;
        readonly altUniformColourR: number;
        readonly altUniformColourG: number;
        readonly altUniformColourB: number;
        readonly _militaryGroup: string;
        readonly _settlerRebellionFaction: any;
        readonly mpAvailable: boolean;
        readonly mpAvailableNaval: boolean;
        readonly _movieDeathEvent: any;
        readonly mpUseRepublicEarly: boolean;
        readonly mpUseRepublicLate: boolean;
        readonly _unitRegimentNameGroup: number;
        readonly _shipNameGroup: number;
        readonly uiSkin: string;
        readonly attackDesc: string;
        readonly defendDesc: string;
        readonly mpStatsName: string;
        readonly _preBattleSpeechParameter: string;
        readonly screenNameWhenShogun: string;
        readonly clanSummaryName: string;
        readonly clanSummaryNameWhenShogun: string;
        readonly canBeRegionless: boolean;
        readonly cardColourR: number;
        readonly cardColourG: number;
        readonly cardColourB: number;
        readonly _diplomacyCulture: string;
        readonly senatorTotal: number;
        readonly senatorTextNOutOfN: string;
        readonly senatorTextLoseN: string;
        readonly senatorTextLose1: string;
        readonly senatorTextGainN: string;
        readonly senatorTextGain1: string;
        readonly usesLegionNames: boolean;
        constructor(collectionCache: CollectionCache, values: any);
        get subculture(): CulturesSubcultures.Entry | undefined;
        get nameGroup(): NamesGroups.Entry | undefined;
        get militaryGroup(): GroupingsMilitary.Entry | undefined;
        get unitRegimentNameGroup(): NamesGroups.Entry | undefined;
        get shipNameGroup(): NamesGroups.Entry | undefined;
        get preBattleSpeechParameter(): PreBattleSpeechParametersEnum.Entry | undefined;
        get diplomacyCulture(): Cultures.Entry | undefined;
    }
}
export default Factions;
