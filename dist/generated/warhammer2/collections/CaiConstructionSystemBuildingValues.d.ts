import { CollectionCache, CollectionKey } from "../../../common";
import { Campaigns } from "./Campaigns";
import { Factions } from "./Factions";
import { CulturesSubcultures } from "./CulturesSubcultures";
import { Cultures } from "./Cultures";
import { BuildingLevels } from "./BuildingLevels";
import { BuildingInstances } from "./BuildingInstances";
import { BuildingChains } from "./BuildingChains";
import { BuildingSuperchains } from "./BuildingSuperchains";
import { CaiConstructionSystemCategories } from "./CaiConstructionSystemCategories";
import { CaiConstructionSystemCategoryGroups } from "./CaiConstructionSystemCategoryGroups";
export declare namespace CaiConstructionSystemBuildingValues {
    const KEY: CollectionKey;
    class Entry {
        private readonly collectionCache;
        readonly _campaign: string;
        readonly _faction: string;
        readonly _subCulture: string;
        readonly _culture: string;
        readonly _buildingOrBuildingRangeStartInclusive: string;
        readonly _buildingRangeEndInclusive: string;
        readonly _buildingInstance: string;
        readonly _buildingChain: string;
        readonly _buildingSuperChain: string;
        readonly _caiConstructionSystemCategory: string;
        readonly _caiConstructionSystemCategoryGroup: string;
        readonly scoreOrScoreStartInclusive: number;
        readonly scoreEndInclusive: number;
        readonly perProvinceBuildingLimitStart: number;
        readonly perProvinceBuildingMinimumDiscountWhenExceedingLimitStart: number;
        readonly perProvinceBuildingMaximumDiscountWhenExceedingLimitStart: number;
        readonly perProvincePerBuildingDiscountIncrementWhenExceedingLimitStart: number;
        readonly perProvinceBuildingLimitEnd: number;
        readonly perProvinceBuildingMinimumDiscountWhenExceedingLimitEnd: number;
        readonly perProvinceBuildingMaximumDiscountWhenExceedingLimitEnd: number;
        readonly perProvincePerBuildingDiscountIncrementWhenExceedingLimitEnd: number;
        readonly perFactionBuildingLimitStart: number;
        readonly perFactionBuildingMinimumDiscountWhenExceedingLimitStart: number;
        readonly perFactionBuildingMaximumDiscountWhenExceedingLimitStart: number;
        readonly perFactionPerBuildingDiscountIncrementWhenExceedingLimitStart: number;
        readonly perFactionBuildingLimitEnd: number;
        readonly perFactionBuildingMinimumDiscountWhenExceedingLimitEnd: number;
        readonly perFactionBuildingMaximumDiscountWhenExceedingLimitEnd: number;
        readonly perFactionPerBuildingDiscountIncrementWhenExceedingLimitEnd: number;
        constructor(collectionCache: CollectionCache, values: any);
        get campaign(): Campaigns.Entry | undefined;
        get faction(): Factions.Entry | undefined;
        get subCulture(): CulturesSubcultures.Entry | undefined;
        get culture(): Cultures.Entry | undefined;
        get buildingOrBuildingRangeStartInclusive(): BuildingLevels.Entry | undefined;
        get buildingRangeEndInclusive(): BuildingLevels.Entry | undefined;
        get buildingInstance(): BuildingInstances.Entry | undefined;
        get buildingChain(): BuildingChains.Entry | undefined;
        get buildingSuperChain(): BuildingSuperchains.Entry | undefined;
        get caiConstructionSystemCategory(): CaiConstructionSystemCategories.Entry | undefined;
        get caiConstructionSystemCategoryGroup(): CaiConstructionSystemCategoryGroups.Entry | undefined;
    }
}
export default CaiConstructionSystemBuildingValues;
